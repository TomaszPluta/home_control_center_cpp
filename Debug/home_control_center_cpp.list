
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002808  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002918  08002918  00012918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000cc  20000010  08002950  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000dc  08002950  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009e67  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ca2  00000000  00000000  00029ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000910  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003a04  00000000  00000000  0002cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000315b  00000000  00000000  0003068c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000337e7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000024a4  00000000  00000000  00033864  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00035d08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002900 	.word	0x08002900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002900 	.word	0x08002900

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
 800016c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	685b      	ldr	r3, [r3, #4]
 8000172:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	689a      	ldr	r2, [r3, #8]
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	689b      	ldr	r3, [r3, #8]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	683a      	ldr	r2, [r7, #0]
 800018e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1c5a      	adds	r2, r3, #1
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001aa:	b480      	push	{r7}
 80001ac:	b085      	sub	sp, #20
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	691b      	ldr	r3, [r3, #16]
 80001b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	6892      	ldr	r2, [r2, #8]
 80001c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	6852      	ldr	r2, [r2, #4]
 80001ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d103      	bne.n	80001de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689a      	ldr	r2, [r3, #8]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	1e5a      	subs	r2, r3, #1
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	681b      	ldr	r3, [r3, #0]
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <pxCurrentTCBConst2>)
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	6808      	ldr	r0, [r1, #0]
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800020a:	f380 8809 	msr	PSP, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f04f 0000 	mov.w	r0, #0
 8000216:	f380 8811 	msr	BASEPRI, r0
 800021a:	f04e 0e0d 	orr.w	lr, lr, #13
 800021e:	4770      	bx	lr

08000220 <pxCurrentTCBConst2>:
 8000220:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
	...

08000230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000230:	f3ef 8009 	mrs	r0, PSP
 8000234:	f3bf 8f6f 	isb	sy
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pxCurrentTCBConst>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000240:	6010      	str	r0, [r2, #0]
 8000242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000246:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800024a:	f380 8811 	msr	BASEPRI, r0
 800024e:	f000 f8df 	bl	8000410 <vTaskSwitchContext>
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	f380 8811 	msr	BASEPRI, r0
 800025a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025e:	6819      	ldr	r1, [r3, #0]
 8000260:	6808      	ldr	r0, [r1, #0]
 8000262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000266:	f380 8809 	msr	PSP, r0
 800026a:	f3bf 8f6f 	isb	sy
 800026e:	4770      	bx	lr

08000270 <pxCurrentTCBConst>:
 8000270:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop

08000278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800027e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000282:	f383 8811 	msr	BASEPRI, r3
 8000286:	f3bf 8f6f 	isb	sy
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000290:	f000 f812 	bl	80002b8 <xTaskIncrementTick>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SysTick_Handler+0x3c>)
 800029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000ed04 	.word	0xe000ed04

080002b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002c2:	4b48      	ldr	r3, [pc, #288]	; (80003e4 <xTaskIncrementTick+0x12c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d17c      	bne.n	80003c4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ca:	4b47      	ldr	r3, [pc, #284]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002d2:	4a45      	ldr	r2, [pc, #276]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d110      	bne.n	8000300 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002de:	4b43      	ldr	r3, [pc, #268]	; (80003ec <xTaskIncrementTick+0x134>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <xTaskIncrementTick+0x134>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	4b40      	ldr	r3, [pc, #256]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a3e      	ldr	r2, [pc, #248]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	f000 f8ce 	bl	800049c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	693a      	ldr	r2, [r7, #16]
 8000306:	429a      	cmp	r2, r3
 8000308:	d34d      	bcc.n	80003a6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <xTaskIncrementTick+0x134>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <xTaskIncrementTick+0x60>
 8000314:	2301      	movs	r3, #1
 8000316:	e000      	b.n	800031a <xTaskIncrementTick+0x62>
 8000318:	2300      	movs	r3, #0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d004      	beq.n	8000328 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800031e:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000324:	601a      	str	r2, [r3, #0]
					break;
 8000326:	e03e      	b.n	80003a6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <xTaskIncrementTick+0x134>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	d203      	bcs.n	8000348 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000340:	4a2d      	ldr	r2, [pc, #180]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6013      	str	r3, [r2, #0]
						break;
 8000346:	e02e      	b.n	80003a6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3304      	adds	r3, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff2c 	bl	80001aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	2b00      	cmp	r3, #0
 8000358:	d004      	beq.n	8000364 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3318      	adds	r3, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff23 	bl	80001aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	2201      	movs	r2, #1
 800036a:	409a      	lsls	r2, r3
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <xTaskIncrementTick+0x144>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <xTaskIncrementTick+0x144>)
 8000374:	6013      	str	r3, [r2, #0]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4a1f      	ldr	r2, [pc, #124]	; (8000400 <xTaskIncrementTick+0x148>)
 8000384:	441a      	add	r2, r3
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	3304      	adds	r3, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4610      	mov	r0, r2
 800038e:	f7ff fee9 	bl	8000164 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039c:	429a      	cmp	r2, r3
 800039e:	d3b4      	bcc.n	800030a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003a4:	e7b1      	b.n	800030a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ac:	4914      	ldr	r1, [pc, #80]	; (8000400 <xTaskIncrementTick+0x148>)
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d907      	bls.n	80003ce <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e004      	b.n	80003ce <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <xTaskIncrementTick+0x150>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <xTaskIncrementTick+0x150>)
 80003cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <xTaskIncrementTick+0x154>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003da:	697b      	ldr	r3, [r7, #20]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200000b4 	.word	0x200000b4
 80003e8:	2000009c 	.word	0x2000009c
 80003ec:	20000094 	.word	0x20000094
 80003f0:	20000098 	.word	0x20000098
 80003f4:	200000ac 	.word	0x200000ac
 80003f8:	200000b0 	.word	0x200000b0
 80003fc:	200000a0 	.word	0x200000a0
 8000400:	20000030 	.word	0x20000030
 8000404:	2000002c 	.word	0x2000002c
 8000408:	200000a4 	.word	0x200000a4
 800040c:	200000a8 	.word	0x200000a8

08000410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <vTaskSwitchContext+0x78>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <vTaskSwitchContext+0x7c>)
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000424:	e02a      	b.n	800047c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <vTaskSwitchContext+0x7c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <vTaskSwitchContext+0x80>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	fab3 f383 	clz	r3, r3
 8000438:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	f1c3 031f 	rsb	r3, r3, #31
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <vTaskSwitchContext+0x84>)
 800044e:	4413      	add	r3, r2
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3308      	adds	r3, #8
 8000464:	429a      	cmp	r2, r3
 8000466:	d104      	bne.n	8000472 <vTaskSwitchContext+0x62>
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <vTaskSwitchContext+0x88>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200000b4 	.word	0x200000b4
 800048c:	200000a8 	.word	0x200000a8
 8000490:	200000a0 	.word	0x200000a0
 8000494:	20000030 	.word	0x20000030
 8000498:	2000002c 	.word	0x2000002c

0800049c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <prvResetNextTaskUnblockTime+0x14>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <prvResetNextTaskUnblockTime+0x16>
 80004b0:	2300      	movs	r3, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004be:	e008      	b.n	80004d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000094 	.word	0x20000094
 80004e0:	200000b0 	.word	0x200000b0

080004e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	78db      	ldrb	r3, [r3, #3]
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	78db      	ldrb	r3, [r3, #3]
 8000514:	f003 0310 	and.w	r3, r3, #16
 8000518:	2b00      	cmp	r3, #0
 800051a:	d005      	beq.n	8000528 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	789b      	ldrb	r3, [r3, #2]
 8000520:	461a      	mov	r2, r3
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	4313      	orrs	r3, r2
 8000526:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d044      	beq.n	80005bc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
 800053c:	e038      	b.n	80005b0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800053e:	2201      	movs	r2, #1
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	429a      	cmp	r2, r3
 800055a:	d126      	bne.n	80005aa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000562:	220f      	movs	r2, #15
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	43db      	mvns	r3, r3
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	4013      	ands	r3, r2
 8000574:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000576:	69fa      	ldr	r2, [r7, #28]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	4313      	orrs	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	78db      	ldrb	r3, [r3, #3]
 8000588:	2b28      	cmp	r3, #40	; 0x28
 800058a:	d105      	bne.n	8000598 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800058c:	2201      	movs	r2, #1
 800058e:	69bb      	ldr	r3, [r7, #24]
 8000590:	409a      	lsls	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	615a      	str	r2, [r3, #20]
 8000596:	e008      	b.n	80005aa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	78db      	ldrb	r3, [r3, #3]
 800059c:	2b48      	cmp	r3, #72	; 0x48
 800059e:	d104      	bne.n	80005aa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005a0:	2201      	movs	r2, #1
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	409a      	lsls	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	3301      	adds	r3, #1
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
 80005b2:	2b07      	cmp	r3, #7
 80005b4:	d9c3      	bls.n	800053e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	2bff      	cmp	r3, #255	; 0xff
 80005c2:	d946      	bls.n	8000652 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	e03a      	b.n	8000646 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	3308      	adds	r3, #8
 80005d4:	2201      	movs	r2, #1
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	4013      	ands	r3, r2
 80005e6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005e8:	693a      	ldr	r2, [r7, #16]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d127      	bne.n	8000640 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005f6:	220f      	movs	r2, #15
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	43db      	mvns	r3, r3
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	4013      	ands	r3, r2
 8000608:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800060a:	69fa      	ldr	r2, [r7, #28]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	4313      	orrs	r3, r2
 8000616:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	78db      	ldrb	r3, [r3, #3]
 800061c:	2b28      	cmp	r3, #40	; 0x28
 800061e:	d105      	bne.n	800062c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	3308      	adds	r3, #8
 8000624:	2201      	movs	r2, #1
 8000626:	409a      	lsls	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	78db      	ldrb	r3, [r3, #3]
 8000630:	2b48      	cmp	r3, #72	; 0x48
 8000632:	d105      	bne.n	8000640 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	3308      	adds	r3, #8
 8000638:	2201      	movs	r2, #1
 800063a:	409a      	lsls	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	3301      	adds	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	2b07      	cmp	r3, #7
 800064a:	d9c1      	bls.n	80005d0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	605a      	str	r2, [r3, #4]
  }
}
 8000652:	bf00      	nop
 8000654:	3724      	adds	r7, #36	; 0x24
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000668:	887a      	ldrh	r2, [r7, #2]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	611a      	str	r2, [r3, #16]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000684:	887a      	ldrh	r2, [r7, #2]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	615a      	str	r2, [r3, #20]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006a6:	4909      	ldr	r1, [pc, #36]	; (80006cc <RCC_APB2PeriphClockCmd+0x38>)
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <RCC_APB2PeriphClockCmd+0x38>)
 80006aa:	699a      	ldr	r2, [r3, #24]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006b2:	e006      	b.n	80006c2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <RCC_APB2PeriphClockCmd+0x38>)
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <RCC_APB2PeriphClockCmd+0x38>)
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	43db      	mvns	r3, r3
 80006be:	4013      	ands	r3, r2
 80006c0:	618b      	str	r3, [r1, #24]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80006ea:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	885b      	ldrh	r3, [r3, #2]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000704:	4313      	orrs	r3, r2
 8000706:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800070c:	4313      	orrs	r3, r2
 800070e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000714:	4313      	orrs	r3, r2
 8000716:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800071c:	4313      	orrs	r3, r2
 800071e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000724:	4313      	orrs	r3, r2
 8000726:	b29a      	uxth	r2, r3
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	4313      	orrs	r3, r2
 800072c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	89fa      	ldrh	r2, [r7, #14]
 8000732:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	8b9b      	ldrh	r3, [r3, #28]
 8000738:	b29b      	uxth	r3, r3
 800073a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800073e:	b29a      	uxth	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	8a1a      	ldrh	r2, [r3, #16]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	821a      	strh	r2, [r3, #16]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	460b      	mov	r3, r1
 8000760:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d008      	beq.n	800077a <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	b29b      	uxth	r3, r3
 800076e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000778:	e007      	b.n	800078a <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	b29b      	uxth	r3, r3
 8000780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000784:	b29a      	uxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	801a      	strh	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	887a      	ldrh	r2, [r7, #2]
 80007a4:	819a      	strh	r2, [r3, #12]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	899b      	ldrh	r3, [r3, #12]
 80007bc:	b29b      	uxth	r3, r3
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d008      	beq.n	80007ec <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	889b      	ldrh	r3, [r3, #4]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 80007ea:	e007      	b.n	80007fc <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f023 0304 	bic.w	r3, r3, #4
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	809a      	strh	r2, [r3, #4]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr

08000806 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	460b      	mov	r3, r1
 8000810:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	891b      	ldrh	r3, [r3, #8]
 800081a:	b29a      	uxth	r2, r3
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	4013      	ands	r3, r2
 8000820:	b29b      	uxth	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000826:	2301      	movs	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	e001      	b.n	8000830 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <EnableGpioClk>:
#define PIN_CNF_PUSH_PULL		(0x2)
#define PIN_MODE_OUT			(0x1)



void EnableGpioClk (GPIO_TypeDef * gpioPort){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	if (gpioPort == GPIOA){
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <EnableGpioClk+0x68>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d106      	bne.n	800085a <EnableGpioClk+0x1e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <EnableGpioClk+0x6c>)
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <EnableGpioClk+0x6c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6193      	str	r3, [r2, #24]
	} else if (gpioPort == GPIOC){
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	} else if (gpioPort == GPIOD){
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	}
}
 8000858:	e01f      	b.n	800089a <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOB){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <EnableGpioClk+0x70>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d106      	bne.n	8000870 <EnableGpioClk+0x34>
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <EnableGpioClk+0x6c>)
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <EnableGpioClk+0x6c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6193      	str	r3, [r2, #24]
}
 800086e:	e014      	b.n	800089a <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOC){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <EnableGpioClk+0x74>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <EnableGpioClk+0x4a>
		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000878:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <EnableGpioClk+0x6c>)
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <EnableGpioClk+0x6c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
}
 8000884:	e009      	b.n	800089a <EnableGpioClk+0x5e>
	} else if (gpioPort == GPIOD){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <EnableGpioClk+0x78>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d105      	bne.n	800089a <EnableGpioClk+0x5e>
		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 800088e:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <EnableGpioClk+0x6c>)
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <EnableGpioClk+0x6c>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f043 0320 	orr.w	r3, r3, #32
 8000898:	6193      	str	r3, [r2, #24]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	40010800 	.word	0x40010800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40011400 	.word	0x40011400

080008b8 <SetGpioAsInFloating>:
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	}
}


void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b07      	cmp	r3, #7
 80008c8:	d923      	bls.n	8000912 <SetGpioAsInFloating+0x5a>
//		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
//		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
//		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);

	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	78fa      	ldrb	r2, [r7, #3]
 80008d0:	3a08      	subs	r2, #8
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	43d2      	mvns	r2, r2
 80008dc:	401a      	ands	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	78fa      	ldrb	r2, [r7, #3]
 80008e8:	3a08      	subs	r2, #8
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	2103      	movs	r1, #3
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	43d2      	mvns	r2, r2
 80008f4:	401a      	ands	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	78fa      	ldrb	r2, [r7, #3]
 8000900:	3a08      	subs	r2, #8
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	3202      	adds	r2, #2
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	431a      	orrs	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
	}
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <SetGpioAsOutAltPushPUll>:

void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	if (pinNb < 8){
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b07      	cmp	r3, #7
 800092c:	d92f      	bls.n	800098e <SetGpioAsOutAltPushPUll+0x72>
//
//		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
//		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	} else {
		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	78fa      	ldrb	r2, [r7, #3]
 8000934:	3a08      	subs	r2, #8
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	2103      	movs	r1, #3
 800093a:	fa01 f202 	lsl.w	r2, r1, r2
 800093e:	43d2      	mvns	r2, r2
 8000940:	401a      	ands	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	605a      	str	r2, [r3, #4]
		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	78fa      	ldrb	r2, [r7, #3]
 800094c:	3a08      	subs	r2, #8
 800094e:	0092      	lsls	r2, r2, #2
 8000950:	3202      	adds	r2, #2
 8000952:	2103      	movs	r1, #3
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	43d2      	mvns	r2, r2
 800095a:	401a      	ands	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	605a      	str	r2, [r3, #4]

		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	78fa      	ldrb	r2, [r7, #3]
 8000966:	3a08      	subs	r2, #8
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	431a      	orrs	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	605a      	str	r2, [r3, #4]
		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	78fa      	ldrb	r2, [r7, #3]
 800097c:	3a08      	subs	r2, #8
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	3202      	adds	r2, #2
 8000982:	2102      	movs	r1, #2
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	431a      	orrs	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	605a      	str	r2, [r3, #4]
	}
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <_ZL9gpio_initv>:
	return 0;
}

MqttNet net;

static 	void gpio_init(void){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800099e:	2101      	movs	r1, #1
 80009a0:	2010      	movs	r0, #16
 80009a2:	f7ff fe77 	bl	8000694 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef PORT;
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80009a6:	2310      	movs	r3, #16
 80009a8:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80009aa:	2302      	movs	r3, #2
 80009ac:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_13;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOC, &PORT);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <_ZL9gpio_initv+0x60>)
 80009ba:	f7ff fd93 	bl	80004e4 <GPIO_Init>
	GPIOC->ODR |= GPIO_Pin_13;
 80009be:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <_ZL9gpio_initv+0x60>)
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <_ZL9gpio_initv+0x60>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c8:	60d3      	str	r3, [r2, #12]

	PORT.GPIO_Mode =  GPIO_Mode_IPU;
 80009ca:	2348      	movs	r3, #72	; 0x48
 80009cc:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80009ce:	2302      	movs	r3, #2
 80009d0:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_11;
 80009d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009d6:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	4807      	ldr	r0, [pc, #28]	; (80009fc <_ZL9gpio_initv+0x64>)
 80009de:	f7ff fd81 	bl	80004e4 <GPIO_Init>
	GPIOC->ODR |= GPIO_Pin_13;
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <_ZL9gpio_initv+0x60>)
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <_ZL9gpio_initv+0x60>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ec:	60d3      	str	r3, [r2, #12]
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40011000 	.word	0x40011000
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <_Z11broker_connPvP11sockaddr_in>:



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
	...

08000a18 <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buf, uint16_t buf_len){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	807b      	strh	r3, [r7, #2]
  	nrf24_send(data_array);
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <_Z11broker_sendPvP11sockaddr_inPKht+0x24>)
 8000a28:	f000 faca 	bl	8000fc0 <nrf24_send>
    _delay_ms(50);
 8000a2c:	2032      	movs	r0, #50	; 0x32
 8000a2e:	f000 f8c3 	bl	8000bb8 <_delay_ms>
}
 8000a32:	bf00      	nop
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000b8 	.word	0x200000b8

08000a40 <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	807b      	strh	r3, [r7, #2]
	if(nrf24_dataReady())
 8000a4e:	f000 fa6e 	bl	8000f2e <nrf24_dataReady>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00f      	beq.n	8000a82 <_Z10broker_recPvP11sockaddr_inPht+0x42>
	{

		nrf24_getData(data_array);
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <_Z10broker_recPvP11sockaddr_inPht+0x54>)
 8000a64:	f000 fa8e 	bl	8000f84 <nrf24_getData>
		 uint16_t pcktLen = l3_receive_packet(data_array, buf, buf_len);
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	4809      	ldr	r0, [pc, #36]	; (8000a94 <_Z10broker_recPvP11sockaddr_inPht+0x54>)
 8000a70:	f000 f8fa 	bl	8000c68 <l3_receive_packet>
 8000a74:	4603      	mov	r3, r0
 8000a76:	82fb      	strh	r3, [r7, #22]
		if (pcktLen){
 8000a78:	8afb      	ldrh	r3, [r7, #22]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <_Z10broker_recPvP11sockaddr_inPht+0x42>
			//sockaddr->sin_addr = Mqtt_get_rx_address();
			return true;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e003      	b.n	8000a8a <_Z10broker_recPvP11sockaddr_inPht+0x4a>
			GPIOC->BRR = GPIO_Pin_13;
		}
	}
	_delay_ms(10);
 8000a82:	200a      	movs	r0, #10
 8000a84:	f000 f898 	bl	8000bb8 <_delay_ms>
	return false;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000b8 	.word	0x200000b8

08000a98 <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
	...

08000ab0 <main>:




int main()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	f5ad 5d87 	sub.w	sp, sp, #4320	; 0x10e0
 8000ab6:	af00      	add	r7, sp, #0




	nrf24_init();
 8000ab8:	f000 f958 	bl	8000d6c <nrf24_init>
	nRF24_restore_defaults();
 8000abc:	f000 f962 	bl	8000d84 <nRF24_restore_defaults>


	/* Channel #2 , payload length: 4 */
	const uint8_t channel = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000ac6:	f102 021f 	add.w	r2, r2, #31
 8000aca:	7013      	strb	r3, [r2, #0]
	const uint8_t payload_len = 32;
 8000acc:	2320      	movs	r3, #32
 8000ace:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000ad2:	f102 021e 	add.w	r2, r2, #30
 8000ad6:	7013      	strb	r3, [r2, #0]
	nrf24_config(channel, payload_len);
 8000ad8:	2120      	movs	r1, #32
 8000ada:	2002      	movs	r0, #2
 8000adc:	f000 f9b0 	bl	8000e40 <nrf24_config>

	/* Set the device addresses */
	nrf24_tx_address(tx_address);
 8000ae0:	482b      	ldr	r0, [pc, #172]	; (8000b90 <main+0xe0>)
 8000ae2:	f000 fa12 	bl	8000f0a <nrf24_tx_address>
	nrf24_rx_address(rx_address);
 8000ae6:	482b      	ldr	r0, [pc, #172]	; (8000b94 <main+0xe4>)
 8000ae8:	f000 f9fc 	bl	8000ee4 <nrf24_rx_address>

	gpio_init();
 8000aec:	f7ff ff54 	bl	8000998 <_ZL9gpio_initv>


	broker_net_t broker_net;
	broker_net.connect = broker_conn;
 8000af0:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <main+0xe8>)
 8000af6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	broker_net.send = broker_send;
 8000afa:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <main+0xec>)
 8000b00:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.receive = broker_rec;
 8000b04:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8000b08:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <main+0xf0>)
 8000b0a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.disconnect = broker_discon;
 8000b0e:	f607 73c8 	addw	r3, r7, #4040	; 0xfc8
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <main+0xf4>)
 8000b14:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8000b18:	f607 72c8 	addw	r2, r7, #4040	; 0xfc8
 8000b1c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fdcc 	bl	80016c0 <broker_init_by_given_net>

	sockaddr_t sockaddr;
	uint8_t frameBuff[MAX_FRAME_SIZE];


	EnableGpioClk(LOG_UART_PORT);
 8000b28:	481f      	ldr	r0, [pc, #124]	; (8000ba8 <main+0xf8>)
 8000b2a:	f7ff fe87 	bl	800083c <EnableGpioClk>
	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8000b2e:	2109      	movs	r1, #9
 8000b30:	481d      	ldr	r0, [pc, #116]	; (8000ba8 <main+0xf8>)
 8000b32:	f7ff fef3 	bl	800091c <SetGpioAsOutAltPushPUll>
	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8000b36:	210a      	movs	r1, #10
 8000b38:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <main+0xf8>)
 8000b3a:	f7ff febd 	bl	80008b8 <SetGpioAsInFloating>
	EnableUart(USART1);
 8000b3e:	481b      	ldr	r0, [pc, #108]	; (8000bac <main+0xfc>)
 8000b40:	f000 fc00 	bl	8001344 <EnableUart>




	SendString("Start center");
 8000b44:	481a      	ldr	r0, [pc, #104]	; (8000bb0 <main+0x100>)
 8000b46:	f000 fc43 	bl	80013d0 <SendString>
	while(1)
	{
		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8000b4a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	3b1c      	subs	r3, #28
 8000b54:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f000 fe00 	bl	800175e <broker_receive>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f2      	beq.n	8000b4a <main+0x9a>
			SendString("Received frame:");
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <main+0x104>)
 8000b66:	f000 fc33 	bl	80013d0 <SendString>
			SendBuffer((const char*)frameBuff, MAX_FRAME_SIZE);
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	3b1c      	subs	r3, #28
 8000b70:	21f0      	movs	r1, #240	; 0xf0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fc53 	bl	800141e <SendBuffer>
			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 8000b78:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	3b1c      	subs	r3, #28
 8000b82:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000b86:	4619      	mov	r1, r3
 8000b88:	f000 fdfe 	bl	8001788 <broker_packets_dispatcher>
		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8000b8c:	e7dd      	b.n	8000b4a <main+0x9a>
 8000b8e:	bf00      	nop
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	08000a01 	.word	0x08000a01
 8000b9c:	08000a19 	.word	0x08000a19
 8000ba0:	08000a41 	.word	0x08000a41
 8000ba4:	08000a99 	.word	0x08000a99
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	08002918 	.word	0x08002918
 8000bb4:	08002928 	.word	0x08002928

08000bb8 <_delay_ms>:
#include "nrf24.h"
#include <string.h>
uint8_t payload_len;


void _delay_ms(int n) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

	int i, j;
	j= n*1000;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	60bb      	str	r3, [r7, #8]
	while(j--) {
 8000bcc:	e007      	b.n	8000bde <_delay_ms+0x26>
		i=2;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
		while(i--);
 8000bd2:	bf00      	nop
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	60fa      	str	r2, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1fa      	bne.n	8000bd4 <_delay_ms+0x1c>
	while(j--) {
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	60ba      	str	r2, [r7, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f2      	bne.n	8000bce <_delay_ms+0x16>
	}
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <calculateCRC16>:



uint16_t calculateCRC16(const uint8_t * data_p, uint16_t length){
 8000bf2:	b480      	push	{r7}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	807b      	strh	r3, [r7, #2]
    uint8_t x;
    uint16_t crc = 0xFFFF;
 8000bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c02:	81fb      	strh	r3, [r7, #14]

    while (length--){
 8000c04:	e025      	b.n	8000c52 <calculateCRC16+0x60>
        x = crc >> 8 ^ *data_p++;
 8000c06:	89fb      	ldrh	r3, [r7, #14]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	1c59      	adds	r1, r3, #1
 8000c12:	6079      	str	r1, [r7, #4]
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4053      	eors	r3, r2
 8000c18:	737b      	strb	r3, [r7, #13]
        x ^= x>>4;
 8000c1a:	7b7b      	ldrb	r3, [r7, #13]
 8000c1c:	091b      	lsrs	r3, r3, #4
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	4053      	eors	r3, r2
 8000c24:	737b      	strb	r3, [r7, #13]
        crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	7b7b      	ldrb	r3, [r7, #13]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	031b      	lsls	r3, r3, #12
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4053      	eors	r3, r2
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	015b      	lsls	r3, r3, #5
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4053      	eors	r3, r2
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	4053      	eors	r3, r2
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	81fb      	strh	r3, [r7, #14]
    while (length--){
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	1e5a      	subs	r2, r3, #1
 8000c56:	807a      	strh	r2, [r7, #2]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1d4      	bne.n	8000c06 <calculateCRC16+0x14>
    }
    return crc;
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <l3_receive_packet>:
}




uint16_t l3_receive_packet(uint8_t *data, uint8_t * packet_buff, uint16_t buff_len){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0c2      	sub	sp, #264	; 0x108
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	6019      	str	r1, [r3, #0]
 8000c76:	1dbb      	adds	r3, r7, #6
 8000c78:	801a      	strh	r2, [r3, #0]

	uint8_t localBuff[240];

	if (data[H_FRM] == 0){
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10e      	bne.n	8000ca0 <l3_receive_packet+0x38>
		memset (localBuff, 0, 240);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	22f0      	movs	r2, #240	; 0xf0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fe08 	bl	80028a0 <memset>
		memset (packet_buff, 0, buff_len);
 8000c90:	1dbb      	adds	r3, r7, #6
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	2100      	movs	r1, #0
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	f001 fe00 	bl	80028a0 <memset>
	}

	if (data[H_FRM] < data[H_TOTAL]){
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d258      	bcs.n	8000d60 <l3_receive_packet+0xf8>
		uint8_t frm_nb = data[H_FRM];
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
		memcpy(&localBuff[L2_DATA_SIZE * frm_nb], &data[0+ L2_HEAD_SIZE], L2_DATA_SIZE);
 8000cb6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000cba:	221a      	movs	r2, #26
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	f107 0210 	add.w	r2, r7, #16
 8000cc4:	18d0      	adds	r0, r2, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3306      	adds	r3, #6
 8000cca:	221a      	movs	r2, #26
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f001 fddc 	bl	800288a <memcpy>
		if ((data[H_FRM]+1) == data[H_TOTAL]){
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	3201      	adds	r2, #1
 8000cdc:	7812      	ldrb	r2, [r2, #0]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d13e      	bne.n	8000d60 <l3_receive_packet+0xf8>
			uint16_t pcktLen = (data[H_LENH] << 8) + data[H_LENL];
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3303      	adds	r3, #3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			uint16_t rxPcktCRC =  (data[H_CRCH]<<8)  + data[H_CRCL];
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	4413      	add	r3, r2
 8000d12:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			uint16_t calcCRC = calculateCRC16(localBuff, pcktLen);
 8000d16:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff66 	bl	8000bf2 <calculateCRC16>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			if (rxPcktCRC == calcCRC){
 8000d2c:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 8000d30:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d113      	bne.n	8000d60 <l3_receive_packet+0xf8>
				memcpy(packet_buff, localBuff, 240);
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22f0      	movs	r2, #240	; 0xf0
 8000d46:	4619      	mov	r1, r3
 8000d48:	f001 fd9f 	bl	800288a <memcpy>
				memset (localBuff, 0, 240);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	22f0      	movs	r2, #240	; 0xf0
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fda3 	bl	80028a0 <memset>
				return pcktLen;
 8000d5a:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8000d5e:	e000      	b.n	8000d62 <l3_receive_packet+0xfa>
			}
		}
	}
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <nrf24_init>:




/* init the hardware pins */
void nrf24_init() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	nrf24_setupPins();
 8000d70:	f000 fb74 	bl	800145c <nrf24_setupPins>
	nrf24_ce_digitalWrite(LOW);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fb77 	bl	8001468 <nrf24_ce_digitalWrite>
	nrf24_csn_digitalWrite(HIGH);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 fb8c 	bl	8001498 <nrf24_csn_digitalWrite>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <nRF24_restore_defaults>:


// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_restore_defaults(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nrf24_configRegister(nRF24_REG_CONFIG, 0x08);
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f9dc 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_AA, 0x3F);
 8000d92:	213f      	movs	r1, #63	; 0x3f
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 f9d8 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_EN_RXADDR, 0x03);
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f000 f9d4 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_AW, 0x03);
 8000da2:	2103      	movs	r1, #3
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f9d0 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_SETUP_RETR, 0x03);
 8000daa:	2103      	movs	r1, #3
 8000dac:	2004      	movs	r0, #4
 8000dae:	f000 f9cc 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_CH, 0x02);
 8000db2:	2102      	movs	r1, #2
 8000db4:	2005      	movs	r0, #5
 8000db6:	f000 f9c8 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RF_SETUP, 0x0E);
 8000dba:	210e      	movs	r1, #14
 8000dbc:	2006      	movs	r0, #6
 8000dbe:	f000 f9c4 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_STATUS, 0x00);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2007      	movs	r0, #7
 8000dc6:	f000 f9c0 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P0, 0x00);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2011      	movs	r0, #17
 8000dce:	f000 f9bc 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P1, 0x00);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2012      	movs	r0, #18
 8000dd6:	f000 f9b8 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P2, 0x00);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2013      	movs	r0, #19
 8000dde:	f000 f9b4 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P3, 0x00);
 8000de2:	2100      	movs	r1, #0
 8000de4:	2014      	movs	r0, #20
 8000de6:	f000 f9b0 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P4, 0x00);
 8000dea:	2100      	movs	r1, #0
 8000dec:	2015      	movs	r0, #21
 8000dee:	f000 f9ac 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_RX_PW_P5, 0x00);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2016      	movs	r0, #22
 8000df6:	f000 f9a8 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_DYNPD, 0x00);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	201c      	movs	r0, #28
 8000dfe:	f000 f9a4 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(nRF24_REG_FEATURE, 0x00);
 8000e02:	2100      	movs	r1, #0
 8000e04:	201d      	movs	r0, #29
 8000e06:	f000 f9a0 	bl	800114a <nrf24_configRegister>

	// Clear the FIFO's
	spi_transfer(FLUSH_RX);
 8000e0a:	20e2      	movs	r0, #226	; 0xe2
 8000e0c:	f000 f94f 	bl	80010ae <spi_transfer>
    spi_transfer(FLUSH_TX);
 8000e10:	20e1      	movs	r0, #225	; 0xe1
 8000e12:	f000 f94c 	bl	80010ae <spi_transfer>

	// Clear any pending interrupt flags
	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
    uint8_t reg;

	nrf24_readRegister(nRF24_REG_STATUS, &reg, 1);
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	2007      	movs	r0, #7
 8000e1e:	f000 f9b4 	bl	800118a <nrf24_readRegister>
	reg |= nRF24_MASK_STATUS_IRQ;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	71fb      	strb	r3, [r7, #7]
	//nRF24_WriteReg(nRF24_REG_STATUS, reg);
	nrf24_configRegister(nRF24_REG_STATUS, reg);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2007      	movs	r0, #7
 8000e32:	f000 f98a 	bl	800114a <nrf24_configRegister>


}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <nrf24_config>:



/* configure the module */
void nrf24_config(uint8_t channel, uint8_t pay_length) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	460a      	mov	r2, r1
 8000e4a:	71fb      	strb	r3, [r7, #7]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	71bb      	strb	r3, [r7, #6]
	/* Use static payload length ... */
	payload_len = pay_length;
 8000e50:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <nrf24_config+0xa0>)
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	7013      	strb	r3, [r2, #0]

	// Set RF channel
	nrf24_configRegister(RF_CH, channel);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 f975 	bl	800114a <nrf24_configRegister>

	// Set length of incoming payload
	nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
 8000e60:	2100      	movs	r1, #0
 8000e62:	2011      	movs	r0, #17
 8000e64:	f000 f971 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P1, payload_len);
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <nrf24_config+0xa0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2012      	movs	r0, #18
 8000e70:	f000 f96b 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P2, payload_len);
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <nrf24_config+0xa0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2013      	movs	r0, #19
 8000e7c:	f000 f965 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P3, payload_len);
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <nrf24_config+0xa0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	2014      	movs	r0, #20
 8000e88:	f000 f95f 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P4, payload_len);
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <nrf24_config+0xa0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	2015      	movs	r0, #21
 8000e94:	f000 f959 	bl	800114a <nrf24_configRegister>
	nrf24_configRegister(RX_PW_P5, payload_len);
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <nrf24_config+0xa0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2016      	movs	r0, #22
 8000ea0:	f000 f953 	bl	800114a <nrf24_configRegister>

	// 1 Mbps, TX gain: 0dbm
	nrf24_configRegister(RF_SETUP, (1 << RF_DR_LOW) | ((0x03) << RF_PWR));
 8000ea4:	2126      	movs	r1, #38	; 0x26
 8000ea6:	2006      	movs	r0, #6
 8000ea8:	f000 f94f 	bl	800114a <nrf24_configRegister>
	// CRC enable, 1 byte CRC length
	nrf24_configRegister(CONFIG, nrf24_CONFIG);
 8000eac:	2108      	movs	r1, #8
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f94b 	bl	800114a <nrf24_configRegister>

	// Auto Acknowledgment
	nrf24_configRegister(EN_AA,
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 f947 	bl	800114a <nrf24_configRegister>
			(1 << ENAA_P0) | (1 << ENAA_P1) | (0 << ENAA_P2) | (0 << ENAA_P3)
					| (0 << ENAA_P4) | (0 << ENAA_P5));

	// Enable RX addresses
	nrf24_configRegister(EN_RXADDR,
 8000ebc:	2103      	movs	r1, #3
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f000 f943 	bl	800114a <nrf24_configRegister>
			(1 << ERX_P0) | (1 << ERX_P1) | (0 << ERX_P2) | (0 << ERX_P3)
					| (0 << ERX_P4) | (0 << ERX_P5));

	// Auto retransmit delay: 1000 us and Up to 15 retransmit trials
	nrf24_configRegister(SETUP_RETR, (0x04 << ARD) | (0x0F << ARC));
 8000ec4:	214f      	movs	r1, #79	; 0x4f
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f000 f93f 	bl	800114a <nrf24_configRegister>

	// Dynamic length configurations: No dynamic length
	nrf24_configRegister(DYNPD,
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 f93b 	bl	800114a <nrf24_configRegister>
			(0 << DPL_P0) | (0 << DPL_P1) | (0 << DPL_P2) | (0 << DPL_P3)
					| (0 << DPL_P4) | (0 << DPL_P5));

	// Start listening
	nrf24_powerUpRx();
 8000ed4:	f000 f8c4 	bl	8001060 <nrf24_powerUpRx>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000d8 	.word	0x200000d8

08000ee4 <nrf24_rx_address>:

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	nrf24_ce_digitalWrite(LOW);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 fabb 	bl	8001468 <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1, adr, nrf24_ADDR_LEN);
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f000 f966 	bl	80011c8 <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f000 fab3 	bl	8001468 <nrf24_ce_digitalWrite>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <nrf24_tx_address>:
uint8_t nrf24_payload_length() {
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr) {
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0, adr, nrf24_ADDR_LEN);
 8000f12:	2205      	movs	r2, #5
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	200a      	movs	r0, #10
 8000f18:	f000 f956 	bl	80011c8 <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR, adr, nrf24_ADDR_LEN);
 8000f1c:	2205      	movs	r2, #5
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	2010      	movs	r0, #16
 8000f22:	f000 f951 	bl	80011c8 <nrf24_writeRegister>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <nrf24_dataReady>:

/* Checks if data is available for reading */
/* Returns 1 if data is ready ... */
uint8_t nrf24_dataReady() {
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = nrf24_getStatus();
 8000f34:	f000 f881 	bl	800103a <nrf24_getStatus>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & (1 << RX_DR)) {
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <nrf24_dataReady+0x1c>
		return 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e007      	b.n	8000f5a <nrf24_dataReady+0x2c>
	}

	return !nrf24_rxFifoEmpty();;
 8000f4a:	f000 f80a 	bl	8000f62 <nrf24_rxFifoEmpty>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bf0c      	ite	eq
 8000f54:	2301      	moveq	r3, #1
 8000f56:	2300      	movne	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <nrf24_rxFifoEmpty>:

/* Checks if receive FIFO is empty or not */
uint8_t nrf24_rxFifoEmpty() {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
	uint8_t fifoStatus;

	nrf24_readRegister(FIFO_STATUS, &fifoStatus, 1);
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2017      	movs	r0, #23
 8000f70:	f000 f90b 	bl	800118a <nrf24_readRegister>

	return (fifoStatus & (1 << RX_EMPTY));
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <nrf24_getData>:
	nrf24_csn_digitalWrite(HIGH);
	return status;
}

/* Reads payload bytes into data array */
void nrf24_getData(uint8_t* data) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 fa83 	bl	8001498 <nrf24_csn_digitalWrite>

	/* Send cmd to read rx payload */
	spi_transfer( R_RX_PAYLOAD);
 8000f92:	2061      	movs	r0, #97	; 0x61
 8000f94:	f000 f88b 	bl	80010ae <spi_transfer>

	/* Read payload */
	nrf24_transferSync(data, data, payload_len);
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <nrf24_getData+0x38>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f896 	bl	80010d2 <nrf24_transferSync>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 fa76 	bl	8001498 <nrf24_csn_digitalWrite>

	/* Reset status register */
	nrf24_configRegister(STATUS, (1 << RX_DR));
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	2007      	movs	r0, #7
 8000fb0:	f000 f8cb 	bl	800114a <nrf24_configRegister>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000d8 	.word	0x200000d8

08000fc0 <nrf24_send>:
	return rv;
}

// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
void nrf24_send(uint8_t* value) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	/* Go to Standby-I first */
	nrf24_ce_digitalWrite(LOW);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 fa4d 	bl	8001468 <nrf24_ce_digitalWrite>

	/* Set to transmitter mode , Power up if needed */
	nrf24_powerUpTx();
 8000fce:	f000 f862 	bl	8001096 <nrf24_powerUpTx>
    _delay_ms(50);
 8000fd2:	2032      	movs	r0, #50	; 0x32
 8000fd4:	f7ff fdf0 	bl	8000bb8 <_delay_ms>
	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
#endif

	/* Pull down chip select */
	nrf24_csn_digitalWrite(LOW);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fa5d 	bl	8001498 <nrf24_csn_digitalWrite>

	/* Write cmd to write payload */
	spi_transfer(W_TX_PAYLOAD);
 8000fde:	20a0      	movs	r0, #160	; 0xa0
 8000fe0:	f000 f865 	bl	80010ae <spi_transfer>

	/* Write payload */
	nrf24_transmitSync(value, payload_len);
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <nrf24_send+0x50>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f892 	bl	8001114 <nrf24_transmitSync>

	/* Pull up chip select */
	nrf24_csn_digitalWrite(HIGH);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f000 fa51 	bl	8001498 <nrf24_csn_digitalWrite>

	/* Start the transmission */
	nrf24_ce_digitalWrite(HIGH);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 fa36 	bl	8001468 <nrf24_ce_digitalWrite>
	while(nrf24_isSending());
 8000ffc:	bf00      	nop
 8000ffe:	f000 f809 	bl	8001014 <nrf24_isSending>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1fa      	bne.n	8000ffe <nrf24_send+0x3e>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000d8 	.word	0x200000d8

08001014 <nrf24_isSending>:

uint8_t nrf24_isSending() {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	uint8_t status;

	/* read the current status */
	status = nrf24_getStatus();
 800101a:	f000 f80e 	bl	800103a <nrf24_getStatus>
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]

	/* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
	if ((status & ((1 << TX_DS) | (1 << MAX_RT)))) {
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <nrf24_isSending+0x1c>
		return 0; /* false */
 800102c:	2300      	movs	r3, #0
 800102e:	e000      	b.n	8001032 <nrf24_isSending+0x1e>
	}

	return 1; /* true */
 8001030:	2301      	movs	r3, #1

}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <nrf24_getStatus>:

uint8_t nrf24_getStatus() {
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
	uint8_t rv;
	nrf24_csn_digitalWrite(LOW);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 fa29 	bl	8001498 <nrf24_csn_digitalWrite>
	rv = spi_transfer(NOP);
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	f000 f831 	bl	80010ae <spi_transfer>
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
	nrf24_csn_digitalWrite(HIGH);
 8001050:	2001      	movs	r0, #1
 8001052:	f000 fa21 	bl	8001498 <nrf24_csn_digitalWrite>
	return rv;
 8001056:	79fb      	ldrb	r3, [r7, #7]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <nrf24_powerUpRx>:
	else {
		return 0xFF;
	}
}

void nrf24_powerUpRx() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	nrf24_csn_digitalWrite(LOW);
 8001064:	2000      	movs	r0, #0
 8001066:	f000 fa17 	bl	8001498 <nrf24_csn_digitalWrite>
	spi_transfer(FLUSH_RX);
 800106a:	20e2      	movs	r0, #226	; 0xe2
 800106c:	f000 f81f 	bl	80010ae <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
 8001070:	2001      	movs	r0, #1
 8001072:	f000 fa11 	bl	8001498 <nrf24_csn_digitalWrite>

	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001076:	2170      	movs	r1, #112	; 0x70
 8001078:	2007      	movs	r0, #7
 800107a:	f000 f866 	bl	800114a <nrf24_configRegister>

	nrf24_ce_digitalWrite(LOW);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f9f2 	bl	8001468 <nrf24_ce_digitalWrite>
	nrf24_configRegister(CONFIG,
 8001084:	210b      	movs	r1, #11
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f85f 	bl	800114a <nrf24_configRegister>
			nrf24_CONFIG | ((1 << PWR_UP) | (1 << PRIM_RX)));
	nrf24_ce_digitalWrite(HIGH);
 800108c:	2001      	movs	r0, #1
 800108e:	f000 f9eb 	bl	8001468 <nrf24_ce_digitalWrite>
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}

08001096 <nrf24_powerUpTx>:

void nrf24_powerUpTx() {
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
	nrf24_configRegister(STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 800109a:	2170      	movs	r1, #112	; 0x70
 800109c:	2007      	movs	r0, #7
 800109e:	f000 f854 	bl	800114a <nrf24_configRegister>

	nrf24_configRegister(CONFIG,
 80010a2:	210a      	movs	r1, #10
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f850 	bl	800114a <nrf24_configRegister>
			nrf24_CONFIG | ((1 << PWR_UP) | (0 << PRIM_RX)));
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}

080010ae <spi_transfer>:
	nrf24_ce_digitalWrite(LOW);
	nrf24_configRegister(CONFIG, nrf24_CONFIG);
}

/* software spi routine */
uint8_t spi_transfer(uint8_t tx) {
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b084      	sub	sp, #16
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]

	rx = nRF24_LL_RW(tx);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f91a 	bl	80012f8 <nRF24_LL_RW>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]

	return rx;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <nrf24_transferSync>:

/* send and receive multiple bytes over SPI */
void nrf24_transferSync(uint8_t* dataout, uint8_t* datain, uint8_t len) {
 80010d2:	b590      	push	{r4, r7, lr}
 80010d4:	b087      	sub	sp, #28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	4613      	mov	r3, r2
 80010de:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < len; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	e00e      	b.n	8001104 <nrf24_transferSync+0x32>
		datain[i] = spi_transfer(dataout[i]);
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	18d4      	adds	r4, r2, r3
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffda 	bl	80010ae <spi_transfer>
 80010fa:	4603      	mov	r3, r0
 80010fc:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++) {
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	3301      	adds	r3, #1
 8001102:	75fb      	strb	r3, [r7, #23]
 8001104:	7dfa      	ldrb	r2, [r7, #23]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3ec      	bcc.n	80010e6 <nrf24_transferSync+0x14>
	}

}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}

08001114 <nrf24_transmitSync>:

/* send multiple bytes over SPI */
void nrf24_transmitSync(uint8_t* dataout, uint8_t len) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
	uint8_t i;

	for (i = 0; i < len; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e009      	b.n	800113a <nrf24_transmitSync+0x26>
		spi_transfer(dataout[i]);
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ffbd 	bl	80010ae <spi_transfer>
	for (i = 0; i < len; i++) {
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	3301      	adds	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3f1      	bcc.n	8001126 <nrf24_transmitSync+0x12>
	}

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <nrf24_configRegister>:

/* Clocks only one byte into the given nrf24 register */
void nrf24_configRegister(uint8_t reg, uint8_t value) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	460a      	mov	r2, r1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	4613      	mov	r3, r2
 8001158:	71bb      	strb	r3, [r7, #6]
	nrf24_csn_digitalWrite(LOW);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f99c 	bl	8001498 <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	b2db      	uxtb	r3, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff9d 	bl	80010ae <spi_transfer>
	spi_transfer(value);
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff99 	bl	80010ae <spi_transfer>
	nrf24_csn_digitalWrite(HIGH);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 f98b 	bl	8001498 <nrf24_csn_digitalWrite>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <nrf24_readRegister>:

/* Read single register from nrf24 */
void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len) {
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	6039      	str	r1, [r7, #0]
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4613      	mov	r3, r2
 8001198:	71bb      	strb	r3, [r7, #6]
	nrf24_csn_digitalWrite(LOW);
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f97c 	bl	8001498 <nrf24_csn_digitalWrite>
	spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff80 	bl	80010ae <spi_transfer>
	nrf24_transferSync(value, value, len);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	461a      	mov	r2, r3
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f7ff ff8c 	bl	80010d2 <nrf24_transferSync>
	nrf24_csn_digitalWrite(HIGH);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 f96c 	bl	8001498 <nrf24_csn_digitalWrite>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <nrf24_writeRegister>:

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
	nrf24_csn_digitalWrite(LOW);
 80011d8:	2000      	movs	r0, #0
 80011da:	f000 f95d 	bl	8001498 <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f043 0320 	orr.w	r3, r3, #32
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5e 	bl	80010ae <spi_transfer>
	nrf24_transmitSync(value, len);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f7ff ff8c 	bl	8001114 <nrf24_transmitSync>
	nrf24_csn_digitalWrite(HIGH);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 f94b 	bl	8001498 <nrf24_csn_digitalWrite>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <nRF24_GPIO_Init>:
#include "nrf24_hal.h"
#include "nrf24.h"

// Configure the GPIO lines of the nRF24L01 transceiver
// note: IRQ pin must be configured separately
void nRF24_GPIO_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001212:	2101      	movs	r1, #1
 8001214:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001218:	f7ff fa3c 	bl	8000694 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800121c:	2101      	movs	r1, #1
 800121e:	2004      	movs	r0, #4
 8001220:	f7ff fa38 	bl	8000694 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001224:	2101      	movs	r1, #1
 8001226:	2008      	movs	r0, #8
 8001228:	f7ff fa34 	bl	8000694 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800122c:	23e0      	movs	r3, #224	; 0xe0
 800122e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001230:	2318      	movs	r3, #24
 8001232:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001234:	2301      	movs	r3, #1
 8001236:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	482a      	ldr	r0, [pc, #168]	; (80012e8 <nRF24_GPIO_Init+0xdc>)
 8001240:	f7ff f950 	bl	80004e4 <GPIO_Init>



	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001248:	2310      	movs	r3, #16
 800124a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800124c:	2301      	movs	r3, #1
 800124e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4619      	mov	r1, r3
 8001256:	4825      	ldr	r0, [pc, #148]	; (80012ec <nRF24_GPIO_Init+0xe0>)
 8001258:	f7ff f944 	bl	80004e4 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800125c:	2300      	movs	r3, #0
 800125e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001260:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001264:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001266:	2300      	movs	r3, #0
 8001268:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800126a:	2300      	movs	r3, #0
 800126c:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800126e:	2300      	movs	r3, #0
 8001270:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001276:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8001278:	2318      	movs	r3, #24
 800127a:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800127c:	2300      	movs	r3, #0
 800127e:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001280:	2307      	movs	r3, #7
 8001282:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8001284:	2101      	movs	r1, #1
 8001286:	481a      	ldr	r0, [pc, #104]	; (80012f0 <nRF24_GPIO_Init+0xe4>)
 8001288:	f7ff fa9e 	bl	80007c8 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	4817      	ldr	r0, [pc, #92]	; (80012f0 <nRF24_GPIO_Init+0xe4>)
 8001294:	f7ff fa1c 	bl	80006d0 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8001298:	2101      	movs	r1, #1
 800129a:	4815      	ldr	r0, [pc, #84]	; (80012f0 <nRF24_GPIO_Init+0xe4>)
 800129c:	f7ff fa5b 	bl	8000756 <SPI_Cmd>


	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= nRF24_GPIO_PERIPHERALS;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <nRF24_GPIO_Init+0xe8>)
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <nRF24_GPIO_Init+0xe8>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80012ac:	2310      	movs	r3, #16
 80012ae:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80012b0:	2302      	movs	r3, #2
 80012b2:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = nRF24_CSN_PIN;
 80012b4:	2302      	movs	r3, #2
 80012b6:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CSN_PORT, &PORT);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <nRF24_GPIO_Init+0xe0>)
 80012be:	f7ff f911 	bl	80004e4 <GPIO_Init>
	nRF24_CSN_H();
 80012c2:	2102      	movs	r1, #2
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <nRF24_GPIO_Init+0xe0>)
 80012c6:	f7ff f9c9 	bl	800065c <GPIO_SetBits>

	// Configure CE pin
	PORT.GPIO_Pin = nRF24_CE_PIN;
 80012ca:	2301      	movs	r3, #1
 80012cc:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(nRF24_CE_PORT, &PORT);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <nRF24_GPIO_Init+0xe0>)
 80012d4:	f7ff f906 	bl	80004e4 <GPIO_Init>
	nRF24_CE_L();
 80012d8:	2101      	movs	r1, #1
 80012da:	4804      	ldr	r0, [pc, #16]	; (80012ec <nRF24_GPIO_Init+0xe0>)
 80012dc:	f7ff f9cc 	bl	8000678 <GPIO_ResetBits>
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40013000 	.word	0x40013000
 80012f4:	40021000 	.word	0x40021000

080012f8 <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8001302:	bf00      	nop
 8001304:	2102      	movs	r1, #2
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <nRF24_LL_RW+0x48>)
 8001308:	f7ff fa7d 	bl	8000806 <SPI_I2S_GetFlagStatus>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f8      	beq.n	8001304 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <nRF24_LL_RW+0x48>)
 800131a:	f7ff fa3b 	bl	8000794 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 800131e:	bf00      	nop
 8001320:	2101      	movs	r1, #1
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <nRF24_LL_RW+0x48>)
 8001324:	f7ff fa6f 	bl	8000806 <SPI_I2S_GetFlagStatus>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f8      	beq.n	8001320 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <nRF24_LL_RW+0x48>)
 8001330:	f7ff fa3e 	bl	80007b0 <SPI_I2S_ReceiveData>
 8001334:	4603      	mov	r3, r0
 8001336:	b2db      	uxtb	r3, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013000 	.word	0x40013000

08001344 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <EnableUart+0x58>)
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <EnableUart+0x58>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/115200;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f240 2271 	movw	r2, #625	; 0x271
 800135e:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	899b      	ldrh	r3, [r3, #12]
 8001364:	b29b      	uxth	r3, r3
 8001366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	899b      	ldrh	r3, [r3, #12]
 8001374:	b29b      	uxth	r3, r3
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	899b      	ldrh	r3, [r3, #12]
 8001384:	b29b      	uxth	r3, r3
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	819a      	strh	r2, [r3, #12]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <uart1_send>:
		;
	}
	return (uint16_t) USART1->DR;
}

void uart1_send(uint16_t c){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
	 while (!(USART1->SR & USART_SR_TXE)){
 80013aa:	bf00      	nop
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <uart1_send+0x2c>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f8      	beq.n	80013ac <uart1_send+0xc>
	    	;
	 }
	 USART1->DR =c;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <uart1_send+0x2c>)
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	8093      	strh	r3, [r2, #4]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40013800 	.word	0x40013800

080013d0 <SendString>:


void SendString (const char* string){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	const uint8_t maxCharToSend = 32;
 80013d8:	2320      	movs	r3, #32
 80013da:	73bb      	strb	r3, [r7, #14]
	uint8_t i=0;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
	while (string[i] != 0)
 80013e0:	e00e      	b.n	8001400 <SendString+0x30>
	{
		uart1_send(string[i]);
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffd7 	bl	80013a0 <uart1_send>
		i++;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	3301      	adds	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
		if (i == maxCharToSend){
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d006      	beq.n	800140e <SendString+0x3e>
	while (string[i] != 0)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1ea      	bne.n	80013e2 <SendString+0x12>
 800140c:	e000      	b.n	8001410 <SendString+0x40>
			break;
 800140e:	bf00      	nop
		}
	}
	uart1_send(0xA);
 8001410:	200a      	movs	r0, #10
 8001412:	f7ff ffc5 	bl	80013a0 <uart1_send>
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <SendBuffer>:



void SendBuffer (const char* buffer, uint32_t size){
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
	while (size--)
 800142c:	e00a      	b.n	8001444 <SendBuffer+0x26>
	{
		uart1_send(buffer[i++]);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	73fa      	strb	r2, [r7, #15]
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ffae 	bl	80013a0 <uart1_send>
	while (size--)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	603a      	str	r2, [r7, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ef      	bne.n	800142e <SendBuffer+0x10>
	}
	uart1_send(0xA);
 800144e:	200a      	movs	r0, #10
 8001450:	f7ff ffa6 	bl	80013a0 <uart1_send>
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <nrf24_setupPins>:
#define clr_bit(reg,bit) reg &= ~(1<<bit)
#define check_bit(reg,bit) (reg&(1<<bit))

/* ------------------------------------------------------------------------- */
void nrf24_setupPins()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	nRF24_GPIO_Init();
 8001460:	f7ff fed4 	bl	800120c <nRF24_GPIO_Init>
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <nrf24_ce_digitalWrite>:



/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
    if(state)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <nrf24_ce_digitalWrite+0x1a>
    {
    	nRF24_CE_H();
 8001478:	2101      	movs	r1, #1
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <nrf24_ce_digitalWrite+0x2c>)
 800147c:	f7ff f8ee 	bl	800065c <GPIO_SetBits>
    }
    else
    {
    	 nRF24_CE_L();
    }
}
 8001480:	e003      	b.n	800148a <nrf24_ce_digitalWrite+0x22>
    	 nRF24_CE_L();
 8001482:	2101      	movs	r1, #1
 8001484:	4803      	ldr	r0, [pc, #12]	; (8001494 <nrf24_ce_digitalWrite+0x2c>)
 8001486:	f7ff f8f7 	bl	8000678 <GPIO_ResetBits>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40010c00 	.word	0x40010c00

08001498 <nrf24_csn_digitalWrite>:
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
    if(state)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <nrf24_csn_digitalWrite+0x1a>
    {
    	nRF24_CSN_H();
 80014a8:	2102      	movs	r1, #2
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <nrf24_csn_digitalWrite+0x2c>)
 80014ac:	f7ff f8d6 	bl	800065c <GPIO_SetBits>
    }
    else
    {
    	nRF24_CSN_L();
    }
}
 80014b0:	e003      	b.n	80014ba <nrf24_csn_digitalWrite+0x22>
    	nRF24_CSN_L();
 80014b2:	2102      	movs	r1, #2
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <nrf24_csn_digitalWrite+0x2c>)
 80014b6:	f7ff f8df 	bl	8000678 <GPIO_ResetBits>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40010c00 	.word	0x40010c00

080014c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001500 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014ce:	e003      	b.n	80014d8 <LoopCopyDataInit>

080014d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80014d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014d6:	3104      	adds	r1, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80014dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014e0:	d3f6      	bcc.n	80014d0 <CopyDataInit>
	ldr	r2, =_sbss
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80014e4:	e002      	b.n	80014ec <LoopFillZerobss>

080014e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014e8:	f842 3b04 	str.w	r3, [r2], #4

080014ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80014ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014f0:	d3f9      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014f2:	f000 f82b 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f001 f995 	bl	8002824 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fa:	f7ff fad9 	bl	8000ab0 <main>
	bx	lr
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001500:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001504:	08002940 	.word	0x08002940
	ldr	r0, =_sdata
 8001508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800150c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001510:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001514:	200000dc 	.word	0x200000dc

08001518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC1_2_IRQHandler>

0800151a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800152a:	e7fe      	b.n	800152a <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
	...

0800154c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001550:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <SystemInit+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <SystemInit+0x5c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800155c:	4912      	ldr	r1, [pc, #72]	; (80015a8 <SystemInit+0x5c>)
 800155e:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <SystemInit+0x5c>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <SystemInit+0x60>)
 8001564:	4013      	ands	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <SystemInit+0x5c>)
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <SystemInit+0x5c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <SystemInit+0x5c>)
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SystemInit+0x5c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <SystemInit+0x5c>)
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <SystemInit+0x5c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800158e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <SystemInit+0x5c>)
 8001592:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001596:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001598:	f000 f80c 	bl	80015b4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SystemInit+0x64>)
 800159e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	f8ff0000 	.word	0xf8ff0000
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80015b8:	f000 f802 	bl	80015c0 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015ce:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <SetSysClockTo72+0xf8>)
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <SetSysClockTo72+0xf8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <SetSysClockTo72+0xf8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3301      	adds	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d103      	bne.n	80015f8 <SetSysClockTo72+0x38>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015f6:	d1f0      	bne.n	80015da <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <SetSysClockTo72+0xf8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001604:	2301      	movs	r3, #1
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e001      	b.n	800160e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d14b      	bne.n	80016ac <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <SetSysClockTo72+0xfc>)
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <SetSysClockTo72+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <SetSysClockTo72+0xfc>)
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <SetSysClockTo72+0xfc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <SetSysClockTo72+0xfc>)
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <SetSysClockTo72+0xfc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001638:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <SetSysClockTo72+0xf8>)
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <SetSysClockTo72+0xf8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001640:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <SetSysClockTo72+0xf8>)
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <SetSysClockTo72+0xf8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001654:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800165e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001660:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800166a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <SetSysClockTo72+0xf8>)
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001676:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001678:	bf00      	nop
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <SetSysClockTo72+0xf8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f9      	beq.n	800167a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001686:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <SetSysClockTo72+0xf8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 0303 	bic.w	r3, r3, #3
 8001690:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SetSysClockTo72+0xf8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800169e:	bf00      	nop
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SetSysClockTo72+0xf8>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d1f9      	bne.n	80016a0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40022000 	.word	0x40022000

080016c0 <broker_init_by_given_net>:
	broker->net->receive = receive;
	broker->net->disconnect = disconnect;
}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 80016ca:	f640 62c4 	movw	r2, #3780	; 0xec4
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f001 f8e5 	bl	80028a0 <memset>
	broker->net = broker_net;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2208      	movs	r2, #8
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f001 f8cf 	bl	80028a0 <memset>
	const uint8_t max_nb_bytes = 4;
 8001702:	2304      	movs	r3, #4
 8001704:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8001706:	7c3b      	ldrb	r3, [r7, #16]
 8001708:	461a      	mov	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	7d7a      	ldrb	r2, [r7, #21]
 8001716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800171a:	7df9      	ldrb	r1, [r7, #23]
 800171c:	fb01 f202 	mul.w	r2, r1, r2
 8001720:	4413      	add	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	01db      	lsls	r3, r3, #7
 8001728:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 800172a:	7c3b      	ldrb	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001732:	7c3b      	ldrb	r3, [r7, #16]
 8001734:	7dba      	ldrb	r2, [r7, #22]
 8001736:	429a      	cmp	r2, r3
 8001738:	d004      	beq.n	8001744 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 800173a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dbe1      	blt.n	8001706 <decode_pck_len+0x20>
 8001742:	e000      	b.n	8001746 <decode_pck_len+0x60>
			break;
 8001744:	bf00      	nop
	return rem_length;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	461a      	mov	r2, r3
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001752:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <broker_receive>:


bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 800175e:	b590      	push	{r4, r7, lr}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(NULL, sockaddr, frame, MAX_FRAME_SIZE);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001770:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8001774:	23f0      	movs	r3, #240	; 0xf0
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	2000      	movs	r0, #0
 800177c:	47a0      	blx	r4
}
 800177e:	bf00      	nop
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}

08001788 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800178e:	af00      	add	r7, sp, #0
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	6018      	str	r0, [r3, #0]
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	6019      	str	r1, [r3, #0]
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f887 3276 	strb.w	r3, [r7, #630]	; 0x276
	switch (pckt_type) {
 80017ae:	f897 3276 	ldrb.w	r3, [r7, #630]	; 0x276
 80017b2:	3b01      	subs	r3, #1
 80017b4:	2b0b      	cmp	r3, #11
 80017b6:	f200 810d 	bhi.w	80019d4 <broker_packets_dispatcher+0x24c>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <broker_packets_dispatcher+0x38>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017f1 	.word	0x080017f1
 80017c4:	080019d5 	.word	0x080019d5
 80017c8:	080018bf 	.word	0x080018bf
 80017cc:	080019d5 	.word	0x080019d5
 80017d0:	080019d5 	.word	0x080019d5
 80017d4:	080019d5 	.word	0x080019d5
 80017d8:	080019d5 	.word	0x080019d5
 80017dc:	08001921 	.word	0x08001921
 80017e0:	080019d5 	.word	0x080019d5
 80017e4:	0800197f 	.word	0x0800197f
 80017e8:	080019d5 	.word	0x080019d5
 80017ec:	080019bf 	.word	0x080019bf
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 80017f0:	f107 0210 	add.w	r2, r7, #16
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4611      	mov	r1, r2
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	f000 f9e5 	bl	8001bca <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4611      	mov	r1, r2
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	f000 fbc4 	bl	8001f98 <broker_validate_conn>
		bool sesion_present = false;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
		if (was_clean_session_requested(&conn_pck)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fbe8 	bl	8001ff0 <was_clean_session_requested>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d017      	beq.n	8001856 <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	4611      	mov	r1, r2
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f000 f92e 	bl	8001a94 <is_client_exist>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4611      	mov	r1, r2
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f000 f955 	bl	8001afa <broker_remove_client>
			sesion_present = true;
 8001850:	2301      	movs	r3, #1
 8001852:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 8001856:	f107 0210 	add.w	r2, r7, #16
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4611      	mov	r1, r2
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	f000 fb99 	bl	8001f98 <broker_validate_conn>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3275 	strb.w	r3, [r7, #629]	; 0x275
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	f107 0110 	add.w	r1, r7, #16
 8001872:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f000 fb0a 	bl	8001e90 <broker_create_new_client>
		add_client(broker, &new_client);
 800187c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4611      	mov	r1, r2
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f000 f979 	bl	8001b7e <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 800188c:	f897 2275 	ldrb.w	r2, [r7, #629]	; 0x275
 8001890:	f897 1277 	ldrb.w	r1, [r7, #631]	; 0x277
 8001894:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fad8 	bl	8001e4e <encode_conn_ack>
		broker->net->send(NULL, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80018a8:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 80018ac:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80018b0:	1d39      	adds	r1, r7, #4
 80018b2:	2304      	movs	r3, #4
 80018b4:	6809      	ldr	r1, [r1, #0]
 80018b6:	2000      	movs	r0, #0
 80018b8:	47a0      	blx	r4
		break;
 80018ba:	bf00      	nop
 80018bc:	e08a      	b.n	80019d4 <broker_packets_dispatcher+0x24c>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 80018be:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4611      	mov	r1, r2
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f000 fba5 	bl	8002018 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 80018ce:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4611      	mov	r1, r2
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f000 fc09 	bl	80020f0 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 80018de:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fc56 	bl	800219c <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 80018f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dd68      	ble.n	80019d2 <broker_packets_dispatcher+0x24a>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800190a:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800190e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8001912:	1d39      	adds	r1, r7, #4
 8001914:	2304      	movs	r3, #4
 8001916:	6809      	ldr	r1, [r1, #0]
 8001918:	2000      	movs	r0, #0
 800191a:	47a0      	blx	r4
		}
		break;
 800191c:	bf00      	nop
 800191e:	e058      	b.n	80019d2 <broker_packets_dispatcher+0x24a>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 8001920:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4611      	mov	r1, r2
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f000 fc4a 	bl	80021c4 <broker_decode_subscribe>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3274 	strb.w	r3, [r7, #628]	; 0x274
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8001936:	1d3a      	adds	r2, r7, #4
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	6811      	ldr	r1, [r2, #0]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f000 f872 	bl	8001a28 <broker_get_client_by_socket>
 8001944:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
		uint8_t sub_result[MAX_SUBS_TOPIC];
		add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 8001948:	f507 7010 	add.w	r0, r7, #576	; 0x240
 800194c:	f897 2274 	ldrb.w	r2, [r7, #628]	; 0x274
 8001950:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001954:	f103 010c 	add.w	r1, r3, #12
 8001958:	4603      	mov	r3, r0
 800195a:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 800195e:	f000 fd93 	bl	8002488 <add_subscriptions_from_list>
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 8001962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	8819      	ldrh	r1, [r3, #0]
 800196a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800196e:	f897 2274 	ldrb.w	r2, [r7, #628]	; 0x274
 8001972:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8001976:	f000 fe13 	bl	80025a0 <encode_subscribe_ack>
		break;
 800197a:	bf00      	nop
 800197c:	e02a      	b.n	80019d4 <broker_packets_dispatcher+0x24c>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 800197e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	4611      	mov	r1, r2
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f000 fe26 	bl	80025da <broker_decode_unsubscribe>
 800198e:	4603      	mov	r3, r0
 8001990:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8001994:	1d3a      	adds	r2, r7, #4
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	6811      	ldr	r1, [r2, #0]
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	f000 f843 	bl	8001a28 <broker_get_client_by_socket>
 80019a2:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 80019a6:	f897 226f 	ldrb.w	r2, [r7, #623]	; 0x26f
 80019aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ae:	330c      	adds	r3, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 80019b6:	f000 fef9 	bl	80027ac <delete_listed_subscriptions>
		break;
 80019ba:	bf00      	nop
 80019bc:	e00a      	b.n	80019d4 <broker_packets_dispatcher+0x24c>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 80019be:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4611      	mov	r1, r2
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	f000 ff11 	bl	80027f0 <broker_decode_ping_req>
		break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <broker_packets_dispatcher+0x24c>
		break;
 80019d2:	bf00      	nop
	}
	}
}
 80019d4:	bf00      	nop
 80019d6:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd90      	pop	{r4, r7, pc}
 80019de:	bf00      	nop

080019e0 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e013      	b.n	8001a18 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	3310      	adds	r3, #16
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fba4 	bl	8000150 <strcmp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <broker_get_client_pos_by_id+0x32>
			return i;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	e006      	b.n	8001a20 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b07      	cmp	r3, #7
 8001a1c:	d9e8      	bls.n	80019f0 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 8001a1e:	23ff      	movs	r3, #255	; 0xff
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001a32:	2300      	movs	r3, #0
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e025      	b.n	8001a84 <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d016      	beq.n	8001a7e <broker_get_client_by_socket+0x56>
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	2210      	movs	r2, #16
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 ff02 	bl	800286c <memcmp>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d107      	bne.n	8001a7e <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	e006      	b.n	8001a8c <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	3301      	adds	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b07      	cmp	r3, #7
 8001a88:	d9d6      	bls.n	8001a38 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff9d 	bl	80019e0 <broker_get_client_pos_by_id>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2bff      	cmp	r3, #255	; 0xff
 8001aaa:	d001      	beq.n	8001ab0 <is_client_exist+0x1c>
		return true;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <is_client_exist+0x1e>
	}
	return false;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	e00f      	b.n	8001ae8 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3310      	adds	r3, #16
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <can_broker_accept_next_client+0x28>
			return true;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e006      	b.n	8001af0 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	73fb      	strb	r3, [r7, #15]
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d9ec      	bls.n	8001ac8 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff6a 	bl	80019e0 <broker_get_client_pos_by_id>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d00e      	beq.n	8001b34 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 feb8 	bl	80028a0 <memset>
		return true;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <broker_remove_client+0x3c>
	}
	return false;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e00f      	b.n	8001b6c <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001b54:	fb01 f303 	mul.w	r3, r1, r3
 8001b58:	4413      	add	r3, r2
 8001b5a:	3310      	adds	r3, #16
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <broker_first_free_pos_for_client+0x28>
			return i;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	e006      	b.n	8001b74 <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	d9ec      	bls.n	8001b4c <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001b72:	23ff      	movs	r3, #255	; 0xff
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ffd8 	bl	8001b3e <broker_first_free_pos_for_client>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001b98:	fb02 f303 	mul.w	r3, r2, r3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fe6f 	bl	800288a <memcpy>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	return true;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	441a      	add	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
	pos ++;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	3301      	adds	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	441a      	add	r2, r3
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fd76 	bl	80016e6 <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001c00:	7c3a      	ldrb	r2, [r7, #16]
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	4413      	add	r3, r2
 8001c06:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	441a      	add	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6892      	ldr	r2, [r2, #8]
 8001c1a:	8812      	ldrh	r2, [r2, #0]
 8001c1c:	0a12      	lsrs	r2, r2, #8
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	b211      	sxth	r1, r2
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	0212      	lsls	r2, r2, #8
 8001c2a:	b212      	sxth	r2, r2
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	b212      	sxth	r2, r2
 8001c30:	b292      	uxth	r2, r2
 8001c32:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
 8001c36:	3302      	adds	r3, #2
 8001c38:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	441a      	add	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	4413      	add	r3, r2
 8001c50:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	441a      	add	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	611a      	str	r2, [r3, #16]
	pos += 1;
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	441a      	add	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	615a      	str	r2, [r3, #20]
	pos += 1;
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	441a      	add	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	6992      	ldr	r2, [r2, #24]
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	0a12      	lsrs	r2, r2, #8
 8001c88:	b292      	uxth	r2, r2
 8001c8a:	b211      	sxth	r1, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	6992      	ldr	r2, [r2, #24]
 8001c90:	8812      	ldrh	r2, [r2, #0]
 8001c92:	0212      	lsls	r2, r2, #8
 8001c94:	b212      	sxth	r2, r2
 8001c96:	430a      	orrs	r2, r1
 8001c98:	b212      	sxth	r2, r2
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	441a      	add	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	69d2      	ldr	r2, [r2, #28]
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	0a12      	lsrs	r2, r2, #8
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	b211      	sxth	r1, r2
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	69d2      	ldr	r2, [r2, #28]
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	0212      	lsls	r2, r2, #8
 8001cc6:	b212      	sxth	r2, r2
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	b212      	sxth	r2, r2
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	441a      	add	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	4413      	add	r3, r2
 8001cec:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d049      	beq.n	8001d92 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	441a      	add	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	0a12      	lsrs	r2, r2, #8
 8001d14:	b292      	uxth	r2, r2
 8001d16:	b211      	sxth	r1, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1c:	8812      	ldrh	r2, [r2, #0]
 8001d1e:	0212      	lsls	r2, r2, #8
 8001d20:	b212      	sxth	r2, r2
 8001d22:	430a      	orrs	r2, r1
 8001d24:	b212      	sxth	r2, r2
 8001d26:	b292      	uxth	r2, r2
 8001d28:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	441a      	add	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	4413      	add	r3, r2
 8001d46:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	441a      	add	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d5a:	8812      	ldrh	r2, [r2, #0]
 8001d5c:	0a12      	lsrs	r2, r2, #8
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	b211      	sxth	r1, r2
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	0212      	lsls	r2, r2, #8
 8001d6a:	b212      	sxth	r2, r2
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	b212      	sxth	r2, r2
 8001d70:	b292      	uxth	r2, r2
 8001d72:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	3302      	adds	r3, #2
 8001d78:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8001d7a:	7dfb      	ldrb	r3, [r7, #23]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	441a      	add	r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	4413      	add	r3, r2
 8001d90:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d024      	beq.n	8001dec <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	441a      	add	r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	0a12      	lsrs	r2, r2, #8
 8001db8:	b292      	uxth	r2, r2
 8001dba:	b211      	sxth	r1, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc0:	8812      	ldrh	r2, [r2, #0]
 8001dc2:	0212      	lsls	r2, r2, #8
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	441a      	add	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
 8001de8:	4413      	add	r3, r2
 8001dea:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d024      	beq.n	8001e46 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	441a      	add	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e0e:	8812      	ldrh	r2, [r2, #0]
 8001e10:	0a12      	lsrs	r2, r2, #8
 8001e12:	b292      	uxth	r2, r2
 8001e14:	b211      	sxth	r1, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e1a:	8812      	ldrh	r2, [r2, #0]
 8001e1c:	0212      	lsls	r2, r2, #8
 8001e1e:	b212      	sxth	r2, r2
 8001e20:	430a      	orrs	r2, r1
 8001e22:	b212      	sxth	r2, r2
 8001e24:	b292      	uxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	441a      	add	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	4413      	add	r3, r2
 8001e44:	75fb      	strb	r3, [r7, #23]
	}
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8001e5e:	2204      	movs	r2, #4
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fd1c 	bl	80028a0 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	7893      	ldrb	r3, [r2, #2]
 8001e78:	78f9      	ldrb	r1, [r7, #3]
 8001e7a:	f361 0300 	bfi	r3, r1, #0, #1
 8001e7e:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	78ba      	ldrb	r2, [r7, #2]
 8001e84:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8001e86:	687b      	ldr	r3, [r7, #4]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 8001e9c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fcfc 	bl	80028a0 <memset>
	memcpy(&new_client->sockaddr, &sockaddr, sizeof (sockaddr_t));
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1d39      	adds	r1, r7, #4
 8001eac:	2210      	movs	r2, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fceb 	bl	800288a <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f103 0010 	add.w	r0, r3, #16
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6a19      	ldr	r1, [r3, #32]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f000 fd05 	bl	80028d4 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	881a      	ldrh	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	f000 fcdd 	bl	80028d4 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f000 fcd2 	bl	80028d4 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f000 fcb5 	bl	80028d4 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f103 0052 	add.w	r0, r3, #82	; 0x52
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f000 fca2 	bl	80028d4 <strncpy>
	}
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d001      	beq.n	8001fb0 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e01b      	b.n	8001fe8 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fd82 	bl	8001aba <can_broker_accept_next_client>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e010      	b.n	8001fe8 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	f7ff fdef 	bl	8001bb4 <is_client_authorised>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e000      	b.n	8001fe8 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 8001fe6:	2300      	movs	r3, #0
	}
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
	pos ++;
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	3301      	adds	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002032:	7dfb      	ldrb	r3, [r7, #23]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	441a      	add	r2, r3
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fb51 	bl	80016e6 <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800204a:	7c3a      	ldrb	r2, [r7, #16]
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	4413      	add	r3, r2
 8002050:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8002052:	7dfb      	ldrb	r3, [r7, #23]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	441a      	add	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	6892      	ldr	r2, [r2, #8]
 8002064:	8812      	ldrh	r2, [r2, #0]
 8002066:	0a12      	lsrs	r2, r2, #8
 8002068:	b292      	uxth	r2, r2
 800206a:	b211      	sxth	r1, r2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	6892      	ldr	r2, [r2, #8]
 8002070:	8812      	ldrh	r2, [r2, #0]
 8002072:	0212      	lsls	r2, r2, #8
 8002074:	b212      	sxth	r2, r2
 8002076:	430a      	orrs	r2, r1
 8002078:	b212      	sxth	r2, r2
 800207a:	b292      	uxth	r2, r2
 800207c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	3302      	adds	r3, #2
 8002082:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	441a      	add	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	4413      	add	r3, r2
 800209a:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dd18      	ble.n	80020de <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	441a      	add	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	6912      	ldr	r2, [r2, #16]
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	0a12      	lsrs	r2, r2, #8
 80020c2:	b292      	uxth	r2, r2
 80020c4:	b211      	sxth	r1, r2
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	6912      	ldr	r2, [r2, #16]
 80020ca:	8812      	ldrh	r2, [r2, #0]
 80020cc:	0212      	lsls	r2, r2, #8
 80020ce:	b212      	sxth	r2, r2
 80020d0:	430a      	orrs	r2, r1
 80020d2:	b212      	sxth	r2, r2
 80020d4:	b292      	uxth	r2, r2
 80020d6:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	3302      	adds	r3, #2
 80020dc:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	441a      	add	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	615a      	str	r2, [r3, #20]
}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e046      	b.n	800218e <publish_msg_to_subscribers+0x9e>
		if ((broker->clients[i].connected)){
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d037      	beq.n	8002188 <publish_msg_to_subscribers+0x98>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8002118:	2300      	movs	r3, #0
 800211a:	73bb      	strb	r3, [r7, #14]
 800211c:	e031      	b.n	8002182 <publish_msg_to_subscribers+0x92>
				uint16_t len = *pub_pck->var_head.len;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 800212c:	7bf9      	ldrb	r1, [r7, #15]
 800212e:	7bba      	ldrb	r2, [r7, #14]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800213c:	fb02 f201 	mul.w	r2, r2, r1
 8002140:	4413      	add	r3, r2
 8002142:	33b0      	adds	r3, #176	; 0xb0
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	3308      	adds	r3, #8
 800214a:	89ba      	ldrh	r2, [r7, #12]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fbae 	bl	80028b0 <strncmp>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d010      	beq.n	800217c <publish_msg_to_subscribers+0x8c>
					broker->net->send(NULL, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002160:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	18d1      	adds	r1, r2, r3
 8002172:	463a      	mov	r2, r7
 8002174:	2318      	movs	r3, #24
 8002176:	2000      	movs	r0, #0
 8002178:	47a0      	blx	r4
					break;
 800217a:	e005      	b.n	8002188 <publish_msg_to_subscribers+0x98>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	3301      	adds	r3, #1
 8002180:	73bb      	strb	r3, [r7, #14]
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	2b07      	cmp	r3, #7
 8002186:	d9ca      	bls.n	800211e <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	3301      	adds	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	2b07      	cmp	r3, #7
 8002192:	d9b5      	bls.n	8002100 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}

0800219c <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = pckt_id;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	805a      	strh	r2, [r3, #2]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	601a      	str	r2, [r3, #0]
	pos++;
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	3301      	adds	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	441a      	add	r2, r3
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fa7b 	bl	80016e6 <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80021f6:	7c3a      	ldrb	r2, [r7, #16]
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	4413      	add	r3, r2
 80021fc:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	441a      	add	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	6892      	ldr	r2, [r2, #8]
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	0a12      	lsrs	r2, r2, #8
 8002214:	b292      	uxth	r2, r2
 8002216:	b211      	sxth	r1, r2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	6892      	ldr	r2, [r2, #8]
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	0212      	lsls	r2, r2, #8
 8002220:	b212      	sxth	r2, r2
 8002222:	430a      	orrs	r2, r1
 8002224:	b212      	sxth	r2, r2
 8002226:	b292      	uxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	3302      	adds	r3, #2
 800222e:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002230:	2302      	movs	r3, #2
 8002232:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002234:	2300      	movs	r3, #0
 8002236:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002238:	e060      	b.n	80022fc <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 800223a:	7dba      	ldrb	r2, [r7, #22]
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4419      	add	r1, r3
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4403      	add	r3, r0
 800224e:	330c      	adds	r3, #12
 8002250:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 8002252:	7dba      	ldrb	r2, [r7, #22]
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	330c      	adds	r3, #12
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	7dba      	ldrb	r2, [r7, #22]
 8002266:	6838      	ldr	r0, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4403      	add	r3, r0
 8002272:	330c      	adds	r3, #12
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b29b      	uxth	r3, r3
 800227c:	b218      	sxth	r0, r3
 800227e:	7dba      	ldrb	r2, [r7, #22]
 8002280:	683c      	ldr	r4, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4423      	add	r3, r4
 800228c:	330c      	adds	r3, #12
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	b21b      	sxth	r3, r3
 8002296:	4303      	orrs	r3, r0
 8002298:	b21b      	sxth	r3, r3
 800229a:	b29b      	uxth	r3, r3
 800229c:	800b      	strh	r3, [r1, #0]
		pos += 2;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	3302      	adds	r3, #2
 80022a2:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80022a4:	7dba      	ldrb	r2, [r7, #22]
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4419      	add	r1, r3
 80022ac:	6838      	ldr	r0, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4403      	add	r3, r0
 80022b8:	3310      	adds	r3, #16
 80022ba:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 80022bc:	7dba      	ldrb	r2, [r7, #22]
 80022be:	6839      	ldr	r1, [r7, #0]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	330c      	adds	r3, #12
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	4413      	add	r3, r2
 80022d6:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 80022d8:	7dba      	ldrb	r2, [r7, #22]
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4419      	add	r1, r3
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4403      	add	r3, r0
 80022ec:	3314      	adds	r3, #20
 80022ee:	6019      	str	r1, [r3, #0]
		pos += 1;
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	3301      	adds	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	3301      	adds	r3, #1
 80022fa:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80022fc:	7dfa      	ldrb	r2, [r7, #23]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6859      	ldr	r1, [r3, #4]
 8002302:	7d7b      	ldrb	r3, [r7, #21]
 8002304:	440b      	add	r3, r1
 8002306:	429a      	cmp	r2, r3
 8002308:	d397      	bcc.n	800223a <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 800230a:	7dbb      	ldrb	r3, [r7, #22]
}
 800230c:	4618      	mov	r0, r3
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}

08002314 <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	461a      	mov	r2, r3
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fa9f 	bl	800286c <memcmp>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <is_the_same_topic+0x24>
		return true;
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <is_the_same_topic+0x26>
	}
	return false;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	4613      	mov	r3, r2
 800234e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002350:	2300      	movs	r3, #0
 8002352:	75fb      	strb	r3, [r7, #23]
 8002354:	e020      	b.n	8002398 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8002356:	7dfa      	ldrb	r2, [r7, #23]
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	33b8      	adds	r3, #184	; 0xb8
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d012      	beq.n	8002392 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 800236c:	7dfa      	ldrb	r2, [r7, #23]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	33b0      	adds	r3, #176	; 0xb0
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	3308      	adds	r3, #8
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffc6 	bl	8002314 <is_the_same_topic>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <get_subscribed_topic_pos+0x50>
			return i;
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	e006      	b.n	80023a0 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002392:	7dfb      	ldrb	r3, [r7, #23]
 8002394:	3301      	adds	r3, #1
 8002396:	75fb      	strb	r3, [r7, #23]
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b07      	cmp	r3, #7
 800239c:	d9db      	bls.n	8002356 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 800239e:	23ff      	movs	r3, #255	; 0xff
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e00f      	b.n	80023f4 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	33b8      	adds	r3, #184	; 0xb8
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	e006      	b.n	80023fc <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	3301      	adds	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d9ec      	bls.n	80023d4 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 80023fa:	23ff      	movs	r3, #255	; 0xff
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffd8 	bl	80023c6 <find_first_free_slot_for_subs_topic>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2bff      	cmp	r3, #255	; 0xff
 800241e:	d02e      	beq.n	800247e <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	33b0      	adds	r3, #176	; 0xb0
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	f103 0008 	add.w	r0, r3, #8
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 fa23 	bl	800288a <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	33b0      	adds	r3, #176	; 0xb0
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	3306      	adds	r3, #6
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	6812      	ldr	r2, [r2, #0]
 800245a:	8812      	ldrh	r2, [r2, #0]
 800245c:	b292      	uxth	r2, r2
 800245e:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	33d0      	adds	r3, #208	; 0xd0
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	3308      	adds	r3, #8
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	6892      	ldr	r2, [r2, #8]
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	701a      	strb	r2, [r3, #0]
		return true;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <add_new_subscription_to_client+0x7a>
	}
	return false;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800249c:	e077      	b.n	800258e <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 800249e:	7dfa      	ldrb	r2, [r7, #23]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	461a      	mov	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	7dfa      	ldrb	r2, [r7, #23]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4413      	add	r3, r2
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff ff3a 	bl	8002342 <get_subscribed_topic_pos>
 80024ce:	4603      	mov	r3, r0
 80024d0:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){
 80024d2:	7d7b      	ldrb	r3, [r7, #21]
 80024d4:	2bff      	cmp	r3, #255	; 0xff
 80024d6:	d024      	beq.n	8002522 <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 80024d8:	7d7a      	ldrb	r2, [r7, #21]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	33b0      	adds	r3, #176	; 0xb0
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	1d98      	adds	r0, r3, #6
 80024ea:	7dfa      	ldrb	r2, [r7, #23]
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4619      	mov	r1, r3
 8002500:	f7ff ff52 	bl	80023a8 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos;
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	18d1      	adds	r1, r2, r3
 800250a:	7dfa      	ldrb	r2, [r7, #23]
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	700b      	strb	r3, [r1, #0]
 8002520:	e032      	b.n	8002588 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 8002522:	7dfa      	ldrb	r2, [r7, #23]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	461a      	mov	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4413      	add	r3, r2
 8002532:	4619      	mov	r1, r3
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff ff66 	bl	8002406 <add_new_subscription_to_client>
 800253a:	4603      	mov	r3, r0
 800253c:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	18d1      	adds	r1, r2, r3
 8002544:	7dfa      	ldrb	r2, [r7, #23]
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4413      	add	r3, r2
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	700b      	strb	r3, [r1, #0]
			if (!res){
 800255a:	7d3b      	ldrb	r3, [r7, #20]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8002566:	7dfb      	ldrb	r3, [r7, #23]
 8002568:	75bb      	strb	r3, [r7, #22]
 800256a:	e007      	b.n	800257c <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 800256c:	7dbb      	ldrb	r3, [r7, #22]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4413      	add	r3, r2
 8002572:	2250      	movs	r2, #80	; 0x50
 8002574:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8002576:	7dbb      	ldrb	r3, [r7, #22]
 8002578:	3301      	adds	r3, #1
 800257a:	75bb      	strb	r3, [r7, #22]
 800257c:	7dba      	ldrb	r2, [r7, #22]
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	429a      	cmp	r2, r3
 8002582:	d3f3      	bcc.n	800256c <add_subscriptions_from_list+0xe4>
				}
			return false;
 8002584:	2300      	movs	r3, #0
 8002586:	e007      	b.n	8002598 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	3301      	adds	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800258e:	7dfa      	ldrb	r2, [r7, #23]
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d383      	bcc.n	800249e <add_subscriptions_from_list+0x16>
	}
	return true;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	817b      	strh	r3, [r7, #10]
 80025ae:	4613      	mov	r3, r2
 80025b0:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2290      	movs	r2, #144	; 0x90
 80025b6:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_LEN;  //(?)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2203      	movs	r2, #3
 80025bc:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = pckt_id;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	897a      	ldrh	r2, [r7, #10]
 80025c2:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3304      	adds	r3, #4
 80025c8:	7a7a      	ldrb	r2, [r7, #9]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f95c 	bl	800288a <memcpy>
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 80025da:	b590      	push	{r4, r7, lr}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	601a      	str	r2, [r3, #0]
	pos++;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	3301      	adds	r3, #1
 80025f2:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	441a      	add	r2, r3
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f870 	bl	80016e6 <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800260c:	7c3a      	ldrb	r2, [r7, #16]
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	4413      	add	r3, r2
 8002612:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	441a      	add	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	0a12      	lsrs	r2, r2, #8
 800262a:	b292      	uxth	r2, r2
 800262c:	b211      	sxth	r1, r2
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6892      	ldr	r2, [r2, #8]
 8002632:	8812      	ldrh	r2, [r2, #0]
 8002634:	0212      	lsls	r2, r2, #8
 8002636:	b212      	sxth	r2, r2
 8002638:	430a      	orrs	r2, r1
 800263a:	b212      	sxth	r2, r2
 800263c:	b292      	uxth	r2, r2
 800263e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	3302      	adds	r3, #2
 8002644:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002646:	2302      	movs	r3, #2
 8002648:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 800264a:	2300      	movs	r3, #0
 800264c:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 800264e:	e060      	b.n	8002712 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002650:	7dba      	ldrb	r2, [r7, #22]
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4419      	add	r1, r3
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	330c      	adds	r3, #12
 8002666:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 8002668:	7dba      	ldrb	r2, [r7, #22]
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	330c      	adds	r3, #12
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	7dba      	ldrb	r2, [r7, #22]
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	4613      	mov	r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4403      	add	r3, r0
 8002688:	330c      	adds	r3, #12
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29b      	uxth	r3, r3
 8002692:	b218      	sxth	r0, r3
 8002694:	7dba      	ldrb	r2, [r7, #22]
 8002696:	683c      	ldr	r4, [r7, #0]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4423      	add	r3, r4
 80026a2:	330c      	adds	r3, #12
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b21b      	sxth	r3, r3
 80026ac:	4303      	orrs	r3, r0
 80026ae:	b21b      	sxth	r3, r3
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	800b      	strh	r3, [r1, #0]
		pos += 2;
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	3302      	adds	r3, #2
 80026b8:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80026ba:	7dba      	ldrb	r2, [r7, #22]
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4419      	add	r1, r3
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4403      	add	r3, r0
 80026ce:	3310      	adds	r3, #16
 80026d0:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 80026d2:	7dba      	ldrb	r2, [r7, #22]
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	330c      	adds	r3, #12
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	4413      	add	r3, r2
 80026ec:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 80026ee:	7dba      	ldrb	r2, [r7, #22]
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4419      	add	r1, r3
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4403      	add	r3, r0
 8002702:	3314      	adds	r3, #20
 8002704:	6019      	str	r1, [r3, #0]
		pos += 1;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	3301      	adds	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 800270c:	7dbb      	ldrb	r3, [r7, #22]
 800270e:	3301      	adds	r3, #1
 8002710:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8002712:	7dfa      	ldrb	r2, [r7, #23]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	7d7b      	ldrb	r3, [r7, #21]
 800271a:	440b      	add	r3, r1
 800271c:	429a      	cmp	r2, r3
 800271e:	d397      	bcc.n	8002650 <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 8002720:	7dbb      	ldrb	r3, [r7, #22]
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}

0800272a <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e031      	b.n	800279e <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	33b8      	adds	r3, #184	; 0xb8
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d023      	beq.n	8002798 <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	33b0      	adds	r3, #176	; 0xb0
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	f103 0008 	add.w	r0, r3, #8
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	f7ff fdcf 	bl	8002314 <is_the_same_topic>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	33b0      	adds	r3, #176	; 0xb0
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3306      	adds	r3, #6
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f884 	bl	80028a0 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	3301      	adds	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b07      	cmp	r3, #7
 80027a2:	d9ca      	bls.n	800273a <delete_subscribed_topic+0x10>
		}
	}
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80027be:	e00e      	b.n	80027de <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 80027c0:	7dfa      	ldrb	r2, [r7, #23]
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4413      	add	r3, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7ff ffa9 	bl	800272a <delete_subscribed_topic>
		i++;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	3301      	adds	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80027de:	7dfa      	ldrb	r2, [r7, #23]
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3ec      	bcc.n	80027c0 <delete_listed_subscriptions+0x14>
	}
	return true;
 80027e6:	2301      	movs	r3, #1
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	441a      	add	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	601a      	str	r2, [r3, #0]
	pos++;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	3301      	adds	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	441a      	add	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	605a      	str	r2, [r3, #4]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	2500      	movs	r5, #0
 8002828:	4e0c      	ldr	r6, [pc, #48]	; (800285c <__libc_init_array+0x38>)
 800282a:	4c0d      	ldr	r4, [pc, #52]	; (8002860 <__libc_init_array+0x3c>)
 800282c:	1ba4      	subs	r4, r4, r6
 800282e:	10a4      	asrs	r4, r4, #2
 8002830:	42a5      	cmp	r5, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	f000 f864 	bl	8002900 <_init>
 8002838:	2500      	movs	r5, #0
 800283a:	4e0a      	ldr	r6, [pc, #40]	; (8002864 <__libc_init_array+0x40>)
 800283c:	4c0a      	ldr	r4, [pc, #40]	; (8002868 <__libc_init_array+0x44>)
 800283e:	1ba4      	subs	r4, r4, r6
 8002840:	10a4      	asrs	r4, r4, #2
 8002842:	42a5      	cmp	r5, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800284c:	4798      	blx	r3
 800284e:	3501      	adds	r5, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002856:	4798      	blx	r3
 8002858:	3501      	adds	r5, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	08002938 	.word	0x08002938
 8002860:	08002938 	.word	0x08002938
 8002864:	08002938 	.word	0x08002938
 8002868:	0800293c 	.word	0x0800293c

0800286c <memcmp>:
 800286c:	b510      	push	{r4, lr}
 800286e:	3901      	subs	r1, #1
 8002870:	4402      	add	r2, r0
 8002872:	4290      	cmp	r0, r2
 8002874:	d101      	bne.n	800287a <memcmp+0xe>
 8002876:	2000      	movs	r0, #0
 8002878:	bd10      	pop	{r4, pc}
 800287a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800287e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002882:	42a3      	cmp	r3, r4
 8002884:	d0f5      	beq.n	8002872 <memcmp+0x6>
 8002886:	1b18      	subs	r0, r3, r4
 8002888:	bd10      	pop	{r4, pc}

0800288a <memcpy>:
 800288a:	b510      	push	{r4, lr}
 800288c:	1e43      	subs	r3, r0, #1
 800288e:	440a      	add	r2, r1
 8002890:	4291      	cmp	r1, r2
 8002892:	d100      	bne.n	8002896 <memcpy+0xc>
 8002894:	bd10      	pop	{r4, pc}
 8002896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800289a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800289e:	e7f7      	b.n	8002890 <memcpy+0x6>

080028a0 <memset>:
 80028a0:	4603      	mov	r3, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <strncmp>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	b16a      	cbz	r2, 80028d0 <strncmp+0x20>
 80028b4:	3901      	subs	r1, #1
 80028b6:	1884      	adds	r4, r0, r2
 80028b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80028bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d103      	bne.n	80028cc <strncmp+0x1c>
 80028c4:	42a0      	cmp	r0, r4
 80028c6:	d001      	beq.n	80028cc <strncmp+0x1c>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f5      	bne.n	80028b8 <strncmp+0x8>
 80028cc:	1a98      	subs	r0, r3, r2
 80028ce:	bd10      	pop	{r4, pc}
 80028d0:	4610      	mov	r0, r2
 80028d2:	bd10      	pop	{r4, pc}

080028d4 <strncpy>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4604      	mov	r4, r0
 80028d8:	b902      	cbnz	r2, 80028dc <strncpy+0x8>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	4623      	mov	r3, r4
 80028de:	f811 5b01 	ldrb.w	r5, [r1], #1
 80028e2:	1e56      	subs	r6, r2, #1
 80028e4:	f803 5b01 	strb.w	r5, [r3], #1
 80028e8:	b91d      	cbnz	r5, 80028f2 <strncpy+0x1e>
 80028ea:	4414      	add	r4, r2
 80028ec:	42a3      	cmp	r3, r4
 80028ee:	d103      	bne.n	80028f8 <strncpy+0x24>
 80028f0:	bd70      	pop	{r4, r5, r6, pc}
 80028f2:	461c      	mov	r4, r3
 80028f4:	4632      	mov	r2, r6
 80028f6:	e7ef      	b.n	80028d8 <strncpy+0x4>
 80028f8:	f803 5b01 	strb.w	r5, [r3], #1
 80028fc:	e7f6      	b.n	80028ec <strncpy+0x18>
	...

08002900 <_init>:
 8002900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002902:	bf00      	nop
 8002904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002906:	bc08      	pop	{r3}
 8002908:	469e      	mov	lr, r3
 800290a:	4770      	bx	lr

0800290c <_fini>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr
