
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080061fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000047c  20000070  0800626c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200004ec  0800626c  000204ec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013794  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002adf  00000000  00000000  0003382d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b38  00000000  00000000  00036310  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a18  00000000  00000000  00036e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004fd7  00000000  00000000  00037860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000ce7b  00000000  00000000  0003c837  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000496b2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000b014  00000000  00000000  00049730  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000030  00000000  00000000  00054934  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000001ed  00000000  00000000  00054744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d44 	.word	0x08004d44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004d44 	.word	0x08004d44

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	689a      	ldr	r2, [r3, #8]
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	683a      	ldr	r2, [r7, #0]
 800019e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	6892      	ldr	r2, [r2, #8]
 80001d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	6852      	ldr	r2, [r2, #4]
 80001da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d103      	bne.n	80001ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <pxCurrentTCBConst2>)
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	6808      	ldr	r0, [r1, #0]
 8000216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800021a:	f380 8809 	msr	PSP, r0
 800021e:	f3bf 8f6f 	isb	sy
 8000222:	f04f 0000 	mov.w	r0, #0
 8000226:	f380 8811 	msr	BASEPRI, r0
 800022a:	f04e 0e0d 	orr.w	lr, lr, #13
 800022e:	4770      	bx	lr

08000230 <pxCurrentTCBConst2>:
 8000230:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
	...

08000240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000240:	f3ef 8009 	mrs	r0, PSP
 8000244:	f3bf 8f6f 	isb	sy
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <pxCurrentTCBConst>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000250:	6010      	str	r0, [r2, #0]
 8000252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000256:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800025a:	f380 8811 	msr	BASEPRI, r0
 800025e:	f000 f8df 	bl	8000420 <vTaskSwitchContext>
 8000262:	f04f 0000 	mov.w	r0, #0
 8000266:	f380 8811 	msr	BASEPRI, r0
 800026a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	6808      	ldr	r0, [r1, #0]
 8000272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000276:	f380 8809 	msr	PSP, r0
 800027a:	f3bf 8f6f 	isb	sy
 800027e:	4770      	bx	lr

08000280 <pxCurrentTCBConst>:
 8000280:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop

08000288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800028e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	f3bf 8f6f 	isb	sy
 800029a:	f3bf 8f4f 	dsb	sy
 800029e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80002a0:	f000 f812 	bl	80002c8 <xTaskIncrementTick>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <SysTick_Handler+0x3c>)
 80002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	e000ed04 	.word	0xe000ed04

080002c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002d2:	4b48      	ldr	r3, [pc, #288]	; (80003f4 <xTaskIncrementTick+0x12c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d17c      	bne.n	80003d4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002da:	4b47      	ldr	r3, [pc, #284]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002e2:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d110      	bne.n	8000310 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ee:	4b43      	ldr	r3, [pc, #268]	; (80003fc <xTaskIncrementTick+0x134>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <xTaskIncrementTick+0x138>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a40      	ldr	r2, [pc, #256]	; (80003fc <xTaskIncrementTick+0x134>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	4a40      	ldr	r2, [pc, #256]	; (8000400 <xTaskIncrementTick+0x138>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b40      	ldr	r3, [pc, #256]	; (8000404 <xTaskIncrementTick+0x13c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <xTaskIncrementTick+0x13c>)
 800030a:	6013      	str	r3, [r2, #0]
 800030c:	f000 f8ce 	bl	80004ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000310:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <xTaskIncrementTick+0x140>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	429a      	cmp	r2, r3
 8000318:	d34d      	bcc.n	80003b6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <xTaskIncrementTick+0x134>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <xTaskIncrementTick+0x60>
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <xTaskIncrementTick+0x62>
 8000328:	2300      	movs	r3, #0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <xTaskIncrementTick+0x140>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000334:	601a      	str	r2, [r3, #0]
					break;
 8000336:	e03e      	b.n	80003b6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <xTaskIncrementTick+0x134>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d203      	bcs.n	8000358 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <xTaskIncrementTick+0x140>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
						break;
 8000356:	e02e      	b.n	80003b6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3304      	adds	r3, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff2c 	bl	80001ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000366:	2b00      	cmp	r3, #0
 8000368:	d004      	beq.n	8000374 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3318      	adds	r3, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff23 	bl	80001ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000378:	2201      	movs	r2, #1
 800037a:	409a      	lsls	r2, r3
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <xTaskIncrementTick+0x144>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	4a22      	ldr	r2, [pc, #136]	; (800040c <xTaskIncrementTick+0x144>)
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4a1f      	ldr	r2, [pc, #124]	; (8000410 <xTaskIncrementTick+0x148>)
 8000394:	441a      	add	r2, r3
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	3304      	adds	r3, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4610      	mov	r0, r2
 800039e:	f7ff fee9 	bl	8000174 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d3b4      	bcc.n	800031a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003b4:	e7b1      	b.n	800031a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003bc:	4914      	ldr	r1, [pc, #80]	; (8000410 <xTaskIncrementTick+0x148>)
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d907      	bls.n	80003de <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e004      	b.n	80003de <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <xTaskIncrementTick+0x150>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <xTaskIncrementTick+0x150>)
 80003dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <xTaskIncrementTick+0x154>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ea:	697b      	ldr	r3, [r7, #20]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000114 	.word	0x20000114
 80003f8:	200000fc 	.word	0x200000fc
 80003fc:	200000f4 	.word	0x200000f4
 8000400:	200000f8 	.word	0x200000f8
 8000404:	2000010c 	.word	0x2000010c
 8000408:	20000110 	.word	0x20000110
 800040c:	20000100 	.word	0x20000100
 8000410:	20000090 	.word	0x20000090
 8000414:	2000008c 	.word	0x2000008c
 8000418:	20000104 	.word	0x20000104
 800041c:	20000108 	.word	0x20000108

08000420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <vTaskSwitchContext+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d003      	beq.n	8000436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800042e:	4b1b      	ldr	r3, [pc, #108]	; (800049c <vTaskSwitchContext+0x7c>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000434:	e02a      	b.n	800048c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <vTaskSwitchContext+0x7c>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <vTaskSwitchContext+0x80>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	fab3 f383 	clz	r3, r3
 8000448:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	f1c3 031f 	rsb	r3, r3, #31
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <vTaskSwitchContext+0x84>)
 800045e:	4413      	add	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3308      	adds	r3, #8
 8000474:	429a      	cmp	r2, r3
 8000476:	d104      	bne.n	8000482 <vTaskSwitchContext+0x62>
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <vTaskSwitchContext+0x88>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000114 	.word	0x20000114
 800049c:	20000108 	.word	0x20000108
 80004a0:	20000100 	.word	0x20000100
 80004a4:	20000090 	.word	0x20000090
 80004a8:	2000008c 	.word	0x2000008c

080004ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <prvResetNextTaskUnblockTime+0x14>
 80004bc:	2301      	movs	r3, #1
 80004be:	e000      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x16>
 80004c0:	2300      	movs	r3, #0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ce:	e008      	b.n	80004e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	200000f4 	.word	0x200000f4
 80004f0:	20000110 	.word	0x20000110

080004f4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004fc:	4a03      	ldr	r2, [pc, #12]	; (800050c <EXTI_ClearFlag+0x18>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6153      	str	r3, [r2, #20]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40010400 	.word	0x40010400

08000510 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <EXTI_ClearITPendingBit+0x18>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6153      	str	r3, [r2, #20]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40010400 	.word	0x40010400

0800052c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800052c:	b480      	push	{r7}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	78db      	ldrb	r3, [r3, #3]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	78db      	ldrb	r3, [r3, #3]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	461a      	mov	r2, r3
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	4313      	orrs	r3, r2
 800056e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d044      	beq.n	8000604 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	e038      	b.n	80005f8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000586:	2201      	movs	r2, #1
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d126      	bne.n	80005f2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005aa:	220f      	movs	r2, #15
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	4013      	ands	r3, r2
 80005bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005be:	69fa      	ldr	r2, [r7, #28]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	2b28      	cmp	r3, #40	; 0x28
 80005d2:	d105      	bne.n	80005e0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005d4:	2201      	movs	r2, #1
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	409a      	lsls	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	e008      	b.n	80005f2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	2b48      	cmp	r3, #72	; 0x48
 80005e6:	d104      	bne.n	80005f2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005e8:	2201      	movs	r2, #1
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	409a      	lsls	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	3301      	adds	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d946      	bls.n	800069a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	e03a      	b.n	800068e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	3308      	adds	r3, #8
 800061c:	2201      	movs	r2, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d127      	bne.n	8000688 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800063e:	220f      	movs	r2, #15
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	43db      	mvns	r3, r3
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	4013      	ands	r3, r2
 8000650:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000652:	69fa      	ldr	r2, [r7, #28]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4313      	orrs	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	78db      	ldrb	r3, [r3, #3]
 8000664:	2b28      	cmp	r3, #40	; 0x28
 8000666:	d105      	bne.n	8000674 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	3308      	adds	r3, #8
 800066c:	2201      	movs	r2, #1
 800066e:	409a      	lsls	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	2b48      	cmp	r3, #72	; 0x48
 800067a:	d105      	bne.n	8000688 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	3308      	adds	r3, #8
 8000680:	2201      	movs	r2, #1
 8000682:	409a      	lsls	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	3301      	adds	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d9c1      	bls.n	8000618 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	605a      	str	r2, [r3, #4]
  }
}
 800069a:	bf00      	nop
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	611a      	str	r2, [r3, #16]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	615a      	str	r2, [r3, #20]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ee:	4909      	ldr	r1, [pc, #36]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006fa:	e006      	b.n	800070a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006fc:	4905      	ldr	r1, [pc, #20]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	43db      	mvns	r3, r3
 8000706:	4013      	ands	r3, r2
 8000708:	618b      	str	r3, [r1, #24]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000

08000718 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000736:	e006      	b.n	8000746 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000738:	4905      	ldr	r1, [pc, #20]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	43db      	mvns	r3, r3
 8000742:	4013      	ands	r3, r2
 8000744:	61cb      	str	r3, [r1, #28]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800076e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	89fa      	ldrh	r2, [r7, #14]
 80007b6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8b9b      	ldrh	r3, [r3, #28]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	8a1a      	ldrh	r2, [r3, #16]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	821a      	strh	r2, [r3, #16]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	460b      	mov	r3, r1
 80007e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d008      	beq.n	80007fe <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007fc:	e007      	b.n	800080e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	b29a      	uxth	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	801a      	strh	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	819a      	strh	r2, [r3, #12]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	b29b      	uxth	r3, r3
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d008      	beq.n	8000870 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	889b      	ldrh	r3, [r3, #4]
 8000862:	b29b      	uxth	r3, r3
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800086e:	e007      	b.n	8000880 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	b29b      	uxth	r3, r3
 8000876:	f023 0304 	bic.w	r3, r3, #4
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	809a      	strh	r2, [r3, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	891b      	ldrh	r3, [r3, #8]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	4013      	ands	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e001      	b.n	80008b4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <SELECT>:
static
BYTE PowerFlag = 0;     /* indicates if "power" is on */

static
void SELECT (void) 		// CS w stan niski
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SD_PORT_SS, SD_BIT_SS);
 80008c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <SELECT+0x14>)
 80008ca:	f7ff fef9 	bl	80006c0 <GPIO_ResetBits>
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010c00 	.word	0x40010c00

080008d8 <DESELECT>:

static
void DESELECT (void) 	// CS w stan wysoki
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	GPIO_SetBits(SD_PORT_SS, SD_BIT_SS);
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <DESELECT+0x14>)
 80008e2:	f7ff fedf 	bl	80006a4 <GPIO_SetBits>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40010c00 	.word	0x40010c00

080008f0 <SpiTransmitSD>:



uint8_t SpiTransmitSD( uint8_t cmd )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 80008fa:	bf00      	nop
 80008fc:	2102      	movs	r1, #2
 80008fe:	480f      	ldr	r0, [pc, #60]	; (800093c <SpiTransmitSD+0x4c>)
 8000900:	f7ff ffc3 	bl	800088a <SPI_I2S_GetFlagStatus>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f8      	beq.n	80008fc <SpiTransmitSD+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	b29b      	uxth	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <SpiTransmitSD+0x4c>)
 8000912:	f7ff ff81 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8000916:	bf00      	nop
 8000918:	2101      	movs	r1, #1
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <SpiTransmitSD+0x4c>)
 800091c:	f7ff ffb5 	bl	800088a <SPI_I2S_GetFlagStatus>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f8      	beq.n	8000918 <SpiTransmitSD+0x28>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <SpiTransmitSD+0x4c>)
 8000928:	f7ff ff84 	bl	8000834 <SPI_I2S_ReceiveData>
 800092c:	4603      	mov	r3, r0
 800092e:	81fb      	strh	r3, [r7, #14]

	return recData;
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	b2db      	uxtb	r3, r3

}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40003800 	.word	0x40003800

08000940 <xmit_spi>:



static
void xmit_spi (BYTE Data)  // Wyslanie bajtu do SD
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
	SpiTransmitSD(Data);
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ffcf 	bl	80008f0 <SpiTransmitSD>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <rcvr_spi>:

static
BYTE rcvr_spi (void) 		// Odebranie bajtu z SD
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
	 u8 Data = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]

	 Data = SpiTransmitSD(0xFF);
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	f7ff ffc3 	bl	80008f0 <SpiTransmitSD>
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
//
//  // Odebranie bajtu
//  while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_RXNE) == RESET);
//  Data = SPI_I2S_ReceiveData(SD_SPI);

  return Data;
 800096e:	79fb      	ldrb	r3, [r7, #7]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <rcvr_spi_m>:


static
void rcvr_spi_m (BYTE *dst)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    *dst = rcvr_spi();
 8000980:	f7ff ffeb 	bl	800095a <rcvr_spi>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	701a      	strb	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    BYTE res;

    Timer2 = 50;    /* Wait for ready in timeout of 500ms */
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <wait_ready+0x34>)
 800099c:	2232      	movs	r2, #50	; 0x32
 800099e:	701a      	strb	r2, [r3, #0]
    rcvr_spi();
 80009a0:	f7ff ffdb 	bl	800095a <rcvr_spi>
    do
        res = rcvr_spi();
 80009a4:	f7ff ffd9 	bl	800095a <rcvr_spi>
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
    while ((res != 0xFF) && Timer2);
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2bff      	cmp	r3, #255	; 0xff
 80009b0:	d004      	beq.n	80009bc <wait_ready+0x28>
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <wait_ready+0x34>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f3      	bne.n	80009a4 <wait_ready+0x10>

    return res;
 80009bc:	79fb      	ldrb	r3, [r7, #7]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000119 	.word	0x20000119

080009cc <power_on>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	u8 i;
 
  DESELECT();      // CS = 1
 80009d2:	f7ff ff81 	bl	80008d8 <DESELECT>

  //Wyslanie 10 razy 0xFF co daje ponad 80 (>74) cykle zegara 
  //wymagane przez specyfikacje SD
  for (i = 0; i < 10; i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	e005      	b.n	80009e8 <power_on+0x1c>
    xmit_spi(0xFF);
 80009dc:	20ff      	movs	r0, #255	; 0xff
 80009de:	f7ff ffaf 	bl	8000940 <xmit_spi>
  for (i = 0; i < 10; i++)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	3301      	adds	r3, #1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b09      	cmp	r3, #9
 80009ec:	d9f6      	bls.n	80009dc <power_on+0x10>

  PowerFlag = 1;
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <power_on+0x30>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000011b 	.word	0x2000011b

08000a00 <power_off>:


static
void power_off (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <power_off+0x14>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000011b 	.word	0x2000011b

08000a18 <rcvr_datablock>:
static
bool rcvr_datablock (
    BYTE *buff,            /* Data buffer to store received data */
    UINT btr            /* Byte count (must be even number) */
)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    BYTE token;

    Timer1 = 10;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <rcvr_datablock+0x68>)
 8000a24:	220a      	movs	r2, #10
 8000a26:	701a      	strb	r2, [r3, #0]
    do {                            /* Wait for data packet in timeout of 100ms */
        token = rcvr_spi();
 8000a28:	f7ff ff97 	bl	800095a <rcvr_spi>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	d104      	bne.n	8000a40 <rcvr_datablock+0x28>
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <rcvr_datablock+0x68>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f3      	bne.n	8000a28 <rcvr_datablock+0x10>
    if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2bfe      	cmp	r3, #254	; 0xfe
 8000a44:	d001      	beq.n	8000a4a <rcvr_datablock+0x32>
 8000a46:	2300      	movs	r3, #0
 8000a48:	e016      	b.n	8000a78 <rcvr_datablock+0x60>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	1c5a      	adds	r2, r3, #1
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff91 	bl	8000978 <rcvr_spi_m>
        rcvr_spi_m(buff++);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff8b 	bl	8000978 <rcvr_spi_m>
    } while (btr -= 2);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	3b02      	subs	r3, #2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ed      	bne.n	8000a4a <rcvr_datablock+0x32>
    rcvr_spi();                        /* Discard CRC */
 8000a6e:	f7ff ff74 	bl	800095a <rcvr_spi>
    rcvr_spi();
 8000a72:	f7ff ff72 	bl	800095a <rcvr_spi>

    return TRUE;                    /* Return with success */
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000118 	.word	0x20000118

08000a84 <xmit_datablock>:
static
bool xmit_datablock (
    const BYTE *buff,    /* 512 byte data block to be transmitted */
    BYTE token            /* Data/Stop token */
)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
  BYTE resp, wc;
	u32 i = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]

    if (wait_ready() != 0xFF) return FALSE;
 8000a94:	f7ff ff7e 	bl	8000994 <wait_ready>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d001      	beq.n	8000aa2 <xmit_datablock+0x1e>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e040      	b.n	8000b24 <xmit_datablock+0xa0>

    xmit_spi(token);                    /* Xmit data token */
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff4b 	bl	8000940 <xmit_spi>
    if (token != 0xFD) 
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2bfd      	cmp	r3, #253	; 0xfd
 8000aae:	d031      	beq.n	8000b14 <xmit_datablock+0x90>
	{    /* Is data token */
        wc = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	73bb      	strb	r3, [r7, #14]
        do 
		{                            /* Xmit the 512 byte data block to MMC */
            xmit_spi(*buff++);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff3f 	bl	8000940 <xmit_spi>
            xmit_spi(*buff++);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff38 	bl	8000940 <xmit_spi>
        } while (--wc);
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	73bb      	strb	r3, [r7, #14]
 8000ad6:	7bbb      	ldrb	r3, [r7, #14]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1eb      	bne.n	8000ab4 <xmit_datablock+0x30>

 		rcvr_spi();
 8000adc:	f7ff ff3d 	bl	800095a <rcvr_spi>
		rcvr_spi();
 8000ae0:	f7ff ff3b 	bl	800095a <rcvr_spi>

		while (i <= 64)
 8000ae4:	e00b      	b.n	8000afe <xmit_datablock+0x7a>
		{
        	resp = rcvr_spi();                /* Reveive data response */
 8000ae6:	f7ff ff38 	bl	800095a <rcvr_spi>
 8000aea:	4603      	mov	r3, r0
 8000aec:	73fb      	strb	r3, [r7, #15]
        	if ((resp & 0x1F) == 0x05)        /* If not accepted, return with error */
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	f003 031f 	and.w	r3, r3, #31
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d006      	beq.n	8000b06 <xmit_datablock+0x82>
            	break;
			i++;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3301      	adds	r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
		while (i <= 64)
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b40      	cmp	r3, #64	; 0x40
 8000b02:	d9f0      	bls.n	8000ae6 <xmit_datablock+0x62>
 8000b04:	e000      	b.n	8000b08 <xmit_datablock+0x84>
            	break;
 8000b06:	bf00      	nop
    	}
		while (rcvr_spi() == 0);
 8000b08:	bf00      	nop
 8000b0a:	f7ff ff26 	bl	800095a <rcvr_spi>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0fa      	beq.n	8000b0a <xmit_datablock+0x86>
	}
	if ((resp & 0x1F) == 0x05)  
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	f003 031f 	and.w	r3, r3, #31
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d101      	bne.n	8000b22 <xmit_datablock+0x9e>
		return TRUE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <xmit_datablock+0xa0>
	else 
		return FALSE;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <send_cmd>:
static
BYTE send_cmd (
    BYTE cmd,        /* Command byte */
    DWORD arg        /* Argument */
)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (wait_ready() != 0xFF) return 0xFF;
 8000b38:	f7ff ff2c 	bl	8000994 <wait_ready>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2bff      	cmp	r3, #255	; 0xff
 8000b40:	d001      	beq.n	8000b46 <send_cmd+0x1a>
 8000b42:	23ff      	movs	r3, #255	; 0xff
 8000b44:	e040      	b.n	8000bc8 <send_cmd+0x9c>

    /* Send command packet */
    xmit_spi(cmd);                        /* Command */
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fef9 	bl	8000940 <xmit_spi>
    xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	0e1b      	lsrs	r3, r3, #24
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fef3 	bl	8000940 <xmit_spi>
    xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	0c1b      	lsrs	r3, r3, #16
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff feed 	bl	8000940 <xmit_spi>
    xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fee7 	bl	8000940 <xmit_spi>
    xmit_spi((BYTE)arg);                /* Argument[7..0] */
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fee2 	bl	8000940 <xmit_spi>
    n = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b40      	cmp	r3, #64	; 0x40
 8000b84:	d101      	bne.n	8000b8a <send_cmd+0x5e>
 8000b86:	2395      	movs	r3, #149	; 0x95
 8000b88:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b48      	cmp	r3, #72	; 0x48
 8000b8e:	d101      	bne.n	8000b94 <send_cmd+0x68>
 8000b90:	2387      	movs	r3, #135	; 0x87
 8000b92:	73fb      	strb	r3, [r7, #15]
    xmit_spi(n);
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fed2 	bl	8000940 <xmit_spi>

    /* Receive command response */
    if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b4c      	cmp	r3, #76	; 0x4c
 8000ba0:	d101      	bne.n	8000ba6 <send_cmd+0x7a>
 8000ba2:	f7ff feda 	bl	800095a <rcvr_spi>
    n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	73fb      	strb	r3, [r7, #15]
    do
        res = rcvr_spi();
 8000baa:	f7ff fed6 	bl	800095a <rcvr_spi>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	73bb      	strb	r3, [r7, #14]
    while ((res & 0x80) && --n);
 8000bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da05      	bge.n	8000bc6 <send_cmd+0x9a>
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f1      	bne.n	8000baa <send_cmd+0x7e>

    return res;            /* Return with the response value */
 8000bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, ocr[4];


    if (drv) return STA_NOINIT;            /* Supports only single drive */
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <disk_initialize+0x14>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e0d5      	b.n	8000d90 <disk_initialize+0x1c0>
    if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <disk_initialize+0x1c8>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <disk_initialize+0x2a>
 8000bf2:	4b69      	ldr	r3, [pc, #420]	; (8000d98 <disk_initialize+0x1c8>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	e0ca      	b.n	8000d90 <disk_initialize+0x1c0>

    power_on();                            /* Force socket power on */
 8000bfa:	f7ff fee7 	bl	80009cc <power_on>
    //send_initial_clock_train();

    SELECT();                /* CS = L */
 8000bfe:	f7ff fe5f 	bl	80008c0 <SELECT>
    ty = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73bb      	strb	r3, [r7, #14]
    if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
 8000c06:	2100      	movs	r1, #0
 8000c08:	2040      	movs	r0, #64	; 0x40
 8000c0a:	f7ff ff8f 	bl	8000b2c <send_cmd>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	f040 80a5 	bne.w	8000d60 <disk_initialize+0x190>
        Timer1 = 100;                        /* Initialization timeout of 1000 msec */
 8000c16:	4b61      	ldr	r3, [pc, #388]	; (8000d9c <disk_initialize+0x1cc>)
 8000c18:	2264      	movs	r2, #100	; 0x64
 8000c1a:	701a      	strb	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
 8000c1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c20:	2048      	movs	r0, #72	; 0x48
 8000c22:	f7ff ff83 	bl	8000b2c <send_cmd>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d158      	bne.n	8000cde <disk_initialize+0x10e>
            for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]
 8000c30:	e00c      	b.n	8000c4c <disk_initialize+0x7c>
 8000c32:	7bfc      	ldrb	r4, [r7, #15]
 8000c34:	f7ff fe91 	bl	800095a <rcvr_spi>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4423      	add	r3, r4
 8000c42:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d9ef      	bls.n	8000c32 <disk_initialize+0x62>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
 8000c52:	7abb      	ldrb	r3, [r7, #10]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	f040 8083 	bne.w	8000d60 <disk_initialize+0x190>
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	2baa      	cmp	r3, #170	; 0xaa
 8000c5e:	d17f      	bne.n	8000d60 <disk_initialize+0x190>
                do {
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 8000c60:	2100      	movs	r1, #0
 8000c62:	2077      	movs	r0, #119	; 0x77
 8000c64:	f7ff ff62 	bl	8000b2c <send_cmd>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d807      	bhi.n	8000c7e <disk_initialize+0xae>
 8000c6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c72:	2069      	movs	r0, #105	; 0x69
 8000c74:	f7ff ff5a 	bl	8000b2c <send_cmd>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d005      	beq.n	8000c8a <disk_initialize+0xba>
                } while (Timer1);
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <disk_initialize+0x1cc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d1eb      	bne.n	8000c60 <disk_initialize+0x90>
 8000c88:	e000      	b.n	8000c8c <disk_initialize+0xbc>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 8000c8a:	bf00      	nop
                if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <disk_initialize+0x1cc>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d064      	beq.n	8000d60 <disk_initialize+0x190>
 8000c96:	2100      	movs	r1, #0
 8000c98:	207a      	movs	r0, #122	; 0x7a
 8000c9a:	f7ff ff47 	bl	8000b2c <send_cmd>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d15d      	bne.n	8000d60 <disk_initialize+0x190>
                    for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e00c      	b.n	8000cc4 <disk_initialize+0xf4>
 8000caa:	7bfc      	ldrb	r4, [r7, #15]
 8000cac:	f7ff fe55 	bl	800095a <rcvr_spi>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4423      	add	r3, r4
 8000cba:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d9ef      	bls.n	8000caa <disk_initialize+0xda>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
 8000cca:	7a3b      	ldrb	r3, [r7, #8]
 8000ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <disk_initialize+0x108>
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	e000      	b.n	8000cda <disk_initialize+0x10a>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	73bb      	strb	r3, [r7, #14]
 8000cdc:	e040      	b.n	8000d60 <disk_initialize+0x190>
                }
            }
        } else {                            /* SDC Ver1 or MMC */
            ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2077      	movs	r0, #119	; 0x77
 8000ce2:	f7ff ff23 	bl	8000b2c <send_cmd>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d808      	bhi.n	8000cfe <disk_initialize+0x12e>
 8000cec:	2100      	movs	r1, #0
 8000cee:	2069      	movs	r0, #105	; 0x69
 8000cf0:	f7ff ff1c 	bl	8000b2c <send_cmd>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d801      	bhi.n	8000cfe <disk_initialize+0x12e>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e000      	b.n	8000d00 <disk_initialize+0x130>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73bb      	strb	r3, [r7, #14]
            do {
                if (ty == 2) {
 8000d02:	7bbb      	ldrb	r3, [r7, #14]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d10e      	bne.n	8000d26 <disk_initialize+0x156>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2077      	movs	r0, #119	; 0x77
 8000d0c:	f7ff ff0e 	bl	8000b2c <send_cmd>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d80e      	bhi.n	8000d34 <disk_initialize+0x164>
 8000d16:	2100      	movs	r1, #0
 8000d18:	2069      	movs	r0, #105	; 0x69
 8000d1a:	f7ff ff07 	bl	8000b2c <send_cmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d107      	bne.n	8000d34 <disk_initialize+0x164>
 8000d24:	e00d      	b.n	8000d42 <disk_initialize+0x172>
                } else {
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8000d26:	2100      	movs	r1, #0
 8000d28:	2041      	movs	r0, #65	; 0x41
 8000d2a:	f7ff feff 	bl	8000b2c <send_cmd>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <disk_initialize+0x170>
                }
            } while (Timer1);
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <disk_initialize+0x1cc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1e1      	bne.n	8000d02 <disk_initialize+0x132>
 8000d3e:	e000      	b.n	8000d42 <disk_initialize+0x172>
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8000d40:	bf00      	nop
            if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <disk_initialize+0x1cc>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d007      	beq.n	8000d5c <disk_initialize+0x18c>
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	2050      	movs	r0, #80	; 0x50
 8000d52:	f7ff feeb 	bl	8000b2c <send_cmd>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <disk_initialize+0x190>
                ty = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73bb      	strb	r3, [r7, #14]
        }
    }
    CardType = ty;
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <disk_initialize+0x1d0>)
 8000d62:	7bbb      	ldrb	r3, [r7, #14]
 8000d64:	7013      	strb	r3, [r2, #0]
    DESELECT();            /* CS = H */
 8000d66:	f7ff fdb7 	bl	80008d8 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8000d6a:	f7ff fdf6 	bl	800095a <rcvr_spi>

    if (ty)           /* Initialization succeded */
 8000d6e:	7bbb      	ldrb	r3, [r7, #14]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d008      	beq.n	8000d86 <disk_initialize+0x1b6>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <disk_initialize+0x1c8>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <disk_initialize+0x1c8>)
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e001      	b.n	8000d8a <disk_initialize+0x1ba>
	else          /* Initialization failed */
        power_off();
 8000d86:	f7ff fe3b 	bl	8000a00 <power_off>

    return Stat;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <disk_initialize+0x1c8>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2db      	uxtb	r3, r3
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000118 	.word	0x20000118
 8000da0:	2000011a 	.word	0x2000011a

08000da4 <disk_read>:
    BYTE drv,            /* Physical drive nmuber (0) */
    BYTE *buff,            /* Pointer to the data buffer to store read data */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	4613      	mov	r3, r2
 8000db6:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <disk_read+0x20>
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <disk_read+0x24>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e054      	b.n	8000e72 <disk_read+0xce>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <disk_read+0xd8>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <disk_read+0x36>
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e04b      	b.n	8000e72 <disk_read+0xce>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <disk_read+0xdc>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d102      	bne.n	8000dec <disk_read+0x48>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	025b      	lsls	r3, r3, #9
 8000dea:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8000dec:	f7ff fd68 	bl	80008c0 <SELECT>

    if (count == 1) {    /* Single block read */
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d111      	bne.n	8000e1a <disk_read+0x76>
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	2051      	movs	r0, #81	; 0x51
 8000dfa:	f7ff fe97 	bl	8000b2c <send_cmd>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d12c      	bne.n	8000e5e <disk_read+0xba>
            && rcvr_datablock(buff, 512))
 8000e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	f7ff fe05 	bl	8000a18 <rcvr_datablock>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d024      	beq.n	8000e5e <disk_read+0xba>
            count = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73bb      	strb	r3, [r7, #14]
 8000e18:	e021      	b.n	8000e5e <disk_read+0xba>
    }
    else {                /* Multiple block read */
        if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2052      	movs	r0, #82	; 0x52
 8000e1e:	f7ff fe85 	bl	8000b2c <send_cmd>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d11a      	bne.n	8000e5e <disk_read+0xba>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 8000e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e2c:	68b8      	ldr	r0, [r7, #8]
 8000e2e:	f7ff fdf3 	bl	8000a18 <rcvr_datablock>
 8000e32:	4603      	mov	r3, r0
 8000e34:	f083 0301 	eor.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10a      	bne.n	8000e54 <disk_read+0xb0>
                buff += 512;
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e44:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	73bb      	strb	r3, [r7, #14]
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1ea      	bne.n	8000e28 <disk_read+0x84>
 8000e52:	e000      	b.n	8000e56 <disk_read+0xb2>
                if (!rcvr_datablock(buff, 512)) break;
 8000e54:	bf00      	nop
            send_cmd(CMD12, 0);                /* STOP_TRANSMISSION */
 8000e56:	2100      	movs	r1, #0
 8000e58:	204c      	movs	r0, #76	; 0x4c
 8000e5a:	f7ff fe67 	bl	8000b2c <send_cmd>
        }
    }

    DESELECT();            /* CS = H */
 8000e5e:	f7ff fd3b 	bl	80008d8 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8000e62:	f7ff fd7a 	bl	800095a <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	2000011a 	.word	0x2000011a

08000e84 <disk_write>:
    BYTE drv,            /* Physical drive nmuber (0) */
    const BYTE *buff,    /* Pointer to the data to be written */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	4613      	mov	r3, r2
 8000e96:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d102      	bne.n	8000ea4 <disk_write+0x20>
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <disk_write+0x24>
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e072      	b.n	8000f8e <disk_write+0x10a>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <disk_write+0x114>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <disk_write+0x36>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e069      	b.n	8000f8e <disk_write+0x10a>
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8000eba:	4b37      	ldr	r3, [pc, #220]	; (8000f98 <disk_write+0x114>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <disk_write+0x48>
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e060      	b.n	8000f8e <disk_write+0x10a>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8000ecc:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <disk_write+0x118>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <disk_write+0x5a>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8000ede:	f7ff fcef 	bl	80008c0 <SELECT>

    if (count == 1) {    /* Single block write */
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d110      	bne.n	8000f0a <disk_write+0x86>
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	2058      	movs	r0, #88	; 0x58
 8000eec:	f7ff fe1e 	bl	8000b2c <send_cmd>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d141      	bne.n	8000f7a <disk_write+0xf6>
            && xmit_datablock(buff, 0xFE))
 8000ef6:	21fe      	movs	r1, #254	; 0xfe
 8000ef8:	68b8      	ldr	r0, [r7, #8]
 8000efa:	f7ff fdc3 	bl	8000a84 <xmit_datablock>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03a      	beq.n	8000f7a <disk_write+0xf6>
            count = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	73bb      	strb	r3, [r7, #14]
 8000f08:	e037      	b.n	8000f7a <disk_write+0xf6>
    }
    else {                /* Multiple block write */
        if (CardType & 2) {
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <disk_write+0x118>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <disk_write+0xa4>
            send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
 8000f16:	2100      	movs	r1, #0
 8000f18:	2077      	movs	r0, #119	; 0x77
 8000f1a:	f7ff fe07 	bl	8000b2c <send_cmd>
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	4619      	mov	r1, r3
 8000f22:	2057      	movs	r0, #87	; 0x57
 8000f24:	f7ff fe02 	bl	8000b2c <send_cmd>
        }
        if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	2059      	movs	r0, #89	; 0x59
 8000f2c:	f7ff fdfe 	bl	8000b2c <send_cmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d121      	bne.n	8000f7a <disk_write+0xf6>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 8000f36:	21fc      	movs	r1, #252	; 0xfc
 8000f38:	68b8      	ldr	r0, [r7, #8]
 8000f3a:	f7ff fda3 	bl	8000a84 <xmit_datablock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f083 0301 	eor.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10a      	bne.n	8000f60 <disk_write+0xdc>
                buff += 512;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f50:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1eb      	bne.n	8000f36 <disk_write+0xb2>
 8000f5e:	e000      	b.n	8000f62 <disk_write+0xde>
                if (!xmit_datablock(buff, 0xFC)) break;
 8000f60:	bf00      	nop
            if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
 8000f62:	21fd      	movs	r1, #253	; 0xfd
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff fd8d 	bl	8000a84 <xmit_datablock>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f083 0301 	eor.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <disk_write+0xf6>
                count = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73bb      	strb	r3, [r7, #14]
        }
    }

    DESELECT();            /* CS = H */
 8000f7a:	f7ff fcad 	bl	80008d8 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8000f7e:	f7ff fcec 	bl	800095a <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bf14      	ite	ne
 8000f88:	2301      	movne	r3, #1
 8000f8a:	2300      	moveq	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	2000011a 	.word	0x2000011a

08000fa0 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 8000fa4:	f000 f9a2 	bl	80012ec <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fa0b 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8000fae:	f248 00e7 	movw	r0, #32999	; 0x80e7
 8000fb2:	f000 fa07 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 8000fb6:	f248 2008 	movw	r0, #33288	; 0x8208
 8000fba:	f000 fa03 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8000fbe:	f24a 6040 	movw	r0, #42560	; 0xa640
 8000fc2:	f000 f9ff 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 8000fc6:	f24c 6048 	movw	r0, #50760	; 0xc648
 8000fca:	f000 f9fb 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8000fce:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8000fd2:	f000 f9f7 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 8000fd6:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8000fda:	f000 f9f3 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8000fde:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000fe2:	f000 f9ef 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 8000fe6:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8000fea:	f000 f9eb 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8000fee:	f24c 4083 	movw	r0, #50307	; 0xc483
 8000ff2:	f000 f9e7 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8000ff6:	f649 0050 	movw	r0, #38992	; 0x9850
 8000ffa:	f000 f9e3 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8000ffe:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8001002:	f000 f9df 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8001006:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800100a:	f000 f9db 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 800100e:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8001012:	f000 f9d7 	bl	80013c4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8001016:	f24c 0040 	movw	r0, #49216	; 0xc040
 800101a:	f000 f9d3 	bl	80013c4 <Rfm12bWriteCmd>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 800102e:	f240 320e 	movw	r2, #782	; 0x30e
 8001032:	2100      	movs	r1, #0
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f003 f9eb 	bl	8004410 <memset>
	rfm12bObj->module_addr = module_addr;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <Rfm12bTranssmitSeqByte>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 800105a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 800105e:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	b2d1      	uxtb	r1, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	7011      	strb	r1, [r2, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	791b      	ldrb	r3, [r3, #4]
 8001076:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	b29a      	uxth	r2, r3
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	4313      	orrs	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f99e 	bl	80013c4 <Rfm12bWriteCmd>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <Rfm12bStartSending>:


void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4611      	mov	r1, r2
 800109c:	461a      	mov	r2, r3
 800109e:	460b      	mov	r3, r1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	4613      	mov	r3, r2
 80010a4:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	22aa      	movs	r2, #170	; 0xaa
 80010aa:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0xAA;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	22aa      	movs	r2, #170	; 0xaa
 80010b0:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0x2D;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	222d      	movs	r2, #45	; 0x2d
 80010b6:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = 0xD4;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	22d4      	movs	r2, #212	; 0xd4
 80010bc:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = dataNb;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = toAddr;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	79ba      	ldrb	r2, [r7, #6]
 80010c8:	725a      	strb	r2, [r3, #9]
	rfm12b->txBuff.data[6] = rfm12b->module_addr;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	729a      	strb	r2, [r3, #10]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	330b      	adds	r3, #11
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 f971 	bl	80043c6 <memcpy>
	rfm12b->txBuff.pos =0;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + ALL_HEADER_SIZE;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3307      	adds	r3, #7
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 80010f4:	f000 f8f2 	bl	80012dc <rfm12bSwitchTx>
    rfm12b->state = transmit;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffa5 	bl	8001052 <Rfm12bTranssmitSeqByte>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <Rfm12bMantainSending>:



void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos <= rfm12b->txBuff.dataNb){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	429a      	cmp	r2, r3
 8001126:	d804      	bhi.n	8001132 <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff91 	bl	8001052 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8001130:	e005      	b.n	800113e <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 800113a:	f000 f8c7 	bl	80012cc <rfm12bSwitchRx>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001154:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f003 f958 	bl	8004410 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f203 110b 	addw	r1, r3, #267	; 0x10b
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	f003 f926 	bl	80043c6 <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800118e:	b2da      	uxtb	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800119c:	b2da      	uxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80011aa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 f92d 	bl	8004410 <memset>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 80011ce:	f000 f863 	bl	8001298 <rfm12bFifoReset>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 80011e4:	f000 f864 	bl	80012b0 <rfm12bReadFifo>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	b2d1      	uxtb	r1, r2
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == (rfm12b->rxBuff.dataNb + L2_HEADER_SIZE)){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800122e:	b2db      	uxtb	r3, r3
 8001230:	3303      	adds	r3, #3
 8001232:	429a      	cmp	r2, r3
 8001234:	d10b      	bne.n	800124e <Rfm12bMantainreceiving+0x72>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff85 	bl	8001146 <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffbe 	bl	80011be <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <Rfm12bMantainreceiving+0x7c>)
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <Rfm12bMantainreceiving+0x7c>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800124c:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40011000 	.word	0x40011000

0800125c <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 f8ad 	bl	80013c4 <Rfm12bWriteCmd>
 800126a:	4603      	mov	r3, r0
 800126c:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 800126e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da0c      	bge.n	8001290 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d103      	bne.n	800128a <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff44 	bl	8001110 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8001288:	e002      	b.n	8001290 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa6 	bl	80011dc <Rfm12bMantainreceiving>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 800129c:	f64c 2081 	movw	r0, #51841	; 0xca81
 80012a0:	f000 f890 	bl	80013c4 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 80012a4:	f64c 2083 	movw	r0, #51843	; 0xca83
 80012a8:	f000 f88c 	bl	80013c4 <Rfm12bWriteCmd>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 80012b6:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80012ba:	f000 f883 	bl	80013c4 <Rfm12bWriteCmd>
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 80012d0:	f248 2099 	movw	r0, #33433	; 0x8299
 80012d4:	f000 f876 	bl	80013c4 <Rfm12bWriteCmd>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 80012e0:	f248 2039 	movw	r0, #33337	; 0x8239
 80012e4:	f000 f86e 	bl	80013c4 <Rfm12bWriteCmd>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80012f2:	2101      	movs	r1, #1
 80012f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012f8:	f7ff f9f0 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80012fc:	2101      	movs	r1, #1
 80012fe:	2004      	movs	r0, #4
 8001300:	f7ff f9ec 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001304:	2101      	movs	r1, #1
 8001306:	2008      	movs	r0, #8
 8001308:	f7ff f9e8 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 800130c:	23e0      	movs	r3, #224	; 0xe0
 800130e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001310:	2318      	movs	r3, #24
 8001312:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001314:	2301      	movs	r3, #1
 8001316:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	4825      	ldr	r0, [pc, #148]	; (80013b4 <Rfm12bSpiInit+0xc8>)
 8001320:	f7ff f904 	bl	800052c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001324:	2340      	movs	r3, #64	; 0x40
 8001326:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001328:	2310      	movs	r3, #16
 800132a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800132c:	2301      	movs	r3, #1
 800132e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <Rfm12bSpiInit+0xcc>)
 8001338:	f7ff f8f8 	bl	800052c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800133c:	2300      	movs	r3, #0
 800133e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001340:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001344:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8001346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134a:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800134c:	2300      	movs	r3, #0
 800134e:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001350:	2300      	movs	r3, #0
 8001352:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001358:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 800135a:	2330      	movs	r3, #48	; 0x30
 800135c:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800135e:	2300      	movs	r3, #0
 8001360:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001362:	2307      	movs	r3, #7
 8001364:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8001366:	2101      	movs	r1, #1
 8001368:	4814      	ldr	r0, [pc, #80]	; (80013bc <Rfm12bSpiInit+0xd0>)
 800136a:	f7ff fa6f 	bl	800084c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <Rfm12bSpiInit+0xd0>)
 8001376:	f7ff f9ed 	bl	8000754 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 800137a:	2101      	movs	r1, #1
 800137c:	480f      	ldr	r0, [pc, #60]	; (80013bc <Rfm12bSpiInit+0xd0>)
 800137e:	f7ff fa2c 	bl	80007da <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <Rfm12bSpiInit+0xd4>)
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <Rfm12bSpiInit+0xd4>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 800138e:	2310      	movs	r3, #16
 8001390:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8001392:	2302      	movs	r3, #2
 8001394:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8001396:	2302      	movs	r3, #2
 8001398:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <Rfm12bSpiInit+0xcc>)
 80013a0:	f7ff f8c4 	bl	800052c <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 80013a4:	2102      	movs	r1, #2
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <Rfm12bSpiInit+0xcc>)
 80013a8:	f7ff f97c 	bl	80006a4 <GPIO_SetBits>
}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010800 	.word	0x40010800
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40013000 	.word	0x40013000
 80013c0:	40021000 	.word	0x40021000

080013c4 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 80013ce:	2102      	movs	r1, #2
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <Rfm12bWriteCmd+0x58>)
 80013d2:	f7ff f975 	bl	80006c0 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80013d6:	bf00      	nop
 80013d8:	2102      	movs	r1, #2
 80013da:	4811      	ldr	r0, [pc, #68]	; (8001420 <Rfm12bWriteCmd+0x5c>)
 80013dc:	f7ff fa55 	bl	800088a <SPI_I2S_GetFlagStatus>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f8      	beq.n	80013d8 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <Rfm12bWriteCmd+0x5c>)
 80013ec:	f7ff fa14 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 80013f0:	bf00      	nop
 80013f2:	2101      	movs	r1, #1
 80013f4:	480a      	ldr	r0, [pc, #40]	; (8001420 <Rfm12bWriteCmd+0x5c>)
 80013f6:	f7ff fa48 	bl	800088a <SPI_I2S_GetFlagStatus>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f8      	beq.n	80013f2 <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8001400:	4807      	ldr	r0, [pc, #28]	; (8001420 <Rfm12bWriteCmd+0x5c>)
 8001402:	f7ff fa17 	bl	8000834 <SPI_I2S_ReceiveData>
 8001406:	4603      	mov	r3, r0
 8001408:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 800140a:	2102      	movs	r1, #2
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <Rfm12bWriteCmd+0x58>)
 800140e:	f7ff f949 	bl	80006a4 <GPIO_SetBits>

	return recData;
 8001412:	89fb      	ldrh	r3, [r7, #14]

}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010c00 	.word	0x40010c00
 8001420:	40013000 	.word	0x40013000

08001424 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <NVIC_EnableIRQ+0x2c>)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	095b      	lsrs	r3, r3, #5
 8001436:	79fa      	ldrb	r2, [r7, #7]
 8001438:	f002 021f 	and.w	r2, r2, #31
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100

08001454 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <EnableGpioClk+0x68>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d106      	bne.n	8001472 <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001464:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <EnableGpioClk+0x6c>)
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <EnableGpioClk+0x6c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8001470:	e01f      	b.n	80014b2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <EnableGpioClk+0x70>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d106      	bne.n	8001488 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <EnableGpioClk+0x6c>)
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <EnableGpioClk+0x6c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	6193      	str	r3, [r2, #24]
	 		 }
 8001486:	e014      	b.n	80014b2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <EnableGpioClk+0x74>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d106      	bne.n	800149e <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <EnableGpioClk+0x6c>)
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <EnableGpioClk+0x6c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6193      	str	r3, [r2, #24]
	 		 }
 800149c:	e009      	b.n	80014b2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <EnableGpioClk+0x78>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d105      	bne.n	80014b2 <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <EnableGpioClk+0x6c>)
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <EnableGpioClk+0x6c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	6193      	str	r3, [r2, #24]
	 		 }
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400

080014d0 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	2b07      	cmp	r3, #7
 80014e0:	d81d      	bhi.n	800151e <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	2103      	movs	r1, #3
 80014ea:	fa01 f202 	lsl.w	r2, r1, r2
 80014ee:	43d2      	mvns	r2, r2
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	78fa      	ldrb	r2, [r7, #3]
 80014fc:	2103      	movs	r1, #3
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	43d2      	mvns	r2, r2
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 800151c:	e023      	b.n	8001566 <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	3a08      	subs	r2, #8
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	2103      	movs	r1, #3
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	43d2      	mvns	r2, r2
 8001530:	401a      	ands	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	3a08      	subs	r2, #8
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	2103      	movs	r1, #3
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	43d2      	mvns	r2, r2
 8001548:	401a      	ands	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	3a08      	subs	r2, #8
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	3202      	adds	r2, #2
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	605a      	str	r2, [r3, #4]
	 		 }
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	2b07      	cmp	r3, #7
 8001580:	d82b      	bhi.n	80015da <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	2103      	movs	r1, #3
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	3202      	adds	r2, #2
 80015a2:	2103      	movs	r1, #3
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	401a      	ands	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	3202      	adds	r2, #2
 80015ba:	2102      	movs	r1, #2
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 80015d8:	e02d      	b.n	8001636 <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	3a08      	subs	r2, #8
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	2103      	movs	r1, #3
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	43d2      	mvns	r2, r2
 80015ec:	401a      	ands	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	3a08      	subs	r2, #8
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	3202      	adds	r2, #2
 80015fe:	2103      	movs	r1, #3
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	43d2      	mvns	r2, r2
 8001606:	401a      	ands	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	3a08      	subs	r2, #8
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	3202      	adds	r2, #2
 8001618:	2102      	movs	r1, #2
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60da      	str	r2, [r3, #12]
	 		 }
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b07      	cmp	r3, #7
 8001650:	d92f      	bls.n	80016b2 <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	3a08      	subs	r2, #8
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	2103      	movs	r1, #3
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	43d2      	mvns	r2, r2
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	3a08      	subs	r2, #8
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	3202      	adds	r2, #2
 8001676:	2103      	movs	r1, #3
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	43d2      	mvns	r2, r2
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	3a08      	subs	r2, #8
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	2101      	movs	r1, #1
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	3a08      	subs	r2, #8
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	3202      	adds	r2, #2
 80016a6:	2102      	movs	r1, #2
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	70fb      	strb	r3, [r7, #3]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70bb      	strb	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80016d6:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <EnableExti+0x84>)
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <EnableExti+0x84>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <EnableExti+0x88>)
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <EnableExti+0x88>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 80016ee:	4916      	ldr	r1, [pc, #88]	; (8001748 <EnableExti+0x8c>)
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <EnableExti+0x8c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	2001      	movs	r0, #1
 80016f8:	fa00 f202 	lsl.w	r2, r0, r2
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8001700:	78bb      	ldrb	r3, [r7, #2]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 8001706:	4910      	ldr	r1, [pc, #64]	; (8001748 <EnableExti+0x8c>)
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <EnableExti+0x8c>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	2001      	movs	r0, #1
 8001710:	fa00 f202 	lsl.w	r2, r0, r2
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 800171e:	490a      	ldr	r1, [pc, #40]	; (8001748 <EnableExti+0x8c>)
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <EnableExti+0x8c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	2001      	movs	r0, #1
 8001728:	fa00 f202 	lsl.w	r2, r0, r2
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001730:	2017      	movs	r0, #23
 8001732:	f7ff fe77 	bl	8001424 <NVIC_EnableIRQ>
	 		 }
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	40010400 	.word	0x40010400

0800174c <EnableExtiGeneral>:




			 	 void EnableExtiGeneral(uint8_t gpioPortNb, uint8_t pinNb, bool rise, bool fall){
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	4604      	mov	r4, r0
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	4603      	mov	r3, r0
 8001760:	71bb      	strb	r3, [r7, #6]
 8001762:	460b      	mov	r3, r1
 8001764:	717b      	strb	r3, [r7, #5]
 8001766:	4613      	mov	r3, r2
 8001768:	713b      	strb	r3, [r7, #4]
		 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800176a:	4a31      	ldr	r2, [pc, #196]	; (8001830 <EnableExtiGeneral+0xe4>)
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <EnableExtiGeneral+0xe4>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6193      	str	r3, [r2, #24]
		 		 	AFIO->EXTICR[pinNb >> 0x02] |= ((gpioPortNb) << (0x04 * (pinNb & 0x03)));
 8001776:	482f      	ldr	r0, [pc, #188]	; (8001834 <EnableExtiGeneral+0xe8>)
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461c      	mov	r4, r3
 8001780:	4a2c      	ldr	r2, [pc, #176]	; (8001834 <EnableExtiGeneral+0xe8>)
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	79f9      	ldrb	r1, [r7, #7]
 8001790:	79ba      	ldrb	r2, [r7, #6]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	fa01 f202 	lsl.w	r2, r1, r2
 800179c:	431a      	orrs	r2, r3
 800179e:	1ca3      	adds	r3, r4, #2
 80017a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		 		 	EXTI->IMR  |= (1<<pinNb);
 80017a4:	4924      	ldr	r1, [pc, #144]	; (8001838 <EnableExtiGeneral+0xec>)
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <EnableExtiGeneral+0xec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	79ba      	ldrb	r2, [r7, #6]
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
		 		 	if (rise){
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <EnableExtiGeneral+0x82>
		 		 		EXTI->RTSR |= (1<<pinNb);
 80017bc:	491e      	ldr	r1, [pc, #120]	; (8001838 <EnableExtiGeneral+0xec>)
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <EnableExtiGeneral+0xec>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	79ba      	ldrb	r2, [r7, #6]
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
		 		 	}
		 		 	if (fall){
 80017ce:	793b      	ldrb	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <EnableExtiGeneral+0x9a>
		 		 		EXTI->FTSR |= (1<<pinNb);
 80017d4:	4918      	ldr	r1, [pc, #96]	; (8001838 <EnableExtiGeneral+0xec>)
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <EnableExtiGeneral+0xec>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	79ba      	ldrb	r2, [r7, #6]
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60cb      	str	r3, [r1, #12]
		 		 	}


		 		 	uint8_t irqNb;

		 		 	if (pinNb >=0  && pinNb <=3){
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d806      	bhi.n	80017fa <EnableExtiGeneral+0xae>
		 		 		const uint8_t irqOffset = 6;
 80017ec:	2306      	movs	r3, #6
 80017ee:	73bb      	strb	r3, [r7, #14]
		 		 		irqNb = (pinNb +  irqOffset);
 80017f0:	79ba      	ldrb	r2, [r7, #6]
 80017f2:	7bbb      	ldrb	r3, [r7, #14]
 80017f4:	4413      	add	r3, r2
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e010      	b.n	800181c <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=5  && pinNb <9){
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d905      	bls.n	800180c <EnableExtiGeneral+0xc0>
 8001800:	79bb      	ldrb	r3, [r7, #6]
 8001802:	2b08      	cmp	r3, #8
 8001804:	d802      	bhi.n	800180c <EnableExtiGeneral+0xc0>
		 		 		irqNb = EXTI9_5_IRQn;
 8001806:	2317      	movs	r3, #23
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	e007      	b.n	800181c <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=10  && pinNb <=15){
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	2b09      	cmp	r3, #9
 8001810:	d904      	bls.n	800181c <EnableExtiGeneral+0xd0>
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d801      	bhi.n	800181c <EnableExtiGeneral+0xd0>
		 		 		irqNb = EXTI15_10_IRQn;
 8001818:	2328      	movs	r3, #40	; 0x28
 800181a:	73fb      	strb	r3, [r7, #15]
		 		 	}


		 		 	NVIC_EnableIRQ(irqNb);
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fdff 	bl	8001424 <NVIC_EnableIRQ>



		 		 }
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	40010400 	.word	0x40010400

0800183c <NVIC_EnableIRQ>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <NVIC_EnableIRQ+0x2c>)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	095b      	lsrs	r3, r3, #5
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f202 	lsl.w	r2, r0, r2
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100

0800186c <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 8001870:	2020      	movs	r0, #32
 8001872:	f7fe fe4d 	bl	8000510 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 8001876:	4802      	ldr	r0, [pc, #8]	; (8001880 <EXTI9_5_IRQHandler+0x14>)
 8001878:	f7ff fcf0 	bl	800125c <Rfm12bIrqCallback>

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000011c 	.word	0x2000011c

08001884 <_Z9ReadTouchv>:




void ReadTouch(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0


	uint16_t TouchXval;
	uint16_t TouchYval;;

	CS_LOW
 800188a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <_Z9ReadTouchv+0x44>)
 8001890:	f7fe ff16 	bl	80006c0 <GPIO_ResetBits>

	SpiTransmit(0xD2);
 8001894:	20d2      	movs	r0, #210	; 0xd2
 8001896:	f000 fb13 	bl	8001ec0 <SpiTransmit>
	TouchXval = SpiTransmit(0x00);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 fb10 	bl	8001ec0 <SpiTransmit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	80fb      	strh	r3, [r7, #6]

	SpiTransmit(0x92);
 80018a4:	2092      	movs	r0, #146	; 0x92
 80018a6:	f000 fb0b 	bl	8001ec0 <SpiTransmit>
	TouchYval = SpiTransmit(0x00);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 fb08 	bl	8001ec0 <SpiTransmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	80bb      	strh	r3, [r7, #4]

	CS_HIGH
 80018b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <_Z9ReadTouchv+0x44>)
 80018ba:	f7fe fef3 	bl	80006a4 <GPIO_SetBits>

}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40010800 	.word	0x40010800

080018cc <EXTI15_10_IRQHandler>:



extern "C" void EXTI15_10_IRQHandler (void);

void EXTI15_10_IRQHandler (void){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	ReadTouch();
 80018d0:	f7ff ffd8 	bl	8001884 <_Z9ReadTouchv>
	EXTI_ClearFlag(EXTI_Line12);
 80018d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018d8:	f7fe fe0c 	bl	80004f4 <EXTI_ClearFlag>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff fbbb 	bl	8001090 <Rfm12bStartSending>
	return buffLen;
 800191a:	887b      	ldrh	r3, [r7, #2]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800193c:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd17      	ble.n	8001974 <_Z10broker_recPvP11sockaddr_inPht+0x50>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	4293      	cmp	r3, r2
 800194a:	bfa8      	it	ge
 800194c:	4613      	movge	r3, r2
 800194e:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001956:	7dfa      	ldrb	r2, [r7, #23]
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f002 fd33 	bl	80043c6 <memcpy>
		obj->completedRxBuff.dataNb = 0;
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		sockaddr->sin_addr.s_addr = obj->completedRxBuff.rxFromAddr;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800196e:	461a      	mov	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	605a      	str	r2, [r3, #4]
	}

	return byteNb;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <_Z9_delay_msm>:


void _delay_ms(uint32_t x){
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	;
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
	...

080019a8 <_Z11intToStringB5cxx11m>:



std::string intToString(uint32_t intVal){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
	/*due to not available "to_string()" c++11 func*/
	const uint8_t intSize = 8;
 80019b2:	2308      	movs	r3, #8
 80019b4:	75fb      	strb	r3, [r7, #23]
	char charVal[intSize];
	snprintf(charVal, intSize, "%u", intVal);
 80019b6:	f107 000c 	add.w	r0, r7, #12
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <_Z11intToStringB5cxx11m+0x4c>)
 80019be:	2108      	movs	r1, #8
 80019c0:	f002 fe2c 	bl	800461c <sniprintf>
	std::string strVal(charVal);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fa6d 	bl	8003ea8 <_ZNSaIcEC1Ev>
 80019ce:	f107 0214 	add.w	r2, r7, #20
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f002 fb1b 	bl	8004014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fa61 	bl	8003eaa <_ZNSaIcED1Ev>
	return strVal;
 80019e8:	bf00      	nop
}
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	08004d5c 	.word	0x08004d5c

080019f8 <main>:

}



int main(){
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	f5ad 5dce 	sub.w	sp, sp, #6592	; 0x19c0
 80019fe:	af02      	add	r7, sp, #8

	spiInit();
 8001a00:	f000 f9fe 	bl	8001e00 <spiInit>


	SetGpioAsInFloating(GPIOA, 12);
 8001a04:	210c      	movs	r1, #12
 8001a06:	48d7      	ldr	r0, [pc, #860]	; (8001d64 <main+0x36c>)
 8001a08:	f7ff fd62 	bl	80014d0 <SetGpioAsInFloating>
	EnableExtiGeneral(0, 12, false, true);
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	210c      	movs	r1, #12
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fe9a 	bl	800174c <EnableExtiGeneral>


	uint8_t buffSD[2048];
	memset(buffSD, 0, 2048);
 8001a18:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001a1c:	f103 031c 	add.w	r3, r3, #28
 8001a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fcf2 	bl	8004410 <memset>
	disk_initialize(0);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff f8cf 	bl	8000bd0 <disk_initialize>

	uint8_t inputBuff[128];
	memset(inputBuff, 'x', 128);
 8001a32:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001a36:	f103 031c 	add.w	r3, r3, #28
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	2178      	movs	r1, #120	; 0x78
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fce6 	bl	8004410 <memset>
	disk_write(0,inputBuff,0, 1);
 8001a44:	f507 5188 	add.w	r1, r7, #4352	; 0x1100
 8001a48:	f101 011c 	add.w	r1, r1, #28
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fa17 	bl	8000e84 <disk_write>
	disk_read(0,buffSD,0, 1);
 8001a56:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001a5a:	f101 011c 	add.w	r1, r1, #28
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2200      	movs	r2, #0
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff f99e 	bl	8000da4 <disk_read>


	 TM_ILI9341_Init();
 8001a68:	f000 fbbe 	bl	80021e8 <TM_ILI9341_Init>


	  TM_ILI9341_DrawPixel(10, 10, ILI9341_COLOR_ORANGE);
 8001a6c:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8001a70:	210a      	movs	r1, #10
 8001a72:	200a      	movs	r0, #10
 8001a74:	f000 fd9a 	bl	80025ac <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(11, 11, ILI9341_COLOR_ORANGE);
 8001a78:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8001a7c:	210b      	movs	r1, #11
 8001a7e:	200b      	movs	r0, #11
 8001a80:	f000 fd94 	bl	80025ac <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(12, 12, ILI9341_COLOR_ORANGE);
 8001a84:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8001a88:	210c      	movs	r1, #12
 8001a8a:	200c      	movs	r0, #12
 8001a8c:	f000 fd8e 	bl	80025ac <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(20, 20, ILI9341_COLOR_YELLOW);
 8001a90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a94:	2114      	movs	r1, #20
 8001a96:	2014      	movs	r0, #20
 8001a98:	f000 fd88 	bl	80025ac <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(30, 30, ILI9341_COLOR_BLUE);
 8001a9c:	221f      	movs	r2, #31
 8001a9e:	211e      	movs	r1, #30
 8001aa0:	201e      	movs	r0, #30
 8001aa2:	f000 fd83 	bl	80025ac <TM_ILI9341_DrawPixel>





	 TM_ILI9341_Puts(0,0, "Temp.  22.46", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	231f      	movs	r3, #31
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4bae      	ldr	r3, [pc, #696]	; (8001d68 <main+0x370>)
 8001ab0:	4aae      	ldr	r2, [pc, #696]	; (8001d6c <main+0x374>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f001 f805 	bl	8002ac4 <TM_ILI9341_Puts>
	// TM_ILI9341_Puts(0,25, "Hum.  57%", &TM_Font_16x26, ILI9341_COLOR_CYAN, ILI9341_COLOR_BLACK);
	 TM_ILI9341_Puts(0,50, "Out1  ON", &TM_Font_16x26, ILI9341_COLOR_GREEN, ILI9341_COLOR_BLACK);
 8001aba:	2300      	movs	r3, #0
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4ba8      	ldr	r3, [pc, #672]	; (8001d68 <main+0x370>)
 8001ac6:	4aaa      	ldr	r2, [pc, #680]	; (8001d70 <main+0x378>)
 8001ac8:	2132      	movs	r1, #50	; 0x32
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 fffa 	bl	8002ac4 <TM_ILI9341_Puts>
	 TM_ILI9341_Puts(0,75, "Out2  OFF", &TM_Font_16x26, ILI9341_COLOR_GRAY, ILI9341_COLOR_BLACK);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4ba3      	ldr	r3, [pc, #652]	; (8001d68 <main+0x370>)
 8001adc:	4aa5      	ldr	r2, [pc, #660]	; (8001d74 <main+0x37c>)
 8001ade:	214b      	movs	r1, #75	; 0x4b
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 ffef 	bl	8002ac4 <TM_ILI9341_Puts>





 	EnableGpioClk(LOG_UART_PORT);
 8001ae6:	489f      	ldr	r0, [pc, #636]	; (8001d64 <main+0x36c>)
 8001ae8:	f7ff fcb4 	bl	8001454 <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8001aec:	2109      	movs	r1, #9
 8001aee:	489d      	ldr	r0, [pc, #628]	; (8001d64 <main+0x36c>)
 8001af0:	f7ff fda6 	bl	8001640 <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8001af4:	210a      	movs	r1, #10
 8001af6:	489b      	ldr	r0, [pc, #620]	; (8001d64 <main+0x36c>)
 8001af8:	f7ff fcea 	bl	80014d0 <SetGpioAsInFloating>
 	EnableUart(USART1);
 8001afc:	489e      	ldr	r0, [pc, #632]	; (8001d78 <main+0x380>)
 8001afe:	f000 f951 	bl	8001da4 <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001b02:	2101      	movs	r1, #1
 8001b04:	2010      	movs	r0, #16
 8001b06:	f7fe fde9 	bl	80006dc <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8001b0a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001b0e:	f103 0318 	add.w	r3, r3, #24
 8001b12:	2210      	movs	r2, #16
 8001b14:	70da      	strb	r2, [r3, #3]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8001b16:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001b1a:	f103 0318 	add.w	r3, r3, #24
 8001b1e:	2202      	movs	r2, #2
 8001b20:	709a      	strb	r2, [r3, #2]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 8001b22:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001b26:	f103 0318 	add.w	r3, r3, #24
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	801a      	strh	r2, [r3, #0]
 	GPIO_Init(GPIOC, &PORT);
 8001b30:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001b34:	f103 0318 	add.w	r3, r3, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4890      	ldr	r0, [pc, #576]	; (8001d7c <main+0x384>)
 8001b3c:	f7fe fcf6 	bl	800052c <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 8001b40:	4a8e      	ldr	r2, [pc, #568]	; (8001d7c <main+0x384>)
 8001b42:	4b8e      	ldr	r3, [pc, #568]	; (8001d7c <main+0x384>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4a:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 8001b4c:	f7ff fa28 	bl	8000fa0 <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 8001b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b54:	f7ff ff1e 	bl	8001994 <_Z9_delay_msm>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff fc33 	bl	80013c4 <Rfm12bWriteCmd>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f507 52cd 	add.w	r2, r7, #6560	; 0x19a0
 8001b64:	f102 0215 	add.w	r2, r2, #21
 8001b68:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2008      	movs	r0, #8
 8001b6e:	f7fe fdb5 	bl	80006dc <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 8001b72:	2301      	movs	r3, #1
 8001b74:	2200      	movs	r2, #0
 8001b76:	2105      	movs	r1, #5
 8001b78:	4881      	ldr	r0, [pc, #516]	; (8001d80 <main+0x388>)
 8001b7a:	f7ff fd9f 	bl	80016bc <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 8001b7e:	2105      	movs	r1, #5
 8001b80:	487f      	ldr	r0, [pc, #508]	; (8001d80 <main+0x388>)
 8001b82:	f7ff fcf5 	bl	8001570 <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 8001b86:	210b      	movs	r1, #11
 8001b88:	487d      	ldr	r0, [pc, #500]	; (8001d80 <main+0x388>)
 8001b8a:	f7ff fcf1 	bl	8001570 <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 8001b8e:	f7ff fb83 	bl	8001298 <rfm12bFifoReset>
 	rfm12bSwitchRx();
 8001b92:	f7ff fb9b 	bl	80012cc <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b96:	2017      	movs	r0, #23
 8001b98:	f7ff fe50 	bl	800183c <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4879      	ldr	r0, [pc, #484]	; (8001d84 <main+0x38c>)
 8001ba0:	f7ff fa3f 	bl	8001022 <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 8001ba4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ba8:	4a76      	ldr	r2, [pc, #472]	; (8001d84 <main+0x38c>)
 8001baa:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 8001bac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bb0:	4a75      	ldr	r2, [pc, #468]	; (8001d88 <main+0x390>)
 8001bb2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 8001bb6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bba:	4a74      	ldr	r2, [pc, #464]	; (8001d8c <main+0x394>)
 8001bbc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 8001bc0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bc4:	4a72      	ldr	r2, [pc, #456]	; (8001d90 <main+0x398>)
 8001bc6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 8001bca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001bce:	4a71      	ldr	r2, [pc, #452]	; (8001d94 <main+0x39c>)
 8001bd0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8001bd4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001bd8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001bdc:	3b1c      	subs	r3, #28
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 f859 	bl	8002c98 <broker_init_by_given_net>

	sockaddr_t sockaddr;
	uint8_t frameBuff[MAX_FRAME_SIZE];


uint16_t i =0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f507 52cd 	add.w	r2, r7, #6560	; 0x19a0
 8001bec:	f102 0216 	add.w	r2, r2, #22
 8001bf0:	8013      	strh	r3, [r2, #0]
	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8001bf2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001bf6:	3a0c      	subs	r2, #12
 8001bf8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001bfc:	391c      	subs	r1, #28
 8001bfe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001c02:	3b1c      	subs	r3, #28
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 f896 	bl	8002d36 <broker_receive>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8082 	beq.w	8001d16 <main+0x31e>
	 			if (frameBuff[42] == 'T'){
 8001c12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c16:	3b1c      	subs	r3, #28
 8001c18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c1c:	2b54      	cmp	r3, #84	; 0x54
 8001c1e:	d10a      	bne.n	8001c36 <main+0x23e>
	 				TM_ILI9341_Puts(0,0, "Temp.  99.88", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	231f      	movs	r3, #31
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4b4f      	ldr	r3, [pc, #316]	; (8001d68 <main+0x370>)
 8001c2a:	4a5b      	ldr	r2, [pc, #364]	; (8001d98 <main+0x3a0>)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 ff48 	bl	8002ac4 <TM_ILI9341_Puts>
 8001c34:	e063      	b.n	8001cfe <main+0x306>
	 			} else{
	 				TM_ILI9341_Puts(0,25, "cnt: ", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001c36:	2300      	movs	r3, #0
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	231f      	movs	r3, #31
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <main+0x370>)
 8001c40:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <main+0x3a4>)
 8001c42:	2119      	movs	r1, #25
 8001c44:	2000      	movs	r0, #0
 8001c46:	f000 ff3d 	bl	8002ac4 <TM_ILI9341_Puts>
	 				i++;
 8001c4a:	f507 53cd 	add.w	r3, r7, #6560	; 0x19a0
 8001c4e:	f103 0316 	add.w	r3, r3, #22
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	f507 52cd 	add.w	r2, r7, #6560	; 0x19a0
 8001c5a:	f102 0216 	add.w	r2, r2, #22
 8001c5e:	8013      	strh	r3, [r2, #0]
	 				std::string cnt;
 8001c60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c64:	3b14      	subs	r3, #20
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 f97c 	bl	8003f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	 				cnt = intToString(i);
 8001c6c:	f507 53cd 	add.w	r3, r7, #6560	; 0x19a0
 8001c70:	f103 0316 	add.w	r3, r3, #22
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	f507 53cc 	add.w	r3, r7, #6528	; 0x1980
 8001c7a:	f103 031c 	add.w	r3, r3, #28
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fe91 	bl	80019a8 <_Z11intToStringB5cxx11m>
 8001c86:	f507 52cc 	add.w	r2, r7, #6528	; 0x1980
 8001c8a:	f102 021c 	add.w	r2, r2, #28
 8001c8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c92:	3b14      	subs	r3, #20
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 f971 	bl	8003f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001c9c:	f507 53cc 	add.w	r3, r7, #6528	; 0x1980
 8001ca0:	f103 031c 	add.w	r3, r3, #28
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 f964 	bl	8003f72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	 				frameBuff[86]=0;
 8001caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cae:	3b1c      	subs	r3, #28
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	 				TM_ILI9341_Puts(100,25, (char*) cnt.data(), &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001cb6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cba:	3b14      	subs	r3, #20
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 f983 	bl	8003fc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	231f      	movs	r3, #31
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <main+0x370>)
 8001cce:	2119      	movs	r1, #25
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	f000 fef7 	bl	8002ac4 <TM_ILI9341_Puts>
	 				TM_ILI9341_Puts(100,50, (char*) &frameBuff[16], &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001cd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cda:	3b1c      	subs	r3, #28
 8001cdc:	f103 0210 	add.w	r2, r3, #16
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	231f      	movs	r3, #31
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <main+0x370>)
 8001cea:	2132      	movs	r1, #50	; 0x32
 8001cec:	2064      	movs	r0, #100	; 0x64
 8001cee:	f000 fee9 	bl	8002ac4 <TM_ILI9341_Puts>
	 				std::string cnt;
 8001cf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cf6:	3b14      	subs	r3, #20
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 f93a 	bl	8003f72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>





	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 8001cfe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001d02:	3a0c      	subs	r2, #12
 8001d04:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001d08:	391c      	subs	r1, #28
 8001d0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001d0e:	3b1c      	subs	r3, #28
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 f829 	bl	8002d68 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <main+0x388>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f43f af62 	beq.w	8001bf2 <main+0x1fa>
	 			  uint8_t buff[] = "abcdefghijabcdefghijabcdefghij";
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	3b14      	subs	r3, #20
 8001d34:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <main+0x3a8>)
 8001d36:	461c      	mov	r4, r3
 8001d38:	4615      	mov	r5, r2
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d42:	c407      	stmia	r4!, {r0, r1, r2}
 8001d44:	8023      	strh	r3, [r4, #0]
 8001d46:	3402      	adds	r4, #2
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	7023      	strb	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 8001d4c:	f107 0118 	add.w	r1, r7, #24
 8001d50:	3914      	subs	r1, #20
 8001d52:	2302      	movs	r3, #2
 8001d54:	221e      	movs	r2, #30
 8001d56:	480b      	ldr	r0, [pc, #44]	; (8001d84 <main+0x38c>)
 8001d58:	f7ff f99a 	bl	8001090 <Rfm12bStartSending>
	 			 _delay_ms(250);
 8001d5c:	20fa      	movs	r0, #250	; 0xfa
 8001d5e:	f7ff fe19 	bl	8001994 <_Z9_delay_msm>
	 		  }




	 	}
 8001d62:	e746      	b.n	8001bf2 <main+0x1fa>
 8001d64:	40010800 	.word	0x40010800
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	08004d60 	.word	0x08004d60
 8001d70:	08004d70 	.word	0x08004d70
 8001d74:	08004d7c 	.word	0x08004d7c
 8001d78:	40013800 	.word	0x40013800
 8001d7c:	40011000 	.word	0x40011000
 8001d80:	40010c00 	.word	0x40010c00
 8001d84:	2000011c 	.word	0x2000011c
 8001d88:	080018e1 	.word	0x080018e1
 8001d8c:	080018f7 	.word	0x080018f7
 8001d90:	08001925 	.word	0x08001925
 8001d94:	0800197f 	.word	0x0800197f
 8001d98:	08004d88 	.word	0x08004d88
 8001d9c:	08004d98 	.word	0x08004d98
 8001da0:	08004da0 	.word	0x08004da0

08001da4 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001dac:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <EnableUart+0x58>)
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <EnableUart+0x58>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001dbe:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	899b      	ldrh	r3, [r3, #12]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	899b      	ldrh	r3, [r3, #12]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f043 0308 	orr.w	r3, r3, #8
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	899b      	ldrh	r3, [r3, #12]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	819a      	strh	r2, [r3, #12]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000

08001e00 <spiInit>:

#include "stdint.h"
#include "spi.h"
#include "stm32f10x.h"

void spiInit(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001e06:	2101      	movs	r1, #1
 8001e08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e0c:	f7fe fc84 	bl	8000718 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001e10:	2101      	movs	r1, #1
 8001e12:	2004      	movs	r0, #4
 8001e14:	f7fe fc62 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	2008      	movs	r0, #8
 8001e1c:	f7fe fc5e 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001e20:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e24:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001e26:	2318      	movs	r3, #24
 8001e28:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4619      	mov	r1, r3
 8001e32:	4820      	ldr	r0, [pc, #128]	; (8001eb4 <spiInit+0xb4>)
 8001e34:	f7fe fb7a 	bl	800052c <GPIO_Init>


	//CS touch hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001e38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e3c:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001e42:	2301      	movs	r3, #1
 8001e44:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001e46:	463b      	mov	r3, r7
 8001e48:	4619      	mov	r1, r3
 8001e4a:	481b      	ldr	r0, [pc, #108]	; (8001eb8 <spiInit+0xb8>)
 8001e4c:	f7fe fb6e 	bl	800052c <GPIO_Init>

	//CS sd card
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e54:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001e56:	2310      	movs	r3, #16
 8001e58:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e5e:	463b      	mov	r3, r7
 8001e60:	4619      	mov	r1, r3
 8001e62:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <spiInit+0xb4>)
 8001e64:	f7fe fb62 	bl	800052c <GPIO_Init>




	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001e6c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e70:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001e72:	2300      	movs	r3, #0
 8001e74:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001e76:	2300      	movs	r3, #0
 8001e78:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e82:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8001e84:	2318      	movs	r3, #24
 8001e86:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	82bb      	strh	r3, [r7, #20]
	SPI_SSOutputCmd(SPI2, ENABLE);
 8001e90:	2101      	movs	r1, #1
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <spiInit+0xbc>)
 8001e94:	f7fe fcda 	bl	800084c <SPI_SSOutputCmd>
	SPI_Init(SPI2, &SPI_InitStructure);
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <spiInit+0xbc>)
 8001e9e:	f7fe fc59 	bl	8000754 <SPI_Init>

	/* Enable SPI  */
	SPI_Cmd(SPI2, ENABLE);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <spiInit+0xbc>)
 8001ea6:	f7fe fc98 	bl	80007da <SPI_Cmd>

}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40010800 	.word	0x40010800
 8001ebc:	40003800 	.word	0x40003800

08001ec0 <SpiTransmit>:



uint16_t SpiTransmit( uint16_t cmd )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
//	CS_LOW;

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8001eca:	bf00      	nop
 8001ecc:	2102      	movs	r1, #2
 8001ece:	480e      	ldr	r0, [pc, #56]	; (8001f08 <SpiTransmit+0x48>)
 8001ed0:	f7fe fcdb 	bl	800088a <SPI_I2S_GetFlagStatus>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f8      	beq.n	8001ecc <SpiTransmit+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4619      	mov	r1, r3
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <SpiTransmit+0x48>)
 8001ee0:	f7fe fc9a 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8001ee4:	bf00      	nop
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4807      	ldr	r0, [pc, #28]	; (8001f08 <SpiTransmit+0x48>)
 8001eea:	f7fe fcce 	bl	800088a <SPI_I2S_GetFlagStatus>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f8      	beq.n	8001ee6 <SpiTransmit+0x26>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <SpiTransmit+0x48>)
 8001ef6:	f7fe fc9d 	bl	8000834 <SPI_I2S_ReceiveData>
 8001efa:	4603      	mov	r3, r0
 8001efc:	81fb      	strh	r3, [r7, #14]

//	CS_HIGH;

	return recData;
 8001efe:	89fb      	ldrh	r3, [r7, #14]

}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40003800 	.word	0x40003800

08001f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f12:	e003      	b.n	8001f1c <LoopCopyDataInit>

08001f14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001f16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f1a:	3104      	adds	r1, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f1c:	480b      	ldr	r0, [pc, #44]	; (8001f4c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001f20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f24:	d3f6      	bcc.n	8001f14 <CopyDataInit>
	ldr	r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001f28:	e002      	b.n	8001f30 <LoopFillZerobss>

08001f2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f2c:	f842 3b04 	str.w	r3, [r2], #4

08001f30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001f32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f34:	d3f9      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f36:	f000 f82b 	bl	8001f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f002 f9f3 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3e:	f7ff fd5b 	bl	80019f8 <main>
	bx	lr
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f44:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001f48:	080061fc 	.word	0x080061fc
	ldr	r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f50:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001f54:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001f58:	200004ec 	.word	0x200004ec

08001f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_2_IRQHandler>

08001f5e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler+0x4>

08001f76 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f82 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
	...

08001f90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f94:	4a15      	ldr	r2, [pc, #84]	; (8001fec <SystemInit+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <SystemInit+0x5c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001fa0:	4912      	ldr	r1, [pc, #72]	; (8001fec <SystemInit+0x5c>)
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <SystemInit+0x5c>)
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <SystemInit+0x60>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fac:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <SystemInit+0x5c>)
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <SystemInit+0x5c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fbc:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <SystemInit+0x5c>)
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <SystemInit+0x5c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <SystemInit+0x5c>)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <SystemInit+0x5c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SystemInit+0x5c>)
 8001fd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fda:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001fdc:	f000 f80c 	bl	8001ff8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SystemInit+0x64>)
 8001fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fe6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	f8ff0000 	.word	0xf8ff0000
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001ffc:	f000 f802 	bl	8002004 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}

08002004 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	2300      	movs	r3, #0
 8002010:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <SetSysClockTo72+0xf8>)
 8002014:	4b39      	ldr	r3, [pc, #228]	; (80020fc <SetSysClockTo72+0xf8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <SetSysClockTo72+0xf8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <SetSysClockTo72+0x38>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800203a:	d1f0      	bne.n	800201e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800203c:	4b2f      	ldr	r3, [pc, #188]	; (80020fc <SetSysClockTo72+0xf8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002048:	2301      	movs	r3, #1
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	e001      	b.n	8002052 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800204e:	2300      	movs	r3, #0
 8002050:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d14b      	bne.n	80020f0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <SetSysClockTo72+0xfc>)
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <SetSysClockTo72+0xfc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <SetSysClockTo72+0xfc>)
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <SetSysClockTo72+0xfc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002070:	4a23      	ldr	r2, [pc, #140]	; (8002100 <SetSysClockTo72+0xfc>)
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <SetSysClockTo72+0xfc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800207c:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <SetSysClockTo72+0xf8>)
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <SetSysClockTo72+0xf8>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <SetSysClockTo72+0xf8>)
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <SetSysClockTo72+0xf8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <SetSysClockTo72+0xf8>)
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <SetSysClockTo72+0xf8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002096:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <SetSysClockTo72+0xf8>)
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <SetSysClockTo72+0xf8>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80020a2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <SetSysClockTo72+0xf8>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <SetSysClockTo72+0xf8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80020ae:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <SetSysClockTo72+0xf8>)
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <SetSysClockTo72+0xf8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80020bc:	bf00      	nop
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <SetSysClockTo72+0xf8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f9      	beq.n	80020be <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <SetSysClockTo72+0xf8>)
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <SetSysClockTo72+0xf8>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f023 0303 	bic.w	r3, r3, #3
 80020d4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <SetSysClockTo72+0xf8>)
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <SetSysClockTo72+0xf8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80020e2:	bf00      	nop
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <SetSysClockTo72+0xf8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d1f9      	bne.n	80020e4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40022000 	.word	0x40022000

08002104 <spi2_init_lcd>:
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);




void spi2_init_lcd(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI2 and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800210a:	2101      	movs	r1, #1
 800210c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002110:	f7fe fb02 	bl	8000718 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002114:	2101      	movs	r1, #1
 8002116:	2008      	movs	r0, #8
 8002118:	f7fe fae0 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800211c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002120:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8002122:	2318      	movs	r3, #24
 8002124:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8002126:	2301      	movs	r3, #1
 8002128:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800212a:	463b      	mov	r3, r7
 800212c:	4619      	mov	r1, r3
 800212e:	4818      	ldr	r0, [pc, #96]	; (8002190 <spi2_init_lcd+0x8c>)
 8002130:	f7fe f9fc 	bl	800052c <GPIO_Init>
//	/* Enable SPI1  */
//	SPI_Cmd(SPI2, ENABLE);



	 RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002134:	4a17      	ldr	r2, [pc, #92]	; (8002194 <spi2_init_lcd+0x90>)
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <spi2_init_lcd+0x90>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213e:	61d3      	str	r3, [r2, #28]
		 SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8002140:	4a15      	ldr	r2, [pc, #84]	; (8002198 <spi2_init_lcd+0x94>)
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <spi2_init_lcd+0x94>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	f043 0318 	orr.w	r3, r3, #24
 800214c:	b29b      	uxth	r3, r3
 800214e:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSM;
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <spi2_init_lcd+0x94>)
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <spi2_init_lcd+0x94>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215c:	b29b      	uxth	r3, r3
 800215e:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSI;
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <spi2_init_lcd+0x94>)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <spi2_init_lcd+0x94>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	b29b      	uxth	r3, r3
 800216e:	8013      	strh	r3, [r2, #0]
		 SPI2->CRCPR = 7;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <spi2_init_lcd+0x94>)
 8002172:	2207      	movs	r2, #7
 8002174:	821a      	strh	r2, [r3, #16]
		 SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <spi2_init_lcd+0x94>)
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <spi2_init_lcd+0x94>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b29b      	uxth	r3, r3
 800217e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]



}
 8002186:	bf00      	nop
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40010c00 	.word	0x40010c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40003800 	.word	0x40003800

0800219c <TM_SPI_Send>:


uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 80021a8:	bf00      	nop
 80021aa:	2102      	movs	r1, #2
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe fb6c 	bl	800088a <SPI_I2S_GetFlagStatus>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f8      	beq.n	80021aa <TM_SPI_Send+0xe>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(SPIx, data);
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fb2a 	bl	8000818 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
 80021c4:	bf00      	nop
 80021c6:	2101      	movs	r1, #1
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe fb5e 	bl	800088a <SPI_I2S_GetFlagStatus>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f8      	beq.n	80021c6 <TM_SPI_Send+0x2a>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(SPIx);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe fb2d 	bl	8000834 <SPI_I2S_ReceiveData>
 80021da:	4603      	mov	r3, r0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <TM_ILI9341_Init>:


void TM_ILI9341_Init() {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80021ee:	2101      	movs	r1, #1
 80021f0:	2004      	movs	r0, #4
 80021f2:	f7fe fa73 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80021f6:	2101      	movs	r1, #1
 80021f8:	2008      	movs	r0, #8
 80021fa:	f7fe fa6f 	bl	80006dc <RCC_APB2PeriphClockCmd>
	/* Init WRX pin */
	//TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_wrx;
	port_wrx.GPIO_Mode = GPIO_Mode_Out_PP;
 80021fe:	2310      	movs	r3, #16
 8002200:	73fb      	strb	r3, [r7, #15]
	port_wrx.GPIO_Speed = GPIO_Speed_2MHz;
 8002202:	2302      	movs	r3, #2
 8002204:	73bb      	strb	r3, [r7, #14]
	port_wrx.GPIO_Pin = ILI9341_WRX_PIN;
 8002206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220a:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(ILI9341_WRX_PORT, &port_wrx);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	4619      	mov	r1, r3
 8002212:	481f      	ldr	r0, [pc, #124]	; (8002290 <TM_ILI9341_Init+0xa8>)
 8002214:	f7fe f98a 	bl	800052c <GPIO_Init>

	
	/* Init CS pin */
//	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_cs;
	port_cs.GPIO_Mode = GPIO_Mode_Out_PP;
 8002218:	2310      	movs	r3, #16
 800221a:	72fb      	strb	r3, [r7, #11]
	port_cs.GPIO_Speed = GPIO_Speed_2MHz;
 800221c:	2302      	movs	r3, #2
 800221e:	72bb      	strb	r3, [r7, #10]
	port_cs.GPIO_Pin = ILI9341_CS_PIN;
 8002220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002224:	813b      	strh	r3, [r7, #8]
	GPIO_Init(ILI9341_CS_PORT, &port_cs);
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4619      	mov	r1, r3
 800222c:	4819      	ldr	r0, [pc, #100]	; (8002294 <TM_ILI9341_Init+0xac>)
 800222e:	f7fe f97d 	bl	800052c <GPIO_Init>

	
	/* Init RST pin */
//	TM_GPIO_Init(ILI9341_RST_PORT, ILI9341_RST_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
	GPIO_InitTypeDef port_rst;
	port_rst.GPIO_Mode = GPIO_Mode_Out_PP;
 8002232:	2310      	movs	r3, #16
 8002234:	71fb      	strb	r3, [r7, #7]
	port_rst.GPIO_Speed = GPIO_Speed_2MHz;
 8002236:	2302      	movs	r3, #2
 8002238:	71bb      	strb	r3, [r7, #6]
	port_rst.GPIO_Pin = ILI9341_RST_PIN;
 800223a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800223e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(ILI9341_RST_PORT, &port_rst);
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	4619      	mov	r1, r3
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <TM_ILI9341_Init+0xa8>)
 8002246:	f7fe f971 	bl	800052c <GPIO_Init>


	/* CS high */
	ILI9341_CS_SET;
 800224a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224e:	4811      	ldr	r0, [pc, #68]	; (8002294 <TM_ILI9341_Init+0xac>)
 8002250:	f7fe fa28 	bl	80006a4 <GPIO_SetBits>
	
	/* Init SPI */
	spi2_init_lcd();
 8002254:	f7ff ff56 	bl	8002104 <spi2_init_lcd>
	
	/* Init DMA for SPI */
	//TM_SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 8002258:	f000 f824 	bl	80022a4 <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <TM_ILI9341_Init+0xb0>)
 800225e:	2200      	movs	r2, #0
 8002260:	801a      	strh	r2, [r3, #0]
 8002262:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <TM_ILI9341_Init+0xb0>)
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <TM_ILI9341_Init+0xb4>)
 8002268:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <TM_ILI9341_Init+0xb8>)
 800226c:	22f0      	movs	r2, #240	; 0xf0
 800226e:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <TM_ILI9341_Init+0xb8>)
 8002272:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002276:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <TM_ILI9341_Init+0xb8>)
 800227a:	2201      	movs	r2, #1
 800227c:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	glcd_fill_screen(ILI9341_COLOR_BROWN);
 800227e:	f64b 30ca 	movw	r0, #48074	; 0xbbca
 8002282:	f000 f9fd 	bl	8002680 <glcd_fill_screen>
//	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40010800 	.word	0x40010800
 8002294:	40010c00 	.word	0x40010c00
 8002298:	200004e2 	.word	0x200004e2
 800229c:	200004e4 	.word	0x200004e4
 80022a0:	200004dc 	.word	0x200004dc

080022a4 <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 80022a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ac:	4899      	ldr	r0, [pc, #612]	; (8002514 <TM_ILI9341_InitLCD+0x270>)
 80022ae:	f7fe fa07 	bl	80006c0 <GPIO_ResetBits>
	TM_ILI9341_Delay(20000);
 80022b2:	f644 6020 	movw	r0, #20000	; 0x4e20
 80022b6:	f000 fb45 	bl	8002944 <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 80022ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022be:	4895      	ldr	r0, [pc, #596]	; (8002514 <TM_ILI9341_InitLCD+0x270>)
 80022c0:	f7fe f9f0 	bl	80006a4 <GPIO_SetBits>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 80022c4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80022c8:	f000 fb3c 	bl	8002944 <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f000 f925 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 80022d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022d6:	f000 fb35 	bl	8002944 <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 80022da:	20cb      	movs	r0, #203	; 0xcb
 80022dc:	f000 f91e 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 80022e0:	2039      	movs	r0, #57	; 0x39
 80022e2:	f000 f93f 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 80022e6:	202c      	movs	r0, #44	; 0x2c
 80022e8:	f000 f93c 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f000 f939 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 80022f2:	2034      	movs	r0, #52	; 0x34
 80022f4:	f000 f936 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 80022f8:	2002      	movs	r0, #2
 80022fa:	f000 f933 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 80022fe:	20cf      	movs	r0, #207	; 0xcf
 8002300:	f000 f90c 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f000 f92d 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800230a:	20c1      	movs	r0, #193	; 0xc1
 800230c:	f000 f92a 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8002310:	2030      	movs	r0, #48	; 0x30
 8002312:	f000 f927 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 8002316:	20e8      	movs	r0, #232	; 0xe8
 8002318:	f000 f900 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 800231c:	2085      	movs	r0, #133	; 0x85
 800231e:	f000 f921 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002322:	2000      	movs	r0, #0
 8002324:	f000 f91e 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8002328:	2078      	movs	r0, #120	; 0x78
 800232a:	f000 f91b 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800232e:	20ea      	movs	r0, #234	; 0xea
 8002330:	f000 f8f4 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8002334:	2000      	movs	r0, #0
 8002336:	f000 f915 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f912 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8002340:	20ed      	movs	r0, #237	; 0xed
 8002342:	f000 f8eb 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 8002346:	2064      	movs	r0, #100	; 0x64
 8002348:	f000 f90c 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800234c:	2003      	movs	r0, #3
 800234e:	f000 f909 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 8002352:	2012      	movs	r0, #18
 8002354:	f000 f906 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8002358:	2081      	movs	r0, #129	; 0x81
 800235a:	f000 f903 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800235e:	20f7      	movs	r0, #247	; 0xf7
 8002360:	f000 f8dc 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 8002364:	2020      	movs	r0, #32
 8002366:	f000 f8fd 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 800236a:	20c0      	movs	r0, #192	; 0xc0
 800236c:	f000 f8d6 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 8002370:	2023      	movs	r0, #35	; 0x23
 8002372:	f000 f8f7 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 8002376:	20c1      	movs	r0, #193	; 0xc1
 8002378:	f000 f8d0 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 800237c:	2010      	movs	r0, #16
 800237e:	f000 f8f1 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 8002382:	20c5      	movs	r0, #197	; 0xc5
 8002384:	f000 f8ca 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 8002388:	203e      	movs	r0, #62	; 0x3e
 800238a:	f000 f8eb 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 800238e:	2028      	movs	r0, #40	; 0x28
 8002390:	f000 f8e8 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8002394:	20c7      	movs	r0, #199	; 0xc7
 8002396:	f000 f8c1 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 800239a:	2086      	movs	r0, #134	; 0x86
 800239c:	f000 f8e2 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 80023a0:	2036      	movs	r0, #54	; 0x36
 80023a2:	f000 f8bb 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 80023a6:	2048      	movs	r0, #72	; 0x48
 80023a8:	f000 f8dc 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 80023ac:	203a      	movs	r0, #58	; 0x3a
 80023ae:	f000 f8b5 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 80023b2:	2055      	movs	r0, #85	; 0x55
 80023b4:	f000 f8d6 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 80023b8:	20b1      	movs	r0, #177	; 0xb1
 80023ba:	f000 f8af 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f8d0 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 80023c4:	2018      	movs	r0, #24
 80023c6:	f000 f8cd 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 80023ca:	20b6      	movs	r0, #182	; 0xb6
 80023cc:	f000 f8a6 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 80023d0:	2008      	movs	r0, #8
 80023d2:	f000 f8c7 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 80023d6:	2082      	movs	r0, #130	; 0x82
 80023d8:	f000 f8c4 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 80023dc:	2027      	movs	r0, #39	; 0x27
 80023de:	f000 f8c1 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 80023e2:	20f2      	movs	r0, #242	; 0xf2
 80023e4:	f000 f89a 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 f8bb 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80023ee:	202a      	movs	r0, #42	; 0x2a
 80023f0:	f000 f894 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f000 f8b5 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f000 f8b2 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f8af 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 8002406:	20ef      	movs	r0, #239	; 0xef
 8002408:	f000 f8ac 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800240c:	202b      	movs	r0, #43	; 0x2b
 800240e:	f000 f885 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8002412:	2000      	movs	r0, #0
 8002414:	f000 f8a6 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002418:	2000      	movs	r0, #0
 800241a:	f000 f8a3 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 800241e:	2001      	movs	r0, #1
 8002420:	f000 f8a0 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 8002424:	203f      	movs	r0, #63	; 0x3f
 8002426:	f000 f89d 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 800242a:	2026      	movs	r0, #38	; 0x26
 800242c:	f000 f876 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8002430:	2001      	movs	r0, #1
 8002432:	f000 f897 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8002436:	20e0      	movs	r0, #224	; 0xe0
 8002438:	f000 f870 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 800243c:	200f      	movs	r0, #15
 800243e:	f000 f891 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8002442:	2031      	movs	r0, #49	; 0x31
 8002444:	f000 f88e 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8002448:	202b      	movs	r0, #43	; 0x2b
 800244a:	f000 f88b 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800244e:	200c      	movs	r0, #12
 8002450:	f000 f888 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8002454:	200e      	movs	r0, #14
 8002456:	f000 f885 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800245a:	2008      	movs	r0, #8
 800245c:	f000 f882 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8002460:	204e      	movs	r0, #78	; 0x4e
 8002462:	f000 f87f 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 8002466:	20f1      	movs	r0, #241	; 0xf1
 8002468:	f000 f87c 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 800246c:	2037      	movs	r0, #55	; 0x37
 800246e:	f000 f879 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8002472:	2007      	movs	r0, #7
 8002474:	f000 f876 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 8002478:	2010      	movs	r0, #16
 800247a:	f000 f873 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800247e:	2003      	movs	r0, #3
 8002480:	f000 f870 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8002484:	200e      	movs	r0, #14
 8002486:	f000 f86d 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 800248a:	2009      	movs	r0, #9
 800248c:	f000 f86a 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002490:	2000      	movs	r0, #0
 8002492:	f000 f867 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8002496:	20e1      	movs	r0, #225	; 0xe1
 8002498:	f000 f840 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800249c:	2000      	movs	r0, #0
 800249e:	f000 f861 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 80024a2:	200e      	movs	r0, #14
 80024a4:	f000 f85e 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 80024a8:	2014      	movs	r0, #20
 80024aa:	f000 f85b 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 80024ae:	2003      	movs	r0, #3
 80024b0:	f000 f858 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 80024b4:	2011      	movs	r0, #17
 80024b6:	f000 f855 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 80024ba:	2007      	movs	r0, #7
 80024bc:	f000 f852 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 80024c0:	2031      	movs	r0, #49	; 0x31
 80024c2:	f000 f84f 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 80024c6:	20c1      	movs	r0, #193	; 0xc1
 80024c8:	f000 f84c 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 80024cc:	2048      	movs	r0, #72	; 0x48
 80024ce:	f000 f849 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 80024d2:	2008      	movs	r0, #8
 80024d4:	f000 f846 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 80024d8:	200f      	movs	r0, #15
 80024da:	f000 f843 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 80024de:	200c      	movs	r0, #12
 80024e0:	f000 f840 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 80024e4:	2031      	movs	r0, #49	; 0x31
 80024e6:	f000 f83d 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 80024ea:	2036      	movs	r0, #54	; 0x36
 80024ec:	f000 f83a 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 80024f0:	200f      	movs	r0, #15
 80024f2:	f000 f837 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 80024f6:	2011      	movs	r0, #17
 80024f8:	f000 f810 	bl	800251c <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <TM_ILI9341_InitLCD+0x274>)
 80024fe:	f000 fa21 	bl	8002944 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8002502:	2029      	movs	r0, #41	; 0x29
 8002504:	f000 f80a 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002508:	202c      	movs	r0, #44	; 0x2c
 800250a:	f000 f807 	bl	800251c <TM_ILI9341_SendCommand>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40010800 	.word	0x40010800
 8002518:	000f4240 	.word	0x000f4240

0800251c <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 8002526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252a:	480b      	ldr	r0, [pc, #44]	; (8002558 <TM_ILI9341_SendCommand+0x3c>)
 800252c:	f7fe f8c8 	bl	80006c0 <GPIO_ResetBits>
	ILI9341_CS_RESET;
 8002530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002534:	4809      	ldr	r0, [pc, #36]	; (800255c <TM_ILI9341_SendCommand+0x40>)
 8002536:	f7fe f8c3 	bl	80006c0 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4619      	mov	r1, r3
 800253e:	4808      	ldr	r0, [pc, #32]	; (8002560 <TM_ILI9341_SendCommand+0x44>)
 8002540:	f7ff fe2c 	bl	800219c <TM_SPI_Send>
	ILI9341_CS_SET;
 8002544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <TM_ILI9341_SendCommand+0x40>)
 800254a:	f7fe f8ab 	bl	80006a4 <GPIO_SetBits>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40010800 	.word	0x40010800
 800255c:	40010c00 	.word	0x40010c00
 8002560:	40003800 	.word	0x40003800

08002564 <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	480b      	ldr	r0, [pc, #44]	; (80025a0 <TM_ILI9341_SendData+0x3c>)
 8002574:	f7fe f896 	bl	80006a4 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8002578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800257c:	4809      	ldr	r0, [pc, #36]	; (80025a4 <TM_ILI9341_SendData+0x40>)
 800257e:	f7fe f89f 	bl	80006c0 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4619      	mov	r1, r3
 8002586:	4808      	ldr	r0, [pc, #32]	; (80025a8 <TM_ILI9341_SendData+0x44>)
 8002588:	f7ff fe08 	bl	800219c <TM_SPI_Send>
	ILI9341_CS_SET;
 800258c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <TM_ILI9341_SendData+0x40>)
 8002592:	f7fe f887 	bl	80006a4 <GPIO_SetBits>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40010800 	.word	0x40010800
 80025a4:	40010c00 	.word	0x40010c00
 80025a8:	40003800 	.word	0x40003800

080025ac <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	603a      	str	r2, [r7, #0]
 80025b6:	80fb      	strh	r3, [r7, #6]
 80025b8:	460b      	mov	r3, r1
 80025ba:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 80025bc:	88bb      	ldrh	r3, [r7, #4]
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	88b9      	ldrh	r1, [r7, #4]
 80025c2:	88f8      	ldrh	r0, [r7, #6]
 80025c4:	f000 f812 	bl	80025ec <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80025c8:	202c      	movs	r0, #44	; 0x2c
 80025ca:	f7ff ffa7 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ffc5 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ffc0 	bl	8002564 <TM_ILI9341_SendData>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4604      	mov	r4, r0
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4623      	mov	r3, r4
 80025fc:	80fb      	strh	r3, [r7, #6]
 80025fe:	4603      	mov	r3, r0
 8002600:	80bb      	strh	r3, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	807b      	strh	r3, [r7, #2]
 8002606:	4613      	mov	r3, r2
 8002608:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800260a:	202a      	movs	r0, #42	; 0x2a
 800260c:	f7ff ff86 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	b29b      	uxth	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ffa3 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff9e 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff97 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff92 	bl	8002564 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8002640:	202b      	movs	r0, #43	; 0x2b
 8002642:	f7ff ff6b 	bl	800251c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	b29b      	uxth	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff88 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 8002654:	88bb      	ldrh	r3, [r7, #4]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff83 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 800265e:	883b      	ldrh	r3, [r7, #0]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	b29b      	uxth	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ff7c 	bl	8002564 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 800266c:	883b      	ldrh	r3, [r7, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff77 	bl	8002564 <TM_ILI9341_SendData>
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
	...

08002680 <glcd_fill_screen>:
//	}
//}



void glcd_fill_screen (uint16_t color){
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]

	///////////////////////////////////////////////



	TM_ILI9341_SetCursorPosition(0, 0, 240, 320);
 800268a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800268e:	22f0      	movs	r2, #240	; 0xf0
 8002690:	2100      	movs	r1, #0
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff ffaa 	bl	80025ec <TM_ILI9341_SetCursorPosition>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002698:	202c      	movs	r0, #44	; 0x2c
 800269a:	f7ff ff3f 	bl	800251c <TM_ILI9341_SendCommand>
	ILI9341_WRX_SET;
 800269e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a2:	4884      	ldr	r0, [pc, #528]	; (80028b4 <glcd_fill_screen+0x234>)
 80026a4:	f7fd fffe 	bl	80006a4 <GPIO_SetBits>
	ILI9341_CS_RESET;
 80026a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026ac:	4882      	ldr	r0, [pc, #520]	; (80028b8 <glcd_fill_screen+0x238>)
 80026ae:	f7fe f807 	bl	80006c0 <GPIO_ResetBits>



	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80026b2:	4a82      	ldr	r2, [pc, #520]	; (80028bc <glcd_fill_screen+0x23c>)
 80026b4:	4b81      	ldr	r3, [pc, #516]	; (80028bc <glcd_fill_screen+0x23c>)
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6153      	str	r3, [r2, #20]
	static uint8_t color_static = ILI9341_COLOR_BLACK;

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 80026be:	4a80      	ldr	r2, [pc, #512]	; (80028c0 <glcd_fill_screen+0x240>)
 80026c0:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <glcd_fill_screen+0x240>)
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 80026ce:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <glcd_fill_screen+0x244>)
 80026d0:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80026d4:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 80026d6:	4b7b      	ldr	r3, [pc, #492]	; (80028c4 <glcd_fill_screen+0x244>)
 80026d8:	4a7b      	ldr	r2, [pc, #492]	; (80028c8 <glcd_fill_screen+0x248>)
 80026da:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 80026dc:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <glcd_fill_screen+0x244>)
 80026de:	4a7b      	ldr	r2, [pc, #492]	; (80028cc <glcd_fill_screen+0x24c>)
 80026e0:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 80026e2:	4a78      	ldr	r2, [pc, #480]	; (80028c4 <glcd_fill_screen+0x244>)
 80026e4:	4b77      	ldr	r3, [pc, #476]	; (80028c4 <glcd_fill_screen+0x244>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f043 0310 	orr.w	r3, r3, #16
 80026ec:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <glcd_fill_screen+0x244>)
 80026f0:	4b74      	ldr	r3, [pc, #464]	; (80028c4 <glcd_fill_screen+0x244>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 80026fa:	bf00      	nop
 80026fc:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <glcd_fill_screen+0x240>)
 80026fe:	891b      	ldrh	r3, [r3, #8]
 8002700:	b29b      	uxth	r3, r3
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f8      	beq.n	80026fc <glcd_fill_screen+0x7c>
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <glcd_fill_screen+0x240>)
 800270c:	891b      	ldrh	r3, [r3, #8]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f1      	bne.n	80026fc <glcd_fill_screen+0x7c>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8002718:	4a68      	ldr	r2, [pc, #416]	; (80028bc <glcd_fill_screen+0x23c>)
 800271a:	4b68      	ldr	r3, [pc, #416]	; (80028bc <glcd_fill_screen+0x23c>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6153      	str	r3, [r2, #20]





	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8002724:	4a65      	ldr	r2, [pc, #404]	; (80028bc <glcd_fill_screen+0x23c>)
 8002726:	4b65      	ldr	r3, [pc, #404]	; (80028bc <glcd_fill_screen+0x23c>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8002730:	4a62      	ldr	r2, [pc, #392]	; (80028bc <glcd_fill_screen+0x23c>)
 8002732:	4b62      	ldr	r3, [pc, #392]	; (80028bc <glcd_fill_screen+0x23c>)
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6153      	str	r3, [r2, #20]

	DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 800273c:	4a61      	ldr	r2, [pc, #388]	; (80028c4 <glcd_fill_screen+0x244>)
 800273e:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <glcd_fill_screen+0x244>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <glcd_fill_screen+0x240>)
 800274a:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <glcd_fill_screen+0x240>)
 800274c:	889b      	ldrh	r3, [r3, #4]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	b29b      	uxth	r3, r3
 8002756:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 8002758:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <glcd_fill_screen+0x244>)
 800275a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800275e:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <glcd_fill_screen+0x244>)
 8002762:	4a59      	ldr	r2, [pc, #356]	; (80028c8 <glcd_fill_screen+0x248>)
 8002764:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8002766:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <glcd_fill_screen+0x244>)
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <glcd_fill_screen+0x24c>)
 800276a:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 800276c:	4a55      	ldr	r2, [pc, #340]	; (80028c4 <glcd_fill_screen+0x244>)
 800276e:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <glcd_fill_screen+0x244>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f043 0310 	orr.w	r3, r3, #16
 8002776:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8002778:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <glcd_fill_screen+0x244>)
 800277a:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <glcd_fill_screen+0x244>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8002784:	bf00      	nop
 8002786:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <glcd_fill_screen+0x240>)
 8002788:	891b      	ldrh	r3, [r3, #8]
 800278a:	b29b      	uxth	r3, r3
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f8      	beq.n	8002786 <glcd_fill_screen+0x106>
 8002794:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <glcd_fill_screen+0x240>)
 8002796:	891b      	ldrh	r3, [r3, #8]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f1      	bne.n	8002786 <glcd_fill_screen+0x106>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 80027a2:	4a46      	ldr	r2, [pc, #280]	; (80028bc <glcd_fill_screen+0x23c>)
 80027a4:	4b45      	ldr	r3, [pc, #276]	; (80028bc <glcd_fill_screen+0x23c>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6153      	str	r3, [r2, #20]

	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 80027ae:	4a43      	ldr	r2, [pc, #268]	; (80028bc <glcd_fill_screen+0x23c>)
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <glcd_fill_screen+0x23c>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6153      	str	r3, [r2, #20]
		RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80027ba:	4a40      	ldr	r2, [pc, #256]	; (80028bc <glcd_fill_screen+0x23c>)
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <glcd_fill_screen+0x23c>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6153      	str	r3, [r2, #20]

		DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 80027c6:	4a3f      	ldr	r2, [pc, #252]	; (80028c4 <glcd_fill_screen+0x244>)
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <glcd_fill_screen+0x244>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6013      	str	r3, [r2, #0]

	//	SPI2->CR2 |= SPI_CR1_DFF;
		SPI2->CR2 |= SPI_CR2_TXDMAEN;
 80027d2:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <glcd_fill_screen+0x240>)
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <glcd_fill_screen+0x240>)
 80027d6:	889b      	ldrh	r3, [r3, #4]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	8093      	strh	r3, [r2, #4]


		DMA1_Channel5->CNDTR = 65530;
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <glcd_fill_screen+0x244>)
 80027e4:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80027e8:	605a      	str	r2, [r3, #4]
		DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <glcd_fill_screen+0x244>)
 80027ec:	4a36      	ldr	r2, [pc, #216]	; (80028c8 <glcd_fill_screen+0x248>)
 80027ee:	609a      	str	r2, [r3, #8]
		DMA1_Channel5->CMAR = (uint32_t) &color_static;
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <glcd_fill_screen+0x244>)
 80027f2:	4a36      	ldr	r2, [pc, #216]	; (80028cc <glcd_fill_screen+0x24c>)
 80027f4:	60da      	str	r2, [r3, #12]
	//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
	//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



		DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 80027f6:	4a33      	ldr	r2, [pc, #204]	; (80028c4 <glcd_fill_screen+0x244>)
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <glcd_fill_screen+0x244>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	6013      	str	r3, [r2, #0]
		DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8002802:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <glcd_fill_screen+0x244>)
 8002804:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <glcd_fill_screen+0x244>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6013      	str	r3, [r2, #0]


		while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 800280e:	bf00      	nop
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <glcd_fill_screen+0x240>)
 8002812:	891b      	ldrh	r3, [r3, #8]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f8      	beq.n	8002810 <glcd_fill_screen+0x190>
 800281e:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <glcd_fill_screen+0x240>)
 8002820:	891b      	ldrh	r3, [r3, #8]
 8002822:	b29b      	uxth	r3, r3
 8002824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f1      	bne.n	8002810 <glcd_fill_screen+0x190>
		RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <glcd_fill_screen+0x23c>)
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <glcd_fill_screen+0x23c>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6153      	str	r3, [r2, #20]




	ILI9341_CS_SET;
 8002838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283c:	481e      	ldr	r0, [pc, #120]	; (80028b8 <glcd_fill_screen+0x238>)
 800283e:	f7fd ff31 	bl	80006a4 <GPIO_SetBits>





	RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <glcd_fill_screen+0x23c>)
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <glcd_fill_screen+0x23c>)
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800284c:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <glcd_fill_screen+0x23c>)
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <glcd_fill_screen+0x23c>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002858:	6113      	str	r3, [r2, #16]



	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800285a:	4a18      	ldr	r2, [pc, #96]	; (80028bc <glcd_fill_screen+0x23c>)
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <glcd_fill_screen+0x23c>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002864:	61d3      	str	r3, [r2, #28]
	SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8002866:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <glcd_fill_screen+0x240>)
 8002868:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <glcd_fill_screen+0x240>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f043 0318 	orr.w	r3, r3, #24
 8002872:	b29b      	uxth	r3, r3
 8002874:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <glcd_fill_screen+0x240>)
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <glcd_fill_screen+0x240>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	b29b      	uxth	r3, r3
 8002884:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <glcd_fill_screen+0x240>)
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <glcd_fill_screen+0x240>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	b29b      	uxth	r3, r3
 8002894:	8013      	strh	r3, [r2, #0]
	SPI2->CRCPR = 7;
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <glcd_fill_screen+0x240>)
 8002898:	2207      	movs	r2, #7
 800289a:	821a      	strh	r2, [r3, #16]
	SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <glcd_fill_screen+0x240>)
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <glcd_fill_screen+0x240>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	8013      	strh	r3, [r2, #0]




}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40010800 	.word	0x40010800
 80028b8:	40010c00 	.word	0x40010c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40003800 	.word	0x40003800
 80028c4:	40020058 	.word	0x40020058
 80028c8:	4000380c 	.word	0x4000380c
 80028cc:	2000042a 	.word	0x2000042a

080028d0 <TM_ILI9341_INT_Fill>:
//			glcd_sendData16(color);
//	}
}
//
//
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	4604      	mov	r4, r0
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4623      	mov	r3, r4
 80028e0:	80fb      	strh	r3, [r7, #6]
 80028e2:	4603      	mov	r3, r0
 80028e4:	80bb      	strh	r3, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	807b      	strh	r3, [r7, #2]
 80028ea:	4613      	mov	r3, r2
 80028ec:	803b      	strh	r3, [r7, #0]
	uint8_t length;
	length = x1-x0;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	73bb      	strb	r3, [r7, #14]

	uint8_t v_lines_nb;
	v_lines_nb = y1-y0;
 80028fa:	883b      	ldrh	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	88bb      	ldrh	r3, [r7, #4]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	737b      	strb	r3, [r7, #13]

	uint8_t i;
	for(i=0;i<v_lines_nb;i++){
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e013      	b.n	8002934 <TM_ILI9341_INT_Fill+0x64>
			TM_ILI9341_DrawLine(x0, y0+i, x1, y0+i, color);
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	b29a      	uxth	r2, r3
 8002910:	88bb      	ldrh	r3, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	b299      	uxth	r1, r3
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	b29a      	uxth	r2, r3
 800291a:	88bb      	ldrh	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	b29c      	uxth	r4, r3
 8002920:	8c3b      	ldrh	r3, [r7, #32]
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	88f8      	ldrh	r0, [r7, #6]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	4623      	mov	r3, r4
 800292a:	f000 f81b 	bl	8002964 <TM_ILI9341_DrawLine>
	for(i=0;i<v_lines_nb;i++){
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	3301      	adds	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	7bfa      	ldrb	r2, [r7, #15]
 8002936:	7b7b      	ldrb	r3, [r7, #13]
 8002938:	429a      	cmp	r2, r3
 800293a:	d3e7      	bcc.n	800290c <TM_ILI9341_INT_Fill+0x3c>

	}
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}

08002944 <TM_ILI9341_Delay>:
//
//	/* Go back to 8-bit SPI mode */
//	TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);
//}

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800294c:	e002      	b.n	8002954 <TM_ILI9341_Delay+0x10>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3b01      	subs	r3, #1
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <TM_ILI9341_Delay+0xa>
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <TM_ILI9341_DrawLine>:
//	/* Set new pointer */
//	ILI9341_x += font->FontWidth;
//}
//

void TM_ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	4604      	mov	r4, r0
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4623      	mov	r3, r4
 8002974:	80fb      	strh	r3, [r7, #6]
 8002976:	4603      	mov	r3, r0
 8002978:	80bb      	strh	r3, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	807b      	strh	r3, [r7, #2]
 800297e:	4613      	mov	r3, r2
 8002980:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2; 	
	uint16_t tmp;
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 8002982:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	429a      	cmp	r2, r3
 800298a:	d303      	bcc.n	8002994 <TM_ILI9341_DrawLine+0x30>
		x0 = ILI9341_Opts.width - 1;
 800298c:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	3b01      	subs	r3, #1
 8002992:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 8002994:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	887a      	ldrh	r2, [r7, #2]
 800299a:	429a      	cmp	r2, r3
 800299c:	d303      	bcc.n	80029a6 <TM_ILI9341_DrawLine+0x42>
		x1 = ILI9341_Opts.width - 1;
 800299e:	4b48      	ldr	r3, [pc, #288]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 80029a8:	885b      	ldrh	r3, [r3, #2]
 80029aa:	88ba      	ldrh	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d303      	bcc.n	80029b8 <TM_ILI9341_DrawLine+0x54>
		y0 = ILI9341_Opts.height - 1;
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 80029b2:	885b      	ldrh	r3, [r3, #2]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 80029ba:	885b      	ldrh	r3, [r3, #2]
 80029bc:	883a      	ldrh	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d303      	bcc.n	80029ca <TM_ILI9341_DrawLine+0x66>
		y1 = ILI9341_Opts.height - 1;
 80029c2:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <TM_ILI9341_DrawLine+0x15c>)
 80029c4:	885b      	ldrh	r3, [r3, #2]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Check correction */
	if (x0 > x1) {
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d905      	bls.n	80029de <TM_ILI9341_DrawLine+0x7a>
		tmp = x0;
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	82bb      	strh	r3, [r7, #20]
		x0 = x1;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 80029da:	8abb      	ldrh	r3, [r7, #20]
 80029dc:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 80029de:	88ba      	ldrh	r2, [r7, #4]
 80029e0:	883b      	ldrh	r3, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d905      	bls.n	80029f2 <TM_ILI9341_DrawLine+0x8e>
		tmp = y0;
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	82bb      	strh	r3, [r7, #20]
		y0 = y1;
 80029ea:	883b      	ldrh	r3, [r7, #0]
 80029ec:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 80029ee:	8abb      	ldrh	r3, [r7, #20]
 80029f0:	803b      	strh	r3, [r7, #0]
	}
	
	dx = x1 - x0;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	827b      	strh	r3, [r7, #18]
	dy = y1 - y0;
 80029fc:	883a      	ldrh	r2, [r7, #0]
 80029fe:	88bb      	ldrh	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	823b      	strh	r3, [r7, #16]
//	if (dx == 0 || dy == 0) {
//		TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
//		return;
//	}
	
	sx = (x0 < x1) ? 1 : -1; 
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d201      	bcs.n	8002a12 <TM_ILI9341_DrawLine+0xae>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e001      	b.n	8002a16 <TM_ILI9341_DrawLine+0xb2>
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a16:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002a18:	88ba      	ldrh	r2, [r7, #4]
 8002a1a:	883b      	ldrh	r3, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d201      	bcs.n	8002a24 <TM_ILI9341_DrawLine+0xc0>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e001      	b.n	8002a28 <TM_ILI9341_DrawLine+0xc4>
 8002a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a28:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002a2a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a2e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	dd06      	ble.n	8002a44 <TM_ILI9341_DrawLine+0xe0>
 8002a36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a3a:	0fda      	lsrs	r2, r3, #31
 8002a3c:	4413      	add	r3, r2
 8002a3e:	105b      	asrs	r3, r3, #1
 8002a40:	b21b      	sxth	r3, r3
 8002a42:	e006      	b.n	8002a52 <TM_ILI9341_DrawLine+0xee>
 8002a44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a48:	425b      	negs	r3, r3
 8002a4a:	0fda      	lsrs	r2, r3, #31
 8002a4c:	4413      	add	r3, r2
 8002a4e:	105b      	asrs	r3, r3, #1
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	82fb      	strh	r3, [r7, #22]

	while (1) {
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8002a54:	88b9      	ldrh	r1, [r7, #4]
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fda6 	bl	80025ac <TM_ILI9341_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d103      	bne.n	8002a70 <TM_ILI9341_DrawLine+0x10c>
 8002a68:	88ba      	ldrh	r2, [r7, #4]
 8002a6a:	883b      	ldrh	r3, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d021      	beq.n	8002ab4 <TM_ILI9341_DrawLine+0x150>
			break;
		}
		e2 = err; 
 8002a70:	8afb      	ldrh	r3, [r7, #22]
 8002a72:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002a74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a7c:	425b      	negs	r3, r3
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	dd08      	ble.n	8002a94 <TM_ILI9341_DrawLine+0x130>
			err -= dy;
 8002a82:	8afa      	ldrh	r2, [r7, #22]
 8002a84:	8a3b      	ldrh	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002a8c:	89fa      	ldrh	r2, [r7, #14]
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	4413      	add	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002a94:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	dad9      	bge.n	8002a54 <TM_ILI9341_DrawLine+0xf0>
			err += dx;
 8002aa0:	8afa      	ldrh	r2, [r7, #22]
 8002aa2:	8a7b      	ldrh	r3, [r7, #18]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002aaa:	89ba      	ldrh	r2, [r7, #12]
 8002aac:	88bb      	ldrh	r3, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	80bb      	strh	r3, [r7, #4]
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8002ab2:	e7cf      	b.n	8002a54 <TM_ILI9341_DrawLine+0xf0>
			break;
 8002ab4:	bf00      	nop
		} 
	}
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd90      	pop	{r4, r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200004dc 	.word	0x200004dc

08002ac4 <TM_ILI9341_Puts>:
}




void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60ba      	str	r2, [r7, #8]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4603      	mov	r3, r0
 8002ad0:	81fb      	strh	r3, [r7, #14]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	82fb      	strh	r3, [r7, #22]

	/* Set X and Y coordinates */
	ILI9341_x = x;
 8002ada:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <TM_ILI9341_Puts+0xa8>)
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8002ae0:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <TM_ILI9341_Puts+0xac>)
 8002ae2:	89bb      	ldrh	r3, [r7, #12]
 8002ae4:	8013      	strh	r3, [r2, #0]

	while (*str) {
 8002ae6:	e038      	b.n	8002b5a <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b0a      	cmp	r3, #10
 8002aee:	d11d      	bne.n	8002b2c <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <TM_ILI9341_Puts+0xac>)
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <TM_ILI9341_Puts+0xac>)
 8002b04:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b0d      	cmp	r3, #13
 8002b0e:	d106      	bne.n	8002b1e <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <TM_ILI9341_Puts+0xa8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	801a      	strh	r2, [r3, #0]
				str++;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	e002      	b.n	8002b24 <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 8002b1e:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <TM_ILI9341_Puts+0xa8>)
 8002b20:	8afb      	ldrh	r3, [r7, #22]
 8002b22:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	3301      	adds	r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
			continue;
 8002b2a:	e016      	b.n	8002b5a <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b0d      	cmp	r3, #13
 8002b32:	d103      	bne.n	8002b3c <TM_ILI9341_Puts+0x78>
			str++;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
			continue;
 8002b3a:	e00e      	b.n	8002b5a <TM_ILI9341_Puts+0x96>
		}

		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <TM_ILI9341_Puts+0xa8>)
 8002b3e:	8818      	ldrh	r0, [r3, #0]
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <TM_ILI9341_Puts+0xac>)
 8002b42:	8819      	ldrh	r1, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f000 f80d 	bl	8002b74 <TM_ILI9341_Putc>
	while (*str) {
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1c2      	bne.n	8002ae8 <TM_ILI9341_Puts+0x24>
	}
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200004e4 	.word	0x200004e4
 8002b70:	200004e2 	.word	0x200004e2

08002b74 <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b08b      	sub	sp, #44	; 0x2c
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	81fb      	strh	r3, [r7, #14]
 8002b80:	460b      	mov	r3, r1
 8002b82:	81bb      	strh	r3, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8002b88:	4a40      	ldr	r2, [pc, #256]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002b8a:	89fb      	ldrh	r3, [r7, #14]
 8002b8c:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8002b8e:	4a40      	ldr	r2, [pc, #256]	; (8002c90 <TM_ILI9341_Putc+0x11c>)
 8002b90:	89bb      	ldrh	r3, [r7, #12]
 8002b92:	8013      	strh	r3, [r2, #0]

	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 8002b94:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <TM_ILI9341_Putc+0x120>)
 8002ba2:	8812      	ldrh	r2, [r2, #0]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	dd0b      	ble.n	8002bc0 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <TM_ILI9341_Putc+0x11c>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <TM_ILI9341_Putc+0x11c>)
 8002bb8:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	801a      	strh	r2, [r3, #0]
	}

	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002bc2:	8818      	ldrh	r0, [r3, #0]
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <TM_ILI9341_Putc+0x11c>)
 8002bc6:	8819      	ldrh	r1, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b29c      	uxth	r4, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	785b      	ldrb	r3, [r3, #1]
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <TM_ILI9341_Putc+0x11c>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4613      	mov	r3, r2
 8002bec:	4622      	mov	r2, r4
 8002bee:	f7ff fe6f 	bl	80028d0 <TM_ILI9341_INT_Fill>

//	TM_ILI9341_DrawRectangle(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, ILI9341_COLOR_YELLOW);

	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e035      	b.n	8002c64 <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
 8002bfe:	3b20      	subs	r3, #32
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	7849      	ldrb	r1, [r1, #1]
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	440b      	add	r3, r1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e01a      	b.n	8002c52 <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00f      	beq.n	8002c4c <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	4413      	add	r3, r2
 8002c36:	b298      	uxth	r0, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <TM_ILI9341_Putc+0x11c>)
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7ff fcb0 	bl	80025ac <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d8de      	bhi.n	8002c1c <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	785b      	ldrb	r3, [r3, #1]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8c3      	bhi.n	8002bf8 <TM_ILI9341_Putc+0x84>
			}
		}
	}

	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <TM_ILI9341_Putc+0x118>)
 8002c80:	801a      	strh	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200004e4 	.word	0x200004e4
 8002c90:	200004e2 	.word	0x200004e2
 8002c94:	200004dc 	.word	0x200004dc

08002c98 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8002ca2:	f640 62c4 	movw	r2, #3780	; 0xec4
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f001 fbb1 	bl	8004410 <memset>
	broker->net = broker_net;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f001 fb9b 	bl	8004410 <memset>
	const uint8_t max_nb_bytes = 4;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8002cde:	7c3b      	ldrb	r3, [r7, #16]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	7d7a      	ldrb	r2, [r7, #21]
 8002cee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cf2:	7df9      	ldrb	r1, [r7, #23]
 8002cf4:	fb01 f202 	mul.w	r2, r1, r2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	01db      	lsls	r3, r3, #7
 8002d00:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8002d02:	7c3b      	ldrb	r3, [r7, #16]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8002d0a:	7c3b      	ldrb	r3, [r7, #16]
 8002d0c:	7dba      	ldrb	r2, [r7, #22]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d004      	beq.n	8002d1c <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8002d12:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	dbe1      	blt.n	8002cde <decode_pck_len+0x20>
 8002d1a:	e000      	b.n	8002d1e <decode_pck_len+0x60>
			break;
 8002d1c:	bf00      	nop
	return rem_length;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d2a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <broker_receive>:



bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8002d36:	b590      	push	{r4, r7, lr}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002d48:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	23f0      	movs	r3, #240	; 0xf0
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	47a0      	blx	r4
}
 8002d5c:	bf00      	nop
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
	...

08002d68 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	6018      	str	r0, [r3, #0]
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	6019      	str	r1, [r3, #0]
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
	switch (pckt_type) {
 8002d8e:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 8002d92:	3b01      	subs	r3, #1
 8002d94:	2b0b      	cmp	r3, #11
 8002d96:	f200 8146 	bhi.w	8003026 <broker_packets_dispatcher+0x2be>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <broker_packets_dispatcher+0x38>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08003027 	.word	0x08003027
 8002da8:	08002ea9 	.word	0x08002ea9
 8002dac:	08003027 	.word	0x08003027
 8002db0:	08003027 	.word	0x08003027
 8002db4:	08003027 	.word	0x08003027
 8002db8:	08003027 	.word	0x08003027
 8002dbc:	08002f0d 	.word	0x08002f0d
 8002dc0:	08003027 	.word	0x08003027
 8002dc4:	08002fd1 	.word	0x08002fd1
 8002dc8:	08003027 	.word	0x08003027
 8002dcc:	08003011 	.word	0x08003011
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 8002dd0:	f107 0214 	add.w	r2, r7, #20
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	4611      	mov	r1, r2
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	f000 fa1d 	bl	800321a <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 8002de0:	f107 0214 	add.w	r2, r7, #20
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4611      	mov	r1, r2
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	f000 fc00 	bl	80035f0 <broker_validate_conn>
		bool sesion_present = false;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (was_clean_session_requested(&conn_pck)
 8002df6:	f107 0314 	add.w	r3, r7, #20
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fc24 	bl	8003648 <was_clean_session_requested>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d017      	beq.n	8002e36 <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	6a1a      	ldr	r2, [r3, #32]
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	4611      	mov	r1, r2
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	f000 f966 	bl	80030e4 <is_client_exist>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4611      	mov	r1, r2
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f000 f98d 	bl	800314a <broker_remove_client>
			sesion_present = true;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 8002e36:	f107 0214 	add.w	r2, r7, #20
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	4611      	mov	r1, r2
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	f000 fbd5 	bl	80035f0 <broker_validate_conn>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	f107 0114 	add.w	r1, r7, #20
 8002e52:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f000 fb42 	bl	80034e0 <broker_create_new_client>
		add_client(broker, &new_client);
 8002e5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	4611      	mov	r1, r2
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	f000 f9b1 	bl	80031ce <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 8002e6c:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 8002e70:	f897 127f 	ldrb.w	r1, [r7, #639]	; 0x27f
 8002e74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fb10 	bl	800349e <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002e88:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8002e9c:	1d39      	adds	r1, r7, #4
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	6809      	ldr	r1, [r1, #0]
 8002ea2:	47a0      	blx	r4
		break;
 8002ea4:	bf00      	nop
 8002ea6:	e0be      	b.n	8003026 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 8002ea8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002eac:	f107 0308 	add.w	r3, r7, #8
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	f000 fbdc 	bl	8003670 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 8002eb8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8002ebc:	f107 030c 	add.w	r3, r7, #12
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	f000 fc40 	bl	8003748 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8002ec8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fc90 	bl	80037fa <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 8002eda:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f340 809c 	ble.w	8003024 <broker_packets_dispatcher+0x2bc>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002ef6:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8002efa:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8002efe:	1d39      	adds	r1, r7, #4
 8002f00:	2304      	movs	r3, #4
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	47a0      	blx	r4
		}
		break;
 8002f08:	bf00      	nop
 8002f0a:	e08b      	b.n	8003024 <broker_packets_dispatcher+0x2bc>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 8002f0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	4611      	mov	r1, r2
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	f000 fc8c 	bl	8003834 <broker_decode_subscribe>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8002f22:	1d3a      	adds	r2, r7, #4
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	6811      	ldr	r1, [r2, #0]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	f000 f8a4 	bl	8003078 <broker_get_client_by_socket>
 8002f30:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		uint8_t sub_result[MAX_SUBS_TOPIC];
		if (subscribing_client){
 8002f34:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00d      	beq.n	8002f58 <broker_packets_dispatcher+0x1f0>
			add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 8002f3c:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8002f40:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 8002f44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f48:	f103 010c 	add.w	r1, r3, #12
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8002f52:	f000 fdd1 	bl	8003af8 <add_subscriptions_from_list>
 8002f56:	e016      	b.n	8002f86 <broker_packets_dispatcher+0x21e>
		} else {
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8002f5e:	e00c      	b.n	8002f7a <broker_packets_dispatcher+0x212>
				sub_result[i] = SUB_ACK_FAIL;
 8002f60:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8002f64:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8002f68:	4413      	add	r3, r2
 8002f6a:	2250      	movs	r2, #80	; 0x50
 8002f6c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8002f70:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8002f74:	3301      	adds	r3, #1
 8002f76:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8002f7a:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 8002f7e:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d3ec      	bcc.n	8002f60 <broker_packets_dispatcher+0x1f8>
			}
		}
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 8002f86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	8819      	ldrh	r1, [r3, #0]
 8002f8e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002f92:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 8002f96:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8002f9a:	f000 fe39 	bl	8003c10 <encode_subscribe_ack>
		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&sub_ack, (SUB_ACK_ALL_HEAD_LEN + topic_nb));
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002fa8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8002fac:	f107 030c 	add.w	r3, r7, #12
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8002fc6:	1d39      	adds	r1, r7, #4
 8002fc8:	6809      	ldr	r1, [r1, #0]
 8002fca:	47a0      	blx	r4
		break;
 8002fcc:	bf00      	nop
 8002fce:	e02a      	b.n	8003026 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 8002fd0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002fd4:	f107 0308 	add.w	r3, r7, #8
 8002fd8:	4611      	mov	r1, r2
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	f000 fe40 	bl	8003c60 <broker_decode_unsubscribe>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8002fe6:	1d3a      	adds	r2, r7, #4
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	6811      	ldr	r1, [r2, #0]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	f000 f842 	bl	8003078 <broker_get_client_by_socket>
 8002ff4:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 8002ff8:	f897 2273 	ldrb.w	r2, [r7, #627]	; 0x273
 8002ffc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003000:	330c      	adds	r3, #12
 8003002:	4619      	mov	r1, r3
 8003004:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 8003008:	f000 ff13 	bl	8003e32 <delete_listed_subscriptions>
		break;
 800300c:	bf00      	nop
 800300e:	e00a      	b.n	8003026 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 8003010:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003014:	f107 0308 	add.w	r3, r7, #8
 8003018:	4611      	mov	r1, r2
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	f000 ff2b 	bl	8003e76 <broker_decode_ping_req>
		break;
 8003020:	bf00      	nop
 8003022:	e000      	b.n	8003026 <broker_packets_dispatcher+0x2be>
		break;
 8003024:	bf00      	nop
	}
	}
}
 8003026:	bf00      	nop
 8003028:	f507 7721 	add.w	r7, r7, #644	; 0x284
 800302c:	46bd      	mov	sp, r7
 800302e:	bd90      	pop	{r4, r7, pc}

08003030 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e013      	b.n	8003068 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	3310      	adds	r3, #16
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4413      	add	r3, r2
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd f87c 	bl	8000150 <strcmp>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <broker_get_client_pos_by_id+0x32>
			return i;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	e006      	b.n	8003070 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	3301      	adds	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b07      	cmp	r3, #7
 800306c:	d9e8      	bls.n	8003040 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 800306e:	23ff      	movs	r3, #255	; 0xff
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e025      	b.n	80030d4 <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d016      	beq.n	80030ce <broker_get_client_by_socket+0x56>
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	2210      	movs	r2, #16
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f978 	bl	80043a8 <memcmp>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	e006      	b.n	80030dc <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	3301      	adds	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d9d6      	bls.n	8003088 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ff9d 	bl	8003030 <broker_get_client_pos_by_id>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2bff      	cmp	r3, #255	; 0xff
 80030fa:	d001      	beq.n	8003100 <is_client_exist+0x1c>
		return true;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <is_client_exist+0x1e>
	}
	return false;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e00f      	b.n	8003138 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	4413      	add	r3, r2
 8003126:	3310      	adds	r3, #16
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <can_broker_accept_next_client+0x28>
			return true;
 800312e:	2301      	movs	r3, #1
 8003130:	e006      	b.n	8003140 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	3301      	adds	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b07      	cmp	r3, #7
 800313c:	d9ec      	bls.n	8003118 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ff6a 	bl	8003030 <broker_get_client_pos_by_id>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d00e      	beq.n	8003184 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f948 	bl	8004410 <memset>
		return true;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <broker_remove_client+0x3c>
	}
	return false;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e00f      	b.n	80031bc <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3310      	adds	r3, #16
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <broker_first_free_pos_for_client+0x28>
			return i;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	e006      	b.n	80031c4 <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	3301      	adds	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b07      	cmp	r3, #7
 80031c0:	d9ec      	bls.n	800319c <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 80031c2:	23ff      	movs	r3, #255	; 0xff
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ffd8 	bl	800318e <broker_first_free_pos_for_client>
 80031de:	4603      	mov	r3, r0
 80031e0:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80031e8:	fb02 f303 	mul.w	r3, r2, r3
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80031f4:	6839      	ldr	r1, [r7, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 f8e5 	bl	80043c6 <memcpy>
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	return true;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	441a      	add	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]
	pos ++;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	3301      	adds	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	441a      	add	r2, r3
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fd3a 	bl	8002cbe <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8003250:	7c3a      	ldrb	r2, [r7, #16]
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	4413      	add	r3, r2
 8003256:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	441a      	add	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	6892      	ldr	r2, [r2, #8]
 800326a:	8812      	ldrh	r2, [r2, #0]
 800326c:	0a12      	lsrs	r2, r2, #8
 800326e:	b292      	uxth	r2, r2
 8003270:	b211      	sxth	r1, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6892      	ldr	r2, [r2, #8]
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	0212      	lsls	r2, r2, #8
 800327a:	b212      	sxth	r2, r2
 800327c:	430a      	orrs	r2, r1
 800327e:	b212      	sxth	r2, r2
 8003280:	b292      	uxth	r2, r2
 8003282:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	3302      	adds	r3, #2
 8003288:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	441a      	add	r2, r3
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	4413      	add	r3, r2
 80032a0:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	441a      	add	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	611a      	str	r2, [r3, #16]
	pos += 1;
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	3301      	adds	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	441a      	add	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	615a      	str	r2, [r3, #20]
	pos += 1;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	3301      	adds	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	441a      	add	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	6992      	ldr	r2, [r2, #24]
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	0a12      	lsrs	r2, r2, #8
 80032d8:	b292      	uxth	r2, r2
 80032da:	b211      	sxth	r1, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	6992      	ldr	r2, [r2, #24]
 80032e0:	8812      	ldrh	r2, [r2, #0]
 80032e2:	0212      	lsls	r2, r2, #8
 80032e4:	b212      	sxth	r2, r2
 80032e6:	430a      	orrs	r2, r1
 80032e8:	b212      	sxth	r2, r2
 80032ea:	b292      	uxth	r2, r2
 80032ec:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	3302      	adds	r3, #2
 80032f2:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	441a      	add	r2, r3
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	69d2      	ldr	r2, [r2, #28]
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	0a12      	lsrs	r2, r2, #8
 800330a:	b292      	uxth	r2, r2
 800330c:	b211      	sxth	r1, r2
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	69d2      	ldr	r2, [r2, #28]
 8003312:	8812      	ldrh	r2, [r2, #0]
 8003314:	0212      	lsls	r2, r2, #8
 8003316:	b212      	sxth	r2, r2
 8003318:	430a      	orrs	r2, r1
 800331a:	b212      	sxth	r2, r2
 800331c:	b292      	uxth	r2, r2
 800331e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	3302      	adds	r3, #2
 8003324:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	441a      	add	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	4413      	add	r3, r2
 800333c:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d049      	beq.n	80033e2 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	441a      	add	r2, r3
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003360:	8812      	ldrh	r2, [r2, #0]
 8003362:	0a12      	lsrs	r2, r2, #8
 8003364:	b292      	uxth	r2, r2
 8003366:	b211      	sxth	r1, r2
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	0212      	lsls	r2, r2, #8
 8003370:	b212      	sxth	r2, r2
 8003372:	430a      	orrs	r2, r1
 8003374:	b212      	sxth	r2, r2
 8003376:	b292      	uxth	r2, r2
 8003378:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	3302      	adds	r3, #2
 800337e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8003380:	7dfb      	ldrb	r3, [r7, #23]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	441a      	add	r2, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	4413      	add	r3, r2
 8003396:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	441a      	add	r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	0a12      	lsrs	r2, r2, #8
 80033ae:	b292      	uxth	r2, r2
 80033b0:	b211      	sxth	r1, r2
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	0212      	lsls	r2, r2, #8
 80033ba:	b212      	sxth	r2, r2
 80033bc:	430a      	orrs	r2, r1
 80033be:	b212      	sxth	r2, r2
 80033c0:	b292      	uxth	r2, r2
 80033c2:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	3302      	adds	r3, #2
 80033c8:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	441a      	add	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	4413      	add	r3, r2
 80033e0:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d024      	beq.n	800343c <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	441a      	add	r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003404:	8812      	ldrh	r2, [r2, #0]
 8003406:	0a12      	lsrs	r2, r2, #8
 8003408:	b292      	uxth	r2, r2
 800340a:	b211      	sxth	r1, r2
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003410:	8812      	ldrh	r2, [r2, #0]
 8003412:	0212      	lsls	r2, r2, #8
 8003414:	b212      	sxth	r2, r2
 8003416:	430a      	orrs	r2, r1
 8003418:	b212      	sxth	r2, r2
 800341a:	b292      	uxth	r2, r2
 800341c:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	3302      	adds	r3, #2
 8003422:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	441a      	add	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	4413      	add	r3, r2
 800343a:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d024      	beq.n	8003496 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	441a      	add	r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800345e:	8812      	ldrh	r2, [r2, #0]
 8003460:	0a12      	lsrs	r2, r2, #8
 8003462:	b292      	uxth	r2, r2
 8003464:	b211      	sxth	r1, r2
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346a:	8812      	ldrh	r2, [r2, #0]
 800346c:	0212      	lsls	r2, r2, #8
 800346e:	b212      	sxth	r2, r2
 8003470:	430a      	orrs	r2, r1
 8003472:	b212      	sxth	r2, r2
 8003474:	b292      	uxth	r2, r2
 8003476:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	3302      	adds	r3, #2
 800347c:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	441a      	add	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	4413      	add	r3, r2
 8003494:	75fb      	strb	r3, [r7, #23]
	}
}
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70fb      	strb	r3, [r7, #3]
 80034aa:	4613      	mov	r3, r2
 80034ac:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 80034ae:	2204      	movs	r2, #4
 80034b0:	2100      	movs	r1, #0
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ffac 	bl	8004410 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	7893      	ldrb	r3, [r2, #2]
 80034c8:	78f9      	ldrb	r1, [r7, #3]
 80034ca:	f361 0300 	bfi	r3, r1, #0, #1
 80034ce:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	78ba      	ldrb	r2, [r7, #2]
 80034d4:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 80034d6:	687b      	ldr	r3, [r7, #4]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 80034ec:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80034f0:	2100      	movs	r1, #0
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 ff8c 	bl	8004410 <memset>
	memcpy(&new_client->sockaddr, sockaddr, sizeof (sockaddr_t));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2210      	movs	r2, #16
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 ff61 	bl	80043c6 <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f103 0010 	add.w	r0, r3, #16
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6a19      	ldr	r1, [r3, #32]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	f001 f8c7 	bl	80046a8 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f103 0073 	add.w	r0, r3, #115	; 0x73
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	f001 f89f 	bl	80046a8 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f001 f894 	bl	80046a8 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f103 0032 	add.w	r0, r3, #50	; 0x32
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f001 f877 	bl	80046a8 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f103 0052 	add.w	r0, r3, #82	; 0x52
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	f001 f864 	bl	80046a8 <strncpy>
	}

	new_client->connected = true;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d001      	beq.n	8003608 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 8003604:	2301      	movs	r3, #1
 8003606:	e01b      	b.n	8003640 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fd7e 	bl	800310a <can_broker_accept_next_client>
 800360e:	4603      	mov	r3, r0
 8003610:	f083 0301 	eor.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 800361a:	2303      	movs	r3, #3
 800361c:	e010      	b.n	8003640 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7ff fdeb 	bl	8003204 <is_client_authorised>
 800362e:	4603      	mov	r3, r0
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 800363a:	2305      	movs	r3, #5
 800363c:	e000      	b.n	8003640 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 800363e:	2300      	movs	r3, #0
	}
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
	pos ++;
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	3301      	adds	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	441a      	add	r2, r3
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fb11 	bl	8002cbe <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80036a2:	7c3a      	ldrb	r2, [r7, #16]
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	4413      	add	r3, r2
 80036a8:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	441a      	add	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	6892      	ldr	r2, [r2, #8]
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	0a12      	lsrs	r2, r2, #8
 80036c0:	b292      	uxth	r2, r2
 80036c2:	b211      	sxth	r1, r2
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	6892      	ldr	r2, [r2, #8]
 80036c8:	8812      	ldrh	r2, [r2, #0]
 80036ca:	0212      	lsls	r2, r2, #8
 80036cc:	b212      	sxth	r2, r2
 80036ce:	430a      	orrs	r2, r1
 80036d0:	b212      	sxth	r2, r2
 80036d2:	b292      	uxth	r2, r2
 80036d4:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	3302      	adds	r3, #2
 80036da:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	441a      	add	r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	4413      	add	r3, r2
 80036f2:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	dd18      	ble.n	8003736 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8003704:	7dfb      	ldrb	r3, [r7, #23]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	441a      	add	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	6912      	ldr	r2, [r2, #16]
 8003716:	8812      	ldrh	r2, [r2, #0]
 8003718:	0a12      	lsrs	r2, r2, #8
 800371a:	b292      	uxth	r2, r2
 800371c:	b211      	sxth	r1, r2
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6912      	ldr	r2, [r2, #16]
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	0212      	lsls	r2, r2, #8
 8003726:	b212      	sxth	r2, r2
 8003728:	430a      	orrs	r2, r1
 800372a:	b212      	sxth	r2, r2
 800372c:	b292      	uxth	r2, r2
 800372e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	3302      	adds	r3, #2
 8003734:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	441a      	add	r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	615a      	str	r2, [r3, #20]
}
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	e049      	b.n	80037ec <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03a      	beq.n	80037e6 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8003770:	2300      	movs	r3, #0
 8003772:	73bb      	strb	r3, [r7, #14]
 8003774:	e034      	b.n	80037e0 <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 8003784:	7bf9      	ldrb	r1, [r7, #15]
 8003786:	7bba      	ldrb	r2, [r7, #14]
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8003794:	fb02 f201 	mul.w	r2, r2, r1
 8003798:	4413      	add	r3, r2
 800379a:	33b0      	adds	r3, #176	; 0xb0
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	3308      	adds	r3, #8
 80037a2:	89ba      	ldrh	r2, [r7, #12]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 ff6c 	bl	8004684 <strncmp>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d013      	beq.n	80037da <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80037b8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	18d1      	adds	r1, r2, r3
 80037d2:	463a      	mov	r2, r7
 80037d4:	2318      	movs	r3, #24
 80037d6:	47a0      	blx	r4
					break;
 80037d8:	e005      	b.n	80037e6 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 80037da:	7bbb      	ldrb	r3, [r7, #14]
 80037dc:	3301      	adds	r3, #1
 80037de:	73bb      	strb	r3, [r7, #14]
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	2b07      	cmp	r3, #7
 80037e4:	d9c7      	bls.n	8003776 <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	3301      	adds	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b07      	cmp	r3, #7
 80037f0:	d9b2      	bls.n	8003758 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}

080037fa <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2240      	movs	r2, #64	; 0x40
 800380a:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = X_HTONS(pckt_id);
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	b29b      	uxth	r3, r3
 8003818:	b21a      	sxth	r2, r3
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	b21b      	sxth	r3, r3
 8003820:	4313      	orrs	r3, r2
 8003822:	b21b      	sxth	r3, r3
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	805a      	strh	r2, [r3, #2]
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
	pos++;
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	3301      	adds	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	441a      	add	r2, r3
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fa2f 	bl	8002cbe <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8003866:	7c3a      	ldrb	r2, [r7, #16]
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	4413      	add	r3, r2
 800386c:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	441a      	add	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	0a12      	lsrs	r2, r2, #8
 8003884:	b292      	uxth	r2, r2
 8003886:	b211      	sxth	r1, r2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	6892      	ldr	r2, [r2, #8]
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	0212      	lsls	r2, r2, #8
 8003890:	b212      	sxth	r2, r2
 8003892:	430a      	orrs	r2, r1
 8003894:	b212      	sxth	r2, r2
 8003896:	b292      	uxth	r2, r2
 8003898:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	3302      	adds	r3, #2
 800389e:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 80038a0:	2302      	movs	r3, #2
 80038a2:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80038a8:	e060      	b.n	800396c <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 80038aa:	7dba      	ldrb	r2, [r7, #22]
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4419      	add	r1, r3
 80038b2:	6838      	ldr	r0, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4403      	add	r3, r0
 80038be:	330c      	adds	r3, #12
 80038c0:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 80038c2:	7dba      	ldrb	r2, [r7, #22]
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	330c      	adds	r3, #12
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	7dba      	ldrb	r2, [r7, #22]
 80038d6:	6838      	ldr	r0, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4403      	add	r3, r0
 80038e2:	330c      	adds	r3, #12
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	b218      	sxth	r0, r3
 80038ee:	7dba      	ldrb	r2, [r7, #22]
 80038f0:	683c      	ldr	r4, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4423      	add	r3, r4
 80038fc:	330c      	adds	r3, #12
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	b21b      	sxth	r3, r3
 8003906:	4303      	orrs	r3, r0
 8003908:	b21b      	sxth	r3, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	800b      	strh	r3, [r1, #0]
		pos += 2;
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	3302      	adds	r3, #2
 8003912:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8003914:	7dba      	ldrb	r2, [r7, #22]
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4419      	add	r1, r3
 800391c:	6838      	ldr	r0, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4403      	add	r3, r0
 8003928:	3310      	adds	r3, #16
 800392a:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 800392c:	7dba      	ldrb	r2, [r7, #22]
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	330c      	adds	r3, #12
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	4413      	add	r3, r2
 8003946:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8003948:	7dba      	ldrb	r2, [r7, #22]
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4419      	add	r1, r3
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4403      	add	r3, r0
 800395c:	3314      	adds	r3, #20
 800395e:	6019      	str	r1, [r3, #0]
		pos += 1;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	3301      	adds	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8003966:	7dbb      	ldrb	r3, [r7, #22]
 8003968:	3301      	adds	r3, #1
 800396a:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 800396c:	7dfa      	ldrb	r2, [r7, #23]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	7d7b      	ldrb	r3, [r7, #21]
 8003974:	440b      	add	r3, r1
 8003976:	429a      	cmp	r2, r3
 8003978:	d397      	bcc.n	80038aa <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 800397a:	7dbb      	ldrb	r3, [r7, #22]
}
 800397c:	4618      	mov	r0, r3
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bd90      	pop	{r4, r7, pc}

08003984 <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	461a      	mov	r2, r3
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fd05 	bl	80043a8 <memcmp>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <is_the_same_topic+0x24>
		return true;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <is_the_same_topic+0x26>
	}
	return false;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	4613      	mov	r3, r2
 80039be:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]
 80039c4:	e020      	b.n	8003a08 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 80039c6:	7dfa      	ldrb	r2, [r7, #23]
 80039c8:	68f9      	ldr	r1, [r7, #12]
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	33b8      	adds	r3, #184	; 0xb8
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 80039dc:	7dfa      	ldrb	r2, [r7, #23]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	33b0      	adds	r3, #176	; 0xb0
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	3308      	adds	r3, #8
 80039ee:	79fa      	ldrb	r2, [r7, #7]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ffc6 	bl	8003984 <is_the_same_topic>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <get_subscribed_topic_pos+0x50>
			return i;
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	e006      	b.n	8003a10 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	3301      	adds	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b07      	cmp	r3, #7
 8003a0c:	d9db      	bls.n	80039c6 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 8003a0e:	23ff      	movs	r3, #255	; 0xff
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e00f      	b.n	8003a64 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8003a44:	7bfa      	ldrb	r2, [r7, #15]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	33b8      	adds	r3, #184	; 0xb8
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	e006      	b.n	8003a6c <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	3301      	adds	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b07      	cmp	r3, #7
 8003a68:	d9ec      	bls.n	8003a44 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 8003a6a:	23ff      	movs	r3, #255	; 0xff
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ffd8 	bl	8003a36 <find_first_free_slot_for_subs_topic>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2bff      	cmp	r3, #255	; 0xff
 8003a8e:	d02e      	beq.n	8003aee <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	33b0      	adds	r3, #176	; 0xb0
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f103 0008 	add.w	r0, r3, #8
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fc89 	bl	80043c6 <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	33b0      	adds	r3, #176	; 0xb0
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3306      	adds	r3, #6
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	8812      	ldrh	r2, [r2, #0]
 8003acc:	b292      	uxth	r2, r2
 8003ace:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	33d0      	adds	r3, #208	; 0xd0
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
		return true;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <add_new_subscription_to_client+0x7a>
	}
	return false;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8003b0c:	e077      	b.n	8003bfe <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 8003b0e:	7dfa      	ldrb	r2, [r7, #23]
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	7dfa      	ldrb	r2, [r7, #23]
 8003b22:	4613      	mov	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4413      	add	r3, r2
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff ff3a 	bl	80039b2 <get_subscribed_topic_pos>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){ //reverse if & else
 8003b42:	7d7b      	ldrb	r3, [r7, #21]
 8003b44:	2bff      	cmp	r3, #255	; 0xff
 8003b46:	d024      	beq.n	8003b92 <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 8003b48:	7d7a      	ldrb	r2, [r7, #21]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	33b0      	adds	r3, #176	; 0xb0
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	1d98      	adds	r0, r3, #6
 8003b5a:	7dfa      	ldrb	r2, [r7, #23]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7ff ff52 	bl	8003a18 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos; //refactor, extract doubled code
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	18d1      	adds	r1, r2, r3
 8003b7a:	7dfa      	ldrb	r2, [r7, #23]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4413      	add	r3, r2
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	700b      	strb	r3, [r1, #0]
 8003b90:	e032      	b.n	8003bf8 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 8003b92:	7dfa      	ldrb	r2, [r7, #23]
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff ff66 	bl	8003a76 <add_new_subscription_to_client>
 8003baa:	4603      	mov	r3, r0
 8003bac:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	18d1      	adds	r1, r2, r3
 8003bb4:	7dfa      	ldrb	r2, [r7, #23]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	700b      	strb	r3, [r1, #0]
			if (!res){
 8003bca:	7d3b      	ldrb	r3, [r7, #20]
 8003bcc:	f083 0301 	eor.w	r3, r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	75bb      	strb	r3, [r7, #22]
 8003bda:	e007      	b.n	8003bec <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 8003bdc:	7dbb      	ldrb	r3, [r7, #22]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	2250      	movs	r2, #80	; 0x50
 8003be4:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8003be6:	7dbb      	ldrb	r3, [r7, #22]
 8003be8:	3301      	adds	r3, #1
 8003bea:	75bb      	strb	r3, [r7, #22]
 8003bec:	7dba      	ldrb	r2, [r7, #22]
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3f3      	bcc.n	8003bdc <add_subscriptions_from_list+0xe4>
				}
			return false;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e007      	b.n	8003c08 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8003bfe:	7dfa      	ldrb	r2, [r7, #23]
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d383      	bcc.n	8003b0e <add_subscriptions_from_list+0x16>
	}
	return true;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2290      	movs	r2, #144	; 0x90
 8003c26:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_VAR_HEAD_LEN + topic_nb;  //(?)
 8003c28:	7a7b      	ldrb	r3, [r7, #9]
 8003c2a:	3302      	adds	r3, #2
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = X_HTONS(pckt_id);
 8003c32:	897b      	ldrh	r3, [r7, #10]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	b21a      	sxth	r2, r3
 8003c3a:	897b      	ldrh	r3, [r7, #10]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	7a7a      	ldrb	r2, [r7, #9]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fbb7 	bl	80043c6 <memcpy>
}
 8003c58:	bf00      	nop
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]
	pos++;
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	3301      	adds	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	441a      	add	r2, r3
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff f819 	bl	8002cbe <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8003c92:	7c3a      	ldrb	r2, [r7, #16]
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	4413      	add	r3, r2
 8003c98:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	6892      	ldr	r2, [r2, #8]
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	0a12      	lsrs	r2, r2, #8
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	b211      	sxth	r1, r2
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	6892      	ldr	r2, [r2, #8]
 8003cb8:	8812      	ldrh	r2, [r2, #0]
 8003cba:	0212      	lsls	r2, r2, #8
 8003cbc:	b212      	sxth	r2, r2
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	b212      	sxth	r2, r2
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8003cd4:	e060      	b.n	8003d98 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8003cd6:	7dba      	ldrb	r2, [r7, #22]
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4419      	add	r1, r3
 8003cde:	6838      	ldr	r0, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4403      	add	r3, r0
 8003cea:	330c      	adds	r3, #12
 8003cec:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 8003cee:	7dba      	ldrb	r2, [r7, #22]
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	7dba      	ldrb	r2, [r7, #22]
 8003d02:	6838      	ldr	r0, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	330c      	adds	r3, #12
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b218      	sxth	r0, r3
 8003d1a:	7dba      	ldrb	r2, [r7, #22]
 8003d1c:	683c      	ldr	r4, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4423      	add	r3, r4
 8003d28:	330c      	adds	r3, #12
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4303      	orrs	r3, r0
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8003d40:	7dba      	ldrb	r2, [r7, #22]
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4419      	add	r1, r3
 8003d48:	6838      	ldr	r0, [r7, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4403      	add	r3, r0
 8003d54:	3310      	adds	r3, #16
 8003d56:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 8003d58:	7dba      	ldrb	r2, [r7, #22]
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	330c      	adds	r3, #12
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
 8003d70:	4413      	add	r3, r2
 8003d72:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8003d74:	7dba      	ldrb	r2, [r7, #22]
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4419      	add	r1, r3
 8003d7c:	6838      	ldr	r0, [r7, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4403      	add	r3, r0
 8003d88:	3314      	adds	r3, #20
 8003d8a:	6019      	str	r1, [r3, #0]
		pos += 1;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8003d92:	7dbb      	ldrb	r3, [r7, #22]
 8003d94:	3301      	adds	r3, #1
 8003d96:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8003d98:	7dfa      	ldrb	r2, [r7, #23]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	7d7b      	ldrb	r3, [r7, #21]
 8003da0:	440b      	add	r3, r1
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d397      	bcc.n	8003cd6 <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 8003da6:	7dbb      	ldrb	r3, [r7, #22]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]
 8003dbe:	e031      	b.n	8003e24 <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	33b8      	adds	r3, #184	; 0xb8
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 8003dd6:	7bfa      	ldrb	r2, [r7, #15]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	33b0      	adds	r3, #176	; 0xb0
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	f103 0008 	add.w	r0, r3, #8
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	f7ff fdc4 	bl	8003984 <is_the_same_topic>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 8003e02:	7bfa      	ldrb	r2, [r7, #15]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	33b0      	adds	r3, #176	; 0xb0
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	3306      	adds	r3, #6
 8003e14:	2224      	movs	r2, #36	; 0x24
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 faf9 	bl	8004410 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	3301      	adds	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b07      	cmp	r3, #7
 8003e28:	d9ca      	bls.n	8003dc0 <delete_subscribed_topic+0x10>
		}
	}
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8003e44:	e00e      	b.n	8003e64 <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 8003e46:	7dfa      	ldrb	r2, [r7, #23]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ffa9 	bl	8003db0 <delete_subscribed_topic>
		i++;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	3301      	adds	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8003e64:	7dfa      	ldrb	r2, [r7, #23]
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3ec      	bcc.n	8003e46 <delete_listed_subscriptions+0x14>
	}
	return true;
 8003e6c:	2301      	movs	r3, #1
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	441a      	add	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]
	pos++;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3301      	adds	r3, #1
 8003e92:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	441a      	add	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <_ZNSaIcEC1Ev>:
 8003ea8:	4770      	bx	lr

08003eaa <_ZNSaIcED1Ev>:
 8003eaa:	4770      	bx	lr

08003eac <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8003eac:	b10a      	cbz	r2, 8003eb2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8003eae:	f000 ba8a 	b.w	80043c6 <memcpy>
 8003eb2:	4770      	bx	lr

08003eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003eb4:	b508      	push	{r3, lr}
 8003eb6:	680b      	ldr	r3, [r1, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da02      	bge.n	8003ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8003ebc:	4809      	ldr	r0, [pc, #36]	; (8003ee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8003ebe:	f000 f8c2 	bl	8004046 <_ZSt20__throw_length_errorPKc>
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d908      	bls.n	8003ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8003ec6:	0052      	lsls	r2, r2, #1
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d205      	bcs.n	8003ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8003ecc:	2a00      	cmp	r2, #0
 8003ece:	bfb6      	itet	lt
 8003ed0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8003ed4:	600a      	strge	r2, [r1, #0]
 8003ed6:	600b      	strlt	r3, [r1, #0]
 8003ed8:	6808      	ldr	r0, [r1, #0]
 8003eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ede:	3001      	adds	r0, #1
 8003ee0:	f000 b8b6 	b.w	8004050 <_Znwj>
 8003ee4:	08006136 	.word	0x08006136

08003ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f853 0b08 	ldr.w	r0, [r3], #8
 8003eee:	4298      	cmp	r0, r3
 8003ef0:	d001      	beq.n	8003ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8003ef2:	f000 b8ab 	b.w	800404c <_ZdlPv>
 8003ef6:	4770      	bx	lr

08003ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003ef8:	2a01      	cmp	r2, #1
 8003efa:	b510      	push	{r4, lr}
 8003efc:	d102      	bne.n	8003f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8003efe:	780a      	ldrb	r2, [r1, #0]
 8003f00:	7002      	strb	r2, [r0, #0]
 8003f02:	bd10      	pop	{r4, pc}
 8003f04:	f7ff ffd2 	bl	8003eac <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8003f08:	bd10      	pop	{r4, pc}

08003f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003f0a:	b508      	push	{r3, lr}
 8003f0c:	1a52      	subs	r2, r2, r1
 8003f0e:	f7ff fff3 	bl	8003ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f12:	bd08      	pop	{r3, pc}

08003f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8003f14:	4288      	cmp	r0, r1
 8003f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f18:	4604      	mov	r4, r0
 8003f1a:	460e      	mov	r6, r1
 8003f1c:	d020      	beq.n	8003f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8003f1e:	6802      	ldr	r2, [r0, #0]
 8003f20:	f100 0308 	add.w	r3, r0, #8
 8003f24:	429a      	cmp	r2, r3
 8003f26:	bf08      	it	eq
 8003f28:	220f      	moveq	r2, #15
 8003f2a:	684d      	ldr	r5, [r1, #4]
 8003f2c:	bf18      	it	ne
 8003f2e:	6882      	ldrne	r2, [r0, #8]
 8003f30:	42aa      	cmp	r2, r5
 8003f32:	d20b      	bcs.n	8003f4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8003f34:	a902      	add	r1, sp, #8
 8003f36:	f841 5d04 	str.w	r5, [r1, #-4]!
 8003f3a:	f7ff ffbb 	bl	8003eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003f3e:	4607      	mov	r7, r0
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7ff ffd1 	bl	8003ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003f46:	9b01      	ldr	r3, [sp, #4]
 8003f48:	6027      	str	r7, [r4, #0]
 8003f4a:	60a3      	str	r3, [r4, #8]
 8003f4c:	b125      	cbz	r5, 8003f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8003f4e:	462a      	mov	r2, r5
 8003f50:	6831      	ldr	r1, [r6, #0]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	f7ff ffd0 	bl	8003ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	6065      	str	r5, [r4, #4]
 8003f5e:	555a      	strb	r2, [r3, r5]
 8003f60:	b003      	add	sp, #12
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8003f64:	f100 0208 	add.w	r2, r0, #8
 8003f68:	6002      	str	r2, [r0, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6042      	str	r2, [r0, #4]
 8003f6e:	7202      	strb	r2, [r0, #8]
 8003f70:	4770      	bx	lr

08003f72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003f72:	b510      	push	{r4, lr}
 8003f74:	4604      	mov	r4, r0
 8003f76:	f7ff ffb7 	bl	8003ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003f7a:	4620      	mov	r0, r4
 8003f7c:	bd10      	pop	{r4, pc}

08003f7e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8003f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f80:	460b      	mov	r3, r1
 8003f82:	4606      	mov	r6, r0
 8003f84:	f853 7b08 	ldr.w	r7, [r3], #8
 8003f88:	4605      	mov	r5, r0
 8003f8a:	42bb      	cmp	r3, r7
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	f856 2b08 	ldr.w	r2, [r6], #8
 8003f92:	d016      	beq.n	8003fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 8003f94:	4296      	cmp	r6, r2
 8003f96:	bf08      	it	eq
 8003f98:	2200      	moveq	r2, #0
 8003f9a:	6849      	ldr	r1, [r1, #4]
 8003f9c:	6007      	str	r7, [r0, #0]
 8003f9e:	6041      	str	r1, [r0, #4]
 8003fa0:	68a1      	ldr	r1, [r4, #8]
 8003fa2:	bf18      	it	ne
 8003fa4:	f8d0 e008 	ldrne.w	lr, [r0, #8]
 8003fa8:	6081      	str	r1, [r0, #8]
 8003faa:	b142      	cbz	r2, 8003fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8003fac:	6022      	str	r2, [r4, #0]
 8003fae:	f8c4 e008 	str.w	lr, [r4, #8]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	6063      	str	r3, [r4, #4]
 8003fb8:	7013      	strb	r3, [r2, #0]
 8003fba:	4628      	mov	r0, r5
 8003fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	e7f7      	b.n	8003fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8003fc2:	f7ff ffa7 	bl	8003f14 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8003fc6:	e7f4      	b.n	8003fb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08003fc8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8003fc8:	6800      	ldr	r0, [r0, #0]
 8003fca:	4770      	bx	lr

08003fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003fcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fce:	4604      	mov	r4, r0
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	460d      	mov	r5, r1
 8003fd4:	b901      	cbnz	r1, 8003fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 8003fd6:	b9ba      	cbnz	r2, 8004008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 8003fd8:	1b73      	subs	r3, r6, r5
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	d907      	bls.n	8003ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	a901      	add	r1, sp, #4
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f7ff ff65 	bl	8003eb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003fea:	9b01      	ldr	r3, [sp, #4]
 8003fec:	6020      	str	r0, [r4, #0]
 8003fee:	60a3      	str	r3, [r4, #8]
 8003ff0:	4632      	mov	r2, r6
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	f7ff ff88 	bl	8003f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	9b01      	ldr	r3, [sp, #4]
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	54d1      	strb	r1, [r2, r3]
 8004004:	b002      	add	sp, #8
 8004006:	bd70      	pop	{r4, r5, r6, pc}
 8004008:	4801      	ldr	r0, [pc, #4]	; (8004010 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800400a:	f000 f819 	bl	8004040 <_ZSt19__throw_logic_errorPKc>
 800400e:	bf00      	nop
 8004010:	0800610c 	.word	0x0800610c

08004014 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	f100 0308 	add.w	r3, r0, #8
 800401a:	4604      	mov	r4, r0
 800401c:	6003      	str	r3, [r0, #0]
 800401e:	460d      	mov	r5, r1
 8004020:	b159      	cbz	r1, 800403a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8004022:	4608      	mov	r0, r1
 8004024:	f7fc f89e 	bl	8000164 <strlen>
 8004028:	182a      	adds	r2, r5, r0
 800402a:	4620      	mov	r0, r4
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	4629      	mov	r1, r5
 8004032:	f7ff ffcb 	bl	8003fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8004036:	4620      	mov	r0, r4
 8004038:	bd38      	pop	{r3, r4, r5, pc}
 800403a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800403e:	e7f4      	b.n	800402a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08004040 <_ZSt19__throw_logic_errorPKc>:
 8004040:	b508      	push	{r3, lr}
 8004042:	f000 f967 	bl	8004314 <abort>

08004046 <_ZSt20__throw_length_errorPKc>:
 8004046:	b508      	push	{r3, lr}
 8004048:	f000 f964 	bl	8004314 <abort>

0800404c <_ZdlPv>:
 800404c:	f000 b996 	b.w	800437c <free>

08004050 <_Znwj>:
 8004050:	b510      	push	{r4, lr}
 8004052:	2800      	cmp	r0, #0
 8004054:	bf14      	ite	ne
 8004056:	4604      	movne	r4, r0
 8004058:	2401      	moveq	r4, #1
 800405a:	4620      	mov	r0, r4
 800405c:	f000 f986 	bl	800436c <malloc>
 8004060:	b930      	cbnz	r0, 8004070 <_Znwj+0x20>
 8004062:	f000 f807 	bl	8004074 <_ZSt15get_new_handlerv>
 8004066:	b908      	cbnz	r0, 800406c <_Znwj+0x1c>
 8004068:	f000 f954 	bl	8004314 <abort>
 800406c:	4780      	blx	r0
 800406e:	e7f4      	b.n	800405a <_Znwj+0xa>
 8004070:	bd10      	pop	{r4, pc}
	...

08004074 <_ZSt15get_new_handlerv>:
 8004074:	4b02      	ldr	r3, [pc, #8]	; (8004080 <_ZSt15get_new_handlerv+0xc>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	f3bf 8f5b 	dmb	ish
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2000042c 	.word	0x2000042c

08004084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8004084:	4b24      	ldr	r3, [pc, #144]	; (8004118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	07d0      	lsls	r0, r2, #31
 800408a:	bf5c      	itt	pl
 800408c:	2201      	movpl	r2, #1
 800408e:	601a      	strpl	r2, [r3, #0]
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	07d1      	lsls	r1, r2, #31
 8004096:	bf5c      	itt	pl
 8004098:	2201      	movpl	r2, #1
 800409a:	601a      	strpl	r2, [r3, #0]
 800409c:	4b20      	ldr	r3, [pc, #128]	; (8004120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	07d2      	lsls	r2, r2, #31
 80040a2:	bf5c      	itt	pl
 80040a4:	2201      	movpl	r2, #1
 80040a6:	601a      	strpl	r2, [r3, #0]
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	07d0      	lsls	r0, r2, #31
 80040ae:	bf5c      	itt	pl
 80040b0:	2201      	movpl	r2, #1
 80040b2:	601a      	strpl	r2, [r3, #0]
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	07d1      	lsls	r1, r2, #31
 80040ba:	bf5c      	itt	pl
 80040bc:	2201      	movpl	r2, #1
 80040be:	601a      	strpl	r2, [r3, #0]
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	07d2      	lsls	r2, r2, #31
 80040c6:	bf5c      	itt	pl
 80040c8:	2201      	movpl	r2, #1
 80040ca:	601a      	strpl	r2, [r3, #0]
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	07d0      	lsls	r0, r2, #31
 80040d2:	bf5c      	itt	pl
 80040d4:	2201      	movpl	r2, #1
 80040d6:	601a      	strpl	r2, [r3, #0]
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	07d1      	lsls	r1, r2, #31
 80040de:	bf5c      	itt	pl
 80040e0:	2201      	movpl	r2, #1
 80040e2:	601a      	strpl	r2, [r3, #0]
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	07d2      	lsls	r2, r2, #31
 80040ea:	bf5c      	itt	pl
 80040ec:	2201      	movpl	r2, #1
 80040ee:	601a      	strpl	r2, [r3, #0]
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	07d0      	lsls	r0, r2, #31
 80040f6:	bf5c      	itt	pl
 80040f8:	2201      	movpl	r2, #1
 80040fa:	601a      	strpl	r2, [r3, #0]
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	07d1      	lsls	r1, r2, #31
 8004102:	bf5c      	itt	pl
 8004104:	2201      	movpl	r2, #1
 8004106:	601a      	strpl	r2, [r3, #0]
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	07d2      	lsls	r2, r2, #31
 800410e:	bf5c      	itt	pl
 8004110:	2201      	movpl	r2, #1
 8004112:	601a      	strpl	r2, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	2000045c 	.word	0x2000045c
 800411c:	20000458 	.word	0x20000458
 8004120:	20000454 	.word	0x20000454
 8004124:	20000450 	.word	0x20000450
 8004128:	2000044c 	.word	0x2000044c
 800412c:	20000448 	.word	0x20000448
 8004130:	20000444 	.word	0x20000444
 8004134:	20000440 	.word	0x20000440
 8004138:	2000043c 	.word	0x2000043c
 800413c:	20000438 	.word	0x20000438
 8004140:	20000434 	.word	0x20000434
 8004144:	20000430 	.word	0x20000430

08004148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	07d1      	lsls	r1, r2, #31
 800414e:	bf5c      	itt	pl
 8004150:	2201      	movpl	r2, #1
 8004152:	601a      	strpl	r2, [r3, #0]
 8004154:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	07d2      	lsls	r2, r2, #31
 800415a:	bf5c      	itt	pl
 800415c:	2201      	movpl	r2, #1
 800415e:	601a      	strpl	r2, [r3, #0]
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	07d0      	lsls	r0, r2, #31
 8004166:	bf5c      	itt	pl
 8004168:	2201      	movpl	r2, #1
 800416a:	601a      	strpl	r2, [r3, #0]
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	07d1      	lsls	r1, r2, #31
 8004172:	bf5c      	itt	pl
 8004174:	2201      	movpl	r2, #1
 8004176:	601a      	strpl	r2, [r3, #0]
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	07d2      	lsls	r2, r2, #31
 800417e:	bf5c      	itt	pl
 8004180:	2201      	movpl	r2, #1
 8004182:	601a      	strpl	r2, [r3, #0]
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	07d0      	lsls	r0, r2, #31
 800418a:	bf5c      	itt	pl
 800418c:	2201      	movpl	r2, #1
 800418e:	601a      	strpl	r2, [r3, #0]
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	07d1      	lsls	r1, r2, #31
 8004196:	bf5c      	itt	pl
 8004198:	2201      	movpl	r2, #1
 800419a:	601a      	strpl	r2, [r3, #0]
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	07d2      	lsls	r2, r2, #31
 80041a2:	bf5c      	itt	pl
 80041a4:	2201      	movpl	r2, #1
 80041a6:	601a      	strpl	r2, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	2000047c 	.word	0x2000047c
 80041b0:	20000478 	.word	0x20000478
 80041b4:	20000474 	.word	0x20000474
 80041b8:	20000470 	.word	0x20000470
 80041bc:	2000046c 	.word	0x2000046c
 80041c0:	20000468 	.word	0x20000468
 80041c4:	20000464 	.word	0x20000464
 80041c8:	20000460 	.word	0x20000460

080041cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80041cc:	4b24      	ldr	r3, [pc, #144]	; (8004260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	07d0      	lsls	r0, r2, #31
 80041d2:	bf5c      	itt	pl
 80041d4:	2201      	movpl	r2, #1
 80041d6:	601a      	strpl	r2, [r3, #0]
 80041d8:	4b22      	ldr	r3, [pc, #136]	; (8004264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	07d1      	lsls	r1, r2, #31
 80041de:	bf5c      	itt	pl
 80041e0:	2201      	movpl	r2, #1
 80041e2:	601a      	strpl	r2, [r3, #0]
 80041e4:	4b20      	ldr	r3, [pc, #128]	; (8004268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	07d2      	lsls	r2, r2, #31
 80041ea:	bf5c      	itt	pl
 80041ec:	2201      	movpl	r2, #1
 80041ee:	601a      	strpl	r2, [r3, #0]
 80041f0:	4b1e      	ldr	r3, [pc, #120]	; (800426c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	07d0      	lsls	r0, r2, #31
 80041f6:	bf5c      	itt	pl
 80041f8:	2201      	movpl	r2, #1
 80041fa:	601a      	strpl	r2, [r3, #0]
 80041fc:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	07d1      	lsls	r1, r2, #31
 8004202:	bf5c      	itt	pl
 8004204:	2201      	movpl	r2, #1
 8004206:	601a      	strpl	r2, [r3, #0]
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	07d2      	lsls	r2, r2, #31
 800420e:	bf5c      	itt	pl
 8004210:	2201      	movpl	r2, #1
 8004212:	601a      	strpl	r2, [r3, #0]
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	07d0      	lsls	r0, r2, #31
 800421a:	bf5c      	itt	pl
 800421c:	2201      	movpl	r2, #1
 800421e:	601a      	strpl	r2, [r3, #0]
 8004220:	4b16      	ldr	r3, [pc, #88]	; (800427c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	07d1      	lsls	r1, r2, #31
 8004226:	bf5c      	itt	pl
 8004228:	2201      	movpl	r2, #1
 800422a:	601a      	strpl	r2, [r3, #0]
 800422c:	4b14      	ldr	r3, [pc, #80]	; (8004280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	07d2      	lsls	r2, r2, #31
 8004232:	bf5c      	itt	pl
 8004234:	2201      	movpl	r2, #1
 8004236:	601a      	strpl	r2, [r3, #0]
 8004238:	4b12      	ldr	r3, [pc, #72]	; (8004284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	07d0      	lsls	r0, r2, #31
 800423e:	bf5c      	itt	pl
 8004240:	2201      	movpl	r2, #1
 8004242:	601a      	strpl	r2, [r3, #0]
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	07d1      	lsls	r1, r2, #31
 800424a:	bf5c      	itt	pl
 800424c:	2201      	movpl	r2, #1
 800424e:	601a      	strpl	r2, [r3, #0]
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	07d2      	lsls	r2, r2, #31
 8004256:	bf5c      	itt	pl
 8004258:	2201      	movpl	r2, #1
 800425a:	601a      	strpl	r2, [r3, #0]
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	200004ac 	.word	0x200004ac
 8004264:	200004a8 	.word	0x200004a8
 8004268:	200004a4 	.word	0x200004a4
 800426c:	200004a0 	.word	0x200004a0
 8004270:	2000049c 	.word	0x2000049c
 8004274:	20000498 	.word	0x20000498
 8004278:	20000494 	.word	0x20000494
 800427c:	20000490 	.word	0x20000490
 8004280:	2000048c 	.word	0x2000048c
 8004284:	20000488 	.word	0x20000488
 8004288:	20000484 	.word	0x20000484
 800428c:	20000480 	.word	0x20000480

08004290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	07d1      	lsls	r1, r2, #31
 8004296:	bf5c      	itt	pl
 8004298:	2201      	movpl	r2, #1
 800429a:	601a      	strpl	r2, [r3, #0]
 800429c:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	07d2      	lsls	r2, r2, #31
 80042a2:	bf5c      	itt	pl
 80042a4:	2201      	movpl	r2, #1
 80042a6:	601a      	strpl	r2, [r3, #0]
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	07d0      	lsls	r0, r2, #31
 80042ae:	bf5c      	itt	pl
 80042b0:	2201      	movpl	r2, #1
 80042b2:	601a      	strpl	r2, [r3, #0]
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	07d1      	lsls	r1, r2, #31
 80042ba:	bf5c      	itt	pl
 80042bc:	2201      	movpl	r2, #1
 80042be:	601a      	strpl	r2, [r3, #0]
 80042c0:	4b10      	ldr	r3, [pc, #64]	; (8004304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	07d2      	lsls	r2, r2, #31
 80042c6:	bf5c      	itt	pl
 80042c8:	2201      	movpl	r2, #1
 80042ca:	601a      	strpl	r2, [r3, #0]
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	07d0      	lsls	r0, r2, #31
 80042d2:	bf5c      	itt	pl
 80042d4:	2201      	movpl	r2, #1
 80042d6:	601a      	strpl	r2, [r3, #0]
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	07d1      	lsls	r1, r2, #31
 80042de:	bf5c      	itt	pl
 80042e0:	2201      	movpl	r2, #1
 80042e2:	601a      	strpl	r2, [r3, #0]
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	07d2      	lsls	r2, r2, #31
 80042ea:	bf5c      	itt	pl
 80042ec:	2201      	movpl	r2, #1
 80042ee:	601a      	strpl	r2, [r3, #0]
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	200004cc 	.word	0x200004cc
 80042f8:	200004c8 	.word	0x200004c8
 80042fc:	200004c4 	.word	0x200004c4
 8004300:	200004c0 	.word	0x200004c0
 8004304:	200004bc 	.word	0x200004bc
 8004308:	200004b8 	.word	0x200004b8
 800430c:	200004b4 	.word	0x200004b4
 8004310:	200004b0 	.word	0x200004b0

08004314 <abort>:
 8004314:	b508      	push	{r3, lr}
 8004316:	2006      	movs	r0, #6
 8004318:	f000 f964 	bl	80045e4 <raise>
 800431c:	2001      	movs	r0, #1
 800431e:	f000 fd0f 	bl	8004d40 <_exit>
	...

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	2500      	movs	r5, #0
 8004328:	4e0c      	ldr	r6, [pc, #48]	; (800435c <__libc_init_array+0x38>)
 800432a:	4c0d      	ldr	r4, [pc, #52]	; (8004360 <__libc_init_array+0x3c>)
 800432c:	1ba4      	subs	r4, r4, r6
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	42a5      	cmp	r5, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	f000 fd06 	bl	8004d44 <_init>
 8004338:	2500      	movs	r5, #0
 800433a:	4e0a      	ldr	r6, [pc, #40]	; (8004364 <__libc_init_array+0x40>)
 800433c:	4c0a      	ldr	r4, [pc, #40]	; (8004368 <__libc_init_array+0x44>)
 800433e:	1ba4      	subs	r4, r4, r6
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	42a5      	cmp	r5, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800434c:	4798      	blx	r3
 800434e:	3501      	adds	r5, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004356:	4798      	blx	r3
 8004358:	3501      	adds	r5, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	080061e4 	.word	0x080061e4
 8004360:	080061e4 	.word	0x080061e4
 8004364:	080061e4 	.word	0x080061e4
 8004368:	080061f8 	.word	0x080061f8

0800436c <malloc>:
 800436c:	4b02      	ldr	r3, [pc, #8]	; (8004378 <malloc+0xc>)
 800436e:	4601      	mov	r1, r0
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f000 b8a1 	b.w	80044b8 <_malloc_r>
 8004376:	bf00      	nop
 8004378:	2000000c 	.word	0x2000000c

0800437c <free>:
 800437c:	4b02      	ldr	r3, [pc, #8]	; (8004388 <free+0xc>)
 800437e:	4601      	mov	r1, r0
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	f000 b84d 	b.w	8004420 <_free_r>
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c

0800438c <memchr>:
 800438c:	b510      	push	{r4, lr}
 800438e:	b2c9      	uxtb	r1, r1
 8004390:	4402      	add	r2, r0
 8004392:	4290      	cmp	r0, r2
 8004394:	4603      	mov	r3, r0
 8004396:	d101      	bne.n	800439c <memchr+0x10>
 8004398:	2000      	movs	r0, #0
 800439a:	bd10      	pop	{r4, pc}
 800439c:	781c      	ldrb	r4, [r3, #0]
 800439e:	3001      	adds	r0, #1
 80043a0:	428c      	cmp	r4, r1
 80043a2:	d1f6      	bne.n	8004392 <memchr+0x6>
 80043a4:	4618      	mov	r0, r3
 80043a6:	bd10      	pop	{r4, pc}

080043a8 <memcmp>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	3901      	subs	r1, #1
 80043ac:	4402      	add	r2, r0
 80043ae:	4290      	cmp	r0, r2
 80043b0:	d101      	bne.n	80043b6 <memcmp+0xe>
 80043b2:	2000      	movs	r0, #0
 80043b4:	bd10      	pop	{r4, pc}
 80043b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80043ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80043be:	42a3      	cmp	r3, r4
 80043c0:	d0f5      	beq.n	80043ae <memcmp+0x6>
 80043c2:	1b18      	subs	r0, r3, r4
 80043c4:	bd10      	pop	{r4, pc}

080043c6 <memcpy>:
 80043c6:	b510      	push	{r4, lr}
 80043c8:	1e43      	subs	r3, r0, #1
 80043ca:	440a      	add	r2, r1
 80043cc:	4291      	cmp	r1, r2
 80043ce:	d100      	bne.n	80043d2 <memcpy+0xc>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043da:	e7f7      	b.n	80043cc <memcpy+0x6>

080043dc <memmove>:
 80043dc:	4288      	cmp	r0, r1
 80043de:	b510      	push	{r4, lr}
 80043e0:	eb01 0302 	add.w	r3, r1, r2
 80043e4:	d803      	bhi.n	80043ee <memmove+0x12>
 80043e6:	1e42      	subs	r2, r0, #1
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d10c      	bne.n	8004406 <memmove+0x2a>
 80043ec:	bd10      	pop	{r4, pc}
 80043ee:	4298      	cmp	r0, r3
 80043f0:	d2f9      	bcs.n	80043e6 <memmove+0xa>
 80043f2:	1881      	adds	r1, r0, r2
 80043f4:	1ad2      	subs	r2, r2, r3
 80043f6:	42d3      	cmn	r3, r2
 80043f8:	d100      	bne.n	80043fc <memmove+0x20>
 80043fa:	bd10      	pop	{r4, pc}
 80043fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004400:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004404:	e7f7      	b.n	80043f6 <memmove+0x1a>
 8004406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800440e:	e7eb      	b.n	80043e8 <memmove+0xc>

08004410 <memset>:
 8004410:	4603      	mov	r3, r0
 8004412:	4402      	add	r2, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <_free_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4605      	mov	r5, r0
 8004424:	2900      	cmp	r1, #0
 8004426:	d043      	beq.n	80044b0 <_free_r+0x90>
 8004428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442c:	1f0c      	subs	r4, r1, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	bfb8      	it	lt
 8004432:	18e4      	addlt	r4, r4, r3
 8004434:	f000 f94d 	bl	80046d2 <__malloc_lock>
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <_free_r+0x94>)
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	4610      	mov	r0, r2
 800443e:	b933      	cbnz	r3, 800444e <_free_r+0x2e>
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6014      	str	r4, [r2, #0]
 8004444:	4628      	mov	r0, r5
 8004446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800444a:	f000 b943 	b.w	80046d4 <__malloc_unlock>
 800444e:	42a3      	cmp	r3, r4
 8004450:	d90b      	bls.n	800446a <_free_r+0x4a>
 8004452:	6821      	ldr	r1, [r4, #0]
 8004454:	1862      	adds	r2, r4, r1
 8004456:	4293      	cmp	r3, r2
 8004458:	bf01      	itttt	eq
 800445a:	681a      	ldreq	r2, [r3, #0]
 800445c:	685b      	ldreq	r3, [r3, #4]
 800445e:	1852      	addeq	r2, r2, r1
 8004460:	6022      	streq	r2, [r4, #0]
 8004462:	6063      	str	r3, [r4, #4]
 8004464:	6004      	str	r4, [r0, #0]
 8004466:	e7ed      	b.n	8004444 <_free_r+0x24>
 8004468:	4613      	mov	r3, r2
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	b10a      	cbz	r2, 8004472 <_free_r+0x52>
 800446e:	42a2      	cmp	r2, r4
 8004470:	d9fa      	bls.n	8004468 <_free_r+0x48>
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	1858      	adds	r0, r3, r1
 8004476:	42a0      	cmp	r0, r4
 8004478:	d10b      	bne.n	8004492 <_free_r+0x72>
 800447a:	6820      	ldr	r0, [r4, #0]
 800447c:	4401      	add	r1, r0
 800447e:	1858      	adds	r0, r3, r1
 8004480:	4282      	cmp	r2, r0
 8004482:	6019      	str	r1, [r3, #0]
 8004484:	d1de      	bne.n	8004444 <_free_r+0x24>
 8004486:	6810      	ldr	r0, [r2, #0]
 8004488:	6852      	ldr	r2, [r2, #4]
 800448a:	4401      	add	r1, r0
 800448c:	6019      	str	r1, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	e7d8      	b.n	8004444 <_free_r+0x24>
 8004492:	d902      	bls.n	800449a <_free_r+0x7a>
 8004494:	230c      	movs	r3, #12
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	e7d4      	b.n	8004444 <_free_r+0x24>
 800449a:	6820      	ldr	r0, [r4, #0]
 800449c:	1821      	adds	r1, r4, r0
 800449e:	428a      	cmp	r2, r1
 80044a0:	bf01      	itttt	eq
 80044a2:	6811      	ldreq	r1, [r2, #0]
 80044a4:	6852      	ldreq	r2, [r2, #4]
 80044a6:	1809      	addeq	r1, r1, r0
 80044a8:	6021      	streq	r1, [r4, #0]
 80044aa:	6062      	str	r2, [r4, #4]
 80044ac:	605c      	str	r4, [r3, #4]
 80044ae:	e7c9      	b.n	8004444 <_free_r+0x24>
 80044b0:	bd38      	pop	{r3, r4, r5, pc}
 80044b2:	bf00      	nop
 80044b4:	200004d0 	.word	0x200004d0

080044b8 <_malloc_r>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	1ccd      	adds	r5, r1, #3
 80044bc:	f025 0503 	bic.w	r5, r5, #3
 80044c0:	3508      	adds	r5, #8
 80044c2:	2d0c      	cmp	r5, #12
 80044c4:	bf38      	it	cc
 80044c6:	250c      	movcc	r5, #12
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	4606      	mov	r6, r0
 80044cc:	db01      	blt.n	80044d2 <_malloc_r+0x1a>
 80044ce:	42a9      	cmp	r1, r5
 80044d0:	d903      	bls.n	80044da <_malloc_r+0x22>
 80044d2:	230c      	movs	r3, #12
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	2000      	movs	r0, #0
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	f000 f8fa 	bl	80046d2 <__malloc_lock>
 80044de:	4a23      	ldr	r2, [pc, #140]	; (800456c <_malloc_r+0xb4>)
 80044e0:	6814      	ldr	r4, [r2, #0]
 80044e2:	4621      	mov	r1, r4
 80044e4:	b991      	cbnz	r1, 800450c <_malloc_r+0x54>
 80044e6:	4c22      	ldr	r4, [pc, #136]	; (8004570 <_malloc_r+0xb8>)
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	b91b      	cbnz	r3, 80044f4 <_malloc_r+0x3c>
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 f841 	bl	8004574 <_sbrk_r>
 80044f2:	6020      	str	r0, [r4, #0]
 80044f4:	4629      	mov	r1, r5
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f83c 	bl	8004574 <_sbrk_r>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d126      	bne.n	800454e <_malloc_r+0x96>
 8004500:	230c      	movs	r3, #12
 8004502:	4630      	mov	r0, r6
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	f000 f8e5 	bl	80046d4 <__malloc_unlock>
 800450a:	e7e4      	b.n	80044d6 <_malloc_r+0x1e>
 800450c:	680b      	ldr	r3, [r1, #0]
 800450e:	1b5b      	subs	r3, r3, r5
 8004510:	d41a      	bmi.n	8004548 <_malloc_r+0x90>
 8004512:	2b0b      	cmp	r3, #11
 8004514:	d90f      	bls.n	8004536 <_malloc_r+0x7e>
 8004516:	600b      	str	r3, [r1, #0]
 8004518:	18cc      	adds	r4, r1, r3
 800451a:	50cd      	str	r5, [r1, r3]
 800451c:	4630      	mov	r0, r6
 800451e:	f000 f8d9 	bl	80046d4 <__malloc_unlock>
 8004522:	f104 000b 	add.w	r0, r4, #11
 8004526:	1d23      	adds	r3, r4, #4
 8004528:	f020 0007 	bic.w	r0, r0, #7
 800452c:	1ac3      	subs	r3, r0, r3
 800452e:	d01b      	beq.n	8004568 <_malloc_r+0xb0>
 8004530:	425a      	negs	r2, r3
 8004532:	50e2      	str	r2, [r4, r3]
 8004534:	bd70      	pop	{r4, r5, r6, pc}
 8004536:	428c      	cmp	r4, r1
 8004538:	bf0b      	itete	eq
 800453a:	6863      	ldreq	r3, [r4, #4]
 800453c:	684b      	ldrne	r3, [r1, #4]
 800453e:	6013      	streq	r3, [r2, #0]
 8004540:	6063      	strne	r3, [r4, #4]
 8004542:	bf18      	it	ne
 8004544:	460c      	movne	r4, r1
 8004546:	e7e9      	b.n	800451c <_malloc_r+0x64>
 8004548:	460c      	mov	r4, r1
 800454a:	6849      	ldr	r1, [r1, #4]
 800454c:	e7ca      	b.n	80044e4 <_malloc_r+0x2c>
 800454e:	1cc4      	adds	r4, r0, #3
 8004550:	f024 0403 	bic.w	r4, r4, #3
 8004554:	42a0      	cmp	r0, r4
 8004556:	d005      	beq.n	8004564 <_malloc_r+0xac>
 8004558:	1a21      	subs	r1, r4, r0
 800455a:	4630      	mov	r0, r6
 800455c:	f000 f80a 	bl	8004574 <_sbrk_r>
 8004560:	3001      	adds	r0, #1
 8004562:	d0cd      	beq.n	8004500 <_malloc_r+0x48>
 8004564:	6025      	str	r5, [r4, #0]
 8004566:	e7d9      	b.n	800451c <_malloc_r+0x64>
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	bf00      	nop
 800456c:	200004d0 	.word	0x200004d0
 8004570:	200004d4 	.word	0x200004d4

08004574 <_sbrk_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	2300      	movs	r3, #0
 8004578:	4c05      	ldr	r4, [pc, #20]	; (8004590 <_sbrk_r+0x1c>)
 800457a:	4605      	mov	r5, r0
 800457c:	4608      	mov	r0, r1
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	f000 fbd0 	bl	8004d24 <_sbrk>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_sbrk_r+0x1a>
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	b103      	cbz	r3, 800458e <_sbrk_r+0x1a>
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	200004e8 	.word	0x200004e8

08004594 <_raise_r>:
 8004594:	291f      	cmp	r1, #31
 8004596:	b538      	push	{r3, r4, r5, lr}
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
 800459c:	d904      	bls.n	80045a8 <_raise_r+0x14>
 800459e:	2316      	movs	r3, #22
 80045a0:	6003      	str	r3, [r0, #0]
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045aa:	b112      	cbz	r2, 80045b2 <_raise_r+0x1e>
 80045ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045b0:	b94b      	cbnz	r3, 80045c6 <_raise_r+0x32>
 80045b2:	4620      	mov	r0, r4
 80045b4:	f000 f830 	bl	8004618 <_getpid_r>
 80045b8:	462a      	mov	r2, r5
 80045ba:	4601      	mov	r1, r0
 80045bc:	4620      	mov	r0, r4
 80045be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045c2:	f000 b817 	b.w	80045f4 <_kill_r>
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d00a      	beq.n	80045e0 <_raise_r+0x4c>
 80045ca:	1c59      	adds	r1, r3, #1
 80045cc:	d103      	bne.n	80045d6 <_raise_r+0x42>
 80045ce:	2316      	movs	r3, #22
 80045d0:	6003      	str	r3, [r0, #0]
 80045d2:	2001      	movs	r0, #1
 80045d4:	bd38      	pop	{r3, r4, r5, pc}
 80045d6:	2400      	movs	r4, #0
 80045d8:	4628      	mov	r0, r5
 80045da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80045de:	4798      	blx	r3
 80045e0:	2000      	movs	r0, #0
 80045e2:	bd38      	pop	{r3, r4, r5, pc}

080045e4 <raise>:
 80045e4:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <raise+0xc>)
 80045e6:	4601      	mov	r1, r0
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	f7ff bfd3 	b.w	8004594 <_raise_r>
 80045ee:	bf00      	nop
 80045f0:	2000000c 	.word	0x2000000c

080045f4 <_kill_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	2300      	movs	r3, #0
 80045f8:	4c06      	ldr	r4, [pc, #24]	; (8004614 <_kill_r+0x20>)
 80045fa:	4605      	mov	r5, r0
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	f000 fb87 	bl	8004d14 <_kill>
 8004606:	1c43      	adds	r3, r0, #1
 8004608:	d102      	bne.n	8004610 <_kill_r+0x1c>
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	b103      	cbz	r3, 8004610 <_kill_r+0x1c>
 800460e:	602b      	str	r3, [r5, #0]
 8004610:	bd38      	pop	{r3, r4, r5, pc}
 8004612:	bf00      	nop
 8004614:	200004e8 	.word	0x200004e8

08004618 <_getpid_r>:
 8004618:	f000 bb74 	b.w	8004d04 <_getpid>

0800461c <sniprintf>:
 800461c:	b40c      	push	{r2, r3}
 800461e:	b530      	push	{r4, r5, lr}
 8004620:	4b17      	ldr	r3, [pc, #92]	; (8004680 <sniprintf+0x64>)
 8004622:	1e0c      	subs	r4, r1, #0
 8004624:	b09d      	sub	sp, #116	; 0x74
 8004626:	681d      	ldr	r5, [r3, #0]
 8004628:	da08      	bge.n	800463c <sniprintf+0x20>
 800462a:	238b      	movs	r3, #139	; 0x8b
 800462c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004630:	602b      	str	r3, [r5, #0]
 8004632:	b01d      	add	sp, #116	; 0x74
 8004634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004638:	b002      	add	sp, #8
 800463a:	4770      	bx	lr
 800463c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004640:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004644:	bf0c      	ite	eq
 8004646:	4623      	moveq	r3, r4
 8004648:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	9307      	str	r3, [sp, #28]
 8004650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004654:	9002      	str	r0, [sp, #8]
 8004656:	9006      	str	r0, [sp, #24]
 8004658:	f8ad 3016 	strh.w	r3, [sp, #22]
 800465c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800465e:	ab21      	add	r3, sp, #132	; 0x84
 8004660:	a902      	add	r1, sp, #8
 8004662:	4628      	mov	r0, r5
 8004664:	9301      	str	r3, [sp, #4]
 8004666:	f000 f891 	bl	800478c <_svfiprintf_r>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	bfbc      	itt	lt
 800466e:	238b      	movlt	r3, #139	; 0x8b
 8004670:	602b      	strlt	r3, [r5, #0]
 8004672:	2c00      	cmp	r4, #0
 8004674:	d0dd      	beq.n	8004632 <sniprintf+0x16>
 8004676:	2200      	movs	r2, #0
 8004678:	9b02      	ldr	r3, [sp, #8]
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	e7d9      	b.n	8004632 <sniprintf+0x16>
 800467e:	bf00      	nop
 8004680:	2000000c 	.word	0x2000000c

08004684 <strncmp>:
 8004684:	b510      	push	{r4, lr}
 8004686:	b16a      	cbz	r2, 80046a4 <strncmp+0x20>
 8004688:	3901      	subs	r1, #1
 800468a:	1884      	adds	r4, r0, r2
 800468c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004690:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004694:	4293      	cmp	r3, r2
 8004696:	d103      	bne.n	80046a0 <strncmp+0x1c>
 8004698:	42a0      	cmp	r0, r4
 800469a:	d001      	beq.n	80046a0 <strncmp+0x1c>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f5      	bne.n	800468c <strncmp+0x8>
 80046a0:	1a98      	subs	r0, r3, r2
 80046a2:	bd10      	pop	{r4, pc}
 80046a4:	4610      	mov	r0, r2
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <strncpy>:
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	b902      	cbnz	r2, 80046b0 <strncpy+0x8>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	4623      	mov	r3, r4
 80046b2:	f811 5b01 	ldrb.w	r5, [r1], #1
 80046b6:	1e56      	subs	r6, r2, #1
 80046b8:	f803 5b01 	strb.w	r5, [r3], #1
 80046bc:	b91d      	cbnz	r5, 80046c6 <strncpy+0x1e>
 80046be:	4414      	add	r4, r2
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d103      	bne.n	80046cc <strncpy+0x24>
 80046c4:	bd70      	pop	{r4, r5, r6, pc}
 80046c6:	461c      	mov	r4, r3
 80046c8:	4632      	mov	r2, r6
 80046ca:	e7ef      	b.n	80046ac <strncpy+0x4>
 80046cc:	f803 5b01 	strb.w	r5, [r3], #1
 80046d0:	e7f6      	b.n	80046c0 <strncpy+0x18>

080046d2 <__malloc_lock>:
 80046d2:	4770      	bx	lr

080046d4 <__malloc_unlock>:
 80046d4:	4770      	bx	lr

080046d6 <__ssputs_r>:
 80046d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046da:	688e      	ldr	r6, [r1, #8]
 80046dc:	4682      	mov	sl, r0
 80046de:	429e      	cmp	r6, r3
 80046e0:	460c      	mov	r4, r1
 80046e2:	4691      	mov	r9, r2
 80046e4:	4698      	mov	r8, r3
 80046e6:	d835      	bhi.n	8004754 <__ssputs_r+0x7e>
 80046e8:	898a      	ldrh	r2, [r1, #12]
 80046ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ee:	d031      	beq.n	8004754 <__ssputs_r+0x7e>
 80046f0:	2302      	movs	r3, #2
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	6909      	ldr	r1, [r1, #16]
 80046f6:	1a6f      	subs	r7, r5, r1
 80046f8:	6965      	ldr	r5, [r4, #20]
 80046fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8004702:	f108 0301 	add.w	r3, r8, #1
 8004706:	443b      	add	r3, r7
 8004708:	429d      	cmp	r5, r3
 800470a:	bf38      	it	cc
 800470c:	461d      	movcc	r5, r3
 800470e:	0553      	lsls	r3, r2, #21
 8004710:	d531      	bpl.n	8004776 <__ssputs_r+0xa0>
 8004712:	4629      	mov	r1, r5
 8004714:	f7ff fed0 	bl	80044b8 <_malloc_r>
 8004718:	4606      	mov	r6, r0
 800471a:	b950      	cbnz	r0, 8004732 <__ssputs_r+0x5c>
 800471c:	230c      	movs	r3, #12
 800471e:	f8ca 3000 	str.w	r3, [sl]
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004732:	463a      	mov	r2, r7
 8004734:	6921      	ldr	r1, [r4, #16]
 8004736:	f7ff fe46 	bl	80043c6 <memcpy>
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	6126      	str	r6, [r4, #16]
 8004748:	443e      	add	r6, r7
 800474a:	6026      	str	r6, [r4, #0]
 800474c:	4646      	mov	r6, r8
 800474e:	6165      	str	r5, [r4, #20]
 8004750:	1bed      	subs	r5, r5, r7
 8004752:	60a5      	str	r5, [r4, #8]
 8004754:	4546      	cmp	r6, r8
 8004756:	bf28      	it	cs
 8004758:	4646      	movcs	r6, r8
 800475a:	4649      	mov	r1, r9
 800475c:	4632      	mov	r2, r6
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	f7ff fe3c 	bl	80043dc <memmove>
 8004764:	68a3      	ldr	r3, [r4, #8]
 8004766:	2000      	movs	r0, #0
 8004768:	1b9b      	subs	r3, r3, r6
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	441e      	add	r6, r3
 8004770:	6026      	str	r6, [r4, #0]
 8004772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004776:	462a      	mov	r2, r5
 8004778:	f000 fa94 	bl	8004ca4 <_realloc_r>
 800477c:	4606      	mov	r6, r0
 800477e:	2800      	cmp	r0, #0
 8004780:	d1e1      	bne.n	8004746 <__ssputs_r+0x70>
 8004782:	6921      	ldr	r1, [r4, #16]
 8004784:	4650      	mov	r0, sl
 8004786:	f7ff fe4b 	bl	8004420 <_free_r>
 800478a:	e7c7      	b.n	800471c <__ssputs_r+0x46>

0800478c <_svfiprintf_r>:
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	b09d      	sub	sp, #116	; 0x74
 8004792:	9303      	str	r3, [sp, #12]
 8004794:	898b      	ldrh	r3, [r1, #12]
 8004796:	4680      	mov	r8, r0
 8004798:	061c      	lsls	r4, r3, #24
 800479a:	460d      	mov	r5, r1
 800479c:	4616      	mov	r6, r2
 800479e:	d50f      	bpl.n	80047c0 <_svfiprintf_r+0x34>
 80047a0:	690b      	ldr	r3, [r1, #16]
 80047a2:	b96b      	cbnz	r3, 80047c0 <_svfiprintf_r+0x34>
 80047a4:	2140      	movs	r1, #64	; 0x40
 80047a6:	f7ff fe87 	bl	80044b8 <_malloc_r>
 80047aa:	6028      	str	r0, [r5, #0]
 80047ac:	6128      	str	r0, [r5, #16]
 80047ae:	b928      	cbnz	r0, 80047bc <_svfiprintf_r+0x30>
 80047b0:	230c      	movs	r3, #12
 80047b2:	f8c8 3000 	str.w	r3, [r8]
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047ba:	e0c4      	b.n	8004946 <_svfiprintf_r+0x1ba>
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	616b      	str	r3, [r5, #20]
 80047c0:	2300      	movs	r3, #0
 80047c2:	9309      	str	r3, [sp, #36]	; 0x24
 80047c4:	2320      	movs	r3, #32
 80047c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047ca:	2330      	movs	r3, #48	; 0x30
 80047cc:	f04f 0b01 	mov.w	fp, #1
 80047d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d4:	4637      	mov	r7, r6
 80047d6:	463c      	mov	r4, r7
 80047d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d13c      	bne.n	800485a <_svfiprintf_r+0xce>
 80047e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80047e4:	d00b      	beq.n	80047fe <_svfiprintf_r+0x72>
 80047e6:	4653      	mov	r3, sl
 80047e8:	4632      	mov	r2, r6
 80047ea:	4629      	mov	r1, r5
 80047ec:	4640      	mov	r0, r8
 80047ee:	f7ff ff72 	bl	80046d6 <__ssputs_r>
 80047f2:	3001      	adds	r0, #1
 80047f4:	f000 80a2 	beq.w	800493c <_svfiprintf_r+0x1b0>
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	4453      	add	r3, sl
 80047fc:	9309      	str	r3, [sp, #36]	; 0x24
 80047fe:	783b      	ldrb	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 809b 	beq.w	800493c <_svfiprintf_r+0x1b0>
 8004806:	2300      	movs	r3, #0
 8004808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800480c:	9304      	str	r3, [sp, #16]
 800480e:	9307      	str	r3, [sp, #28]
 8004810:	9205      	str	r2, [sp, #20]
 8004812:	9306      	str	r3, [sp, #24]
 8004814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004818:	931a      	str	r3, [sp, #104]	; 0x68
 800481a:	2205      	movs	r2, #5
 800481c:	7821      	ldrb	r1, [r4, #0]
 800481e:	4850      	ldr	r0, [pc, #320]	; (8004960 <_svfiprintf_r+0x1d4>)
 8004820:	f7ff fdb4 	bl	800438c <memchr>
 8004824:	1c67      	adds	r7, r4, #1
 8004826:	9b04      	ldr	r3, [sp, #16]
 8004828:	b9d8      	cbnz	r0, 8004862 <_svfiprintf_r+0xd6>
 800482a:	06d9      	lsls	r1, r3, #27
 800482c:	bf44      	itt	mi
 800482e:	2220      	movmi	r2, #32
 8004830:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004834:	071a      	lsls	r2, r3, #28
 8004836:	bf44      	itt	mi
 8004838:	222b      	movmi	r2, #43	; 0x2b
 800483a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800483e:	7822      	ldrb	r2, [r4, #0]
 8004840:	2a2a      	cmp	r2, #42	; 0x2a
 8004842:	d016      	beq.n	8004872 <_svfiprintf_r+0xe6>
 8004844:	2100      	movs	r1, #0
 8004846:	200a      	movs	r0, #10
 8004848:	9a07      	ldr	r2, [sp, #28]
 800484a:	4627      	mov	r7, r4
 800484c:	783b      	ldrb	r3, [r7, #0]
 800484e:	3401      	adds	r4, #1
 8004850:	3b30      	subs	r3, #48	; 0x30
 8004852:	2b09      	cmp	r3, #9
 8004854:	d950      	bls.n	80048f8 <_svfiprintf_r+0x16c>
 8004856:	b1c9      	cbz	r1, 800488c <_svfiprintf_r+0x100>
 8004858:	e011      	b.n	800487e <_svfiprintf_r+0xf2>
 800485a:	2b25      	cmp	r3, #37	; 0x25
 800485c:	d0c0      	beq.n	80047e0 <_svfiprintf_r+0x54>
 800485e:	4627      	mov	r7, r4
 8004860:	e7b9      	b.n	80047d6 <_svfiprintf_r+0x4a>
 8004862:	4a3f      	ldr	r2, [pc, #252]	; (8004960 <_svfiprintf_r+0x1d4>)
 8004864:	463c      	mov	r4, r7
 8004866:	1a80      	subs	r0, r0, r2
 8004868:	fa0b f000 	lsl.w	r0, fp, r0
 800486c:	4318      	orrs	r0, r3
 800486e:	9004      	str	r0, [sp, #16]
 8004870:	e7d3      	b.n	800481a <_svfiprintf_r+0x8e>
 8004872:	9a03      	ldr	r2, [sp, #12]
 8004874:	1d11      	adds	r1, r2, #4
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	9103      	str	r1, [sp, #12]
 800487a:	2a00      	cmp	r2, #0
 800487c:	db01      	blt.n	8004882 <_svfiprintf_r+0xf6>
 800487e:	9207      	str	r2, [sp, #28]
 8004880:	e004      	b.n	800488c <_svfiprintf_r+0x100>
 8004882:	4252      	negs	r2, r2
 8004884:	f043 0302 	orr.w	r3, r3, #2
 8004888:	9207      	str	r2, [sp, #28]
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	783b      	ldrb	r3, [r7, #0]
 800488e:	2b2e      	cmp	r3, #46	; 0x2e
 8004890:	d10d      	bne.n	80048ae <_svfiprintf_r+0x122>
 8004892:	787b      	ldrb	r3, [r7, #1]
 8004894:	1c79      	adds	r1, r7, #1
 8004896:	2b2a      	cmp	r3, #42	; 0x2a
 8004898:	d132      	bne.n	8004900 <_svfiprintf_r+0x174>
 800489a:	9b03      	ldr	r3, [sp, #12]
 800489c:	3702      	adds	r7, #2
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	9203      	str	r2, [sp, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bfb8      	it	lt
 80048a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048ac:	9305      	str	r3, [sp, #20]
 80048ae:	4c2d      	ldr	r4, [pc, #180]	; (8004964 <_svfiprintf_r+0x1d8>)
 80048b0:	2203      	movs	r2, #3
 80048b2:	7839      	ldrb	r1, [r7, #0]
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7ff fd69 	bl	800438c <memchr>
 80048ba:	b138      	cbz	r0, 80048cc <_svfiprintf_r+0x140>
 80048bc:	2340      	movs	r3, #64	; 0x40
 80048be:	1b00      	subs	r0, r0, r4
 80048c0:	fa03 f000 	lsl.w	r0, r3, r0
 80048c4:	9b04      	ldr	r3, [sp, #16]
 80048c6:	3701      	adds	r7, #1
 80048c8:	4303      	orrs	r3, r0
 80048ca:	9304      	str	r3, [sp, #16]
 80048cc:	7839      	ldrb	r1, [r7, #0]
 80048ce:	2206      	movs	r2, #6
 80048d0:	4825      	ldr	r0, [pc, #148]	; (8004968 <_svfiprintf_r+0x1dc>)
 80048d2:	1c7e      	adds	r6, r7, #1
 80048d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048d8:	f7ff fd58 	bl	800438c <memchr>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d035      	beq.n	800494c <_svfiprintf_r+0x1c0>
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <_svfiprintf_r+0x1e0>)
 80048e2:	b9fb      	cbnz	r3, 8004924 <_svfiprintf_r+0x198>
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	3307      	adds	r3, #7
 80048e8:	f023 0307 	bic.w	r3, r3, #7
 80048ec:	3308      	adds	r3, #8
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f2:	444b      	add	r3, r9
 80048f4:	9309      	str	r3, [sp, #36]	; 0x24
 80048f6:	e76d      	b.n	80047d4 <_svfiprintf_r+0x48>
 80048f8:	fb00 3202 	mla	r2, r0, r2, r3
 80048fc:	2101      	movs	r1, #1
 80048fe:	e7a4      	b.n	800484a <_svfiprintf_r+0xbe>
 8004900:	2300      	movs	r3, #0
 8004902:	240a      	movs	r4, #10
 8004904:	4618      	mov	r0, r3
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	460f      	mov	r7, r1
 800490a:	783a      	ldrb	r2, [r7, #0]
 800490c:	3101      	adds	r1, #1
 800490e:	3a30      	subs	r2, #48	; 0x30
 8004910:	2a09      	cmp	r2, #9
 8004912:	d903      	bls.n	800491c <_svfiprintf_r+0x190>
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ca      	beq.n	80048ae <_svfiprintf_r+0x122>
 8004918:	9005      	str	r0, [sp, #20]
 800491a:	e7c8      	b.n	80048ae <_svfiprintf_r+0x122>
 800491c:	fb04 2000 	mla	r0, r4, r0, r2
 8004920:	2301      	movs	r3, #1
 8004922:	e7f1      	b.n	8004908 <_svfiprintf_r+0x17c>
 8004924:	ab03      	add	r3, sp, #12
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	462a      	mov	r2, r5
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <_svfiprintf_r+0x1e4>)
 800492c:	a904      	add	r1, sp, #16
 800492e:	4640      	mov	r0, r8
 8004930:	f3af 8000 	nop.w
 8004934:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004938:	4681      	mov	r9, r0
 800493a:	d1d9      	bne.n	80048f0 <_svfiprintf_r+0x164>
 800493c:	89ab      	ldrh	r3, [r5, #12]
 800493e:	065b      	lsls	r3, r3, #25
 8004940:	f53f af39 	bmi.w	80047b6 <_svfiprintf_r+0x2a>
 8004944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004946:	b01d      	add	sp, #116	; 0x74
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	ab03      	add	r3, sp, #12
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	462a      	mov	r2, r5
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <_svfiprintf_r+0x1e4>)
 8004954:	a904      	add	r1, sp, #16
 8004956:	4640      	mov	r0, r8
 8004958:	f000 f884 	bl	8004a64 <_printf_i>
 800495c:	e7ea      	b.n	8004934 <_svfiprintf_r+0x1a8>
 800495e:	bf00      	nop
 8004960:	080061b0 	.word	0x080061b0
 8004964:	080061b6 	.word	0x080061b6
 8004968:	080061ba 	.word	0x080061ba
 800496c:	00000000 	.word	0x00000000
 8004970:	080046d7 	.word	0x080046d7

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4691      	mov	r9, r2
 800497a:	461f      	mov	r7, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	4606      	mov	r6, r0
 8004982:	4293      	cmp	r3, r2
 8004984:	bfb8      	it	lt
 8004986:	4613      	movlt	r3, r2
 8004988:	f8c9 3000 	str.w	r3, [r9]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004990:	460c      	mov	r4, r1
 8004992:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004996:	b112      	cbz	r2, 800499e <_printf_common+0x2a>
 8004998:	3301      	adds	r3, #1
 800499a:	f8c9 3000 	str.w	r3, [r9]
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	0699      	lsls	r1, r3, #26
 80049a2:	bf42      	ittt	mi
 80049a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049a8:	3302      	addmi	r3, #2
 80049aa:	f8c9 3000 	strmi.w	r3, [r9]
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	f015 0506 	ands.w	r5, r5, #6
 80049b4:	d107      	bne.n	80049c6 <_printf_common+0x52>
 80049b6:	f104 0a19 	add.w	sl, r4, #25
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	f8d9 2000 	ldr.w	r2, [r9]
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	429d      	cmp	r5, r3
 80049c4:	db2a      	blt.n	8004a1c <_printf_common+0xa8>
 80049c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	3300      	adds	r3, #0
 80049ce:	bf18      	it	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	0692      	lsls	r2, r2, #26
 80049d4:	d42f      	bmi.n	8004a36 <_printf_common+0xc2>
 80049d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049da:	4639      	mov	r1, r7
 80049dc:	4630      	mov	r0, r6
 80049de:	47c0      	blx	r8
 80049e0:	3001      	adds	r0, #1
 80049e2:	d022      	beq.n	8004a2a <_printf_common+0xb6>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	68e5      	ldr	r5, [r4, #12]
 80049e8:	f003 0306 	and.w	r3, r3, #6
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	bf18      	it	ne
 80049f0:	2500      	movne	r5, #0
 80049f2:	f8d9 2000 	ldr.w	r2, [r9]
 80049f6:	f04f 0900 	mov.w	r9, #0
 80049fa:	bf08      	it	eq
 80049fc:	1aad      	subeq	r5, r5, r2
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	bf08      	it	eq
 8004a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	bfc4      	itt	gt
 8004a0c:	1a9b      	subgt	r3, r3, r2
 8004a0e:	18ed      	addgt	r5, r5, r3
 8004a10:	341a      	adds	r4, #26
 8004a12:	454d      	cmp	r5, r9
 8004a14:	d11b      	bne.n	8004a4e <_printf_common+0xda>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4652      	mov	r2, sl
 8004a20:	4639      	mov	r1, r7
 8004a22:	4630      	mov	r0, r6
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d103      	bne.n	8004a32 <_printf_common+0xbe>
 8004a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a32:	3501      	adds	r5, #1
 8004a34:	e7c1      	b.n	80049ba <_printf_common+0x46>
 8004a36:	2030      	movs	r0, #48	; 0x30
 8004a38:	18e1      	adds	r1, r4, r3
 8004a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a44:	4422      	add	r2, r4
 8004a46:	3302      	adds	r3, #2
 8004a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a4c:	e7c3      	b.n	80049d6 <_printf_common+0x62>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	4622      	mov	r2, r4
 8004a52:	4639      	mov	r1, r7
 8004a54:	4630      	mov	r0, r6
 8004a56:	47c0      	blx	r8
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0e6      	beq.n	8004a2a <_printf_common+0xb6>
 8004a5c:	f109 0901 	add.w	r9, r9, #1
 8004a60:	e7d7      	b.n	8004a12 <_printf_common+0x9e>
	...

08004a64 <_printf_i>:
 8004a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a68:	4617      	mov	r7, r2
 8004a6a:	7e0a      	ldrb	r2, [r1, #24]
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	2a6e      	cmp	r2, #110	; 0x6e
 8004a70:	4698      	mov	r8, r3
 8004a72:	4606      	mov	r6, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004a7c:	f000 80bc 	beq.w	8004bf8 <_printf_i+0x194>
 8004a80:	d81a      	bhi.n	8004ab8 <_printf_i+0x54>
 8004a82:	2a63      	cmp	r2, #99	; 0x63
 8004a84:	d02e      	beq.n	8004ae4 <_printf_i+0x80>
 8004a86:	d80a      	bhi.n	8004a9e <_printf_i+0x3a>
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	f000 80c8 	beq.w	8004c1e <_printf_i+0x1ba>
 8004a8e:	2a58      	cmp	r2, #88	; 0x58
 8004a90:	f000 808a 	beq.w	8004ba8 <_printf_i+0x144>
 8004a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004a9c:	e02a      	b.n	8004af4 <_printf_i+0x90>
 8004a9e:	2a64      	cmp	r2, #100	; 0x64
 8004aa0:	d001      	beq.n	8004aa6 <_printf_i+0x42>
 8004aa2:	2a69      	cmp	r2, #105	; 0x69
 8004aa4:	d1f6      	bne.n	8004a94 <_printf_i+0x30>
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004aae:	d023      	beq.n	8004af8 <_printf_i+0x94>
 8004ab0:	1d11      	adds	r1, r2, #4
 8004ab2:	6019      	str	r1, [r3, #0]
 8004ab4:	6813      	ldr	r3, [r2, #0]
 8004ab6:	e027      	b.n	8004b08 <_printf_i+0xa4>
 8004ab8:	2a73      	cmp	r2, #115	; 0x73
 8004aba:	f000 80b4 	beq.w	8004c26 <_printf_i+0x1c2>
 8004abe:	d808      	bhi.n	8004ad2 <_printf_i+0x6e>
 8004ac0:	2a6f      	cmp	r2, #111	; 0x6f
 8004ac2:	d02a      	beq.n	8004b1a <_printf_i+0xb6>
 8004ac4:	2a70      	cmp	r2, #112	; 0x70
 8004ac6:	d1e5      	bne.n	8004a94 <_printf_i+0x30>
 8004ac8:	680a      	ldr	r2, [r1, #0]
 8004aca:	f042 0220 	orr.w	r2, r2, #32
 8004ace:	600a      	str	r2, [r1, #0]
 8004ad0:	e003      	b.n	8004ada <_printf_i+0x76>
 8004ad2:	2a75      	cmp	r2, #117	; 0x75
 8004ad4:	d021      	beq.n	8004b1a <_printf_i+0xb6>
 8004ad6:	2a78      	cmp	r2, #120	; 0x78
 8004ad8:	d1dc      	bne.n	8004a94 <_printf_i+0x30>
 8004ada:	2278      	movs	r2, #120	; 0x78
 8004adc:	496f      	ldr	r1, [pc, #444]	; (8004c9c <_printf_i+0x238>)
 8004ade:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004ae2:	e064      	b.n	8004bae <_printf_i+0x14a>
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004aea:	1d11      	adds	r1, r2, #4
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	6813      	ldr	r3, [r2, #0]
 8004af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0a3      	b.n	8004c40 <_printf_i+0x1dc>
 8004af8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004afc:	f102 0104 	add.w	r1, r2, #4
 8004b00:	6019      	str	r1, [r3, #0]
 8004b02:	d0d7      	beq.n	8004ab4 <_printf_i+0x50>
 8004b04:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da03      	bge.n	8004b14 <_printf_i+0xb0>
 8004b0c:	222d      	movs	r2, #45	; 0x2d
 8004b0e:	425b      	negs	r3, r3
 8004b10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b14:	4962      	ldr	r1, [pc, #392]	; (8004ca0 <_printf_i+0x23c>)
 8004b16:	220a      	movs	r2, #10
 8004b18:	e017      	b.n	8004b4a <_printf_i+0xe6>
 8004b1a:	6820      	ldr	r0, [r4, #0]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004b22:	d003      	beq.n	8004b2c <_printf_i+0xc8>
 8004b24:	1d08      	adds	r0, r1, #4
 8004b26:	6018      	str	r0, [r3, #0]
 8004b28:	680b      	ldr	r3, [r1, #0]
 8004b2a:	e006      	b.n	8004b3a <_printf_i+0xd6>
 8004b2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b30:	f101 0004 	add.w	r0, r1, #4
 8004b34:	6018      	str	r0, [r3, #0]
 8004b36:	d0f7      	beq.n	8004b28 <_printf_i+0xc4>
 8004b38:	880b      	ldrh	r3, [r1, #0]
 8004b3a:	2a6f      	cmp	r2, #111	; 0x6f
 8004b3c:	bf14      	ite	ne
 8004b3e:	220a      	movne	r2, #10
 8004b40:	2208      	moveq	r2, #8
 8004b42:	4957      	ldr	r1, [pc, #348]	; (8004ca0 <_printf_i+0x23c>)
 8004b44:	2000      	movs	r0, #0
 8004b46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004b4a:	6865      	ldr	r5, [r4, #4]
 8004b4c:	2d00      	cmp	r5, #0
 8004b4e:	60a5      	str	r5, [r4, #8]
 8004b50:	f2c0 809c 	blt.w	8004c8c <_printf_i+0x228>
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	f020 0004 	bic.w	r0, r0, #4
 8004b5a:	6020      	str	r0, [r4, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d13f      	bne.n	8004be0 <_printf_i+0x17c>
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	f040 8095 	bne.w	8004c90 <_printf_i+0x22c>
 8004b66:	4675      	mov	r5, lr
 8004b68:	2a08      	cmp	r2, #8
 8004b6a:	d10b      	bne.n	8004b84 <_printf_i+0x120>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	07da      	lsls	r2, r3, #31
 8004b70:	d508      	bpl.n	8004b84 <_printf_i+0x120>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	6862      	ldr	r2, [r4, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bfde      	ittt	le
 8004b7a:	2330      	movle	r3, #48	; 0x30
 8004b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b84:	ebae 0305 	sub.w	r3, lr, r5
 8004b88:	6123      	str	r3, [r4, #16]
 8004b8a:	f8cd 8000 	str.w	r8, [sp]
 8004b8e:	463b      	mov	r3, r7
 8004b90:	aa03      	add	r2, sp, #12
 8004b92:	4621      	mov	r1, r4
 8004b94:	4630      	mov	r0, r6
 8004b96:	f7ff feed 	bl	8004974 <_printf_common>
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d155      	bne.n	8004c4a <_printf_i+0x1e6>
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba2:	b005      	add	sp, #20
 8004ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ba8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8004bac:	493c      	ldr	r1, [pc, #240]	; (8004ca0 <_printf_i+0x23c>)
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bb6:	f100 0504 	add.w	r5, r0, #4
 8004bba:	601d      	str	r5, [r3, #0]
 8004bbc:	d001      	beq.n	8004bc2 <_printf_i+0x15e>
 8004bbe:	6803      	ldr	r3, [r0, #0]
 8004bc0:	e002      	b.n	8004bc8 <_printf_i+0x164>
 8004bc2:	0655      	lsls	r5, r2, #25
 8004bc4:	d5fb      	bpl.n	8004bbe <_printf_i+0x15a>
 8004bc6:	8803      	ldrh	r3, [r0, #0]
 8004bc8:	07d0      	lsls	r0, r2, #31
 8004bca:	bf44      	itt	mi
 8004bcc:	f042 0220 	orrmi.w	r2, r2, #32
 8004bd0:	6022      	strmi	r2, [r4, #0]
 8004bd2:	b91b      	cbnz	r3, 8004bdc <_printf_i+0x178>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	f022 0220 	bic.w	r2, r2, #32
 8004bda:	6022      	str	r2, [r4, #0]
 8004bdc:	2210      	movs	r2, #16
 8004bde:	e7b1      	b.n	8004b44 <_printf_i+0xe0>
 8004be0:	4675      	mov	r5, lr
 8004be2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004be6:	fb02 3310 	mls	r3, r2, r0, r3
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d1f5      	bne.n	8004be2 <_printf_i+0x17e>
 8004bf6:	e7b7      	b.n	8004b68 <_printf_i+0x104>
 8004bf8:	6808      	ldr	r0, [r1, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004c00:	6949      	ldr	r1, [r1, #20]
 8004c02:	d004      	beq.n	8004c0e <_printf_i+0x1aa>
 8004c04:	1d10      	adds	r0, r2, #4
 8004c06:	6018      	str	r0, [r3, #0]
 8004c08:	6813      	ldr	r3, [r2, #0]
 8004c0a:	6019      	str	r1, [r3, #0]
 8004c0c:	e007      	b.n	8004c1e <_printf_i+0x1ba>
 8004c0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c12:	f102 0004 	add.w	r0, r2, #4
 8004c16:	6018      	str	r0, [r3, #0]
 8004c18:	6813      	ldr	r3, [r2, #0]
 8004c1a:	d0f6      	beq.n	8004c0a <_printf_i+0x1a6>
 8004c1c:	8019      	strh	r1, [r3, #0]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4675      	mov	r5, lr
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	e7b1      	b.n	8004b8a <_printf_i+0x126>
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	1d11      	adds	r1, r2, #4
 8004c2a:	6019      	str	r1, [r3, #0]
 8004c2c:	6815      	ldr	r5, [r2, #0]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6862      	ldr	r2, [r4, #4]
 8004c32:	4628      	mov	r0, r5
 8004c34:	f7ff fbaa 	bl	800438c <memchr>
 8004c38:	b108      	cbz	r0, 8004c3e <_printf_i+0x1da>
 8004c3a:	1b40      	subs	r0, r0, r5
 8004c3c:	6060      	str	r0, [r4, #4]
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	2300      	movs	r3, #0
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c48:	e79f      	b.n	8004b8a <_printf_i+0x126>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	462a      	mov	r2, r5
 8004c4e:	4639      	mov	r1, r7
 8004c50:	4630      	mov	r0, r6
 8004c52:	47c0      	blx	r8
 8004c54:	3001      	adds	r0, #1
 8004c56:	d0a2      	beq.n	8004b9e <_printf_i+0x13a>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	079b      	lsls	r3, r3, #30
 8004c5c:	d507      	bpl.n	8004c6e <_printf_i+0x20a>
 8004c5e:	2500      	movs	r5, #0
 8004c60:	f104 0919 	add.w	r9, r4, #25
 8004c64:	68e3      	ldr	r3, [r4, #12]
 8004c66:	9a03      	ldr	r2, [sp, #12]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	429d      	cmp	r5, r3
 8004c6c:	db05      	blt.n	8004c7a <_printf_i+0x216>
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	4298      	cmp	r0, r3
 8004c74:	bfb8      	it	lt
 8004c76:	4618      	movlt	r0, r3
 8004c78:	e793      	b.n	8004ba2 <_printf_i+0x13e>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	464a      	mov	r2, r9
 8004c7e:	4639      	mov	r1, r7
 8004c80:	4630      	mov	r0, r6
 8004c82:	47c0      	blx	r8
 8004c84:	3001      	adds	r0, #1
 8004c86:	d08a      	beq.n	8004b9e <_printf_i+0x13a>
 8004c88:	3501      	adds	r5, #1
 8004c8a:	e7eb      	b.n	8004c64 <_printf_i+0x200>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1a7      	bne.n	8004be0 <_printf_i+0x17c>
 8004c90:	780b      	ldrb	r3, [r1, #0]
 8004c92:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c9a:	e765      	b.n	8004b68 <_printf_i+0x104>
 8004c9c:	080061d2 	.word	0x080061d2
 8004ca0:	080061c1 	.word	0x080061c1

08004ca4 <_realloc_r>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	4607      	mov	r7, r0
 8004ca8:	4614      	mov	r4, r2
 8004caa:	460e      	mov	r6, r1
 8004cac:	b921      	cbnz	r1, 8004cb8 <_realloc_r+0x14>
 8004cae:	4611      	mov	r1, r2
 8004cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cb4:	f7ff bc00 	b.w	80044b8 <_malloc_r>
 8004cb8:	b922      	cbnz	r2, 8004cc4 <_realloc_r+0x20>
 8004cba:	f7ff fbb1 	bl	8004420 <_free_r>
 8004cbe:	4625      	mov	r5, r4
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cc4:	f000 f814 	bl	8004cf0 <_malloc_usable_size_r>
 8004cc8:	4284      	cmp	r4, r0
 8004cca:	d90f      	bls.n	8004cec <_realloc_r+0x48>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f7ff fbf2 	bl	80044b8 <_malloc_r>
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d0f2      	beq.n	8004cc0 <_realloc_r+0x1c>
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4622      	mov	r2, r4
 8004cde:	f7ff fb72 	bl	80043c6 <memcpy>
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff fb9b 	bl	8004420 <_free_r>
 8004cea:	e7e9      	b.n	8004cc0 <_realloc_r+0x1c>
 8004cec:	4635      	mov	r5, r6
 8004cee:	e7e7      	b.n	8004cc0 <_realloc_r+0x1c>

08004cf0 <_malloc_usable_size_r>:
 8004cf0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	f1a0 0004 	sub.w	r0, r0, #4
 8004cfa:	bfbc      	itt	lt
 8004cfc:	580b      	ldrlt	r3, [r1, r0]
 8004cfe:	18c0      	addlt	r0, r0, r3
 8004d00:	4770      	bx	lr
	...

08004d04 <_getpid>:
 8004d04:	2258      	movs	r2, #88	; 0x58
 8004d06:	4b02      	ldr	r3, [pc, #8]	; (8004d10 <_getpid+0xc>)
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	4770      	bx	lr
 8004d10:	200004e8 	.word	0x200004e8

08004d14 <_kill>:
 8004d14:	2258      	movs	r2, #88	; 0x58
 8004d16:	4b02      	ldr	r3, [pc, #8]	; (8004d20 <_kill+0xc>)
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	4770      	bx	lr
 8004d20:	200004e8 	.word	0x200004e8

08004d24 <_sbrk>:
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <_sbrk+0x14>)
 8004d26:	4602      	mov	r2, r0
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	b909      	cbnz	r1, 8004d30 <_sbrk+0xc>
 8004d2c:	4903      	ldr	r1, [pc, #12]	; (8004d3c <_sbrk+0x18>)
 8004d2e:	6019      	str	r1, [r3, #0]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	4402      	add	r2, r0
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4770      	bx	lr
 8004d38:	200004d8 	.word	0x200004d8
 8004d3c:	200004ec 	.word	0x200004ec

08004d40 <_exit>:
 8004d40:	e7fe      	b.n	8004d40 <_exit>
	...

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
