
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000428c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001488  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  08005824  08005824  00015824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  0800583c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000478  2000006c  080058a8  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200004e4  080058a8  000204e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012979  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026c1  00000000  00000000  00032a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a38  00000000  00000000  000350d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000938  00000000  00000000  00035b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000047f2  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000cc50  00000000  00000000  0003ac32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00047882  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000ac5c  00000000  00000000  00047900  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000030  00000000  00000000  0005274c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000001ed  00000000  00000000  0005255c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004384 	.word	0x08004384

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08004384 	.word	0x08004384

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	689a      	ldr	r2, [r3, #8]
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	683a      	ldr	r2, [r7, #0]
 800019e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	6892      	ldr	r2, [r2, #8]
 80001d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	6852      	ldr	r2, [r2, #4]
 80001da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d103      	bne.n	80001ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <pxCurrentTCBConst2>)
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	6808      	ldr	r0, [r1, #0]
 8000216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800021a:	f380 8809 	msr	PSP, r0
 800021e:	f3bf 8f6f 	isb	sy
 8000222:	f04f 0000 	mov.w	r0, #0
 8000226:	f380 8811 	msr	BASEPRI, r0
 800022a:	f04e 0e0d 	orr.w	lr, lr, #13
 800022e:	4770      	bx	lr

08000230 <pxCurrentTCBConst2>:
 8000230:	20000088 	.word	0x20000088
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
	...

08000240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000240:	f3ef 8009 	mrs	r0, PSP
 8000244:	f3bf 8f6f 	isb	sy
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <pxCurrentTCBConst>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000250:	6010      	str	r0, [r2, #0]
 8000252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000256:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800025a:	f380 8811 	msr	BASEPRI, r0
 800025e:	f000 f8df 	bl	8000420 <vTaskSwitchContext>
 8000262:	f04f 0000 	mov.w	r0, #0
 8000266:	f380 8811 	msr	BASEPRI, r0
 800026a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	6808      	ldr	r0, [r1, #0]
 8000272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000276:	f380 8809 	msr	PSP, r0
 800027a:	f3bf 8f6f 	isb	sy
 800027e:	4770      	bx	lr

08000280 <pxCurrentTCBConst>:
 8000280:	20000088 	.word	0x20000088
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop

08000288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800028e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	f3bf 8f6f 	isb	sy
 800029a:	f3bf 8f4f 	dsb	sy
 800029e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80002a0:	f000 f812 	bl	80002c8 <xTaskIncrementTick>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <SysTick_Handler+0x3c>)
 80002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	e000ed04 	.word	0xe000ed04

080002c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002d2:	4b48      	ldr	r3, [pc, #288]	; (80003f4 <xTaskIncrementTick+0x12c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d17c      	bne.n	80003d4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002da:	4b47      	ldr	r3, [pc, #284]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002e2:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d110      	bne.n	8000310 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ee:	4b43      	ldr	r3, [pc, #268]	; (80003fc <xTaskIncrementTick+0x134>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <xTaskIncrementTick+0x138>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a40      	ldr	r2, [pc, #256]	; (80003fc <xTaskIncrementTick+0x134>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	4a40      	ldr	r2, [pc, #256]	; (8000400 <xTaskIncrementTick+0x138>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b40      	ldr	r3, [pc, #256]	; (8000404 <xTaskIncrementTick+0x13c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <xTaskIncrementTick+0x13c>)
 800030a:	6013      	str	r3, [r2, #0]
 800030c:	f000 f8ce 	bl	80004ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000310:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <xTaskIncrementTick+0x140>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	429a      	cmp	r2, r3
 8000318:	d34d      	bcc.n	80003b6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <xTaskIncrementTick+0x134>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <xTaskIncrementTick+0x60>
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <xTaskIncrementTick+0x62>
 8000328:	2300      	movs	r3, #0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <xTaskIncrementTick+0x140>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000334:	601a      	str	r2, [r3, #0]
					break;
 8000336:	e03e      	b.n	80003b6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <xTaskIncrementTick+0x134>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d203      	bcs.n	8000358 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <xTaskIncrementTick+0x140>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
						break;
 8000356:	e02e      	b.n	80003b6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3304      	adds	r3, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff2c 	bl	80001ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000366:	2b00      	cmp	r3, #0
 8000368:	d004      	beq.n	8000374 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3318      	adds	r3, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff23 	bl	80001ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000378:	2201      	movs	r2, #1
 800037a:	409a      	lsls	r2, r3
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <xTaskIncrementTick+0x144>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	4a22      	ldr	r2, [pc, #136]	; (800040c <xTaskIncrementTick+0x144>)
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4a1f      	ldr	r2, [pc, #124]	; (8000410 <xTaskIncrementTick+0x148>)
 8000394:	441a      	add	r2, r3
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	3304      	adds	r3, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4610      	mov	r0, r2
 800039e:	f7ff fee9 	bl	8000174 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d3b4      	bcc.n	800031a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003b4:	e7b1      	b.n	800031a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003bc:	4914      	ldr	r1, [pc, #80]	; (8000410 <xTaskIncrementTick+0x148>)
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d907      	bls.n	80003de <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e004      	b.n	80003de <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <xTaskIncrementTick+0x150>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <xTaskIncrementTick+0x150>)
 80003dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <xTaskIncrementTick+0x154>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ea:	697b      	ldr	r3, [r7, #20]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000110 	.word	0x20000110
 80003f8:	200000f8 	.word	0x200000f8
 80003fc:	200000f0 	.word	0x200000f0
 8000400:	200000f4 	.word	0x200000f4
 8000404:	20000108 	.word	0x20000108
 8000408:	2000010c 	.word	0x2000010c
 800040c:	200000fc 	.word	0x200000fc
 8000410:	2000008c 	.word	0x2000008c
 8000414:	20000088 	.word	0x20000088
 8000418:	20000100 	.word	0x20000100
 800041c:	20000104 	.word	0x20000104

08000420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <vTaskSwitchContext+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d003      	beq.n	8000436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800042e:	4b1b      	ldr	r3, [pc, #108]	; (800049c <vTaskSwitchContext+0x7c>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000434:	e02a      	b.n	800048c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <vTaskSwitchContext+0x7c>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <vTaskSwitchContext+0x80>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	fab3 f383 	clz	r3, r3
 8000448:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	f1c3 031f 	rsb	r3, r3, #31
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <vTaskSwitchContext+0x84>)
 800045e:	4413      	add	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3308      	adds	r3, #8
 8000474:	429a      	cmp	r2, r3
 8000476:	d104      	bne.n	8000482 <vTaskSwitchContext+0x62>
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <vTaskSwitchContext+0x88>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000110 	.word	0x20000110
 800049c:	20000104 	.word	0x20000104
 80004a0:	200000fc 	.word	0x200000fc
 80004a4:	2000008c 	.word	0x2000008c
 80004a8:	20000088 	.word	0x20000088

080004ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <prvResetNextTaskUnblockTime+0x14>
 80004bc:	2301      	movs	r3, #1
 80004be:	e000      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x16>
 80004c0:	2300      	movs	r3, #0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ce:	e008      	b.n	80004e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	200000f0 	.word	0x200000f0
 80004f0:	2000010c 	.word	0x2000010c

080004f4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004fc:	4a03      	ldr	r2, [pc, #12]	; (800050c <EXTI_ClearITPendingBit+0x18>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6153      	str	r3, [r2, #20]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40010400 	.word	0x40010400

08000510 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000510:	b480      	push	{r7}
 8000512:	b089      	sub	sp, #36	; 0x24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	78db      	ldrb	r3, [r3, #3]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	78db      	ldrb	r3, [r3, #3]
 8000540:	f003 0310 	and.w	r3, r3, #16
 8000544:	2b00      	cmp	r3, #0
 8000546:	d005      	beq.n	8000554 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	461a      	mov	r2, r3
 800054e:	69fb      	ldr	r3, [r7, #28]
 8000550:	4313      	orrs	r3, r2
 8000552:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d044      	beq.n	80005e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
 8000568:	e038      	b.n	80005dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800056a:	2201      	movs	r2, #1
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4013      	ands	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	429a      	cmp	r2, r3
 8000586:	d126      	bne.n	80005d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800058e:	220f      	movs	r2, #15
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	43db      	mvns	r3, r3
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	4013      	ands	r3, r2
 80005a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005a2:	69fa      	ldr	r2, [r7, #28]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	fa02 f303 	lsl.w	r3, r2, r3
 80005aa:	697a      	ldr	r2, [r7, #20]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	78db      	ldrb	r3, [r3, #3]
 80005b4:	2b28      	cmp	r3, #40	; 0x28
 80005b6:	d105      	bne.n	80005c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005b8:	2201      	movs	r2, #1
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	409a      	lsls	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
 80005c2:	e008      	b.n	80005d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	2b48      	cmp	r3, #72	; 0x48
 80005ca:	d104      	bne.n	80005d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005cc:	2201      	movs	r2, #1
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	409a      	lsls	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	3301      	adds	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	2b07      	cmp	r3, #7
 80005e0:	d9c3      	bls.n	800056a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	2bff      	cmp	r3, #255	; 0xff
 80005ee:	d946      	bls.n	800067e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	e03a      	b.n	8000672 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	3308      	adds	r3, #8
 8000600:	2201      	movs	r2, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4013      	ands	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d127      	bne.n	800066c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000622:	220f      	movs	r2, #15
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	43db      	mvns	r3, r3
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4013      	ands	r3, r2
 8000634:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000636:	69fa      	ldr	r2, [r7, #28]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	4313      	orrs	r3, r2
 8000642:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	2b28      	cmp	r3, #40	; 0x28
 800064a:	d105      	bne.n	8000658 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	3308      	adds	r3, #8
 8000650:	2201      	movs	r2, #1
 8000652:	409a      	lsls	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	2b48      	cmp	r3, #72	; 0x48
 800065e:	d105      	bne.n	800066c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000660:	69bb      	ldr	r3, [r7, #24]
 8000662:	3308      	adds	r3, #8
 8000664:	2201      	movs	r2, #1
 8000666:	409a      	lsls	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	3301      	adds	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	2b07      	cmp	r3, #7
 8000676:	d9c1      	bls.n	80005fc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	605a      	str	r2, [r3, #4]
  }
}
 800067e:	bf00      	nop
 8000680:	3724      	adds	r7, #36	; 0x24
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000694:	887a      	ldrh	r2, [r7, #2]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	611a      	str	r2, [r3, #16]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	615a      	str	r2, [r3, #20]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <RCC_APB2PeriphClockCmd+0x38>)
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <RCC_APB2PeriphClockCmd+0x38>)
 80006d6:	699a      	ldr	r2, [r3, #24]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4313      	orrs	r3, r2
 80006dc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006de:	e006      	b.n	80006ee <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006e0:	4905      	ldr	r1, [pc, #20]	; (80006f8 <RCC_APB2PeriphClockCmd+0x38>)
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <RCC_APB2PeriphClockCmd+0x38>)
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4013      	ands	r3, r2
 80006ec:	618b      	str	r3, [r1, #24]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000

080006fc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d006      	beq.n	800071c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800070e:	4909      	ldr	r1, [pc, #36]	; (8000734 <RCC_APB1PeriphClockCmd+0x38>)
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <RCC_APB1PeriphClockCmd+0x38>)
 8000712:	69da      	ldr	r2, [r3, #28]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4313      	orrs	r3, r2
 8000718:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800071a:	e006      	b.n	800072a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800071c:	4905      	ldr	r1, [pc, #20]	; (8000734 <RCC_APB1PeriphClockCmd+0x38>)
 800071e:	4b05      	ldr	r3, [pc, #20]	; (8000734 <RCC_APB1PeriphClockCmd+0x38>)
 8000720:	69da      	ldr	r2, [r3, #28]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	43db      	mvns	r3, r3
 8000726:	4013      	ands	r3, r2
 8000728:	61cb      	str	r3, [r1, #28]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40021000 	.word	0x40021000

08000738 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000752:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	881a      	ldrh	r2, [r3, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	885b      	ldrh	r3, [r3, #2]
 800075c:	4313      	orrs	r3, r2
 800075e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000764:	4313      	orrs	r3, r2
 8000766:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800076c:	4313      	orrs	r3, r2
 800076e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000774:	4313      	orrs	r3, r2
 8000776:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800077c:	4313      	orrs	r3, r2
 800077e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000784:	4313      	orrs	r3, r2
 8000786:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800078c:	4313      	orrs	r3, r2
 800078e:	b29a      	uxth	r2, r3
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	4313      	orrs	r3, r2
 8000794:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	89fa      	ldrh	r2, [r7, #14]
 800079a:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	8b9b      	ldrh	r3, [r3, #28]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	8a1a      	ldrh	r2, [r3, #16]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	821a      	strh	r2, [r3, #16]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007ca:	78fb      	ldrb	r3, [r7, #3]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d008      	beq.n	80007e2 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007da:	b29a      	uxth	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007e0:	e007      	b.n	80007f2 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	801a      	strh	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	887a      	ldrh	r2, [r7, #2]
 800080c:	819a      	strh	r2, [r3, #12]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	899b      	ldrh	r3, [r3, #12]
 8000824:	b29b      	uxth	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d008      	beq.n	8000854 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	889b      	ldrh	r3, [r3, #4]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000852:	e007      	b.n	8000864 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	889b      	ldrh	r3, [r3, #4]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f023 0304 	bic.w	r3, r3, #4
 800085e:	b29a      	uxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	809a      	strh	r2, [r3, #4]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	891b      	ldrh	r3, [r3, #8]
 8000882:	b29a      	uxth	r2, r3
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	4013      	ands	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e001      	b.n	8000898 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 80008a8:	f000 f9a2 	bl	8000bf0 <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fa0b 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 80008b2:	f248 00e7 	movw	r0, #32999	; 0x80e7
 80008b6:	f000 fa07 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 80008ba:	f248 2008 	movw	r0, #33288	; 0x8208
 80008be:	f000 fa03 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 80008c2:	f24a 6040 	movw	r0, #42560	; 0xa640
 80008c6:	f000 f9ff 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 80008ca:	f24c 6048 	movw	r0, #50760	; 0xc648
 80008ce:	f000 f9fb 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 80008d2:	f249 40a0 	movw	r0, #38048	; 0x94a0
 80008d6:	f000 f9f7 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 80008da:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 80008de:	f000 f9f3 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 80008e2:	f64c 2081 	movw	r0, #51841	; 0xca81
 80008e6:	f000 f9ef 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 80008ea:	f64c 60d4 	movw	r0, #52948	; 0xced4
 80008ee:	f000 f9eb 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 80008f2:	f24c 4083 	movw	r0, #50307	; 0xc483
 80008f6:	f000 f9e7 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 80008fa:	f649 0050 	movw	r0, #38992	; 0x9850
 80008fe:	f000 f9e3 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8000902:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8000906:	f000 f9df 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 800090a:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800090e:	f000 f9db 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 8000912:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8000916:	f000 f9d7 	bl	8000cc8 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 800091a:	f24c 0040 	movw	r0, #49216	; 0xc040
 800091e:	f000 f9d3 	bl	8000cc8 <Rfm12bWriteCmd>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	460b      	mov	r3, r1
 8000930:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 8000932:	f240 320e 	movw	r2, #782	; 0x30e
 8000936:	2100      	movs	r1, #0
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f003 f889 	bl	8003a50 <memset>
	rfm12bObj->module_addr = module_addr;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	78fa      	ldrb	r2, [r7, #3]
 8000942:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <Rfm12bTranssmitSeqByte>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 800095e:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8000962:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	b2d1      	uxtb	r1, r2
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	7011      	strb	r1, [r2, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	b29a      	uxth	r2, r3
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	4313      	orrs	r3, r2
 8000984:	b29b      	uxth	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f99e 	bl	8000cc8 <Rfm12bWriteCmd>
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <Rfm12bStartSending>:


void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	460b      	mov	r3, r1
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	4613      	mov	r3, r2
 80009a8:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	22aa      	movs	r2, #170	; 0xaa
 80009ae:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0xAA;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	22aa      	movs	r2, #170	; 0xaa
 80009b4:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0x2D;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	222d      	movs	r2, #45	; 0x2d
 80009ba:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = 0xD4;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	22d4      	movs	r2, #212	; 0xd4
 80009c0:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = dataNb;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = toAddr;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	725a      	strb	r2, [r3, #9]
	rfm12b->txBuff.data[6] = rfm12b->module_addr;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	729a      	strb	r2, [r3, #10]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	330b      	adds	r3, #11
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f80f 	bl	8003a06 <memcpy>
	rfm12b->txBuff.pos =0;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + ALL_HEADER_SIZE;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3307      	adds	r3, #7
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 80009f8:	f000 f8f2 	bl	8000be0 <rfm12bSwitchTx>
    rfm12b->state = transmit;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2201      	movs	r2, #1
 8000a00:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffa5 	bl	8000956 <Rfm12bTranssmitSeqByte>
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <Rfm12bMantainSending>:



void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos <= rfm12b->txBuff.dataNb){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d804      	bhi.n	8000a36 <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff91 	bl	8000956 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8000a34:	e005      	b.n	8000a42 <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 8000a3e:	f000 f8c7 	bl	8000bd0 <rfm12bSwitchRx>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fff6 	bl	8003a50 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f203 110b 	addw	r1, r3, #267	; 0x10b
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f002 ffc4 	bl	8003a06 <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000aae:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 ffcb 	bl	8003a50 <memset>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 8000ad2:	f000 f863 	bl	8000b9c <rfm12bFifoReset>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 8000ae8:	f000 f864 	bl	8000bb4 <rfm12bReadFifo>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	b2d1      	uxtb	r1, r2
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	7bfa      	ldrb	r2, [r7, #15]
 8000b10:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == (rfm12b->rxBuff.dataNb + L2_HEADER_SIZE)){
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3303      	adds	r3, #3
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10b      	bne.n	8000b52 <Rfm12bMantainreceiving+0x72>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ff85 	bl	8000a4a <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffbe 	bl	8000ac2 <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <Rfm12bMantainreceiving+0x7c>)
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <Rfm12bMantainreceiving+0x7c>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000b50:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40011000 	.word	0x40011000

08000b60 <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 f8ad 	bl	8000cc8 <Rfm12bWriteCmd>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 8000b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da0c      	bge.n	8000b94 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d103      	bne.n	8000b8e <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff44 	bl	8000a14 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8000b8c:	e002      	b.n	8000b94 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffa6 	bl	8000ae0 <Rfm12bMantainreceiving>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8000ba0:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000ba4:	f000 f890 	bl	8000cc8 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8000ba8:	f64c 2083 	movw	r0, #51843	; 0xca83
 8000bac:	f000 f88c 	bl	8000cc8 <Rfm12bWriteCmd>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 8000bba:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000bbe:	f000 f883 	bl	8000cc8 <Rfm12bWriteCmd>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 8000bd4:	f248 2099 	movw	r0, #33433	; 0x8299
 8000bd8:	f000 f876 	bl	8000cc8 <Rfm12bWriteCmd>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 8000be4:	f248 2039 	movw	r0, #33337	; 0x8239
 8000be8:	f000 f86e 	bl	8000cc8 <Rfm12bWriteCmd>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bfc:	f7ff fd60 	bl	80006c0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000c00:	2101      	movs	r1, #1
 8000c02:	2004      	movs	r0, #4
 8000c04:	f7ff fd5c 	bl	80006c0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2008      	movs	r0, #8
 8000c0c:	f7ff fd58 	bl	80006c0 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000c10:	23e0      	movs	r3, #224	; 0xe0
 8000c12:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000c14:	2318      	movs	r3, #24
 8000c16:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	4825      	ldr	r0, [pc, #148]	; (8000cb8 <Rfm12bSpiInit+0xc8>)
 8000c24:	f7ff fc74 	bl	8000510 <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000c28:	2340      	movs	r3, #64	; 0x40
 8000c2a:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000c30:	2301      	movs	r3, #1
 8000c32:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4820      	ldr	r0, [pc, #128]	; (8000cbc <Rfm12bSpiInit+0xcc>)
 8000c3c:	f7ff fc68 	bl	8000510 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c40:	2300      	movs	r3, #0
 8000c42:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000c44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c48:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8000c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c4e:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000c50:	2300      	movs	r3, #0
 8000c52:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000c54:	2300      	movs	r3, #0
 8000c56:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5c:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000c5e:	2330      	movs	r3, #48	; 0x30
 8000c60:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000c62:	2300      	movs	r3, #0
 8000c64:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000c66:	2307      	movs	r3, #7
 8000c68:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <Rfm12bSpiInit+0xd0>)
 8000c6e:	f7ff fddf 	bl	8000830 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4811      	ldr	r0, [pc, #68]	; (8000cc0 <Rfm12bSpiInit+0xd0>)
 8000c7a:	f7ff fd5d 	bl	8000738 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <Rfm12bSpiInit+0xd0>)
 8000c82:	f7ff fd9c 	bl	80007be <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <Rfm12bSpiInit+0xd4>)
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <Rfm12bSpiInit+0xd4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c92:	2310      	movs	r3, #16
 8000c94:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000c96:	2302      	movs	r3, #2
 8000c98:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4806      	ldr	r0, [pc, #24]	; (8000cbc <Rfm12bSpiInit+0xcc>)
 8000ca4:	f7ff fc34 	bl	8000510 <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <Rfm12bSpiInit+0xcc>)
 8000cac:	f7ff fcec 	bl	8000688 <GPIO_SetBits>
}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <Rfm12bWriteCmd+0x58>)
 8000cd6:	f7ff fce5 	bl	80006a4 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8000cda:	bf00      	nop
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4811      	ldr	r0, [pc, #68]	; (8000d24 <Rfm12bWriteCmd+0x5c>)
 8000ce0:	f7ff fdc5 	bl	800086e <SPI_I2S_GetFlagStatus>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f8      	beq.n	8000cdc <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	4619      	mov	r1, r3
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <Rfm12bWriteCmd+0x5c>)
 8000cf0:	f7ff fd84 	bl	80007fc <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8000cf4:	bf00      	nop
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <Rfm12bWriteCmd+0x5c>)
 8000cfa:	f7ff fdb8 	bl	800086e <SPI_I2S_GetFlagStatus>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f8      	beq.n	8000cf6 <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <Rfm12bWriteCmd+0x5c>)
 8000d06:	f7ff fd87 	bl	8000818 <SPI_I2S_ReceiveData>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <Rfm12bWriteCmd+0x58>)
 8000d12:	f7ff fcb9 	bl	8000688 <GPIO_SetBits>

	return recData;
 8000d16:	89fb      	ldrh	r3, [r7, #14]

}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40013000 	.word	0x40013000

08000d28 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <NVIC_EnableIRQ+0x2c>)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	095b      	lsrs	r3, r3, #5
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	f002 021f 	and.w	r2, r2, #31
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <EnableGpioClk+0x68>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d106      	bne.n	8000d76 <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8000d74:	e01f      	b.n	8000db6 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <EnableGpioClk+0x70>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d106      	bne.n	8000d8c <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d7e:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6193      	str	r3, [r2, #24]
	 		 }
 8000d8a:	e014      	b.n	8000db6 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <EnableGpioClk+0x74>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d106      	bne.n	8000da2 <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6193      	str	r3, [r2, #24]
	 		 }
 8000da0:	e009      	b.n	8000db6 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <EnableGpioClk+0x78>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d105      	bne.n	8000db6 <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <EnableGpioClk+0x6c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f043 0320 	orr.w	r3, r3, #32
 8000db4:	6193      	str	r3, [r2, #24]
	 		 }
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40011400 	.word	0x40011400

08000dd4 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b07      	cmp	r3, #7
 8000de4:	d81d      	bhi.n	8000e22 <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	2103      	movs	r1, #3
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	43d2      	mvns	r2, r2
 8000df4:	401a      	ands	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	2103      	movs	r1, #3
 8000e02:	fa01 f202 	lsl.w	r2, r1, r2
 8000e06:	43d2      	mvns	r2, r2
 8000e08:	401a      	ands	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	2101      	movs	r1, #1
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8000e20:	e023      	b.n	8000e6a <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	3a08      	subs	r2, #8
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	2103      	movs	r1, #3
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	43d2      	mvns	r2, r2
 8000e34:	401a      	ands	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	3a08      	subs	r2, #8
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	2103      	movs	r1, #3
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	43d2      	mvns	r2, r2
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	78fa      	ldrb	r2, [r7, #3]
 8000e58:	3a08      	subs	r2, #8
 8000e5a:	0092      	lsls	r2, r2, #2
 8000e5c:	3202      	adds	r2, #2
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	605a      	str	r2, [r3, #4]
	 		 }
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	d82b      	bhi.n	8000ede <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	0092      	lsls	r2, r2, #2
 8000e8e:	2103      	movs	r1, #3
 8000e90:	fa01 f202 	lsl.w	r2, r1, r2
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	78fa      	ldrb	r2, [r7, #3]
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	3202      	adds	r2, #2
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	401a      	ands	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	3202      	adds	r2, #2
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	78fa      	ldrb	r2, [r7, #3]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 8000edc:	e02d      	b.n	8000f3a <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	3a08      	subs	r2, #8
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	2103      	movs	r1, #3
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	43d2      	mvns	r2, r2
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	78fa      	ldrb	r2, [r7, #3]
 8000efc:	3a08      	subs	r2, #8
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	3202      	adds	r2, #2
 8000f02:	2103      	movs	r1, #3
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	3a08      	subs	r2, #8
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	3202      	adds	r2, #2
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	2101      	movs	r1, #1
 8000f30:	fa01 f202 	lsl.w	r2, r1, r2
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60da      	str	r2, [r3, #12]
	 		 }
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b07      	cmp	r3, #7
 8000f54:	d92f      	bls.n	8000fb6 <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	78fa      	ldrb	r2, [r7, #3]
 8000f5c:	3a08      	subs	r2, #8
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	2103      	movs	r1, #3
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	401a      	ands	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	78fa      	ldrb	r2, [r7, #3]
 8000f74:	3a08      	subs	r2, #8
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	3202      	adds	r2, #2
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	3a08      	subs	r2, #8
 8000f90:	0092      	lsls	r2, r2, #2
 8000f92:	2101      	movs	r1, #1
 8000f94:	fa01 f202 	lsl.w	r2, r1, r2
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	3a08      	subs	r2, #8
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	3202      	adds	r2, #2
 8000faa:	2102      	movs	r1, #2
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	70fb      	strb	r3, [r7, #3]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	70bb      	strb	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000fda:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <EnableExti+0x84>)
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <EnableExti+0x84>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8000fe6:	4a18      	ldr	r2, [pc, #96]	; (8001048 <EnableExti+0x88>)
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <EnableExti+0x88>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 8000ff2:	4916      	ldr	r1, [pc, #88]	; (800104c <EnableExti+0x8c>)
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <EnableExti+0x8c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	fa00 f202 	lsl.w	r2, r0, r2
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8001004:	78bb      	ldrb	r3, [r7, #2]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d008      	beq.n	800101c <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 800100a:	4910      	ldr	r1, [pc, #64]	; (800104c <EnableExti+0x8c>)
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <EnableExti+0x8c>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	78fa      	ldrb	r2, [r7, #3]
 8001012:	2001      	movs	r0, #1
 8001014:	fa00 f202 	lsl.w	r2, r0, r2
 8001018:	4313      	orrs	r3, r2
 800101a:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 8001022:	490a      	ldr	r1, [pc, #40]	; (800104c <EnableExti+0x8c>)
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <EnableExti+0x8c>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	78fa      	ldrb	r2, [r7, #3]
 800102a:	2001      	movs	r0, #1
 800102c:	fa00 f202 	lsl.w	r2, r0, r2
 8001030:	4313      	orrs	r3, r2
 8001032:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001034:	2017      	movs	r0, #23
 8001036:	f7ff fe77 	bl	8000d28 <NVIC_EnableIRQ>


	 		 }
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000
 800104c:	40010400 	.word	0x40010400

08001050 <NVIC_EnableIRQ>:
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <NVIC_EnableIRQ+0x2c>)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	f002 021f 	and.w	r2, r2, #31
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100

08001080 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff fa35 	bl	80004f4 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <EXTI9_5_IRQHandler+0x14>)
 800108c:	f7ff fd68 	bl	8000b60 <Rfm12bIrqCallback>

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000114 	.word	0x20000114

08001098 <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
	return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	6978      	ldr	r0, [r7, #20]
 80010ce:	f7ff fc61 	bl	8000994 <Rfm12bStartSending>
	return buffLen;
 80010d2:	887b      	ldrh	r3, [r7, #2]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80010f4:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd17      	ble.n	800112c <_Z10broker_recPvP11sockaddr_inPht+0x50>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 80010fc:	887a      	ldrh	r2, [r7, #2]
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	4293      	cmp	r3, r2
 8001102:	bfa8      	it	ge
 8001104:	4613      	movge	r3, r2
 8001106:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f002 fc77 	bl	8003a06 <memcpy>
		obj->completedRxBuff.dataNb = 0;
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		sockaddr->sin_addr.s_addr = obj->completedRxBuff.rxFromAddr;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	605a      	str	r2, [r3, #4]
	}

	return byteNb;
 800112c:	7dfb      	ldrb	r3, [r7, #23]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
	return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <_Z9_delay_msm>:


void _delay_ms(uint32_t x){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	;
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <_Z11intToStringB5cxx11m>:



std::string intToString(uint32_t intVal){
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	/*due to not available "to_string()" c++11 func*/
	const uint8_t intSize = 8;
 800116a:	2308      	movs	r3, #8
 800116c:	75fb      	strb	r3, [r7, #23]
	char charVal[intSize];
	snprintf(charVal, intSize, "%u", intVal);
 800116e:	f107 000c 	add.w	r0, r7, #12
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <_Z11intToStringB5cxx11m+0x4c>)
 8001176:	2108      	movs	r1, #8
 8001178:	f002 fd70 	bl	8003c5c <sniprintf>
	std::string strVal(charVal);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f9b1 	bl	80034e8 <_ZNSaIcEC1Ev>
 8001186:	f107 0214 	add.w	r2, r7, #20
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f002 fa5f 	bl	8003654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4618      	mov	r0, r3
 800119c:	f002 f9a5 	bl	80034ea <_ZNSaIcED1Ev>
	return strVal;
 80011a0:	bf00      	nop
}
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0800439c 	.word	0x0800439c

080011b0 <main>:




int main(){
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	f5ad 5d8a 	sub.w	sp, sp, #4416	; 0x1140
 80011b6:	af02      	add	r7, sp, #8



	 TM_ILI9341_Init();
 80011b8:	f000 fb36 	bl	8001828 <TM_ILI9341_Init>


	  TM_ILI9341_DrawPixel(10, 10, ILI9341_COLOR_ORANGE);
 80011bc:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 80011c0:	210a      	movs	r1, #10
 80011c2:	200a      	movs	r0, #10
 80011c4:	f000 fd12 	bl	8001bec <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(11, 11, ILI9341_COLOR_ORANGE);
 80011c8:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 80011cc:	210b      	movs	r1, #11
 80011ce:	200b      	movs	r0, #11
 80011d0:	f000 fd0c 	bl	8001bec <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(12, 12, ILI9341_COLOR_ORANGE);
 80011d4:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 80011d8:	210c      	movs	r1, #12
 80011da:	200c      	movs	r0, #12
 80011dc:	f000 fd06 	bl	8001bec <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(20, 20, ILI9341_COLOR_YELLOW);
 80011e0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011e4:	2114      	movs	r1, #20
 80011e6:	2014      	movs	r0, #20
 80011e8:	f000 fd00 	bl	8001bec <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(30, 30, ILI9341_COLOR_BLUE);
 80011ec:	221f      	movs	r2, #31
 80011ee:	211e      	movs	r1, #30
 80011f0:	201e      	movs	r0, #30
 80011f2:	f000 fcfb 	bl	8001bec <TM_ILI9341_DrawPixel>





	 TM_ILI9341_Puts(0,0, "Temp.  22.46", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 80011f6:	2300      	movs	r3, #0
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	231f      	movs	r3, #31
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4bac      	ldr	r3, [pc, #688]	; (80014b0 <main+0x300>)
 8001200:	4aac      	ldr	r2, [pc, #688]	; (80014b4 <main+0x304>)
 8001202:	2100      	movs	r1, #0
 8001204:	2000      	movs	r0, #0
 8001206:	f000 ff7d 	bl	8002104 <TM_ILI9341_Puts>
	// TM_ILI9341_Puts(0,25, "Hum.  57%", &TM_Font_16x26, ILI9341_COLOR_CYAN, ILI9341_COLOR_BLACK);
	 TM_ILI9341_Puts(0,50, "Out1  ON", &TM_Font_16x26, ILI9341_COLOR_GREEN, ILI9341_COLOR_BLACK);
 800120a:	2300      	movs	r3, #0
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4ba6      	ldr	r3, [pc, #664]	; (80014b0 <main+0x300>)
 8001216:	4aa8      	ldr	r2, [pc, #672]	; (80014b8 <main+0x308>)
 8001218:	2132      	movs	r1, #50	; 0x32
 800121a:	2000      	movs	r0, #0
 800121c:	f000 ff72 	bl	8002104 <TM_ILI9341_Puts>
	 TM_ILI9341_Puts(0,75, "Out2  OFF", &TM_Font_16x26, ILI9341_COLOR_GRAY, ILI9341_COLOR_BLACK);
 8001220:	2300      	movs	r3, #0
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4ba1      	ldr	r3, [pc, #644]	; (80014b0 <main+0x300>)
 800122c:	4aa3      	ldr	r2, [pc, #652]	; (80014bc <main+0x30c>)
 800122e:	214b      	movs	r1, #75	; 0x4b
 8001230:	2000      	movs	r0, #0
 8001232:	f000 ff67 	bl	8002104 <TM_ILI9341_Puts>





 	EnableGpioClk(LOG_UART_PORT);
 8001236:	48a2      	ldr	r0, [pc, #648]	; (80014c0 <main+0x310>)
 8001238:	f7ff fd8e 	bl	8000d58 <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 800123c:	2109      	movs	r1, #9
 800123e:	48a0      	ldr	r0, [pc, #640]	; (80014c0 <main+0x310>)
 8001240:	f7ff fe80 	bl	8000f44 <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8001244:	210a      	movs	r1, #10
 8001246:	489e      	ldr	r0, [pc, #632]	; (80014c0 <main+0x310>)
 8001248:	f7ff fdc4 	bl	8000dd4 <SetGpioAsInFloating>
 	EnableUart(USART1);
 800124c:	489d      	ldr	r0, [pc, #628]	; (80014c4 <main+0x314>)
 800124e:	f000 f94f 	bl	80014f0 <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001252:	2101      	movs	r1, #1
 8001254:	2010      	movs	r0, #16
 8001256:	f7ff fa33 	bl	80006c0 <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 800125a:	2310      	movs	r3, #16
 800125c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001260:	f102 021b 	add.w	r2, r2, #27
 8001264:	7013      	strb	r3, [r2, #0]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8001266:	2302      	movs	r3, #2
 8001268:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800126c:	f102 021a 	add.w	r2, r2, #26
 8001270:	7013      	strb	r3, [r2, #0]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 8001272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001276:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800127a:	f102 0218 	add.w	r2, r2, #24
 800127e:	8013      	strh	r3, [r2, #0]
 	GPIO_Init(GPIOC, &PORT);
 8001280:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001284:	f103 0318 	add.w	r3, r3, #24
 8001288:	4619      	mov	r1, r3
 800128a:	488f      	ldr	r0, [pc, #572]	; (80014c8 <main+0x318>)
 800128c:	f7ff f940 	bl	8000510 <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 8001290:	4a8d      	ldr	r2, [pc, #564]	; (80014c8 <main+0x318>)
 8001292:	4b8d      	ldr	r3, [pc, #564]	; (80014c8 <main+0x318>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800129a:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 800129c:	f7ff fb02 	bl	80008a4 <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 80012a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a4:	f7ff ff52 	bl	800114c <_Z9_delay_msm>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fd0d 	bl	8000cc8 <Rfm12bWriteCmd>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80012b4:	f102 0215 	add.w	r2, r2, #21
 80012b8:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80012ba:	2101      	movs	r1, #1
 80012bc:	2008      	movs	r0, #8
 80012be:	f7ff f9ff 	bl	80006c0 <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 80012c2:	2301      	movs	r3, #1
 80012c4:	2200      	movs	r2, #0
 80012c6:	2105      	movs	r1, #5
 80012c8:	4880      	ldr	r0, [pc, #512]	; (80014cc <main+0x31c>)
 80012ca:	f7ff fe79 	bl	8000fc0 <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 80012ce:	2105      	movs	r1, #5
 80012d0:	487e      	ldr	r0, [pc, #504]	; (80014cc <main+0x31c>)
 80012d2:	f7ff fdcf 	bl	8000e74 <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 80012d6:	210b      	movs	r1, #11
 80012d8:	487c      	ldr	r0, [pc, #496]	; (80014cc <main+0x31c>)
 80012da:	f7ff fdcb 	bl	8000e74 <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 80012de:	f7ff fc5d 	bl	8000b9c <rfm12bFifoReset>
 	rfm12bSwitchRx();
 80012e2:	f7ff fc75 	bl	8000bd0 <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012e6:	2017      	movs	r0, #23
 80012e8:	f7ff feb2 	bl	8001050 <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 80012ec:	2101      	movs	r1, #1
 80012ee:	4878      	ldr	r0, [pc, #480]	; (80014d0 <main+0x320>)
 80012f0:	f7ff fb19 	bl	8000926 <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 80012f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80012f8:	4a75      	ldr	r2, [pc, #468]	; (80014d0 <main+0x320>)
 80012fa:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 80012fc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001300:	4a74      	ldr	r2, [pc, #464]	; (80014d4 <main+0x324>)
 8001302:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 8001306:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800130a:	4a73      	ldr	r2, [pc, #460]	; (80014d8 <main+0x328>)
 800130c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 8001310:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001314:	4a71      	ldr	r2, [pc, #452]	; (80014dc <main+0x32c>)
 8001316:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 800131a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800131e:	4a70      	ldr	r2, [pc, #448]	; (80014e0 <main+0x330>)
 8001320:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8001324:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001328:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ffd2 	bl	80022d8 <broker_init_by_given_net>

	sockaddr_t sockaddr;
	uint8_t frameBuff[MAX_FRAME_SIZE];


uint16_t i =0;
 8001334:	2300      	movs	r3, #0
 8001336:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800133a:	f102 0216 	add.w	r2, r2, #22
 800133e:	8013      	strh	r3, [r2, #0]
	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8001340:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8001344:	3a0c      	subs	r2, #12
 8001346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800134a:	3b1c      	subs	r3, #28
 800134c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001350:	4619      	mov	r1, r3
 8001352:	f001 f810 	bl	8002376 <broker_receive>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8081 	beq.w	8001460 <main+0x2b0>
	 			if (frameBuff[42] == 'T'){
 800135e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001362:	3b1c      	subs	r3, #28
 8001364:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001368:	2b54      	cmp	r3, #84	; 0x54
 800136a:	d10a      	bne.n	8001382 <main+0x1d2>
	 				TM_ILI9341_Puts(0,0, "Temp.  99.88", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 800136c:	2300      	movs	r3, #0
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	231f      	movs	r3, #31
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <main+0x300>)
 8001376:	4a5b      	ldr	r2, [pc, #364]	; (80014e4 <main+0x334>)
 8001378:	2100      	movs	r1, #0
 800137a:	2000      	movs	r0, #0
 800137c:	f000 fec2 	bl	8002104 <TM_ILI9341_Puts>
 8001380:	e063      	b.n	800144a <main+0x29a>
	 			} else{
	 				TM_ILI9341_Puts(0,25, "cnt: ", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	231f      	movs	r3, #31
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4b49      	ldr	r3, [pc, #292]	; (80014b0 <main+0x300>)
 800138c:	4a56      	ldr	r2, [pc, #344]	; (80014e8 <main+0x338>)
 800138e:	2119      	movs	r1, #25
 8001390:	2000      	movs	r0, #0
 8001392:	f000 feb7 	bl	8002104 <TM_ILI9341_Puts>
	 				i++;
 8001396:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800139a:	f103 0316 	add.w	r3, r3, #22
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80013a6:	f102 0216 	add.w	r2, r2, #22
 80013aa:	8013      	strh	r3, [r2, #0]
	 				std::string cnt;
 80013ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013b0:	3b14      	subs	r3, #20
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 f8f6 	bl	80035a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	 				cnt = intToString(i);
 80013b8:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80013bc:	f103 0316 	add.w	r3, r3, #22
 80013c0:	881a      	ldrh	r2, [r3, #0]
 80013c2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80013c6:	f103 031c 	add.w	r3, r3, #28
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fec7 	bl	8001160 <_Z11intToStringB5cxx11m>
 80013d2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80013d6:	f102 021c 	add.w	r2, r2, #28
 80013da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013de:	3b14      	subs	r3, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 f8eb 	bl	80035be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80013e8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80013ec:	f103 031c 	add.w	r3, r3, #28
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f8de 	bl	80035b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	 				frameBuff[86]=0;
 80013f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013fa:	3b1c      	subs	r3, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	 				TM_ILI9341_Puts(100,25, (char*) cnt.data(), &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001402:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001406:	3b14      	subs	r3, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f002 f8fd 	bl	8003608 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 800140e:	4602      	mov	r2, r0
 8001410:	2300      	movs	r3, #0
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	231f      	movs	r3, #31
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <main+0x300>)
 800141a:	2119      	movs	r1, #25
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f000 fe71 	bl	8002104 <TM_ILI9341_Puts>
	 				TM_ILI9341_Puts(100,50, (char*) &frameBuff[16], &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8001422:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001426:	3b1c      	subs	r3, #28
 8001428:	f103 0210 	add.w	r2, r3, #16
 800142c:	2300      	movs	r3, #0
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	231f      	movs	r3, #31
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <main+0x300>)
 8001436:	2132      	movs	r1, #50	; 0x32
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f000 fe63 	bl	8002104 <TM_ILI9341_Puts>
	 				std::string cnt;
 800143e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001442:	3b14      	subs	r3, #20
 8001444:	4618      	mov	r0, r3
 8001446:	f002 f8b4 	bl	80035b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>





	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 800144a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800144e:	3a0c      	subs	r2, #12
 8001450:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001454:	3b1c      	subs	r3, #28
 8001456:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 800145a:	4619      	mov	r1, r3
 800145c:	f000 ffa4 	bl	80023a8 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <main+0x31c>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f43f af64 	beq.w	8001340 <main+0x190>
	 			  uint8_t buff[] = "abcdefghijabcdefghijabcdefghij";
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	3b14      	subs	r3, #20
 800147e:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <main+0x33c>)
 8001480:	461c      	mov	r4, r3
 8001482:	4615      	mov	r5, r2
 8001484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001488:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800148c:	c407      	stmia	r4!, {r0, r1, r2}
 800148e:	8023      	strh	r3, [r4, #0]
 8001490:	3402      	adds	r4, #2
 8001492:	0c1b      	lsrs	r3, r3, #16
 8001494:	7023      	strb	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 8001496:	f107 0118 	add.w	r1, r7, #24
 800149a:	3914      	subs	r1, #20
 800149c:	2302      	movs	r3, #2
 800149e:	221e      	movs	r2, #30
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <main+0x320>)
 80014a2:	f7ff fa77 	bl	8000994 <Rfm12bStartSending>
	 			 _delay_ms(250);
 80014a6:	20fa      	movs	r0, #250	; 0xfa
 80014a8:	f7ff fe50 	bl	800114c <_Z9_delay_msm>
	 		  }




	 	}
 80014ac:	e748      	b.n	8001340 <main+0x190>
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000
 80014b4:	080043a0 	.word	0x080043a0
 80014b8:	080043b0 	.word	0x080043b0
 80014bc:	080043bc 	.word	0x080043bc
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	20000114 	.word	0x20000114
 80014d4:	08001099 	.word	0x08001099
 80014d8:	080010af 	.word	0x080010af
 80014dc:	080010dd 	.word	0x080010dd
 80014e0:	08001137 	.word	0x08001137
 80014e4:	080043c8 	.word	0x080043c8
 80014e8:	080043d8 	.word	0x080043d8
 80014ec:	080043e0 	.word	0x080043e0

080014f0 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80014f8:	4a13      	ldr	r2, [pc, #76]	; (8001548 <EnableUart+0x58>)
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <EnableUart+0x58>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001502:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f64e 2260 	movw	r2, #60000	; 0xea60
 800150a:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	899b      	ldrh	r3, [r3, #12]
 8001510:	b29b      	uxth	r3, r3
 8001512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	899b      	ldrh	r3, [r3, #12]
 8001520:	b29b      	uxth	r3, r3
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	b29a      	uxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	899b      	ldrh	r3, [r3, #12]
 8001530:	b29b      	uxth	r3, r3
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	819a      	strh	r2, [r3, #12]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001550:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001552:	e003      	b.n	800155c <LoopCopyDataInit>

08001554 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001556:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001558:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800155a:	3104      	adds	r1, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001560:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001562:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001564:	d3f6      	bcc.n	8001554 <CopyDataInit>
	ldr	r2, =_sbss
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001568:	e002      	b.n	8001570 <LoopFillZerobss>

0800156a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800156a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800156c:	f842 3b04 	str.w	r3, [r2], #4

08001570 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001572:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001574:	d3f9      	bcc.n	800156a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001576:	f000 f82b 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157a:	f002 f9f3 	bl	8003964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157e:	f7ff fe17 	bl	80011b0 <main>
	bx	lr
 8001582:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001584:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001588:	0800583c 	.word	0x0800583c
	ldr	r0, =_sdata
 800158c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001590:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8001594:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 8001598:	200004e4 	.word	0x200004e4

0800159c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>

0800159e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <SystemInit+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <SystemInit+0x5c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80015e0:	4912      	ldr	r1, [pc, #72]	; (800162c <SystemInit+0x5c>)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <SystemInit+0x5c>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <SystemInit+0x60>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015ec:	4a0f      	ldr	r2, [pc, #60]	; (800162c <SystemInit+0x5c>)
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <SystemInit+0x5c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <SystemInit+0x5c>)
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <SystemInit+0x5c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001606:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001608:	4a08      	ldr	r2, [pc, #32]	; (800162c <SystemInit+0x5c>)
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <SystemInit+0x5c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001612:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <SystemInit+0x5c>)
 8001616:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800161a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800161c:	f000 f80c 	bl	8001638 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SystemInit+0x64>)
 8001622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001626:	609a      	str	r2, [r3, #8]
#endif 
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000
 8001630:	f8ff0000 	.word	0xf8ff0000
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800163c:	f000 f802 	bl	8001644 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001652:	4a3a      	ldr	r2, [pc, #232]	; (800173c <SetSysClockTo72+0xf8>)
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <SetSysClockTo72+0xf8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800165e:	4b37      	ldr	r3, [pc, #220]	; (800173c <SetSysClockTo72+0xf8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <SetSysClockTo72+0x38>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800167a:	d1f0      	bne.n	800165e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <SetSysClockTo72+0xf8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001688:	2301      	movs	r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	e001      	b.n	8001692 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d14b      	bne.n	8001730 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <SetSysClockTo72+0xfc>)
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <SetSysClockTo72+0xfc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80016a4:	4a26      	ldr	r2, [pc, #152]	; (8001740 <SetSysClockTo72+0xfc>)
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <SetSysClockTo72+0xfc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0303 	bic.w	r3, r3, #3
 80016ae:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80016b0:	4a23      	ldr	r2, [pc, #140]	; (8001740 <SetSysClockTo72+0xfc>)
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <SetSysClockTo72+0xfc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <SetSysClockTo72+0xf8>)
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <SetSysClockTo72+0xf8>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <SetSysClockTo72+0xf8>)
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <SetSysClockTo72+0xf8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <SetSysClockTo72+0xf8>)
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <SetSysClockTo72+0xf8>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <SetSysClockTo72+0xf8>)
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <SetSysClockTo72+0xf8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80016e2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80016e4:	4a15      	ldr	r2, [pc, #84]	; (800173c <SetSysClockTo72+0xf8>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <SetSysClockTo72+0xf8>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80016ee:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <SetSysClockTo72+0xf8>)
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <SetSysClockTo72+0xf8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80016fc:	bf00      	nop
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <SetSysClockTo72+0xf8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f9      	beq.n	80016fe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <SetSysClockTo72+0xf8>)
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <SetSysClockTo72+0xf8>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 0303 	bic.w	r3, r3, #3
 8001714:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <SetSysClockTo72+0xf8>)
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <SetSysClockTo72+0xf8>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001722:	bf00      	nop
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SetSysClockTo72+0xf8>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d1f9      	bne.n	8001724 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40022000 	.word	0x40022000

08001744 <spi2_init_lcd>:
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);




void spi2_init_lcd(void) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI2 and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800174a:	2101      	movs	r1, #1
 800174c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001750:	f7fe ffd4 	bl	80006fc <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001754:	2101      	movs	r1, #1
 8001756:	2008      	movs	r0, #8
 8001758:	f7fe ffb2 	bl	80006c0 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800175c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001760:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001762:	2318      	movs	r3, #24
 8001764:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001766:	2301      	movs	r3, #1
 8001768:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	4818      	ldr	r0, [pc, #96]	; (80017d0 <spi2_init_lcd+0x8c>)
 8001770:	f7fe fece 	bl	8000510 <GPIO_Init>
//	/* Enable SPI1  */
//	SPI_Cmd(SPI2, ENABLE);



	 RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <spi2_init_lcd+0x90>)
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <spi2_init_lcd+0x90>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177e:	61d3      	str	r3, [r2, #28]
		 SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8001780:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <spi2_init_lcd+0x94>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <spi2_init_lcd+0x94>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	f043 0318 	orr.w	r3, r3, #24
 800178c:	b29b      	uxth	r3, r3
 800178e:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSM;
 8001790:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <spi2_init_lcd+0x94>)
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <spi2_init_lcd+0x94>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179c:	b29b      	uxth	r3, r3
 800179e:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSI;
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <spi2_init_lcd+0x94>)
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <spi2_init_lcd+0x94>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	8013      	strh	r3, [r2, #0]
		 SPI2->CRCPR = 7;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <spi2_init_lcd+0x94>)
 80017b2:	2207      	movs	r2, #7
 80017b4:	821a      	strh	r2, [r3, #16]
		 SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <spi2_init_lcd+0x94>)
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <spi2_init_lcd+0x94>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8013      	strh	r3, [r2, #0]



}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40003800 	.word	0x40003800

080017dc <TM_SPI_Send>:


uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 80017e8:	bf00      	nop
 80017ea:	2102      	movs	r1, #2
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff f83e 	bl	800086e <SPI_I2S_GetFlagStatus>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f8      	beq.n	80017ea <TM_SPI_Send+0xe>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(SPIx, data);
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7fe fffc 	bl	80007fc <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
 8001804:	bf00      	nop
 8001806:	2101      	movs	r1, #1
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff f830 	bl	800086e <SPI_I2S_GetFlagStatus>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f8      	beq.n	8001806 <TM_SPI_Send+0x2a>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(SPIx);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe ffff 	bl	8000818 <SPI_I2S_ReceiveData>
 800181a:	4603      	mov	r3, r0
 800181c:	b2db      	uxtb	r3, r3
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <TM_ILI9341_Init>:


void TM_ILI9341_Init() {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800182e:	2101      	movs	r1, #1
 8001830:	2004      	movs	r0, #4
 8001832:	f7fe ff45 	bl	80006c0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001836:	2101      	movs	r1, #1
 8001838:	2008      	movs	r0, #8
 800183a:	f7fe ff41 	bl	80006c0 <RCC_APB2PeriphClockCmd>
	/* Init WRX pin */
	//TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_wrx;
	port_wrx.GPIO_Mode = GPIO_Mode_Out_PP;
 800183e:	2310      	movs	r3, #16
 8001840:	73fb      	strb	r3, [r7, #15]
	port_wrx.GPIO_Speed = GPIO_Speed_2MHz;
 8001842:	2302      	movs	r3, #2
 8001844:	73bb      	strb	r3, [r7, #14]
	port_wrx.GPIO_Pin = ILI9341_WRX_PIN;
 8001846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184a:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(ILI9341_WRX_PORT, &port_wrx);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	481f      	ldr	r0, [pc, #124]	; (80018d0 <TM_ILI9341_Init+0xa8>)
 8001854:	f7fe fe5c 	bl	8000510 <GPIO_Init>

	
	/* Init CS pin */
//	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_cs;
	port_cs.GPIO_Mode = GPIO_Mode_Out_PP;
 8001858:	2310      	movs	r3, #16
 800185a:	72fb      	strb	r3, [r7, #11]
	port_cs.GPIO_Speed = GPIO_Speed_2MHz;
 800185c:	2302      	movs	r3, #2
 800185e:	72bb      	strb	r3, [r7, #10]
	port_cs.GPIO_Pin = ILI9341_CS_PIN;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	813b      	strh	r3, [r7, #8]
	GPIO_Init(ILI9341_CS_PORT, &port_cs);
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4619      	mov	r1, r3
 800186c:	4819      	ldr	r0, [pc, #100]	; (80018d4 <TM_ILI9341_Init+0xac>)
 800186e:	f7fe fe4f 	bl	8000510 <GPIO_Init>

	
	/* Init RST pin */
//	TM_GPIO_Init(ILI9341_RST_PORT, ILI9341_RST_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
	GPIO_InitTypeDef port_rst;
	port_rst.GPIO_Mode = GPIO_Mode_Out_PP;
 8001872:	2310      	movs	r3, #16
 8001874:	71fb      	strb	r3, [r7, #7]
	port_rst.GPIO_Speed = GPIO_Speed_2MHz;
 8001876:	2302      	movs	r3, #2
 8001878:	71bb      	strb	r3, [r7, #6]
	port_rst.GPIO_Pin = ILI9341_RST_PIN;
 800187a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187e:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(ILI9341_RST_PORT, &port_rst);
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <TM_ILI9341_Init+0xa8>)
 8001886:	f7fe fe43 	bl	8000510 <GPIO_Init>


	/* CS high */
	ILI9341_CS_SET;
 800188a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188e:	4811      	ldr	r0, [pc, #68]	; (80018d4 <TM_ILI9341_Init+0xac>)
 8001890:	f7fe fefa 	bl	8000688 <GPIO_SetBits>
	
	/* Init SPI */
	spi2_init_lcd();
 8001894:	f7ff ff56 	bl	8001744 <spi2_init_lcd>
	
	/* Init DMA for SPI */
	//TM_SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 8001898:	f000 f824 	bl	80018e4 <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <TM_ILI9341_Init+0xb0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <TM_ILI9341_Init+0xb0>)
 80018a4:	881a      	ldrh	r2, [r3, #0]
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <TM_ILI9341_Init+0xb4>)
 80018a8:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <TM_ILI9341_Init+0xb8>)
 80018ac:	22f0      	movs	r2, #240	; 0xf0
 80018ae:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <TM_ILI9341_Init+0xb8>)
 80018b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018b6:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <TM_ILI9341_Init+0xb8>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	glcd_fill_screen(ILI9341_COLOR_BROWN);
 80018be:	f64b 30ca 	movw	r0, #48074	; 0xbbca
 80018c2:	f000 f9fd 	bl	8001cc0 <glcd_fill_screen>
//	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010800 	.word	0x40010800
 80018d4:	40010c00 	.word	0x40010c00
 80018d8:	200004da 	.word	0x200004da
 80018dc:	200004dc 	.word	0x200004dc
 80018e0:	200004d4 	.word	0x200004d4

080018e4 <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 80018e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ec:	4899      	ldr	r0, [pc, #612]	; (8001b54 <TM_ILI9341_InitLCD+0x270>)
 80018ee:	f7fe fed9 	bl	80006a4 <GPIO_ResetBits>
	TM_ILI9341_Delay(20000);
 80018f2:	f644 6020 	movw	r0, #20000	; 0x4e20
 80018f6:	f000 fb45 	bl	8001f84 <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 80018fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fe:	4895      	ldr	r0, [pc, #596]	; (8001b54 <TM_ILI9341_InitLCD+0x270>)
 8001900:	f7fe fec2 	bl	8000688 <GPIO_SetBits>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 8001904:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001908:	f000 fb3c 	bl	8001f84 <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 800190c:	2001      	movs	r0, #1
 800190e:	f000 f925 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 8001912:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001916:	f000 fb35 	bl	8001f84 <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 800191a:	20cb      	movs	r0, #203	; 0xcb
 800191c:	f000 f91e 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 8001920:	2039      	movs	r0, #57	; 0x39
 8001922:	f000 f93f 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 8001926:	202c      	movs	r0, #44	; 0x2c
 8001928:	f000 f93c 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800192c:	2000      	movs	r0, #0
 800192e:	f000 f939 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 8001932:	2034      	movs	r0, #52	; 0x34
 8001934:	f000 f936 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 8001938:	2002      	movs	r0, #2
 800193a:	f000 f933 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 800193e:	20cf      	movs	r0, #207	; 0xcf
 8001940:	f000 f90c 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001944:	2000      	movs	r0, #0
 8001946:	f000 f92d 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800194a:	20c1      	movs	r0, #193	; 0xc1
 800194c:	f000 f92a 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8001950:	2030      	movs	r0, #48	; 0x30
 8001952:	f000 f927 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 8001956:	20e8      	movs	r0, #232	; 0xe8
 8001958:	f000 f900 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 800195c:	2085      	movs	r0, #133	; 0x85
 800195e:	f000 f921 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001962:	2000      	movs	r0, #0
 8001964:	f000 f91e 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8001968:	2078      	movs	r0, #120	; 0x78
 800196a:	f000 f91b 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800196e:	20ea      	movs	r0, #234	; 0xea
 8001970:	f000 f8f4 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f915 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800197a:	2000      	movs	r0, #0
 800197c:	f000 f912 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8001980:	20ed      	movs	r0, #237	; 0xed
 8001982:	f000 f8eb 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 8001986:	2064      	movs	r0, #100	; 0x64
 8001988:	f000 f90c 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f909 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 8001992:	2012      	movs	r0, #18
 8001994:	f000 f906 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8001998:	2081      	movs	r0, #129	; 0x81
 800199a:	f000 f903 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800199e:	20f7      	movs	r0, #247	; 0xf7
 80019a0:	f000 f8dc 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 80019a4:	2020      	movs	r0, #32
 80019a6:	f000 f8fd 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 80019aa:	20c0      	movs	r0, #192	; 0xc0
 80019ac:	f000 f8d6 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 80019b0:	2023      	movs	r0, #35	; 0x23
 80019b2:	f000 f8f7 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 80019b6:	20c1      	movs	r0, #193	; 0xc1
 80019b8:	f000 f8d0 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 80019bc:	2010      	movs	r0, #16
 80019be:	f000 f8f1 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 80019c2:	20c5      	movs	r0, #197	; 0xc5
 80019c4:	f000 f8ca 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 80019c8:	203e      	movs	r0, #62	; 0x3e
 80019ca:	f000 f8eb 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 80019ce:	2028      	movs	r0, #40	; 0x28
 80019d0:	f000 f8e8 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 80019d4:	20c7      	movs	r0, #199	; 0xc7
 80019d6:	f000 f8c1 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 80019da:	2086      	movs	r0, #134	; 0x86
 80019dc:	f000 f8e2 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 80019e0:	2036      	movs	r0, #54	; 0x36
 80019e2:	f000 f8bb 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 80019e6:	2048      	movs	r0, #72	; 0x48
 80019e8:	f000 f8dc 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 80019ec:	203a      	movs	r0, #58	; 0x3a
 80019ee:	f000 f8b5 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 80019f2:	2055      	movs	r0, #85	; 0x55
 80019f4:	f000 f8d6 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 80019f8:	20b1      	movs	r0, #177	; 0xb1
 80019fa:	f000 f8af 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f000 f8d0 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 8001a04:	2018      	movs	r0, #24
 8001a06:	f000 f8cd 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8001a0a:	20b6      	movs	r0, #182	; 0xb6
 8001a0c:	f000 f8a6 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 8001a10:	2008      	movs	r0, #8
 8001a12:	f000 f8c7 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 8001a16:	2082      	movs	r0, #130	; 0x82
 8001a18:	f000 f8c4 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 8001a1c:	2027      	movs	r0, #39	; 0x27
 8001a1e:	f000 f8c1 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8001a22:	20f2      	movs	r0, #242	; 0xf2
 8001a24:	f000 f89a 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f8bb 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8001a2e:	202a      	movs	r0, #42	; 0x2a
 8001a30:	f000 f894 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f8b5 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f8b2 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f8af 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 8001a46:	20ef      	movs	r0, #239	; 0xef
 8001a48:	f000 f8ac 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8001a4c:	202b      	movs	r0, #43	; 0x2b
 8001a4e:	f000 f885 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f8a6 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f000 f8a3 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 f8a0 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 8001a64:	203f      	movs	r0, #63	; 0x3f
 8001a66:	f000 f89d 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8001a6a:	2026      	movs	r0, #38	; 0x26
 8001a6c:	f000 f876 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f000 f897 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8001a76:	20e0      	movs	r0, #224	; 0xe0
 8001a78:	f000 f870 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f000 f891 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001a82:	2031      	movs	r0, #49	; 0x31
 8001a84:	f000 f88e 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8001a88:	202b      	movs	r0, #43	; 0x2b
 8001a8a:	f000 f88b 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8001a8e:	200c      	movs	r0, #12
 8001a90:	f000 f888 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001a94:	200e      	movs	r0, #14
 8001a96:	f000 f885 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8001a9a:	2008      	movs	r0, #8
 8001a9c:	f000 f882 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8001aa0:	204e      	movs	r0, #78	; 0x4e
 8001aa2:	f000 f87f 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 8001aa6:	20f1      	movs	r0, #241	; 0xf1
 8001aa8:	f000 f87c 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 8001aac:	2037      	movs	r0, #55	; 0x37
 8001aae:	f000 f879 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8001ab2:	2007      	movs	r0, #7
 8001ab4:	f000 f876 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f000 f873 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f000 f870 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001ac4:	200e      	movs	r0, #14
 8001ac6:	f000 f86d 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8001aca:	2009      	movs	r0, #9
 8001acc:	f000 f86a 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f000 f867 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8001ad6:	20e1      	movs	r0, #225	; 0xe1
 8001ad8:	f000 f840 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f861 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001ae2:	200e      	movs	r0, #14
 8001ae4:	f000 f85e 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 8001ae8:	2014      	movs	r0, #20
 8001aea:	f000 f85b 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f000 f858 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8001af4:	2011      	movs	r0, #17
 8001af6:	f000 f855 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8001afa:	2007      	movs	r0, #7
 8001afc:	f000 f852 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001b00:	2031      	movs	r0, #49	; 0x31
 8001b02:	f000 f84f 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8001b06:	20c1      	movs	r0, #193	; 0xc1
 8001b08:	f000 f84c 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 8001b0c:	2048      	movs	r0, #72	; 0x48
 8001b0e:	f000 f849 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8001b12:	2008      	movs	r0, #8
 8001b14:	f000 f846 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8001b18:	200f      	movs	r0, #15
 8001b1a:	f000 f843 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8001b1e:	200c      	movs	r0, #12
 8001b20:	f000 f840 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001b24:	2031      	movs	r0, #49	; 0x31
 8001b26:	f000 f83d 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 8001b2a:	2036      	movs	r0, #54	; 0x36
 8001b2c:	f000 f83a 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8001b30:	200f      	movs	r0, #15
 8001b32:	f000 f837 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8001b36:	2011      	movs	r0, #17
 8001b38:	f000 f810 	bl	8001b5c <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 8001b3c:	4806      	ldr	r0, [pc, #24]	; (8001b58 <TM_ILI9341_InitLCD+0x274>)
 8001b3e:	f000 fa21 	bl	8001f84 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8001b42:	2029      	movs	r0, #41	; 0x29
 8001b44:	f000 f80a 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8001b48:	202c      	movs	r0, #44	; 0x2c
 8001b4a:	f000 f807 	bl	8001b5c <TM_ILI9341_SendCommand>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40010800 	.word	0x40010800
 8001b58:	000f4240 	.word	0x000f4240

08001b5c <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 8001b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <TM_ILI9341_SendCommand+0x3c>)
 8001b6c:	f7fe fd9a 	bl	80006a4 <GPIO_ResetBits>
	ILI9341_CS_RESET;
 8001b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <TM_ILI9341_SendCommand+0x40>)
 8001b76:	f7fe fd95 	bl	80006a4 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <TM_ILI9341_SendCommand+0x44>)
 8001b80:	f7ff fe2c 	bl	80017dc <TM_SPI_Send>
	ILI9341_CS_SET;
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <TM_ILI9341_SendCommand+0x40>)
 8001b8a:	f7fe fd7d 	bl	8000688 <GPIO_SetBits>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40003800 	.word	0x40003800

08001ba4 <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8001bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <TM_ILI9341_SendData+0x3c>)
 8001bb4:	f7fe fd68 	bl	8000688 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8001bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bbc:	4809      	ldr	r0, [pc, #36]	; (8001be4 <TM_ILI9341_SendData+0x40>)
 8001bbe:	f7fe fd71 	bl	80006a4 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4808      	ldr	r0, [pc, #32]	; (8001be8 <TM_ILI9341_SendData+0x44>)
 8001bc8:	f7ff fe08 	bl	80017dc <TM_SPI_Send>
	ILI9341_CS_SET;
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <TM_ILI9341_SendData+0x40>)
 8001bd2:	f7fe fd59 	bl	8000688 <GPIO_SetBits>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40010800 	.word	0x40010800
 8001be4:	40010c00 	.word	0x40010c00
 8001be8:	40003800 	.word	0x40003800

08001bec <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	603a      	str	r2, [r7, #0]
 8001bf6:	80fb      	strh	r3, [r7, #6]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 8001bfc:	88bb      	ldrh	r3, [r7, #4]
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	88b9      	ldrh	r1, [r7, #4]
 8001c02:	88f8      	ldrh	r0, [r7, #6]
 8001c04:	f000 f812 	bl	8001c2c <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8001c08:	202c      	movs	r0, #44	; 0x2c
 8001c0a:	f7ff ffa7 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ffc5 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ffc0 	bl	8001ba4 <TM_ILI9341_SendData>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80bb      	strh	r3, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	807b      	strh	r3, [r7, #2]
 8001c46:	4613      	mov	r3, r2
 8001c48:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8001c4a:	202a      	movs	r0, #42	; 0x2a
 8001c4c:	f7ff ff86 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffa3 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff9e 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff97 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff92 	bl	8001ba4 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8001c80:	202b      	movs	r0, #43	; 0x2b
 8001c82:	f7ff ff6b 	bl	8001b5c <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff88 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff83 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 8001c9e:	883b      	ldrh	r3, [r7, #0]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff7c 	bl	8001ba4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 8001cac:	883b      	ldrh	r3, [r7, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff77 	bl	8001ba4 <TM_ILI9341_SendData>
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd90      	pop	{r4, r7, pc}
	...

08001cc0 <glcd_fill_screen>:
//	}
//}



void glcd_fill_screen (uint16_t color){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]

	///////////////////////////////////////////////



	TM_ILI9341_SetCursorPosition(0, 0, 240, 320);
 8001cca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001cce:	22f0      	movs	r2, #240	; 0xf0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7ff ffaa 	bl	8001c2c <TM_ILI9341_SetCursorPosition>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8001cd8:	202c      	movs	r0, #44	; 0x2c
 8001cda:	f7ff ff3f 	bl	8001b5c <TM_ILI9341_SendCommand>
	ILI9341_WRX_SET;
 8001cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce2:	4884      	ldr	r0, [pc, #528]	; (8001ef4 <glcd_fill_screen+0x234>)
 8001ce4:	f7fe fcd0 	bl	8000688 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8001ce8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cec:	4882      	ldr	r0, [pc, #520]	; (8001ef8 <glcd_fill_screen+0x238>)
 8001cee:	f7fe fcd9 	bl	80006a4 <GPIO_ResetBits>



	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8001cf2:	4a82      	ldr	r2, [pc, #520]	; (8001efc <glcd_fill_screen+0x23c>)
 8001cf4:	4b81      	ldr	r3, [pc, #516]	; (8001efc <glcd_fill_screen+0x23c>)
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6153      	str	r3, [r2, #20]
	static uint8_t color_static = ILI9341_COLOR_BLACK;

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <glcd_fill_screen+0x240>)
 8001d00:	4b7f      	ldr	r3, [pc, #508]	; (8001f00 <glcd_fill_screen+0x240>)
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d10:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001d14:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d18:	4a7b      	ldr	r2, [pc, #492]	; (8001f08 <glcd_fill_screen+0x248>)
 8001d1a:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8001d1c:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d1e:	4a7b      	ldr	r2, [pc, #492]	; (8001f0c <glcd_fill_screen+0x24c>)
 8001d20:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8001d22:	4a78      	ldr	r2, [pc, #480]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d24:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8001d2e:	4a75      	ldr	r2, [pc, #468]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d30:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8001d3a:	bf00      	nop
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <glcd_fill_screen+0x240>)
 8001d3e:	891b      	ldrh	r3, [r3, #8]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f8      	beq.n	8001d3c <glcd_fill_screen+0x7c>
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <glcd_fill_screen+0x240>)
 8001d4c:	891b      	ldrh	r3, [r3, #8]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f1      	bne.n	8001d3c <glcd_fill_screen+0x7c>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8001d58:	4a68      	ldr	r2, [pc, #416]	; (8001efc <glcd_fill_screen+0x23c>)
 8001d5a:	4b68      	ldr	r3, [pc, #416]	; (8001efc <glcd_fill_screen+0x23c>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6153      	str	r3, [r2, #20]





	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8001d64:	4a65      	ldr	r2, [pc, #404]	; (8001efc <glcd_fill_screen+0x23c>)
 8001d66:	4b65      	ldr	r3, [pc, #404]	; (8001efc <glcd_fill_screen+0x23c>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8001d70:	4a62      	ldr	r2, [pc, #392]	; (8001efc <glcd_fill_screen+0x23c>)
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <glcd_fill_screen+0x23c>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6153      	str	r3, [r2, #20]

	DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 8001d7c:	4a61      	ldr	r2, [pc, #388]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d7e:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8001d88:	4a5d      	ldr	r2, [pc, #372]	; (8001f00 <glcd_fill_screen+0x240>)
 8001d8a:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <glcd_fill_screen+0x240>)
 8001d8c:	889b      	ldrh	r3, [r3, #4]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 8001d98:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <glcd_fill_screen+0x244>)
 8001d9a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001d9e:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <glcd_fill_screen+0x244>)
 8001da2:	4a59      	ldr	r2, [pc, #356]	; (8001f08 <glcd_fill_screen+0x248>)
 8001da4:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8001da6:	4b57      	ldr	r3, [pc, #348]	; (8001f04 <glcd_fill_screen+0x244>)
 8001da8:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <glcd_fill_screen+0x24c>)
 8001daa:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8001dac:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <glcd_fill_screen+0x244>)
 8001dae:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <glcd_fill_screen+0x244>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f043 0310 	orr.w	r3, r3, #16
 8001db6:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <glcd_fill_screen+0x244>)
 8001dba:	4b52      	ldr	r3, [pc, #328]	; (8001f04 <glcd_fill_screen+0x244>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8001dc4:	bf00      	nop
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <glcd_fill_screen+0x240>)
 8001dc8:	891b      	ldrh	r3, [r3, #8]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f8      	beq.n	8001dc6 <glcd_fill_screen+0x106>
 8001dd4:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <glcd_fill_screen+0x240>)
 8001dd6:	891b      	ldrh	r3, [r3, #8]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f1      	bne.n	8001dc6 <glcd_fill_screen+0x106>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8001de2:	4a46      	ldr	r2, [pc, #280]	; (8001efc <glcd_fill_screen+0x23c>)
 8001de4:	4b45      	ldr	r3, [pc, #276]	; (8001efc <glcd_fill_screen+0x23c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6153      	str	r3, [r2, #20]

	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8001dee:	4a43      	ldr	r2, [pc, #268]	; (8001efc <glcd_fill_screen+0x23c>)
 8001df0:	4b42      	ldr	r3, [pc, #264]	; (8001efc <glcd_fill_screen+0x23c>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6153      	str	r3, [r2, #20]
		RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8001dfa:	4a40      	ldr	r2, [pc, #256]	; (8001efc <glcd_fill_screen+0x23c>)
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <glcd_fill_screen+0x23c>)
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6153      	str	r3, [r2, #20]

		DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 8001e06:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e08:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	6013      	str	r3, [r2, #0]

	//	SPI2->CR2 |= SPI_CR1_DFF;
		SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8001e12:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <glcd_fill_screen+0x240>)
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <glcd_fill_screen+0x240>)
 8001e16:	889b      	ldrh	r3, [r3, #4]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	8093      	strh	r3, [r2, #4]


		DMA1_Channel5->CNDTR = 65530;
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e24:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001e28:	605a      	str	r2, [r3, #4]
		DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e2c:	4a36      	ldr	r2, [pc, #216]	; (8001f08 <glcd_fill_screen+0x248>)
 8001e2e:	609a      	str	r2, [r3, #8]
		DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e32:	4a36      	ldr	r2, [pc, #216]	; (8001f0c <glcd_fill_screen+0x24c>)
 8001e34:	60da      	str	r2, [r3, #12]
	//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
	//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



		DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e38:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f043 0310 	orr.w	r3, r3, #16
 8001e40:	6013      	str	r3, [r2, #0]
		DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8001e42:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <glcd_fill_screen+0x244>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6013      	str	r3, [r2, #0]


		while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8001e4e:	bf00      	nop
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <glcd_fill_screen+0x240>)
 8001e52:	891b      	ldrh	r3, [r3, #8]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f8      	beq.n	8001e50 <glcd_fill_screen+0x190>
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <glcd_fill_screen+0x240>)
 8001e60:	891b      	ldrh	r3, [r3, #8]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f1      	bne.n	8001e50 <glcd_fill_screen+0x190>
		RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	6153      	str	r3, [r2, #20]




	ILI9341_CS_SET;
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	481e      	ldr	r0, [pc, #120]	; (8001ef8 <glcd_fill_screen+0x238>)
 8001e7e:	f7fe fc03 	bl	8000688 <GPIO_SetBits>





	RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e90:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e98:	6113      	str	r3, [r2, #16]



	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e9c:	4b17      	ldr	r3, [pc, #92]	; (8001efc <glcd_fill_screen+0x23c>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	61d3      	str	r3, [r2, #28]
	SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8001ea6:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <glcd_fill_screen+0x240>)
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <glcd_fill_screen+0x240>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f043 0318 	orr.w	r3, r3, #24
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <glcd_fill_screen+0x240>)
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <glcd_fill_screen+0x240>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <glcd_fill_screen+0x240>)
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <glcd_fill_screen+0x240>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8013      	strh	r3, [r2, #0]
	SPI2->CRCPR = 7;
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <glcd_fill_screen+0x240>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	821a      	strh	r2, [r3, #16]
	SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <glcd_fill_screen+0x240>)
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <glcd_fill_screen+0x240>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	8013      	strh	r3, [r2, #0]




}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40003800 	.word	0x40003800
 8001f04:	40020058 	.word	0x40020058
 8001f08:	4000380c 	.word	0x4000380c
 8001f0c:	20000422 	.word	0x20000422

08001f10 <TM_ILI9341_INT_Fill>:
//			glcd_sendData16(color);
//	}
}
//
//
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	4604      	mov	r4, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	80fb      	strh	r3, [r7, #6]
 8001f22:	4603      	mov	r3, r0
 8001f24:	80bb      	strh	r3, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	803b      	strh	r3, [r7, #0]
	uint8_t length;
	length = x1-x0;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	73bb      	strb	r3, [r7, #14]

	uint8_t v_lines_nb;
	v_lines_nb = y1-y0;
 8001f3a:	883b      	ldrh	r3, [r7, #0]
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	737b      	strb	r3, [r7, #13]

	uint8_t i;
	for(i=0;i<v_lines_nb;i++){
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e013      	b.n	8001f74 <TM_ILI9341_INT_Fill+0x64>
			TM_ILI9341_DrawLine(x0, y0+i, x1, y0+i, color);
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	88bb      	ldrh	r3, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	b299      	uxth	r1, r3
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29c      	uxth	r4, r3
 8001f60:	8c3b      	ldrh	r3, [r7, #32]
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	88f8      	ldrh	r0, [r7, #6]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4623      	mov	r3, r4
 8001f6a:	f000 f81b 	bl	8001fa4 <TM_ILI9341_DrawLine>
	for(i=0;i<v_lines_nb;i++){
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	7b7b      	ldrb	r3, [r7, #13]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d3e7      	bcc.n	8001f4c <TM_ILI9341_INT_Fill+0x3c>

	}
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}

08001f84 <TM_ILI9341_Delay>:
//
//	/* Go back to 8-bit SPI mode */
//	TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);
//}

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 8001f8c:	e002      	b.n	8001f94 <TM_ILI9341_Delay+0x10>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <TM_ILI9341_Delay+0xa>
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <TM_ILI9341_DrawLine>:
//	/* Set new pointer */
//	ILI9341_x += font->FontWidth;
//}
//

void TM_ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4604      	mov	r4, r0
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	80fb      	strh	r3, [r7, #6]
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80bb      	strh	r3, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2; 	
	uint16_t tmp;
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 8001fc2:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d303      	bcc.n	8001fd4 <TM_ILI9341_DrawLine+0x30>
		x0 = ILI9341_Opts.width - 1;
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d303      	bcc.n	8001fe6 <TM_ILI9341_DrawLine+0x42>
		x1 = ILI9341_Opts.width - 1;
 8001fde:	4b48      	ldr	r3, [pc, #288]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001fe8:	885b      	ldrh	r3, [r3, #2]
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d303      	bcc.n	8001ff8 <TM_ILI9341_DrawLine+0x54>
		y0 = ILI9341_Opts.height - 1;
 8001ff0:	4b43      	ldr	r3, [pc, #268]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001ff2:	885b      	ldrh	r3, [r3, #2]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 8001ff8:	4b41      	ldr	r3, [pc, #260]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8001ffa:	885b      	ldrh	r3, [r3, #2]
 8001ffc:	883a      	ldrh	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d303      	bcc.n	800200a <TM_ILI9341_DrawLine+0x66>
		y1 = ILI9341_Opts.height - 1;
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <TM_ILI9341_DrawLine+0x15c>)
 8002004:	885b      	ldrh	r3, [r3, #2]
 8002006:	3b01      	subs	r3, #1
 8002008:	803b      	strh	r3, [r7, #0]
	}
	
	/* Check correction */
	if (x0 > x1) {
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	429a      	cmp	r2, r3
 8002010:	d905      	bls.n	800201e <TM_ILI9341_DrawLine+0x7a>
		tmp = x0;
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	82bb      	strh	r3, [r7, #20]
		x0 = x1;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 800201a:	8abb      	ldrh	r3, [r7, #20]
 800201c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800201e:	88ba      	ldrh	r2, [r7, #4]
 8002020:	883b      	ldrh	r3, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d905      	bls.n	8002032 <TM_ILI9341_DrawLine+0x8e>
		tmp = y0;
 8002026:	88bb      	ldrh	r3, [r7, #4]
 8002028:	82bb      	strh	r3, [r7, #20]
		y0 = y1;
 800202a:	883b      	ldrh	r3, [r7, #0]
 800202c:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 800202e:	8abb      	ldrh	r3, [r7, #20]
 8002030:	803b      	strh	r3, [r7, #0]
	}
	
	dx = x1 - x0;
 8002032:	887a      	ldrh	r2, [r7, #2]
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b29b      	uxth	r3, r3
 800203a:	827b      	strh	r3, [r7, #18]
	dy = y1 - y0;
 800203c:	883a      	ldrh	r2, [r7, #0]
 800203e:	88bb      	ldrh	r3, [r7, #4]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b29b      	uxth	r3, r3
 8002044:	823b      	strh	r3, [r7, #16]
//	if (dx == 0 || dy == 0) {
//		TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
//		return;
//	}
	
	sx = (x0 < x1) ? 1 : -1; 
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	429a      	cmp	r2, r3
 800204c:	d201      	bcs.n	8002052 <TM_ILI9341_DrawLine+0xae>
 800204e:	2301      	movs	r3, #1
 8002050:	e001      	b.n	8002056 <TM_ILI9341_DrawLine+0xb2>
 8002052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002056:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002058:	88ba      	ldrh	r2, [r7, #4]
 800205a:	883b      	ldrh	r3, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d201      	bcs.n	8002064 <TM_ILI9341_DrawLine+0xc0>
 8002060:	2301      	movs	r3, #1
 8002062:	e001      	b.n	8002068 <TM_ILI9341_DrawLine+0xc4>
 8002064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002068:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800206a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800206e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002072:	429a      	cmp	r2, r3
 8002074:	dd06      	ble.n	8002084 <TM_ILI9341_DrawLine+0xe0>
 8002076:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800207a:	0fda      	lsrs	r2, r3, #31
 800207c:	4413      	add	r3, r2
 800207e:	105b      	asrs	r3, r3, #1
 8002080:	b21b      	sxth	r3, r3
 8002082:	e006      	b.n	8002092 <TM_ILI9341_DrawLine+0xee>
 8002084:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002088:	425b      	negs	r3, r3
 800208a:	0fda      	lsrs	r2, r3, #31
 800208c:	4413      	add	r3, r2
 800208e:	105b      	asrs	r3, r3, #1
 8002090:	b21b      	sxth	r3, r3
 8002092:	82fb      	strh	r3, [r7, #22]

	while (1) {
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8002094:	88b9      	ldrh	r1, [r7, #4]
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fda6 	bl	8001bec <TM_ILI9341_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d103      	bne.n	80020b0 <TM_ILI9341_DrawLine+0x10c>
 80020a8:	88ba      	ldrh	r2, [r7, #4]
 80020aa:	883b      	ldrh	r3, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d021      	beq.n	80020f4 <TM_ILI9341_DrawLine+0x150>
			break;
		}
		e2 = err; 
 80020b0:	8afb      	ldrh	r3, [r7, #22]
 80020b2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80020b4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020bc:	425b      	negs	r3, r3
 80020be:	429a      	cmp	r2, r3
 80020c0:	dd08      	ble.n	80020d4 <TM_ILI9341_DrawLine+0x130>
			err -= dy;
 80020c2:	8afa      	ldrh	r2, [r7, #22]
 80020c4:	8a3b      	ldrh	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80020cc:	89fa      	ldrh	r2, [r7, #14]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4413      	add	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80020d4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80020d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dad9      	bge.n	8002094 <TM_ILI9341_DrawLine+0xf0>
			err += dx;
 80020e0:	8afa      	ldrh	r2, [r7, #22]
 80020e2:	8a7b      	ldrh	r3, [r7, #18]
 80020e4:	4413      	add	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80020ea:	89ba      	ldrh	r2, [r7, #12]
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	80bb      	strh	r3, [r7, #4]
		TM_ILI9341_DrawPixel(x0, y0, color); 
 80020f2:	e7cf      	b.n	8002094 <TM_ILI9341_DrawLine+0xf0>
			break;
 80020f4:	bf00      	nop
		} 
	}
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	200004d4 	.word	0x200004d4

08002104 <TM_ILI9341_Puts>:
}




void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60ba      	str	r2, [r7, #8]
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4603      	mov	r3, r0
 8002110:	81fb      	strh	r3, [r7, #14]
 8002112:	460b      	mov	r3, r1
 8002114:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	82fb      	strh	r3, [r7, #22]

	/* Set X and Y coordinates */
	ILI9341_x = x;
 800211a:	4a24      	ldr	r2, [pc, #144]	; (80021ac <TM_ILI9341_Puts+0xa8>)
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8002120:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <TM_ILI9341_Puts+0xac>)
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	8013      	strh	r3, [r2, #0]

	while (*str) {
 8002126:	e038      	b.n	800219a <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b0a      	cmp	r3, #10
 800212e:	d11d      	bne.n	800216c <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <TM_ILI9341_Puts+0xac>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <TM_ILI9341_Puts+0xac>)
 8002144:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	3301      	adds	r3, #1
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b0d      	cmp	r3, #13
 800214e:	d106      	bne.n	800215e <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <TM_ILI9341_Puts+0xa8>)
 8002152:	2200      	movs	r2, #0
 8002154:	801a      	strh	r2, [r3, #0]
				str++;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3301      	adds	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	e002      	b.n	8002164 <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <TM_ILI9341_Puts+0xa8>)
 8002160:	8afb      	ldrh	r3, [r7, #22]
 8002162:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3301      	adds	r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
			continue;
 800216a:	e016      	b.n	800219a <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b0d      	cmp	r3, #13
 8002172:	d103      	bne.n	800217c <TM_ILI9341_Puts+0x78>
			str++;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	3301      	adds	r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
			continue;
 800217a:	e00e      	b.n	800219a <TM_ILI9341_Puts+0x96>
		}

		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <TM_ILI9341_Puts+0xa8>)
 800217e:	8818      	ldrh	r0, [r3, #0]
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <TM_ILI9341_Puts+0xac>)
 8002182:	8819      	ldrh	r1, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f000 f80d 	bl	80021b4 <TM_ILI9341_Putc>
	while (*str) {
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1c2      	bne.n	8002128 <TM_ILI9341_Puts+0x24>
	}
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200004dc 	.word	0x200004dc
 80021b0:	200004da 	.word	0x200004da

080021b4 <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b08b      	sub	sp, #44	; 0x2c
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	4603      	mov	r3, r0
 80021be:	81fb      	strh	r3, [r7, #14]
 80021c0:	460b      	mov	r3, r1
 80021c2:	81bb      	strh	r3, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 80021c8:	4a40      	ldr	r2, [pc, #256]	; (80022cc <TM_ILI9341_Putc+0x118>)
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 80021ce:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <TM_ILI9341_Putc+0x11c>)
 80021d0:	89bb      	ldrh	r3, [r7, #12]
 80021d2:	8013      	strh	r3, [r2, #0]

	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 80021d4:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <TM_ILI9341_Putc+0x118>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a3c      	ldr	r2, [pc, #240]	; (80022d4 <TM_ILI9341_Putc+0x120>)
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	dd0b      	ble.n	8002200 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	785b      	ldrb	r3, [r3, #1]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <TM_ILI9341_Putc+0x11c>)
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <TM_ILI9341_Putc+0x11c>)
 80021f8:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <TM_ILI9341_Putc+0x118>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	801a      	strh	r2, [r3, #0]
	}

	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 8002200:	4b32      	ldr	r3, [pc, #200]	; (80022cc <TM_ILI9341_Putc+0x118>)
 8002202:	8818      	ldrh	r0, [r3, #0]
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <TM_ILI9341_Putc+0x11c>)
 8002206:	8819      	ldrh	r1, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b29a      	uxth	r2, r3
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <TM_ILI9341_Putc+0x118>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	b29c      	uxth	r4, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	785b      	ldrb	r3, [r3, #1]
 800221a:	b29a      	uxth	r2, r3
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <TM_ILI9341_Putc+0x11c>)
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	4413      	add	r3, r2
 8002222:	b29a      	uxth	r2, r3
 8002224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002226:	b29b      	uxth	r3, r3
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	4613      	mov	r3, r2
 800222c:	4622      	mov	r2, r4
 800222e:	f7ff fe6f 	bl	8001f10 <TM_ILI9341_INT_Fill>

//	TM_ILI9341_DrawRectangle(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, ILI9341_COLOR_YELLOW);

	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e035      	b.n	80022a4 <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	3b20      	subs	r3, #32
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	7849      	ldrb	r1, [r1, #1]
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4619      	mov	r1, r3
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	440b      	add	r3, r1
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	e01a      	b.n	8002292 <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00f      	beq.n	800228c <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b16      	ldr	r3, [pc, #88]	; (80022cc <TM_ILI9341_Putc+0x118>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	4413      	add	r3, r2
 8002276:	b298      	uxth	r0, r3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	b29a      	uxth	r2, r3
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <TM_ILI9341_Putc+0x11c>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002286:	4619      	mov	r1, r3
 8002288:	f7ff fcb0 	bl	8001bec <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	3301      	adds	r3, #1
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	429a      	cmp	r2, r3
 800229c:	d8de      	bhi.n	800225c <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	461a      	mov	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8c3      	bhi.n	8002238 <TM_ILI9341_Putc+0x84>
			}
		}
	}

	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <TM_ILI9341_Putc+0x118>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <TM_ILI9341_Putc+0x118>)
 80022c0:	801a      	strh	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200004dc 	.word	0x200004dc
 80022d0:	200004da 	.word	0x200004da
 80022d4:	200004d4 	.word	0x200004d4

080022d8 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 80022e2:	f640 62c4 	movw	r2, #3780	; 0xec4
 80022e6:	2100      	movs	r1, #0
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f001 fbb1 	bl	8003a50 <memset>
	broker->net = broker_net;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2208      	movs	r2, #8
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f001 fb9b 	bl	8003a50 <memset>
	const uint8_t max_nb_bytes = 4;
 800231a:	2304      	movs	r3, #4
 800231c:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 800231e:	7c3b      	ldrb	r3, [r7, #16]
 8002320:	461a      	mov	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	7d7a      	ldrb	r2, [r7, #21]
 800232e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002332:	7df9      	ldrb	r1, [r7, #23]
 8002334:	fb01 f202 	mul.w	r2, r1, r2
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	01db      	lsls	r3, r3, #7
 8002340:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8002342:	7c3b      	ldrb	r3, [r7, #16]
 8002344:	3301      	adds	r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 800234a:	7c3b      	ldrb	r3, [r7, #16]
 800234c:	7dba      	ldrb	r2, [r7, #22]
 800234e:	429a      	cmp	r2, r3
 8002350:	d004      	beq.n	800235c <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8002352:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002356:	2b00      	cmp	r3, #0
 8002358:	dbe1      	blt.n	800231e <decode_pck_len+0x20>
 800235a:	e000      	b.n	800235e <decode_pck_len+0x60>
			break;
 800235c:	bf00      	nop
	return rem_length;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	461a      	mov	r2, r3
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	e893 0003 	ldmia.w	r3, {r0, r1}
 800236a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <broker_receive>:



bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8002376:	b590      	push	{r4, r7, lr}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	60f8      	str	r0, [r7, #12]
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002388:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	23f0      	movs	r3, #240	; 0xf0
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	47a0      	blx	r4
}
 800239c:	bf00      	nop
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd90      	pop	{r4, r7, pc}
	...

080023a8 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	6018      	str	r0, [r3, #0]
 80023b6:	f107 0308 	add.w	r3, r7, #8
 80023ba:	6019      	str	r1, [r3, #0]
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
	switch (pckt_type) {
 80023ce:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 80023d2:	3b01      	subs	r3, #1
 80023d4:	2b0b      	cmp	r3, #11
 80023d6:	f200 8146 	bhi.w	8002666 <broker_packets_dispatcher+0x2be>
 80023da:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <broker_packets_dispatcher+0x38>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	08002411 	.word	0x08002411
 80023e4:	08002667 	.word	0x08002667
 80023e8:	080024e9 	.word	0x080024e9
 80023ec:	08002667 	.word	0x08002667
 80023f0:	08002667 	.word	0x08002667
 80023f4:	08002667 	.word	0x08002667
 80023f8:	08002667 	.word	0x08002667
 80023fc:	0800254d 	.word	0x0800254d
 8002400:	08002667 	.word	0x08002667
 8002404:	08002611 	.word	0x08002611
 8002408:	08002667 	.word	0x08002667
 800240c:	08002651 	.word	0x08002651
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 8002410:	f107 0214 	add.w	r2, r7, #20
 8002414:	f107 0308 	add.w	r3, r7, #8
 8002418:	4611      	mov	r1, r2
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	f000 fa1d 	bl	800285a <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 8002420:	f107 0214 	add.w	r2, r7, #20
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4611      	mov	r1, r2
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	f000 fc00 	bl	8002c30 <broker_validate_conn>
		bool sesion_present = false;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (was_clean_session_requested(&conn_pck)
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fc24 	bl	8002c88 <was_clean_session_requested>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d017      	beq.n	8002476 <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4611      	mov	r1, r2
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	f000 f966 	bl	8002724 <is_client_exist>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	6a1a      	ldr	r2, [r3, #32]
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4611      	mov	r1, r2
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	f000 f98d 	bl	800278a <broker_remove_client>
			sesion_present = true;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 8002476:	f107 0214 	add.w	r2, r7, #20
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4611      	mov	r1, r2
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	f000 fbd5 	bl	8002c30 <broker_validate_conn>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	f107 0114 	add.w	r1, r7, #20
 8002492:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	f000 fb42 	bl	8002b20 <broker_create_new_client>
		add_client(broker, &new_client);
 800249c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4611      	mov	r1, r2
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f000 f9b1 	bl	800280e <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 80024ac:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 80024b0:	f897 127f 	ldrb.w	r1, [r7, #639]	; 0x27f
 80024b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fb10 	bl	8002ade <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80024c8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80024dc:	1d39      	adds	r1, r7, #4
 80024de:	2304      	movs	r3, #4
 80024e0:	6809      	ldr	r1, [r1, #0]
 80024e2:	47a0      	blx	r4
		break;
 80024e4:	bf00      	nop
 80024e6:	e0be      	b.n	8002666 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 80024e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	4611      	mov	r1, r2
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	f000 fbdc 	bl	8002cb0 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 80024f8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	4611      	mov	r1, r2
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	f000 fc40 	bl	8002d88 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8002508:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800250c:	881a      	ldrh	r2, [r3, #0]
 800250e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fc90 	bl	8002e3a <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 800251a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	f340 809c 	ble.w	8002664 <broker_packets_dispatcher+0x2bc>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002536:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800253a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800253e:	1d39      	adds	r1, r7, #4
 8002540:	2304      	movs	r3, #4
 8002542:	6809      	ldr	r1, [r1, #0]
 8002544:	2000      	movs	r0, #0
 8002546:	47a0      	blx	r4
		}
		break;
 8002548:	bf00      	nop
 800254a:	e08b      	b.n	8002664 <broker_packets_dispatcher+0x2bc>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 800254c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	4611      	mov	r1, r2
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	f000 fc8c 	bl	8002e74 <broker_decode_subscribe>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8002562:	1d3a      	adds	r2, r7, #4
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	6811      	ldr	r1, [r2, #0]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	f000 f8a4 	bl	80026b8 <broker_get_client_by_socket>
 8002570:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		uint8_t sub_result[MAX_SUBS_TOPIC];
		if (subscribing_client){
 8002574:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <broker_packets_dispatcher+0x1f0>
			add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 800257c:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8002580:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 8002584:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002588:	f103 010c 	add.w	r1, r3, #12
 800258c:	4603      	mov	r3, r0
 800258e:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8002592:	f000 fdd1 	bl	8003138 <add_subscriptions_from_list>
 8002596:	e016      	b.n	80025c6 <broker_packets_dispatcher+0x21e>
		} else {
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8002598:	2300      	movs	r3, #0
 800259a:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 800259e:	e00c      	b.n	80025ba <broker_packets_dispatcher+0x212>
				sub_result[i] = SUB_ACK_FAIL;
 80025a0:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80025a4:	f507 7220 	add.w	r2, r7, #640	; 0x280
 80025a8:	4413      	add	r3, r2
 80025aa:	2250      	movs	r2, #80	; 0x50
 80025ac:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 80025b0:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80025b4:	3301      	adds	r3, #1
 80025b6:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 80025ba:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 80025be:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d3ec      	bcc.n	80025a0 <broker_packets_dispatcher+0x1f8>
			}
		}
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 80025c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	8819      	ldrh	r1, [r3, #0]
 80025ce:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80025d2:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 80025d6:	f507 700e 	add.w	r0, r7, #568	; 0x238
 80025da:	f000 fe39 	bl	8003250 <encode_subscribe_ack>
		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&sub_ack, (SUB_ACK_ALL_HEAD_LEN + topic_nb));
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80025e8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80025ec:	f107 030c 	add.w	r3, r7, #12
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3304      	adds	r3, #4
 8002600:	b29b      	uxth	r3, r3
 8002602:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8002606:	1d39      	adds	r1, r7, #4
 8002608:	6809      	ldr	r1, [r1, #0]
 800260a:	47a0      	blx	r4
		break;
 800260c:	bf00      	nop
 800260e:	e02a      	b.n	8002666 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 8002610:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4611      	mov	r1, r2
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	f000 fe40 	bl	80032a0 <broker_decode_unsubscribe>
 8002620:	4603      	mov	r3, r0
 8002622:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8002626:	1d3a      	adds	r2, r7, #4
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	6811      	ldr	r1, [r2, #0]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	f000 f842 	bl	80026b8 <broker_get_client_by_socket>
 8002634:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 8002638:	f897 2273 	ldrb.w	r2, [r7, #627]	; 0x273
 800263c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002640:	330c      	adds	r3, #12
 8002642:	4619      	mov	r1, r3
 8002644:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 8002648:	f000 ff13 	bl	8003472 <delete_listed_subscriptions>
		break;
 800264c:	bf00      	nop
 800264e:	e00a      	b.n	8002666 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 8002650:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	4611      	mov	r1, r2
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f000 ff2b 	bl	80034b6 <broker_decode_ping_req>
		break;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <broker_packets_dispatcher+0x2be>
		break;
 8002664:	bf00      	nop
	}
	}
}
 8002666:	bf00      	nop
 8002668:	f507 7721 	add.w	r7, r7, #644	; 0x284
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e013      	b.n	80026a8 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	3310      	adds	r3, #16
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fd5c 	bl	8000150 <strcmp>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <broker_get_client_pos_by_id+0x32>
			return i;
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	e006      	b.n	80026b0 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	3301      	adds	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d9e8      	bls.n	8002680 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 80026ae:	23ff      	movs	r3, #255	; 0xff
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e025      	b.n	8002714 <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <broker_get_client_by_socket+0x56>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	2210      	movs	r2, #16
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 f978 	bl	80039e8 <memcmp>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	e006      	b.n	800271c <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	3301      	adds	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b07      	cmp	r3, #7
 8002718:	d9d6      	bls.n	80026c8 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff9d 	bl	8002670 <broker_get_client_pos_by_id>
 8002736:	4603      	mov	r3, r0
 8002738:	2bff      	cmp	r3, #255	; 0xff
 800273a:	d001      	beq.n	8002740 <is_client_exist+0x1c>
		return true;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <is_client_exist+0x1e>
	}
	return false;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e00f      	b.n	8002778 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3310      	adds	r3, #16
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <can_broker_accept_next_client+0x28>
			return true;
 800276e:	2301      	movs	r3, #1
 8002770:	e006      	b.n	8002780 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3301      	adds	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b07      	cmp	r3, #7
 800277c:	d9ec      	bls.n	8002758 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff6a 	bl	8002670 <broker_get_client_pos_by_id>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2bff      	cmp	r3, #255	; 0xff
 80027a4:	d00e      	beq.n	80027c4 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 f948 	bl	8003a50 <memset>
		return true;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <broker_remove_client+0x3c>
	}
	return false;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 80027ce:	b480      	push	{r7}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e00f      	b.n	80027fc <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3310      	adds	r3, #16
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <broker_first_free_pos_for_client+0x28>
			return i;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	e006      	b.n	8002804 <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	3301      	adds	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	2b07      	cmp	r3, #7
 8002800:	d9ec      	bls.n	80027dc <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8002802:	23ff      	movs	r3, #255	; 0xff
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffd8 	bl	80027ce <broker_first_free_pos_for_client>
 800281e:	4603      	mov	r3, r0
 8002820:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f001 f8e5 	bl	8003a06 <memcpy>
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	return true;
 800284e:	2301      	movs	r3, #1
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	441a      	add	r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]
	pos ++;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	3301      	adds	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	441a      	add	r2, r3
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fd3a 	bl	80022fe <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002890:	7c3a      	ldrb	r2, [r7, #16]
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	4413      	add	r3, r2
 8002896:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	441a      	add	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	8812      	ldrh	r2, [r2, #0]
 80028ac:	0a12      	lsrs	r2, r2, #8
 80028ae:	b292      	uxth	r2, r2
 80028b0:	b211      	sxth	r1, r2
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	8812      	ldrh	r2, [r2, #0]
 80028b8:	0212      	lsls	r2, r2, #8
 80028ba:	b212      	sxth	r2, r2
 80028bc:	430a      	orrs	r2, r1
 80028be:	b212      	sxth	r2, r2
 80028c0:	b292      	uxth	r2, r2
 80028c2:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	3302      	adds	r3, #2
 80028c8:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	441a      	add	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	4413      	add	r3, r2
 80028e0:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	441a      	add	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	611a      	str	r2, [r3, #16]
	pos += 1;
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	3301      	adds	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	441a      	add	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	615a      	str	r2, [r3, #20]
	pos += 1;
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	3301      	adds	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	441a      	add	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	6992      	ldr	r2, [r2, #24]
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	0a12      	lsrs	r2, r2, #8
 8002918:	b292      	uxth	r2, r2
 800291a:	b211      	sxth	r1, r2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6992      	ldr	r2, [r2, #24]
 8002920:	8812      	ldrh	r2, [r2, #0]
 8002922:	0212      	lsls	r2, r2, #8
 8002924:	b212      	sxth	r2, r2
 8002926:	430a      	orrs	r2, r1
 8002928:	b212      	sxth	r2, r2
 800292a:	b292      	uxth	r2, r2
 800292c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	3302      	adds	r3, #2
 8002932:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	441a      	add	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	69d2      	ldr	r2, [r2, #28]
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	0a12      	lsrs	r2, r2, #8
 800294a:	b292      	uxth	r2, r2
 800294c:	b211      	sxth	r1, r2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	69d2      	ldr	r2, [r2, #28]
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	0212      	lsls	r2, r2, #8
 8002956:	b212      	sxth	r2, r2
 8002958:	430a      	orrs	r2, r1
 800295a:	b212      	sxth	r2, r2
 800295c:	b292      	uxth	r2, r2
 800295e:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	3302      	adds	r3, #2
 8002964:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	441a      	add	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	4413      	add	r3, r2
 800297c:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d049      	beq.n	8002a22 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	441a      	add	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029a0:	8812      	ldrh	r2, [r2, #0]
 80029a2:	0a12      	lsrs	r2, r2, #8
 80029a4:	b292      	uxth	r2, r2
 80029a6:	b211      	sxth	r1, r2
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	0212      	lsls	r2, r2, #8
 80029b0:	b212      	sxth	r2, r2
 80029b2:	430a      	orrs	r2, r1
 80029b4:	b212      	sxth	r2, r2
 80029b6:	b292      	uxth	r2, r2
 80029b8:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	3302      	adds	r3, #2
 80029be:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	441a      	add	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	4413      	add	r3, r2
 80029d6:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	441a      	add	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	0a12      	lsrs	r2, r2, #8
 80029ee:	b292      	uxth	r2, r2
 80029f0:	b211      	sxth	r1, r2
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029f6:	8812      	ldrh	r2, [r2, #0]
 80029f8:	0212      	lsls	r2, r2, #8
 80029fa:	b212      	sxth	r2, r2
 80029fc:	430a      	orrs	r2, r1
 80029fe:	b212      	sxth	r2, r2
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	3302      	adds	r3, #2
 8002a08:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	441a      	add	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	4413      	add	r3, r2
 8002a20:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d024      	beq.n	8002a7c <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	441a      	add	r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a44:	8812      	ldrh	r2, [r2, #0]
 8002a46:	0a12      	lsrs	r2, r2, #8
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	b211      	sxth	r1, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a50:	8812      	ldrh	r2, [r2, #0]
 8002a52:	0212      	lsls	r2, r2, #8
 8002a54:	b212      	sxth	r2, r2
 8002a56:	430a      	orrs	r2, r1
 8002a58:	b212      	sxth	r2, r2
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
 8002a60:	3302      	adds	r3, #2
 8002a62:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	441a      	add	r2, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	4413      	add	r3, r2
 8002a7a:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d024      	beq.n	8002ad6 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	441a      	add	r2, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	0a12      	lsrs	r2, r2, #8
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	b211      	sxth	r1, r2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aaa:	8812      	ldrh	r2, [r2, #0]
 8002aac:	0212      	lsls	r2, r2, #8
 8002aae:	b212      	sxth	r2, r2
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	b212      	sxth	r2, r2
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	3302      	adds	r3, #2
 8002abc:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	75fb      	strb	r3, [r7, #23]
	}
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
 8002aea:	4613      	mov	r3, r2
 8002aec:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8002aee:	2204      	movs	r2, #4
 8002af0:	2100      	movs	r1, #0
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 ffac 	bl	8003a50 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	7893      	ldrb	r3, [r2, #2]
 8002b08:	78f9      	ldrb	r1, [r7, #3]
 8002b0a:	f361 0300 	bfi	r3, r1, #0, #1
 8002b0e:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	78ba      	ldrb	r2, [r7, #2]
 8002b14:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 8002b2c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002b30:	2100      	movs	r1, #0
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 ff8c 	bl	8003a50 <memset>
	memcpy(&new_client->sockaddr, sockaddr, sizeof (sockaddr_t));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ff61 	bl	8003a06 <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f103 0010 	add.w	r0, r3, #16
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6a19      	ldr	r1, [r3, #32]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f001 f8c7 	bl	8003ce8 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	881a      	ldrh	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f001 f89f 	bl	8003ce8 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f001 f894 	bl	8003ce8 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f001 f877 	bl	8003ce8 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f103 0052 	add.w	r0, r3, #82	; 0x52
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f001 f864 	bl	8003ce8 <strncpy>
	}

	new_client->connected = true;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d001      	beq.n	8002c48 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e01b      	b.n	8002c80 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fd7e 	bl	800274a <can_broker_accept_next_client>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e010      	b.n	8002c80 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f7ff fdeb 	bl	8002844 <is_client_authorised>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	e000      	b.n	8002c80 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 8002c7e:	2300      	movs	r3, #0
	}
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
	pos ++;
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	441a      	add	r2, r3
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fb11 	bl	80022fe <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002ce2:	7c3a      	ldrb	r2, [r7, #16]
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	441a      	add	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6892      	ldr	r2, [r2, #8]
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	0a12      	lsrs	r2, r2, #8
 8002d00:	b292      	uxth	r2, r2
 8002d02:	b211      	sxth	r1, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	6892      	ldr	r2, [r2, #8]
 8002d08:	8812      	ldrh	r2, [r2, #0]
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	b212      	sxth	r2, r2
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	b212      	sxth	r2, r2
 8002d12:	b292      	uxth	r2, r2
 8002d14:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	3302      	adds	r3, #2
 8002d1a:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	441a      	add	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	4413      	add	r3, r2
 8002d32:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	dd18      	ble.n	8002d76 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	441a      	add	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	6912      	ldr	r2, [r2, #16]
 8002d56:	8812      	ldrh	r2, [r2, #0]
 8002d58:	0a12      	lsrs	r2, r2, #8
 8002d5a:	b292      	uxth	r2, r2
 8002d5c:	b211      	sxth	r1, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	6912      	ldr	r2, [r2, #16]
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	0212      	lsls	r2, r2, #8
 8002d66:	b212      	sxth	r2, r2
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	b212      	sxth	r2, r2
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	3302      	adds	r3, #2
 8002d74:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	441a      	add	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	615a      	str	r2, [r3, #20]
}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e049      	b.n	8002e2c <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d03a      	beq.n	8002e26 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8002db0:	2300      	movs	r3, #0
 8002db2:	73bb      	strb	r3, [r7, #14]
 8002db4:	e034      	b.n	8002e20 <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 8002dc4:	7bf9      	ldrb	r1, [r7, #15]
 8002dc6:	7bba      	ldrb	r2, [r7, #14]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002dd4:	fb02 f201 	mul.w	r2, r2, r1
 8002dd8:	4413      	add	r3, r2
 8002dda:	33b0      	adds	r3, #176	; 0xb0
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3308      	adds	r3, #8
 8002de2:	89ba      	ldrh	r2, [r7, #12]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 ff6c 	bl	8003cc4 <strncmp>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d013      	beq.n	8002e1a <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002df8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	18d1      	adds	r1, r2, r3
 8002e12:	463a      	mov	r2, r7
 8002e14:	2318      	movs	r3, #24
 8002e16:	47a0      	blx	r4
					break;
 8002e18:	e005      	b.n	8002e26 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8002e1a:	7bbb      	ldrb	r3, [r7, #14]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	73bb      	strb	r3, [r7, #14]
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d9c7      	bls.n	8002db6 <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b07      	cmp	r3, #7
 8002e30:	d9b2      	bls.n	8002d98 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}

08002e3a <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2240      	movs	r2, #64	; 0x40
 8002e4a:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = X_HTONS(pckt_id);
 8002e52:	887b      	ldrh	r3, [r7, #2]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	b21a      	sxth	r2, r3
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	021b      	lsls	r3, r3, #8
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	4313      	orrs	r3, r2
 8002e62:	b21b      	sxth	r3, r3
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	805a      	strh	r2, [r3, #2]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	601a      	str	r2, [r3, #0]
	pos++;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	441a      	add	r2, r3
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fa2f 	bl	80022fe <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002ea6:	7c3a      	ldrb	r2, [r7, #16]
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	4413      	add	r3, r2
 8002eac:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	8812      	ldrh	r2, [r2, #0]
 8002ec2:	0a12      	lsrs	r2, r2, #8
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	b211      	sxth	r1, r2
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	0212      	lsls	r2, r2, #8
 8002ed0:	b212      	sxth	r2, r2
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	b212      	sxth	r2, r2
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	3302      	adds	r3, #2
 8002ede:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002ee8:	e060      	b.n	8002fac <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002eea:	7dba      	ldrb	r2, [r7, #22]
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4419      	add	r1, r3
 8002ef2:	6838      	ldr	r0, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4403      	add	r3, r0
 8002efe:	330c      	adds	r3, #12
 8002f00:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 8002f02:	7dba      	ldrb	r2, [r7, #22]
 8002f04:	6839      	ldr	r1, [r7, #0]
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	330c      	adds	r3, #12
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	7dba      	ldrb	r2, [r7, #22]
 8002f16:	6838      	ldr	r0, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	330c      	adds	r3, #12
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	b218      	sxth	r0, r3
 8002f2e:	7dba      	ldrb	r2, [r7, #22]
 8002f30:	683c      	ldr	r4, [r7, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4423      	add	r3, r4
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	b21b      	sxth	r3, r3
 8002f46:	4303      	orrs	r3, r0
 8002f48:	b21b      	sxth	r3, r3
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	3302      	adds	r3, #2
 8002f52:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8002f54:	7dba      	ldrb	r2, [r7, #22]
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4419      	add	r1, r3
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4403      	add	r3, r0
 8002f68:	3310      	adds	r3, #16
 8002f6a:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 8002f6c:	7dba      	ldrb	r2, [r7, #22]
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	4413      	add	r3, r2
 8002f86:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002f88:	7dba      	ldrb	r2, [r7, #22]
 8002f8a:	7dfb      	ldrb	r3, [r7, #23]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4419      	add	r1, r3
 8002f90:	6838      	ldr	r0, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4403      	add	r3, r0
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	6019      	str	r1, [r3, #0]
		pos += 1;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8002fa6:	7dbb      	ldrb	r3, [r7, #22]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002fac:	7dfa      	ldrb	r2, [r7, #23]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	7d7b      	ldrb	r3, [r7, #21]
 8002fb4:	440b      	add	r3, r1
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d397      	bcc.n	8002eea <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 8002fba:	7dbb      	ldrb	r3, [r7, #22]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}

08002fc4 <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fd05 	bl	80039e8 <memcmp>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <is_the_same_topic+0x24>
		return true;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <is_the_same_topic+0x26>
	}
	return false;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
 8003004:	e020      	b.n	8003048 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8003006:	7dfa      	ldrb	r2, [r7, #23]
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	33b8      	adds	r3, #184	; 0xb8
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d012      	beq.n	8003042 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 800301c:	7dfa      	ldrb	r2, [r7, #23]
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	33b0      	adds	r3, #176	; 0xb0
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	3308      	adds	r3, #8
 800302e:	79fa      	ldrb	r2, [r7, #7]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ffc6 	bl	8002fc4 <is_the_same_topic>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <get_subscribed_topic_pos+0x50>
			return i;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	e006      	b.n	8003050 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	3301      	adds	r3, #1
 8003046:	75fb      	strb	r3, [r7, #23]
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b07      	cmp	r3, #7
 800304c:	d9db      	bls.n	8003006 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 800304e:	23ff      	movs	r3, #255	; 0xff
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8003076:	b480      	push	{r7}
 8003078:	b085      	sub	sp, #20
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e00f      	b.n	80030a4 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	33b8      	adds	r3, #184	; 0xb8
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	e006      	b.n	80030ac <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3301      	adds	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b07      	cmp	r3, #7
 80030a8:	d9ec      	bls.n	8003084 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 80030aa:	23ff      	movs	r3, #255	; 0xff
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ffd8 	bl	8003076 <find_first_free_slot_for_subs_topic>
 80030c6:	4603      	mov	r3, r0
 80030c8:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2bff      	cmp	r3, #255	; 0xff
 80030ce:	d02e      	beq.n	800312e <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	33b0      	adds	r3, #176	; 0xb0
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	f103 0008 	add.w	r0, r3, #8
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f000 fc89 	bl	8003a06 <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	33b0      	adds	r3, #176	; 0xb0
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3306      	adds	r3, #6
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	8812      	ldrh	r2, [r2, #0]
 800310c:	b292      	uxth	r2, r2
 800310e:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	33d0      	adds	r3, #208	; 0xd0
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3308      	adds	r3, #8
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	7812      	ldrb	r2, [r2, #0]
 8003128:	701a      	strb	r2, [r3, #0]
		return true;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <add_new_subscription_to_client+0x7a>
	}
	return false;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800314c:	e077      	b.n	800323e <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 800314e:	7dfa      	ldrb	r2, [r7, #23]
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	461a      	mov	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4413      	add	r3, r2
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	7dfa      	ldrb	r2, [r7, #23]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f7ff ff3a 	bl	8002ff2 <get_subscribed_topic_pos>
 800317e:	4603      	mov	r3, r0
 8003180:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){ //reverse if & else
 8003182:	7d7b      	ldrb	r3, [r7, #21]
 8003184:	2bff      	cmp	r3, #255	; 0xff
 8003186:	d024      	beq.n	80031d2 <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 8003188:	7d7a      	ldrb	r2, [r7, #21]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	33b0      	adds	r3, #176	; 0xb0
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	1d98      	adds	r0, r3, #6
 800319a:	7dfa      	ldrb	r2, [r7, #23]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	461a      	mov	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7ff ff52 	bl	8003058 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos; //refactor, extract doubled code
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	18d1      	adds	r1, r2, r3
 80031ba:	7dfa      	ldrb	r2, [r7, #23]
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	700b      	strb	r3, [r1, #0]
 80031d0:	e032      	b.n	8003238 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 80031d2:	7dfa      	ldrb	r2, [r7, #23]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4413      	add	r3, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff66 	bl	80030b6 <add_new_subscription_to_client>
 80031ea:	4603      	mov	r3, r0
 80031ec:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	7dfa      	ldrb	r2, [r7, #23]
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4413      	add	r3, r2
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	700b      	strb	r3, [r1, #0]
			if (!res){
 800320a:	7d3b      	ldrb	r3, [r7, #20]
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d010      	beq.n	8003238 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	75bb      	strb	r3, [r7, #22]
 800321a:	e007      	b.n	800322c <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 800321c:	7dbb      	ldrb	r3, [r7, #22]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	2250      	movs	r2, #80	; 0x50
 8003224:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8003226:	7dbb      	ldrb	r3, [r7, #22]
 8003228:	3301      	adds	r3, #1
 800322a:	75bb      	strb	r3, [r7, #22]
 800322c:	7dba      	ldrb	r2, [r7, #22]
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	429a      	cmp	r2, r3
 8003232:	d3f3      	bcc.n	800321c <add_subscriptions_from_list+0xe4>
				}
			return false;
 8003234:	2300      	movs	r3, #0
 8003236:	e007      	b.n	8003248 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	3301      	adds	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800323e:	7dfa      	ldrb	r2, [r7, #23]
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d383      	bcc.n	800314e <add_subscriptions_from_list+0x16>
	}
	return true;
 8003246:	2301      	movs	r3, #1
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	817b      	strh	r3, [r7, #10]
 800325e:	4613      	mov	r3, r2
 8003260:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2290      	movs	r2, #144	; 0x90
 8003266:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_VAR_HEAD_LEN + topic_nb;  //(?)
 8003268:	7a7b      	ldrb	r3, [r7, #9]
 800326a:	3302      	adds	r3, #2
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = X_HTONS(pckt_id);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	b29b      	uxth	r3, r3
 8003278:	b21a      	sxth	r2, r3
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b21b      	sxth	r3, r3
 8003280:	4313      	orrs	r3, r2
 8003282:	b21b      	sxth	r3, r3
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3304      	adds	r3, #4
 800328e:	7a7a      	ldrb	r2, [r7, #9]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fbb7 	bl	8003a06 <memcpy>
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
	pos++;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	3301      	adds	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80032ba:	7dfb      	ldrb	r3, [r7, #23]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	441a      	add	r2, r3
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f819 	bl	80022fe <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80032d2:	7c3a      	ldrb	r2, [r7, #16]
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	4413      	add	r3, r2
 80032d8:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	441a      	add	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	8812      	ldrh	r2, [r2, #0]
 80032ee:	0a12      	lsrs	r2, r2, #8
 80032f0:	b292      	uxth	r2, r2
 80032f2:	b211      	sxth	r1, r2
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	6892      	ldr	r2, [r2, #8]
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	0212      	lsls	r2, r2, #8
 80032fc:	b212      	sxth	r2, r2
 80032fe:	430a      	orrs	r2, r1
 8003300:	b212      	sxth	r2, r2
 8003302:	b292      	uxth	r2, r2
 8003304:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	3302      	adds	r3, #2
 800330a:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 800330c:	2302      	movs	r3, #2
 800330e:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8003310:	2300      	movs	r3, #0
 8003312:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8003314:	e060      	b.n	80033d8 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8003316:	7dba      	ldrb	r2, [r7, #22]
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4419      	add	r1, r3
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4403      	add	r3, r0
 800332a:	330c      	adds	r3, #12
 800332c:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 800332e:	7dba      	ldrb	r2, [r7, #22]
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	330c      	adds	r3, #12
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	7dba      	ldrb	r2, [r7, #22]
 8003342:	6838      	ldr	r0, [r7, #0]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4403      	add	r3, r0
 800334e:	330c      	adds	r3, #12
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	b29b      	uxth	r3, r3
 8003358:	b218      	sxth	r0, r3
 800335a:	7dba      	ldrb	r2, [r7, #22]
 800335c:	683c      	ldr	r4, [r7, #0]
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4423      	add	r3, r4
 8003368:	330c      	adds	r3, #12
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	b21b      	sxth	r3, r3
 8003372:	4303      	orrs	r3, r0
 8003374:	b21b      	sxth	r3, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	800b      	strh	r3, [r1, #0]
		pos += 2;
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	3302      	adds	r3, #2
 800337e:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8003380:	7dba      	ldrb	r2, [r7, #22]
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4419      	add	r1, r3
 8003388:	6838      	ldr	r0, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4403      	add	r3, r0
 8003394:	3310      	adds	r3, #16
 8003396:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 8003398:	7dba      	ldrb	r2, [r7, #22]
 800339a:	6839      	ldr	r1, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	330c      	adds	r3, #12
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	4413      	add	r3, r2
 80033b2:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 80033b4:	7dba      	ldrb	r2, [r7, #22]
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4419      	add	r1, r3
 80033bc:	6838      	ldr	r0, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4403      	add	r3, r0
 80033c8:	3314      	adds	r3, #20
 80033ca:	6019      	str	r1, [r3, #0]
		pos += 1;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	3301      	adds	r3, #1
 80033d0:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 80033d2:	7dbb      	ldrb	r3, [r7, #22]
 80033d4:	3301      	adds	r3, #1
 80033d6:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 80033d8:	7dfa      	ldrb	r2, [r7, #23]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
 80033de:	7d7b      	ldrb	r3, [r7, #21]
 80033e0:	440b      	add	r3, r1
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d397      	bcc.n	8003316 <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 80033e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}

080033f0 <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e031      	b.n	8003464 <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	33b8      	adds	r3, #184	; 0xb8
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d023      	beq.n	800345e <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	33b0      	adds	r3, #176	; 0xb0
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	f103 0008 	add.w	r0, r3, #8
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	f7ff fdc4 	bl	8002fc4 <is_the_same_topic>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	33b0      	adds	r3, #176	; 0xb0
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	3306      	adds	r3, #6
 8003454:	2224      	movs	r2, #36	; 0x24
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f000 faf9 	bl	8003a50 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3301      	adds	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	2b07      	cmp	r3, #7
 8003468:	d9ca      	bls.n	8003400 <delete_subscribed_topic+0x10>
		}
	}
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	4613      	mov	r3, r2
 800347e:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8003480:	2300      	movs	r3, #0
 8003482:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8003484:	e00e      	b.n	80034a4 <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 8003486:	7dfa      	ldrb	r2, [r7, #23]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	4619      	mov	r1, r3
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f7ff ffa9 	bl	80033f0 <delete_subscribed_topic>
		i++;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	3301      	adds	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80034a4:	7dfa      	ldrb	r2, [r7, #23]
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3ec      	bcc.n	8003486 <delete_listed_subscriptions+0x14>
	}
	return true;
 80034ac:	2301      	movs	r3, #1
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	441a      	add	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	601a      	str	r2, [r3, #0]
	pos++;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	3301      	adds	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	441a      	add	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	605a      	str	r2, [r3, #4]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <_ZNSaIcEC1Ev>:
 80034e8:	4770      	bx	lr

080034ea <_ZNSaIcED1Ev>:
 80034ea:	4770      	bx	lr

080034ec <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80034ec:	b10a      	cbz	r2, 80034f2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80034ee:	f000 ba8a 	b.w	8003a06 <memcpy>
 80034f2:	4770      	bx	lr

080034f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80034f4:	b508      	push	{r3, lr}
 80034f6:	680b      	ldr	r3, [r1, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da02      	bge.n	8003502 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80034fe:	f000 f8c2 	bl	8003686 <_ZSt20__throw_length_errorPKc>
 8003502:	4293      	cmp	r3, r2
 8003504:	d908      	bls.n	8003518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8003506:	0052      	lsls	r2, r2, #1
 8003508:	4293      	cmp	r3, r2
 800350a:	d205      	bcs.n	8003518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800350c:	2a00      	cmp	r2, #0
 800350e:	bfb6      	itet	lt
 8003510:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8003514:	600a      	strge	r2, [r1, #0]
 8003516:	600b      	strlt	r3, [r1, #0]
 8003518:	6808      	ldr	r0, [r1, #0]
 800351a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800351e:	3001      	adds	r0, #1
 8003520:	f000 b8b6 	b.w	8003690 <_Znwj>
 8003524:	08005776 	.word	0x08005776

08003528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003528:	4603      	mov	r3, r0
 800352a:	f853 0b08 	ldr.w	r0, [r3], #8
 800352e:	4298      	cmp	r0, r3
 8003530:	d001      	beq.n	8003536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8003532:	f000 b8ab 	b.w	800368c <_ZdlPv>
 8003536:	4770      	bx	lr

08003538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003538:	2a01      	cmp	r2, #1
 800353a:	b510      	push	{r4, lr}
 800353c:	d102      	bne.n	8003544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800353e:	780a      	ldrb	r2, [r1, #0]
 8003540:	7002      	strb	r2, [r0, #0]
 8003542:	bd10      	pop	{r4, pc}
 8003544:	f7ff ffd2 	bl	80034ec <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8003548:	bd10      	pop	{r4, pc}

0800354a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800354a:	b508      	push	{r3, lr}
 800354c:	1a52      	subs	r2, r2, r1
 800354e:	f7ff fff3 	bl	8003538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003552:	bd08      	pop	{r3, pc}

08003554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8003554:	4288      	cmp	r0, r1
 8003556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003558:	4604      	mov	r4, r0
 800355a:	460e      	mov	r6, r1
 800355c:	d020      	beq.n	80035a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 800355e:	6802      	ldr	r2, [r0, #0]
 8003560:	f100 0308 	add.w	r3, r0, #8
 8003564:	429a      	cmp	r2, r3
 8003566:	bf08      	it	eq
 8003568:	220f      	moveq	r2, #15
 800356a:	684d      	ldr	r5, [r1, #4]
 800356c:	bf18      	it	ne
 800356e:	6882      	ldrne	r2, [r0, #8]
 8003570:	42aa      	cmp	r2, r5
 8003572:	d20b      	bcs.n	800358c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 8003574:	a902      	add	r1, sp, #8
 8003576:	f841 5d04 	str.w	r5, [r1, #-4]!
 800357a:	f7ff ffbb 	bl	80034f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800357e:	4607      	mov	r7, r0
 8003580:	4620      	mov	r0, r4
 8003582:	f7ff ffd1 	bl	8003528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	6027      	str	r7, [r4, #0]
 800358a:	60a3      	str	r3, [r4, #8]
 800358c:	b125      	cbz	r5, 8003598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 800358e:	462a      	mov	r2, r5
 8003590:	6831      	ldr	r1, [r6, #0]
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f7ff ffd0 	bl	8003538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003598:	2200      	movs	r2, #0
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	6065      	str	r5, [r4, #4]
 800359e:	555a      	strb	r2, [r3, r5]
 80035a0:	b003      	add	sp, #12
 80035a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80035a4:	f100 0208 	add.w	r2, r0, #8
 80035a8:	6002      	str	r2, [r0, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	6042      	str	r2, [r0, #4]
 80035ae:	7202      	strb	r2, [r0, #8]
 80035b0:	4770      	bx	lr

080035b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80035b2:	b510      	push	{r4, lr}
 80035b4:	4604      	mov	r4, r0
 80035b6:	f7ff ffb7 	bl	8003528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80035ba:	4620      	mov	r0, r4
 80035bc:	bd10      	pop	{r4, pc}

080035be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80035be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c0:	460b      	mov	r3, r1
 80035c2:	4606      	mov	r6, r0
 80035c4:	f853 7b08 	ldr.w	r7, [r3], #8
 80035c8:	4605      	mov	r5, r0
 80035ca:	42bb      	cmp	r3, r7
 80035cc:	460c      	mov	r4, r1
 80035ce:	f856 2b08 	ldr.w	r2, [r6], #8
 80035d2:	d016      	beq.n	8003602 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 80035d4:	4296      	cmp	r6, r2
 80035d6:	bf08      	it	eq
 80035d8:	2200      	moveq	r2, #0
 80035da:	6849      	ldr	r1, [r1, #4]
 80035dc:	6007      	str	r7, [r0, #0]
 80035de:	6041      	str	r1, [r0, #4]
 80035e0:	68a1      	ldr	r1, [r4, #8]
 80035e2:	bf18      	it	ne
 80035e4:	f8d0 e008 	ldrne.w	lr, [r0, #8]
 80035e8:	6081      	str	r1, [r0, #8]
 80035ea:	b142      	cbz	r2, 80035fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80035ec:	6022      	str	r2, [r4, #0]
 80035ee:	f8c4 e008 	str.w	lr, [r4, #8]
 80035f2:	2300      	movs	r3, #0
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	6063      	str	r3, [r4, #4]
 80035f8:	7013      	strb	r3, [r2, #0]
 80035fa:	4628      	mov	r0, r5
 80035fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	e7f7      	b.n	80035f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 8003602:	f7ff ffa7 	bl	8003554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8003606:	e7f4      	b.n	80035f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08003608 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8003608:	6800      	ldr	r0, [r0, #0]
 800360a:	4770      	bx	lr

0800360c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800360c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800360e:	4604      	mov	r4, r0
 8003610:	4616      	mov	r6, r2
 8003612:	460d      	mov	r5, r1
 8003614:	b901      	cbnz	r1, 8003618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 8003616:	b9ba      	cbnz	r2, 8003648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 8003618:	1b73      	subs	r3, r6, r5
 800361a:	2b0f      	cmp	r3, #15
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	d907      	bls.n	8003630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 8003620:	2200      	movs	r2, #0
 8003622:	a901      	add	r1, sp, #4
 8003624:	4620      	mov	r0, r4
 8003626:	f7ff ff65 	bl	80034f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800362a:	9b01      	ldr	r3, [sp, #4]
 800362c:	6020      	str	r0, [r4, #0]
 800362e:	60a3      	str	r3, [r4, #8]
 8003630:	4632      	mov	r2, r6
 8003632:	4629      	mov	r1, r5
 8003634:	6820      	ldr	r0, [r4, #0]
 8003636:	f7ff ff88 	bl	800354a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800363a:	2100      	movs	r1, #0
 800363c:	9b01      	ldr	r3, [sp, #4]
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	54d1      	strb	r1, [r2, r3]
 8003644:	b002      	add	sp, #8
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800364a:	f000 f819 	bl	8003680 <_ZSt19__throw_logic_errorPKc>
 800364e:	bf00      	nop
 8003650:	0800574c 	.word	0x0800574c

08003654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	f100 0308 	add.w	r3, r0, #8
 800365a:	4604      	mov	r4, r0
 800365c:	6003      	str	r3, [r0, #0]
 800365e:	460d      	mov	r5, r1
 8003660:	b159      	cbz	r1, 800367a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8003662:	4608      	mov	r0, r1
 8003664:	f7fc fd7e 	bl	8000164 <strlen>
 8003668:	182a      	adds	r2, r5, r0
 800366a:	4620      	mov	r0, r4
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	4629      	mov	r1, r5
 8003672:	f7ff ffcb 	bl	800360c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003676:	4620      	mov	r0, r4
 8003678:	bd38      	pop	{r3, r4, r5, pc}
 800367a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800367e:	e7f4      	b.n	800366a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08003680 <_ZSt19__throw_logic_errorPKc>:
 8003680:	b508      	push	{r3, lr}
 8003682:	f000 f967 	bl	8003954 <abort>

08003686 <_ZSt20__throw_length_errorPKc>:
 8003686:	b508      	push	{r3, lr}
 8003688:	f000 f964 	bl	8003954 <abort>

0800368c <_ZdlPv>:
 800368c:	f000 b996 	b.w	80039bc <free>

08003690 <_Znwj>:
 8003690:	b510      	push	{r4, lr}
 8003692:	2800      	cmp	r0, #0
 8003694:	bf14      	ite	ne
 8003696:	4604      	movne	r4, r0
 8003698:	2401      	moveq	r4, #1
 800369a:	4620      	mov	r0, r4
 800369c:	f000 f986 	bl	80039ac <malloc>
 80036a0:	b930      	cbnz	r0, 80036b0 <_Znwj+0x20>
 80036a2:	f000 f807 	bl	80036b4 <_ZSt15get_new_handlerv>
 80036a6:	b908      	cbnz	r0, 80036ac <_Znwj+0x1c>
 80036a8:	f000 f954 	bl	8003954 <abort>
 80036ac:	4780      	blx	r0
 80036ae:	e7f4      	b.n	800369a <_Znwj+0xa>
 80036b0:	bd10      	pop	{r4, pc}
	...

080036b4 <_ZSt15get_new_handlerv>:
 80036b4:	4b02      	ldr	r3, [pc, #8]	; (80036c0 <_ZSt15get_new_handlerv+0xc>)
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	f3bf 8f5b 	dmb	ish
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000424 	.word	0x20000424

080036c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	07d0      	lsls	r0, r2, #31
 80036ca:	bf5c      	itt	pl
 80036cc:	2201      	movpl	r2, #1
 80036ce:	601a      	strpl	r2, [r3, #0]
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	07d1      	lsls	r1, r2, #31
 80036d6:	bf5c      	itt	pl
 80036d8:	2201      	movpl	r2, #1
 80036da:	601a      	strpl	r2, [r3, #0]
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	07d2      	lsls	r2, r2, #31
 80036e2:	bf5c      	itt	pl
 80036e4:	2201      	movpl	r2, #1
 80036e6:	601a      	strpl	r2, [r3, #0]
 80036e8:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	07d0      	lsls	r0, r2, #31
 80036ee:	bf5c      	itt	pl
 80036f0:	2201      	movpl	r2, #1
 80036f2:	601a      	strpl	r2, [r3, #0]
 80036f4:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	07d1      	lsls	r1, r2, #31
 80036fa:	bf5c      	itt	pl
 80036fc:	2201      	movpl	r2, #1
 80036fe:	601a      	strpl	r2, [r3, #0]
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	07d2      	lsls	r2, r2, #31
 8003706:	bf5c      	itt	pl
 8003708:	2201      	movpl	r2, #1
 800370a:	601a      	strpl	r2, [r3, #0]
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	07d0      	lsls	r0, r2, #31
 8003712:	bf5c      	itt	pl
 8003714:	2201      	movpl	r2, #1
 8003716:	601a      	strpl	r2, [r3, #0]
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	07d1      	lsls	r1, r2, #31
 800371e:	bf5c      	itt	pl
 8003720:	2201      	movpl	r2, #1
 8003722:	601a      	strpl	r2, [r3, #0]
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	07d2      	lsls	r2, r2, #31
 800372a:	bf5c      	itt	pl
 800372c:	2201      	movpl	r2, #1
 800372e:	601a      	strpl	r2, [r3, #0]
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	07d0      	lsls	r0, r2, #31
 8003736:	bf5c      	itt	pl
 8003738:	2201      	movpl	r2, #1
 800373a:	601a      	strpl	r2, [r3, #0]
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	07d1      	lsls	r1, r2, #31
 8003742:	bf5c      	itt	pl
 8003744:	2201      	movpl	r2, #1
 8003746:	601a      	strpl	r2, [r3, #0]
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	07d2      	lsls	r2, r2, #31
 800374e:	bf5c      	itt	pl
 8003750:	2201      	movpl	r2, #1
 8003752:	601a      	strpl	r2, [r3, #0]
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000454 	.word	0x20000454
 800375c:	20000450 	.word	0x20000450
 8003760:	2000044c 	.word	0x2000044c
 8003764:	20000448 	.word	0x20000448
 8003768:	20000444 	.word	0x20000444
 800376c:	20000440 	.word	0x20000440
 8003770:	2000043c 	.word	0x2000043c
 8003774:	20000438 	.word	0x20000438
 8003778:	20000434 	.word	0x20000434
 800377c:	20000430 	.word	0x20000430
 8003780:	2000042c 	.word	0x2000042c
 8003784:	20000428 	.word	0x20000428

08003788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	07d1      	lsls	r1, r2, #31
 800378e:	bf5c      	itt	pl
 8003790:	2201      	movpl	r2, #1
 8003792:	601a      	strpl	r2, [r3, #0]
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	07d2      	lsls	r2, r2, #31
 800379a:	bf5c      	itt	pl
 800379c:	2201      	movpl	r2, #1
 800379e:	601a      	strpl	r2, [r3, #0]
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	07d0      	lsls	r0, r2, #31
 80037a6:	bf5c      	itt	pl
 80037a8:	2201      	movpl	r2, #1
 80037aa:	601a      	strpl	r2, [r3, #0]
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	07d1      	lsls	r1, r2, #31
 80037b2:	bf5c      	itt	pl
 80037b4:	2201      	movpl	r2, #1
 80037b6:	601a      	strpl	r2, [r3, #0]
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	07d2      	lsls	r2, r2, #31
 80037be:	bf5c      	itt	pl
 80037c0:	2201      	movpl	r2, #1
 80037c2:	601a      	strpl	r2, [r3, #0]
 80037c4:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	07d0      	lsls	r0, r2, #31
 80037ca:	bf5c      	itt	pl
 80037cc:	2201      	movpl	r2, #1
 80037ce:	601a      	strpl	r2, [r3, #0]
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	07d1      	lsls	r1, r2, #31
 80037d6:	bf5c      	itt	pl
 80037d8:	2201      	movpl	r2, #1
 80037da:	601a      	strpl	r2, [r3, #0]
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	07d2      	lsls	r2, r2, #31
 80037e2:	bf5c      	itt	pl
 80037e4:	2201      	movpl	r2, #1
 80037e6:	601a      	strpl	r2, [r3, #0]
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000474 	.word	0x20000474
 80037f0:	20000470 	.word	0x20000470
 80037f4:	2000046c 	.word	0x2000046c
 80037f8:	20000468 	.word	0x20000468
 80037fc:	20000464 	.word	0x20000464
 8003800:	20000460 	.word	0x20000460
 8003804:	2000045c 	.word	0x2000045c
 8003808:	20000458 	.word	0x20000458

0800380c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	07d0      	lsls	r0, r2, #31
 8003812:	bf5c      	itt	pl
 8003814:	2201      	movpl	r2, #1
 8003816:	601a      	strpl	r2, [r3, #0]
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	07d1      	lsls	r1, r2, #31
 800381e:	bf5c      	itt	pl
 8003820:	2201      	movpl	r2, #1
 8003822:	601a      	strpl	r2, [r3, #0]
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	07d2      	lsls	r2, r2, #31
 800382a:	bf5c      	itt	pl
 800382c:	2201      	movpl	r2, #1
 800382e:	601a      	strpl	r2, [r3, #0]
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	07d0      	lsls	r0, r2, #31
 8003836:	bf5c      	itt	pl
 8003838:	2201      	movpl	r2, #1
 800383a:	601a      	strpl	r2, [r3, #0]
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	07d1      	lsls	r1, r2, #31
 8003842:	bf5c      	itt	pl
 8003844:	2201      	movpl	r2, #1
 8003846:	601a      	strpl	r2, [r3, #0]
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	07d2      	lsls	r2, r2, #31
 800384e:	bf5c      	itt	pl
 8003850:	2201      	movpl	r2, #1
 8003852:	601a      	strpl	r2, [r3, #0]
 8003854:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	07d0      	lsls	r0, r2, #31
 800385a:	bf5c      	itt	pl
 800385c:	2201      	movpl	r2, #1
 800385e:	601a      	strpl	r2, [r3, #0]
 8003860:	4b16      	ldr	r3, [pc, #88]	; (80038bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	07d1      	lsls	r1, r2, #31
 8003866:	bf5c      	itt	pl
 8003868:	2201      	movpl	r2, #1
 800386a:	601a      	strpl	r2, [r3, #0]
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	07d2      	lsls	r2, r2, #31
 8003872:	bf5c      	itt	pl
 8003874:	2201      	movpl	r2, #1
 8003876:	601a      	strpl	r2, [r3, #0]
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	07d0      	lsls	r0, r2, #31
 800387e:	bf5c      	itt	pl
 8003880:	2201      	movpl	r2, #1
 8003882:	601a      	strpl	r2, [r3, #0]
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	07d1      	lsls	r1, r2, #31
 800388a:	bf5c      	itt	pl
 800388c:	2201      	movpl	r2, #1
 800388e:	601a      	strpl	r2, [r3, #0]
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	07d2      	lsls	r2, r2, #31
 8003896:	bf5c      	itt	pl
 8003898:	2201      	movpl	r2, #1
 800389a:	601a      	strpl	r2, [r3, #0]
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	200004a4 	.word	0x200004a4
 80038a4:	200004a0 	.word	0x200004a0
 80038a8:	2000049c 	.word	0x2000049c
 80038ac:	20000498 	.word	0x20000498
 80038b0:	20000494 	.word	0x20000494
 80038b4:	20000490 	.word	0x20000490
 80038b8:	2000048c 	.word	0x2000048c
 80038bc:	20000488 	.word	0x20000488
 80038c0:	20000484 	.word	0x20000484
 80038c4:	20000480 	.word	0x20000480
 80038c8:	2000047c 	.word	0x2000047c
 80038cc:	20000478 	.word	0x20000478

080038d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	07d1      	lsls	r1, r2, #31
 80038d6:	bf5c      	itt	pl
 80038d8:	2201      	movpl	r2, #1
 80038da:	601a      	strpl	r2, [r3, #0]
 80038dc:	4b16      	ldr	r3, [pc, #88]	; (8003938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	07d2      	lsls	r2, r2, #31
 80038e2:	bf5c      	itt	pl
 80038e4:	2201      	movpl	r2, #1
 80038e6:	601a      	strpl	r2, [r3, #0]
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	07d0      	lsls	r0, r2, #31
 80038ee:	bf5c      	itt	pl
 80038f0:	2201      	movpl	r2, #1
 80038f2:	601a      	strpl	r2, [r3, #0]
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	07d1      	lsls	r1, r2, #31
 80038fa:	bf5c      	itt	pl
 80038fc:	2201      	movpl	r2, #1
 80038fe:	601a      	strpl	r2, [r3, #0]
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	07d2      	lsls	r2, r2, #31
 8003906:	bf5c      	itt	pl
 8003908:	2201      	movpl	r2, #1
 800390a:	601a      	strpl	r2, [r3, #0]
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	07d0      	lsls	r0, r2, #31
 8003912:	bf5c      	itt	pl
 8003914:	2201      	movpl	r2, #1
 8003916:	601a      	strpl	r2, [r3, #0]
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	07d1      	lsls	r1, r2, #31
 800391e:	bf5c      	itt	pl
 8003920:	2201      	movpl	r2, #1
 8003922:	601a      	strpl	r2, [r3, #0]
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	07d2      	lsls	r2, r2, #31
 800392a:	bf5c      	itt	pl
 800392c:	2201      	movpl	r2, #1
 800392e:	601a      	strpl	r2, [r3, #0]
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	200004c4 	.word	0x200004c4
 8003938:	200004c0 	.word	0x200004c0
 800393c:	200004bc 	.word	0x200004bc
 8003940:	200004b8 	.word	0x200004b8
 8003944:	200004b4 	.word	0x200004b4
 8003948:	200004b0 	.word	0x200004b0
 800394c:	200004ac 	.word	0x200004ac
 8003950:	200004a8 	.word	0x200004a8

08003954 <abort>:
 8003954:	b508      	push	{r3, lr}
 8003956:	2006      	movs	r0, #6
 8003958:	f000 f964 	bl	8003c24 <raise>
 800395c:	2001      	movs	r0, #1
 800395e:	f000 fd0f 	bl	8004380 <_exit>
	...

08003964 <__libc_init_array>:
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	2500      	movs	r5, #0
 8003968:	4e0c      	ldr	r6, [pc, #48]	; (800399c <__libc_init_array+0x38>)
 800396a:	4c0d      	ldr	r4, [pc, #52]	; (80039a0 <__libc_init_array+0x3c>)
 800396c:	1ba4      	subs	r4, r4, r6
 800396e:	10a4      	asrs	r4, r4, #2
 8003970:	42a5      	cmp	r5, r4
 8003972:	d109      	bne.n	8003988 <__libc_init_array+0x24>
 8003974:	f000 fd06 	bl	8004384 <_init>
 8003978:	2500      	movs	r5, #0
 800397a:	4e0a      	ldr	r6, [pc, #40]	; (80039a4 <__libc_init_array+0x40>)
 800397c:	4c0a      	ldr	r4, [pc, #40]	; (80039a8 <__libc_init_array+0x44>)
 800397e:	1ba4      	subs	r4, r4, r6
 8003980:	10a4      	asrs	r4, r4, #2
 8003982:	42a5      	cmp	r5, r4
 8003984:	d105      	bne.n	8003992 <__libc_init_array+0x2e>
 8003986:	bd70      	pop	{r4, r5, r6, pc}
 8003988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800398c:	4798      	blx	r3
 800398e:	3501      	adds	r5, #1
 8003990:	e7ee      	b.n	8003970 <__libc_init_array+0xc>
 8003992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003996:	4798      	blx	r3
 8003998:	3501      	adds	r5, #1
 800399a:	e7f2      	b.n	8003982 <__libc_init_array+0x1e>
 800399c:	08005824 	.word	0x08005824
 80039a0:	08005824 	.word	0x08005824
 80039a4:	08005824 	.word	0x08005824
 80039a8:	08005838 	.word	0x08005838

080039ac <malloc>:
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <malloc+0xc>)
 80039ae:	4601      	mov	r1, r0
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f000 b8a1 	b.w	8003af8 <_malloc_r>
 80039b6:	bf00      	nop
 80039b8:	20000008 	.word	0x20000008

080039bc <free>:
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <free+0xc>)
 80039be:	4601      	mov	r1, r0
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f000 b84d 	b.w	8003a60 <_free_r>
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008

080039cc <memchr>:
 80039cc:	b510      	push	{r4, lr}
 80039ce:	b2c9      	uxtb	r1, r1
 80039d0:	4402      	add	r2, r0
 80039d2:	4290      	cmp	r0, r2
 80039d4:	4603      	mov	r3, r0
 80039d6:	d101      	bne.n	80039dc <memchr+0x10>
 80039d8:	2000      	movs	r0, #0
 80039da:	bd10      	pop	{r4, pc}
 80039dc:	781c      	ldrb	r4, [r3, #0]
 80039de:	3001      	adds	r0, #1
 80039e0:	428c      	cmp	r4, r1
 80039e2:	d1f6      	bne.n	80039d2 <memchr+0x6>
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd10      	pop	{r4, pc}

080039e8 <memcmp>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	3901      	subs	r1, #1
 80039ec:	4402      	add	r2, r0
 80039ee:	4290      	cmp	r0, r2
 80039f0:	d101      	bne.n	80039f6 <memcmp+0xe>
 80039f2:	2000      	movs	r0, #0
 80039f4:	bd10      	pop	{r4, pc}
 80039f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80039fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80039fe:	42a3      	cmp	r3, r4
 8003a00:	d0f5      	beq.n	80039ee <memcmp+0x6>
 8003a02:	1b18      	subs	r0, r3, r4
 8003a04:	bd10      	pop	{r4, pc}

08003a06 <memcpy>:
 8003a06:	b510      	push	{r4, lr}
 8003a08:	1e43      	subs	r3, r0, #1
 8003a0a:	440a      	add	r2, r1
 8003a0c:	4291      	cmp	r1, r2
 8003a0e:	d100      	bne.n	8003a12 <memcpy+0xc>
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a1a:	e7f7      	b.n	8003a0c <memcpy+0x6>

08003a1c <memmove>:
 8003a1c:	4288      	cmp	r0, r1
 8003a1e:	b510      	push	{r4, lr}
 8003a20:	eb01 0302 	add.w	r3, r1, r2
 8003a24:	d803      	bhi.n	8003a2e <memmove+0x12>
 8003a26:	1e42      	subs	r2, r0, #1
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	d10c      	bne.n	8003a46 <memmove+0x2a>
 8003a2c:	bd10      	pop	{r4, pc}
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d2f9      	bcs.n	8003a26 <memmove+0xa>
 8003a32:	1881      	adds	r1, r0, r2
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	42d3      	cmn	r3, r2
 8003a38:	d100      	bne.n	8003a3c <memmove+0x20>
 8003a3a:	bd10      	pop	{r4, pc}
 8003a3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003a44:	e7f7      	b.n	8003a36 <memmove+0x1a>
 8003a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003a4e:	e7eb      	b.n	8003a28 <memmove+0xc>

08003a50 <memset>:
 8003a50:	4603      	mov	r3, r0
 8003a52:	4402      	add	r2, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memset+0xa>
 8003a58:	4770      	bx	lr
 8003a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5e:	e7f9      	b.n	8003a54 <memset+0x4>

08003a60 <_free_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d043      	beq.n	8003af0 <_free_r+0x90>
 8003a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6c:	1f0c      	subs	r4, r1, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	18e4      	addlt	r4, r4, r3
 8003a74:	f000 f94d 	bl	8003d12 <__malloc_lock>
 8003a78:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <_free_r+0x94>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	b933      	cbnz	r3, 8003a8e <_free_r+0x2e>
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6014      	str	r4, [r2, #0]
 8003a84:	4628      	mov	r0, r5
 8003a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8a:	f000 b943 	b.w	8003d14 <__malloc_unlock>
 8003a8e:	42a3      	cmp	r3, r4
 8003a90:	d90b      	bls.n	8003aaa <_free_r+0x4a>
 8003a92:	6821      	ldr	r1, [r4, #0]
 8003a94:	1862      	adds	r2, r4, r1
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf01      	itttt	eq
 8003a9a:	681a      	ldreq	r2, [r3, #0]
 8003a9c:	685b      	ldreq	r3, [r3, #4]
 8003a9e:	1852      	addeq	r2, r2, r1
 8003aa0:	6022      	streq	r2, [r4, #0]
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	6004      	str	r4, [r0, #0]
 8003aa6:	e7ed      	b.n	8003a84 <_free_r+0x24>
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	b10a      	cbz	r2, 8003ab2 <_free_r+0x52>
 8003aae:	42a2      	cmp	r2, r4
 8003ab0:	d9fa      	bls.n	8003aa8 <_free_r+0x48>
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	1858      	adds	r0, r3, r1
 8003ab6:	42a0      	cmp	r0, r4
 8003ab8:	d10b      	bne.n	8003ad2 <_free_r+0x72>
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	4401      	add	r1, r0
 8003abe:	1858      	adds	r0, r3, r1
 8003ac0:	4282      	cmp	r2, r0
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	d1de      	bne.n	8003a84 <_free_r+0x24>
 8003ac6:	6810      	ldr	r0, [r2, #0]
 8003ac8:	6852      	ldr	r2, [r2, #4]
 8003aca:	4401      	add	r1, r0
 8003acc:	6019      	str	r1, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	e7d8      	b.n	8003a84 <_free_r+0x24>
 8003ad2:	d902      	bls.n	8003ada <_free_r+0x7a>
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	e7d4      	b.n	8003a84 <_free_r+0x24>
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	1821      	adds	r1, r4, r0
 8003ade:	428a      	cmp	r2, r1
 8003ae0:	bf01      	itttt	eq
 8003ae2:	6811      	ldreq	r1, [r2, #0]
 8003ae4:	6852      	ldreq	r2, [r2, #4]
 8003ae6:	1809      	addeq	r1, r1, r0
 8003ae8:	6021      	streq	r1, [r4, #0]
 8003aea:	6062      	str	r2, [r4, #4]
 8003aec:	605c      	str	r4, [r3, #4]
 8003aee:	e7c9      	b.n	8003a84 <_free_r+0x24>
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	200004c8 	.word	0x200004c8

08003af8 <_malloc_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	1ccd      	adds	r5, r1, #3
 8003afc:	f025 0503 	bic.w	r5, r5, #3
 8003b00:	3508      	adds	r5, #8
 8003b02:	2d0c      	cmp	r5, #12
 8003b04:	bf38      	it	cc
 8003b06:	250c      	movcc	r5, #12
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	db01      	blt.n	8003b12 <_malloc_r+0x1a>
 8003b0e:	42a9      	cmp	r1, r5
 8003b10:	d903      	bls.n	8003b1a <_malloc_r+0x22>
 8003b12:	230c      	movs	r3, #12
 8003b14:	6033      	str	r3, [r6, #0]
 8003b16:	2000      	movs	r0, #0
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	f000 f8fa 	bl	8003d12 <__malloc_lock>
 8003b1e:	4a23      	ldr	r2, [pc, #140]	; (8003bac <_malloc_r+0xb4>)
 8003b20:	6814      	ldr	r4, [r2, #0]
 8003b22:	4621      	mov	r1, r4
 8003b24:	b991      	cbnz	r1, 8003b4c <_malloc_r+0x54>
 8003b26:	4c22      	ldr	r4, [pc, #136]	; (8003bb0 <_malloc_r+0xb8>)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	b91b      	cbnz	r3, 8003b34 <_malloc_r+0x3c>
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 f841 	bl	8003bb4 <_sbrk_r>
 8003b32:	6020      	str	r0, [r4, #0]
 8003b34:	4629      	mov	r1, r5
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 f83c 	bl	8003bb4 <_sbrk_r>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d126      	bne.n	8003b8e <_malloc_r+0x96>
 8003b40:	230c      	movs	r3, #12
 8003b42:	4630      	mov	r0, r6
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	f000 f8e5 	bl	8003d14 <__malloc_unlock>
 8003b4a:	e7e4      	b.n	8003b16 <_malloc_r+0x1e>
 8003b4c:	680b      	ldr	r3, [r1, #0]
 8003b4e:	1b5b      	subs	r3, r3, r5
 8003b50:	d41a      	bmi.n	8003b88 <_malloc_r+0x90>
 8003b52:	2b0b      	cmp	r3, #11
 8003b54:	d90f      	bls.n	8003b76 <_malloc_r+0x7e>
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	18cc      	adds	r4, r1, r3
 8003b5a:	50cd      	str	r5, [r1, r3]
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f000 f8d9 	bl	8003d14 <__malloc_unlock>
 8003b62:	f104 000b 	add.w	r0, r4, #11
 8003b66:	1d23      	adds	r3, r4, #4
 8003b68:	f020 0007 	bic.w	r0, r0, #7
 8003b6c:	1ac3      	subs	r3, r0, r3
 8003b6e:	d01b      	beq.n	8003ba8 <_malloc_r+0xb0>
 8003b70:	425a      	negs	r2, r3
 8003b72:	50e2      	str	r2, [r4, r3]
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	428c      	cmp	r4, r1
 8003b78:	bf0b      	itete	eq
 8003b7a:	6863      	ldreq	r3, [r4, #4]
 8003b7c:	684b      	ldrne	r3, [r1, #4]
 8003b7e:	6013      	streq	r3, [r2, #0]
 8003b80:	6063      	strne	r3, [r4, #4]
 8003b82:	bf18      	it	ne
 8003b84:	460c      	movne	r4, r1
 8003b86:	e7e9      	b.n	8003b5c <_malloc_r+0x64>
 8003b88:	460c      	mov	r4, r1
 8003b8a:	6849      	ldr	r1, [r1, #4]
 8003b8c:	e7ca      	b.n	8003b24 <_malloc_r+0x2c>
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d005      	beq.n	8003ba4 <_malloc_r+0xac>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 f80a 	bl	8003bb4 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0cd      	beq.n	8003b40 <_malloc_r+0x48>
 8003ba4:	6025      	str	r5, [r4, #0]
 8003ba6:	e7d9      	b.n	8003b5c <_malloc_r+0x64>
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	bf00      	nop
 8003bac:	200004c8 	.word	0x200004c8
 8003bb0:	200004cc 	.word	0x200004cc

08003bb4 <_sbrk_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	4c05      	ldr	r4, [pc, #20]	; (8003bd0 <_sbrk_r+0x1c>)
 8003bba:	4605      	mov	r5, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	6023      	str	r3, [r4, #0]
 8003bc0:	f000 fbd0 	bl	8004364 <_sbrk>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_sbrk_r+0x1a>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_sbrk_r+0x1a>
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	200004e0 	.word	0x200004e0

08003bd4 <_raise_r>:
 8003bd4:	291f      	cmp	r1, #31
 8003bd6:	b538      	push	{r3, r4, r5, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	460d      	mov	r5, r1
 8003bdc:	d904      	bls.n	8003be8 <_raise_r+0x14>
 8003bde:	2316      	movs	r3, #22
 8003be0:	6003      	str	r3, [r0, #0]
 8003be2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bea:	b112      	cbz	r2, 8003bf2 <_raise_r+0x1e>
 8003bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bf0:	b94b      	cbnz	r3, 8003c06 <_raise_r+0x32>
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f000 f830 	bl	8003c58 <_getpid_r>
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c02:	f000 b817 	b.w	8003c34 <_kill_r>
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d00a      	beq.n	8003c20 <_raise_r+0x4c>
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	d103      	bne.n	8003c16 <_raise_r+0x42>
 8003c0e:	2316      	movs	r3, #22
 8003c10:	6003      	str	r3, [r0, #0]
 8003c12:	2001      	movs	r0, #1
 8003c14:	bd38      	pop	{r3, r4, r5, pc}
 8003c16:	2400      	movs	r4, #0
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c1e:	4798      	blx	r3
 8003c20:	2000      	movs	r0, #0
 8003c22:	bd38      	pop	{r3, r4, r5, pc}

08003c24 <raise>:
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <raise+0xc>)
 8003c26:	4601      	mov	r1, r0
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	f7ff bfd3 	b.w	8003bd4 <_raise_r>
 8003c2e:	bf00      	nop
 8003c30:	20000008 	.word	0x20000008

08003c34 <_kill_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	2300      	movs	r3, #0
 8003c38:	4c06      	ldr	r4, [pc, #24]	; (8003c54 <_kill_r+0x20>)
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	f000 fb87 	bl	8004354 <_kill>
 8003c46:	1c43      	adds	r3, r0, #1
 8003c48:	d102      	bne.n	8003c50 <_kill_r+0x1c>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	b103      	cbz	r3, 8003c50 <_kill_r+0x1c>
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	bd38      	pop	{r3, r4, r5, pc}
 8003c52:	bf00      	nop
 8003c54:	200004e0 	.word	0x200004e0

08003c58 <_getpid_r>:
 8003c58:	f000 bb74 	b.w	8004344 <_getpid>

08003c5c <sniprintf>:
 8003c5c:	b40c      	push	{r2, r3}
 8003c5e:	b530      	push	{r4, r5, lr}
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <sniprintf+0x64>)
 8003c62:	1e0c      	subs	r4, r1, #0
 8003c64:	b09d      	sub	sp, #116	; 0x74
 8003c66:	681d      	ldr	r5, [r3, #0]
 8003c68:	da08      	bge.n	8003c7c <sniprintf+0x20>
 8003c6a:	238b      	movs	r3, #139	; 0x8b
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	b01d      	add	sp, #116	; 0x74
 8003c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c78:	b002      	add	sp, #8
 8003c7a:	4770      	bx	lr
 8003c7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003c80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003c84:	bf0c      	ite	eq
 8003c86:	4623      	moveq	r3, r4
 8003c88:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	9307      	str	r3, [sp, #28]
 8003c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c94:	9002      	str	r0, [sp, #8]
 8003c96:	9006      	str	r0, [sp, #24]
 8003c98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c9e:	ab21      	add	r3, sp, #132	; 0x84
 8003ca0:	a902      	add	r1, sp, #8
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	f000 f891 	bl	8003dcc <_svfiprintf_r>
 8003caa:	1c43      	adds	r3, r0, #1
 8003cac:	bfbc      	itt	lt
 8003cae:	238b      	movlt	r3, #139	; 0x8b
 8003cb0:	602b      	strlt	r3, [r5, #0]
 8003cb2:	2c00      	cmp	r4, #0
 8003cb4:	d0dd      	beq.n	8003c72 <sniprintf+0x16>
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	9b02      	ldr	r3, [sp, #8]
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e7d9      	b.n	8003c72 <sniprintf+0x16>
 8003cbe:	bf00      	nop
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <strncmp>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	b16a      	cbz	r2, 8003ce4 <strncmp+0x20>
 8003cc8:	3901      	subs	r1, #1
 8003cca:	1884      	adds	r4, r0, r2
 8003ccc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003cd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d103      	bne.n	8003ce0 <strncmp+0x1c>
 8003cd8:	42a0      	cmp	r0, r4
 8003cda:	d001      	beq.n	8003ce0 <strncmp+0x1c>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f5      	bne.n	8003ccc <strncmp+0x8>
 8003ce0:	1a98      	subs	r0, r3, r2
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <strncpy>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	4604      	mov	r4, r0
 8003cec:	b902      	cbnz	r2, 8003cf0 <strncpy+0x8>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	4623      	mov	r3, r4
 8003cf2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003cf6:	1e56      	subs	r6, r2, #1
 8003cf8:	f803 5b01 	strb.w	r5, [r3], #1
 8003cfc:	b91d      	cbnz	r5, 8003d06 <strncpy+0x1e>
 8003cfe:	4414      	add	r4, r2
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d103      	bne.n	8003d0c <strncpy+0x24>
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	461c      	mov	r4, r3
 8003d08:	4632      	mov	r2, r6
 8003d0a:	e7ef      	b.n	8003cec <strncpy+0x4>
 8003d0c:	f803 5b01 	strb.w	r5, [r3], #1
 8003d10:	e7f6      	b.n	8003d00 <strncpy+0x18>

08003d12 <__malloc_lock>:
 8003d12:	4770      	bx	lr

08003d14 <__malloc_unlock>:
 8003d14:	4770      	bx	lr

08003d16 <__ssputs_r>:
 8003d16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d1a:	688e      	ldr	r6, [r1, #8]
 8003d1c:	4682      	mov	sl, r0
 8003d1e:	429e      	cmp	r6, r3
 8003d20:	460c      	mov	r4, r1
 8003d22:	4691      	mov	r9, r2
 8003d24:	4698      	mov	r8, r3
 8003d26:	d835      	bhi.n	8003d94 <__ssputs_r+0x7e>
 8003d28:	898a      	ldrh	r2, [r1, #12]
 8003d2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d2e:	d031      	beq.n	8003d94 <__ssputs_r+0x7e>
 8003d30:	2302      	movs	r3, #2
 8003d32:	6825      	ldr	r5, [r4, #0]
 8003d34:	6909      	ldr	r1, [r1, #16]
 8003d36:	1a6f      	subs	r7, r5, r1
 8003d38:	6965      	ldr	r5, [r4, #20]
 8003d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d3e:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d42:	f108 0301 	add.w	r3, r8, #1
 8003d46:	443b      	add	r3, r7
 8003d48:	429d      	cmp	r5, r3
 8003d4a:	bf38      	it	cc
 8003d4c:	461d      	movcc	r5, r3
 8003d4e:	0553      	lsls	r3, r2, #21
 8003d50:	d531      	bpl.n	8003db6 <__ssputs_r+0xa0>
 8003d52:	4629      	mov	r1, r5
 8003d54:	f7ff fed0 	bl	8003af8 <_malloc_r>
 8003d58:	4606      	mov	r6, r0
 8003d5a:	b950      	cbnz	r0, 8003d72 <__ssputs_r+0x5c>
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	f8ca 3000 	str.w	r3, [sl]
 8003d62:	89a3      	ldrh	r3, [r4, #12]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d6c:	81a3      	strh	r3, [r4, #12]
 8003d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d72:	463a      	mov	r2, r7
 8003d74:	6921      	ldr	r1, [r4, #16]
 8003d76:	f7ff fe46 	bl	8003a06 <memcpy>
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	6126      	str	r6, [r4, #16]
 8003d88:	443e      	add	r6, r7
 8003d8a:	6026      	str	r6, [r4, #0]
 8003d8c:	4646      	mov	r6, r8
 8003d8e:	6165      	str	r5, [r4, #20]
 8003d90:	1bed      	subs	r5, r5, r7
 8003d92:	60a5      	str	r5, [r4, #8]
 8003d94:	4546      	cmp	r6, r8
 8003d96:	bf28      	it	cs
 8003d98:	4646      	movcs	r6, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	f7ff fe3c 	bl	8003a1c <memmove>
 8003da4:	68a3      	ldr	r3, [r4, #8]
 8003da6:	2000      	movs	r0, #0
 8003da8:	1b9b      	subs	r3, r3, r6
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	441e      	add	r6, r3
 8003db0:	6026      	str	r6, [r4, #0]
 8003db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db6:	462a      	mov	r2, r5
 8003db8:	f000 fa94 	bl	80042e4 <_realloc_r>
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d1e1      	bne.n	8003d86 <__ssputs_r+0x70>
 8003dc2:	6921      	ldr	r1, [r4, #16]
 8003dc4:	4650      	mov	r0, sl
 8003dc6:	f7ff fe4b 	bl	8003a60 <_free_r>
 8003dca:	e7c7      	b.n	8003d5c <__ssputs_r+0x46>

08003dcc <_svfiprintf_r>:
 8003dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd0:	b09d      	sub	sp, #116	; 0x74
 8003dd2:	9303      	str	r3, [sp, #12]
 8003dd4:	898b      	ldrh	r3, [r1, #12]
 8003dd6:	4680      	mov	r8, r0
 8003dd8:	061c      	lsls	r4, r3, #24
 8003dda:	460d      	mov	r5, r1
 8003ddc:	4616      	mov	r6, r2
 8003dde:	d50f      	bpl.n	8003e00 <_svfiprintf_r+0x34>
 8003de0:	690b      	ldr	r3, [r1, #16]
 8003de2:	b96b      	cbnz	r3, 8003e00 <_svfiprintf_r+0x34>
 8003de4:	2140      	movs	r1, #64	; 0x40
 8003de6:	f7ff fe87 	bl	8003af8 <_malloc_r>
 8003dea:	6028      	str	r0, [r5, #0]
 8003dec:	6128      	str	r0, [r5, #16]
 8003dee:	b928      	cbnz	r0, 8003dfc <_svfiprintf_r+0x30>
 8003df0:	230c      	movs	r3, #12
 8003df2:	f8c8 3000 	str.w	r3, [r8]
 8003df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dfa:	e0c4      	b.n	8003f86 <_svfiprintf_r+0x1ba>
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	616b      	str	r3, [r5, #20]
 8003e00:	2300      	movs	r3, #0
 8003e02:	9309      	str	r3, [sp, #36]	; 0x24
 8003e04:	2320      	movs	r3, #32
 8003e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e0a:	2330      	movs	r3, #48	; 0x30
 8003e0c:	f04f 0b01 	mov.w	fp, #1
 8003e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e14:	4637      	mov	r7, r6
 8003e16:	463c      	mov	r4, r7
 8003e18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d13c      	bne.n	8003e9a <_svfiprintf_r+0xce>
 8003e20:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e24:	d00b      	beq.n	8003e3e <_svfiprintf_r+0x72>
 8003e26:	4653      	mov	r3, sl
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	f7ff ff72 	bl	8003d16 <__ssputs_r>
 8003e32:	3001      	adds	r0, #1
 8003e34:	f000 80a2 	beq.w	8003f7c <_svfiprintf_r+0x1b0>
 8003e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e3a:	4453      	add	r3, sl
 8003e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3e:	783b      	ldrb	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 809b 	beq.w	8003f7c <_svfiprintf_r+0x1b0>
 8003e46:	2300      	movs	r3, #0
 8003e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e4c:	9304      	str	r3, [sp, #16]
 8003e4e:	9307      	str	r3, [sp, #28]
 8003e50:	9205      	str	r2, [sp, #20]
 8003e52:	9306      	str	r3, [sp, #24]
 8003e54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e58:	931a      	str	r3, [sp, #104]	; 0x68
 8003e5a:	2205      	movs	r2, #5
 8003e5c:	7821      	ldrb	r1, [r4, #0]
 8003e5e:	4850      	ldr	r0, [pc, #320]	; (8003fa0 <_svfiprintf_r+0x1d4>)
 8003e60:	f7ff fdb4 	bl	80039cc <memchr>
 8003e64:	1c67      	adds	r7, r4, #1
 8003e66:	9b04      	ldr	r3, [sp, #16]
 8003e68:	b9d8      	cbnz	r0, 8003ea2 <_svfiprintf_r+0xd6>
 8003e6a:	06d9      	lsls	r1, r3, #27
 8003e6c:	bf44      	itt	mi
 8003e6e:	2220      	movmi	r2, #32
 8003e70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e74:	071a      	lsls	r2, r3, #28
 8003e76:	bf44      	itt	mi
 8003e78:	222b      	movmi	r2, #43	; 0x2b
 8003e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e7e:	7822      	ldrb	r2, [r4, #0]
 8003e80:	2a2a      	cmp	r2, #42	; 0x2a
 8003e82:	d016      	beq.n	8003eb2 <_svfiprintf_r+0xe6>
 8003e84:	2100      	movs	r1, #0
 8003e86:	200a      	movs	r0, #10
 8003e88:	9a07      	ldr	r2, [sp, #28]
 8003e8a:	4627      	mov	r7, r4
 8003e8c:	783b      	ldrb	r3, [r7, #0]
 8003e8e:	3401      	adds	r4, #1
 8003e90:	3b30      	subs	r3, #48	; 0x30
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	d950      	bls.n	8003f38 <_svfiprintf_r+0x16c>
 8003e96:	b1c9      	cbz	r1, 8003ecc <_svfiprintf_r+0x100>
 8003e98:	e011      	b.n	8003ebe <_svfiprintf_r+0xf2>
 8003e9a:	2b25      	cmp	r3, #37	; 0x25
 8003e9c:	d0c0      	beq.n	8003e20 <_svfiprintf_r+0x54>
 8003e9e:	4627      	mov	r7, r4
 8003ea0:	e7b9      	b.n	8003e16 <_svfiprintf_r+0x4a>
 8003ea2:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <_svfiprintf_r+0x1d4>)
 8003ea4:	463c      	mov	r4, r7
 8003ea6:	1a80      	subs	r0, r0, r2
 8003ea8:	fa0b f000 	lsl.w	r0, fp, r0
 8003eac:	4318      	orrs	r0, r3
 8003eae:	9004      	str	r0, [sp, #16]
 8003eb0:	e7d3      	b.n	8003e5a <_svfiprintf_r+0x8e>
 8003eb2:	9a03      	ldr	r2, [sp, #12]
 8003eb4:	1d11      	adds	r1, r2, #4
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	9103      	str	r1, [sp, #12]
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	db01      	blt.n	8003ec2 <_svfiprintf_r+0xf6>
 8003ebe:	9207      	str	r2, [sp, #28]
 8003ec0:	e004      	b.n	8003ecc <_svfiprintf_r+0x100>
 8003ec2:	4252      	negs	r2, r2
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	9207      	str	r2, [sp, #28]
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	783b      	ldrb	r3, [r7, #0]
 8003ece:	2b2e      	cmp	r3, #46	; 0x2e
 8003ed0:	d10d      	bne.n	8003eee <_svfiprintf_r+0x122>
 8003ed2:	787b      	ldrb	r3, [r7, #1]
 8003ed4:	1c79      	adds	r1, r7, #1
 8003ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed8:	d132      	bne.n	8003f40 <_svfiprintf_r+0x174>
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	3702      	adds	r7, #2
 8003ede:	1d1a      	adds	r2, r3, #4
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	9203      	str	r2, [sp, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bfb8      	it	lt
 8003ee8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003eec:	9305      	str	r3, [sp, #20]
 8003eee:	4c2d      	ldr	r4, [pc, #180]	; (8003fa4 <_svfiprintf_r+0x1d8>)
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	7839      	ldrb	r1, [r7, #0]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f7ff fd69 	bl	80039cc <memchr>
 8003efa:	b138      	cbz	r0, 8003f0c <_svfiprintf_r+0x140>
 8003efc:	2340      	movs	r3, #64	; 0x40
 8003efe:	1b00      	subs	r0, r0, r4
 8003f00:	fa03 f000 	lsl.w	r0, r3, r0
 8003f04:	9b04      	ldr	r3, [sp, #16]
 8003f06:	3701      	adds	r7, #1
 8003f08:	4303      	orrs	r3, r0
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	7839      	ldrb	r1, [r7, #0]
 8003f0e:	2206      	movs	r2, #6
 8003f10:	4825      	ldr	r0, [pc, #148]	; (8003fa8 <_svfiprintf_r+0x1dc>)
 8003f12:	1c7e      	adds	r6, r7, #1
 8003f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f18:	f7ff fd58 	bl	80039cc <memchr>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d035      	beq.n	8003f8c <_svfiprintf_r+0x1c0>
 8003f20:	4b22      	ldr	r3, [pc, #136]	; (8003fac <_svfiprintf_r+0x1e0>)
 8003f22:	b9fb      	cbnz	r3, 8003f64 <_svfiprintf_r+0x198>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	3307      	adds	r3, #7
 8003f28:	f023 0307 	bic.w	r3, r3, #7
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f32:	444b      	add	r3, r9
 8003f34:	9309      	str	r3, [sp, #36]	; 0x24
 8003f36:	e76d      	b.n	8003e14 <_svfiprintf_r+0x48>
 8003f38:	fb00 3202 	mla	r2, r0, r2, r3
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	e7a4      	b.n	8003e8a <_svfiprintf_r+0xbe>
 8003f40:	2300      	movs	r3, #0
 8003f42:	240a      	movs	r4, #10
 8003f44:	4618      	mov	r0, r3
 8003f46:	9305      	str	r3, [sp, #20]
 8003f48:	460f      	mov	r7, r1
 8003f4a:	783a      	ldrb	r2, [r7, #0]
 8003f4c:	3101      	adds	r1, #1
 8003f4e:	3a30      	subs	r2, #48	; 0x30
 8003f50:	2a09      	cmp	r2, #9
 8003f52:	d903      	bls.n	8003f5c <_svfiprintf_r+0x190>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ca      	beq.n	8003eee <_svfiprintf_r+0x122>
 8003f58:	9005      	str	r0, [sp, #20]
 8003f5a:	e7c8      	b.n	8003eee <_svfiprintf_r+0x122>
 8003f5c:	fb04 2000 	mla	r0, r4, r0, r2
 8003f60:	2301      	movs	r3, #1
 8003f62:	e7f1      	b.n	8003f48 <_svfiprintf_r+0x17c>
 8003f64:	ab03      	add	r3, sp, #12
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	462a      	mov	r2, r5
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <_svfiprintf_r+0x1e4>)
 8003f6c:	a904      	add	r1, sp, #16
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f3af 8000 	nop.w
 8003f74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003f78:	4681      	mov	r9, r0
 8003f7a:	d1d9      	bne.n	8003f30 <_svfiprintf_r+0x164>
 8003f7c:	89ab      	ldrh	r3, [r5, #12]
 8003f7e:	065b      	lsls	r3, r3, #25
 8003f80:	f53f af39 	bmi.w	8003df6 <_svfiprintf_r+0x2a>
 8003f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f86:	b01d      	add	sp, #116	; 0x74
 8003f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8c:	ab03      	add	r3, sp, #12
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	462a      	mov	r2, r5
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <_svfiprintf_r+0x1e4>)
 8003f94:	a904      	add	r1, sp, #16
 8003f96:	4640      	mov	r0, r8
 8003f98:	f000 f884 	bl	80040a4 <_printf_i>
 8003f9c:	e7ea      	b.n	8003f74 <_svfiprintf_r+0x1a8>
 8003f9e:	bf00      	nop
 8003fa0:	080057f0 	.word	0x080057f0
 8003fa4:	080057f6 	.word	0x080057f6
 8003fa8:	080057fa 	.word	0x080057fa
 8003fac:	00000000 	.word	0x00000000
 8003fb0:	08003d17 	.word	0x08003d17

08003fb4 <_printf_common>:
 8003fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	4691      	mov	r9, r2
 8003fba:	461f      	mov	r7, r3
 8003fbc:	688a      	ldr	r2, [r1, #8]
 8003fbe:	690b      	ldr	r3, [r1, #16]
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bfb8      	it	lt
 8003fc6:	4613      	movlt	r3, r2
 8003fc8:	f8c9 3000 	str.w	r3, [r9]
 8003fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fd6:	b112      	cbz	r2, 8003fde <_printf_common+0x2a>
 8003fd8:	3301      	adds	r3, #1
 8003fda:	f8c9 3000 	str.w	r3, [r9]
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	0699      	lsls	r1, r3, #26
 8003fe2:	bf42      	ittt	mi
 8003fe4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003fe8:	3302      	addmi	r3, #2
 8003fea:	f8c9 3000 	strmi.w	r3, [r9]
 8003fee:	6825      	ldr	r5, [r4, #0]
 8003ff0:	f015 0506 	ands.w	r5, r5, #6
 8003ff4:	d107      	bne.n	8004006 <_printf_common+0x52>
 8003ff6:	f104 0a19 	add.w	sl, r4, #25
 8003ffa:	68e3      	ldr	r3, [r4, #12]
 8003ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	429d      	cmp	r5, r3
 8004004:	db2a      	blt.n	800405c <_printf_common+0xa8>
 8004006:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800400a:	6822      	ldr	r2, [r4, #0]
 800400c:	3300      	adds	r3, #0
 800400e:	bf18      	it	ne
 8004010:	2301      	movne	r3, #1
 8004012:	0692      	lsls	r2, r2, #26
 8004014:	d42f      	bmi.n	8004076 <_printf_common+0xc2>
 8004016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800401a:	4639      	mov	r1, r7
 800401c:	4630      	mov	r0, r6
 800401e:	47c0      	blx	r8
 8004020:	3001      	adds	r0, #1
 8004022:	d022      	beq.n	800406a <_printf_common+0xb6>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	68e5      	ldr	r5, [r4, #12]
 8004028:	f003 0306 	and.w	r3, r3, #6
 800402c:	2b04      	cmp	r3, #4
 800402e:	bf18      	it	ne
 8004030:	2500      	movne	r5, #0
 8004032:	f8d9 2000 	ldr.w	r2, [r9]
 8004036:	f04f 0900 	mov.w	r9, #0
 800403a:	bf08      	it	eq
 800403c:	1aad      	subeq	r5, r5, r2
 800403e:	68a3      	ldr	r3, [r4, #8]
 8004040:	6922      	ldr	r2, [r4, #16]
 8004042:	bf08      	it	eq
 8004044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004048:	4293      	cmp	r3, r2
 800404a:	bfc4      	itt	gt
 800404c:	1a9b      	subgt	r3, r3, r2
 800404e:	18ed      	addgt	r5, r5, r3
 8004050:	341a      	adds	r4, #26
 8004052:	454d      	cmp	r5, r9
 8004054:	d11b      	bne.n	800408e <_printf_common+0xda>
 8004056:	2000      	movs	r0, #0
 8004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405c:	2301      	movs	r3, #1
 800405e:	4652      	mov	r2, sl
 8004060:	4639      	mov	r1, r7
 8004062:	4630      	mov	r0, r6
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d103      	bne.n	8004072 <_printf_common+0xbe>
 800406a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800406e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004072:	3501      	adds	r5, #1
 8004074:	e7c1      	b.n	8003ffa <_printf_common+0x46>
 8004076:	2030      	movs	r0, #48	; 0x30
 8004078:	18e1      	adds	r1, r4, r3
 800407a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004084:	4422      	add	r2, r4
 8004086:	3302      	adds	r3, #2
 8004088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800408c:	e7c3      	b.n	8004016 <_printf_common+0x62>
 800408e:	2301      	movs	r3, #1
 8004090:	4622      	mov	r2, r4
 8004092:	4639      	mov	r1, r7
 8004094:	4630      	mov	r0, r6
 8004096:	47c0      	blx	r8
 8004098:	3001      	adds	r0, #1
 800409a:	d0e6      	beq.n	800406a <_printf_common+0xb6>
 800409c:	f109 0901 	add.w	r9, r9, #1
 80040a0:	e7d7      	b.n	8004052 <_printf_common+0x9e>
	...

080040a4 <_printf_i>:
 80040a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040a8:	4617      	mov	r7, r2
 80040aa:	7e0a      	ldrb	r2, [r1, #24]
 80040ac:	b085      	sub	sp, #20
 80040ae:	2a6e      	cmp	r2, #110	; 0x6e
 80040b0:	4698      	mov	r8, r3
 80040b2:	4606      	mov	r6, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80040bc:	f000 80bc 	beq.w	8004238 <_printf_i+0x194>
 80040c0:	d81a      	bhi.n	80040f8 <_printf_i+0x54>
 80040c2:	2a63      	cmp	r2, #99	; 0x63
 80040c4:	d02e      	beq.n	8004124 <_printf_i+0x80>
 80040c6:	d80a      	bhi.n	80040de <_printf_i+0x3a>
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	f000 80c8 	beq.w	800425e <_printf_i+0x1ba>
 80040ce:	2a58      	cmp	r2, #88	; 0x58
 80040d0:	f000 808a 	beq.w	80041e8 <_printf_i+0x144>
 80040d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80040dc:	e02a      	b.n	8004134 <_printf_i+0x90>
 80040de:	2a64      	cmp	r2, #100	; 0x64
 80040e0:	d001      	beq.n	80040e6 <_printf_i+0x42>
 80040e2:	2a69      	cmp	r2, #105	; 0x69
 80040e4:	d1f6      	bne.n	80040d4 <_printf_i+0x30>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80040ee:	d023      	beq.n	8004138 <_printf_i+0x94>
 80040f0:	1d11      	adds	r1, r2, #4
 80040f2:	6019      	str	r1, [r3, #0]
 80040f4:	6813      	ldr	r3, [r2, #0]
 80040f6:	e027      	b.n	8004148 <_printf_i+0xa4>
 80040f8:	2a73      	cmp	r2, #115	; 0x73
 80040fa:	f000 80b4 	beq.w	8004266 <_printf_i+0x1c2>
 80040fe:	d808      	bhi.n	8004112 <_printf_i+0x6e>
 8004100:	2a6f      	cmp	r2, #111	; 0x6f
 8004102:	d02a      	beq.n	800415a <_printf_i+0xb6>
 8004104:	2a70      	cmp	r2, #112	; 0x70
 8004106:	d1e5      	bne.n	80040d4 <_printf_i+0x30>
 8004108:	680a      	ldr	r2, [r1, #0]
 800410a:	f042 0220 	orr.w	r2, r2, #32
 800410e:	600a      	str	r2, [r1, #0]
 8004110:	e003      	b.n	800411a <_printf_i+0x76>
 8004112:	2a75      	cmp	r2, #117	; 0x75
 8004114:	d021      	beq.n	800415a <_printf_i+0xb6>
 8004116:	2a78      	cmp	r2, #120	; 0x78
 8004118:	d1dc      	bne.n	80040d4 <_printf_i+0x30>
 800411a:	2278      	movs	r2, #120	; 0x78
 800411c:	496f      	ldr	r1, [pc, #444]	; (80042dc <_printf_i+0x238>)
 800411e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004122:	e064      	b.n	80041ee <_printf_i+0x14a>
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800412a:	1d11      	adds	r1, r2, #4
 800412c:	6019      	str	r1, [r3, #0]
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004134:	2301      	movs	r3, #1
 8004136:	e0a3      	b.n	8004280 <_printf_i+0x1dc>
 8004138:	f011 0f40 	tst.w	r1, #64	; 0x40
 800413c:	f102 0104 	add.w	r1, r2, #4
 8004140:	6019      	str	r1, [r3, #0]
 8004142:	d0d7      	beq.n	80040f4 <_printf_i+0x50>
 8004144:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004148:	2b00      	cmp	r3, #0
 800414a:	da03      	bge.n	8004154 <_printf_i+0xb0>
 800414c:	222d      	movs	r2, #45	; 0x2d
 800414e:	425b      	negs	r3, r3
 8004150:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004154:	4962      	ldr	r1, [pc, #392]	; (80042e0 <_printf_i+0x23c>)
 8004156:	220a      	movs	r2, #10
 8004158:	e017      	b.n	800418a <_printf_i+0xe6>
 800415a:	6820      	ldr	r0, [r4, #0]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004162:	d003      	beq.n	800416c <_printf_i+0xc8>
 8004164:	1d08      	adds	r0, r1, #4
 8004166:	6018      	str	r0, [r3, #0]
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	e006      	b.n	800417a <_printf_i+0xd6>
 800416c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004170:	f101 0004 	add.w	r0, r1, #4
 8004174:	6018      	str	r0, [r3, #0]
 8004176:	d0f7      	beq.n	8004168 <_printf_i+0xc4>
 8004178:	880b      	ldrh	r3, [r1, #0]
 800417a:	2a6f      	cmp	r2, #111	; 0x6f
 800417c:	bf14      	ite	ne
 800417e:	220a      	movne	r2, #10
 8004180:	2208      	moveq	r2, #8
 8004182:	4957      	ldr	r1, [pc, #348]	; (80042e0 <_printf_i+0x23c>)
 8004184:	2000      	movs	r0, #0
 8004186:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800418a:	6865      	ldr	r5, [r4, #4]
 800418c:	2d00      	cmp	r5, #0
 800418e:	60a5      	str	r5, [r4, #8]
 8004190:	f2c0 809c 	blt.w	80042cc <_printf_i+0x228>
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	f020 0004 	bic.w	r0, r0, #4
 800419a:	6020      	str	r0, [r4, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d13f      	bne.n	8004220 <_printf_i+0x17c>
 80041a0:	2d00      	cmp	r5, #0
 80041a2:	f040 8095 	bne.w	80042d0 <_printf_i+0x22c>
 80041a6:	4675      	mov	r5, lr
 80041a8:	2a08      	cmp	r2, #8
 80041aa:	d10b      	bne.n	80041c4 <_printf_i+0x120>
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	07da      	lsls	r2, r3, #31
 80041b0:	d508      	bpl.n	80041c4 <_printf_i+0x120>
 80041b2:	6923      	ldr	r3, [r4, #16]
 80041b4:	6862      	ldr	r2, [r4, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	bfde      	ittt	le
 80041ba:	2330      	movle	r3, #48	; 0x30
 80041bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80041c4:	ebae 0305 	sub.w	r3, lr, r5
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	f8cd 8000 	str.w	r8, [sp]
 80041ce:	463b      	mov	r3, r7
 80041d0:	aa03      	add	r2, sp, #12
 80041d2:	4621      	mov	r1, r4
 80041d4:	4630      	mov	r0, r6
 80041d6:	f7ff feed 	bl	8003fb4 <_printf_common>
 80041da:	3001      	adds	r0, #1
 80041dc:	d155      	bne.n	800428a <_printf_i+0x1e6>
 80041de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e2:	b005      	add	sp, #20
 80041e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80041ec:	493c      	ldr	r1, [pc, #240]	; (80042e0 <_printf_i+0x23c>)
 80041ee:	6822      	ldr	r2, [r4, #0]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80041f6:	f100 0504 	add.w	r5, r0, #4
 80041fa:	601d      	str	r5, [r3, #0]
 80041fc:	d001      	beq.n	8004202 <_printf_i+0x15e>
 80041fe:	6803      	ldr	r3, [r0, #0]
 8004200:	e002      	b.n	8004208 <_printf_i+0x164>
 8004202:	0655      	lsls	r5, r2, #25
 8004204:	d5fb      	bpl.n	80041fe <_printf_i+0x15a>
 8004206:	8803      	ldrh	r3, [r0, #0]
 8004208:	07d0      	lsls	r0, r2, #31
 800420a:	bf44      	itt	mi
 800420c:	f042 0220 	orrmi.w	r2, r2, #32
 8004210:	6022      	strmi	r2, [r4, #0]
 8004212:	b91b      	cbnz	r3, 800421c <_printf_i+0x178>
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	f022 0220 	bic.w	r2, r2, #32
 800421a:	6022      	str	r2, [r4, #0]
 800421c:	2210      	movs	r2, #16
 800421e:	e7b1      	b.n	8004184 <_printf_i+0xe0>
 8004220:	4675      	mov	r5, lr
 8004222:	fbb3 f0f2 	udiv	r0, r3, r2
 8004226:	fb02 3310 	mls	r3, r2, r0, r3
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004230:	4603      	mov	r3, r0
 8004232:	2800      	cmp	r0, #0
 8004234:	d1f5      	bne.n	8004222 <_printf_i+0x17e>
 8004236:	e7b7      	b.n	80041a8 <_printf_i+0x104>
 8004238:	6808      	ldr	r0, [r1, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004240:	6949      	ldr	r1, [r1, #20]
 8004242:	d004      	beq.n	800424e <_printf_i+0x1aa>
 8004244:	1d10      	adds	r0, r2, #4
 8004246:	6018      	str	r0, [r3, #0]
 8004248:	6813      	ldr	r3, [r2, #0]
 800424a:	6019      	str	r1, [r3, #0]
 800424c:	e007      	b.n	800425e <_printf_i+0x1ba>
 800424e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004252:	f102 0004 	add.w	r0, r2, #4
 8004256:	6018      	str	r0, [r3, #0]
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	d0f6      	beq.n	800424a <_printf_i+0x1a6>
 800425c:	8019      	strh	r1, [r3, #0]
 800425e:	2300      	movs	r3, #0
 8004260:	4675      	mov	r5, lr
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	e7b1      	b.n	80041ca <_printf_i+0x126>
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	1d11      	adds	r1, r2, #4
 800426a:	6019      	str	r1, [r3, #0]
 800426c:	6815      	ldr	r5, [r2, #0]
 800426e:	2100      	movs	r1, #0
 8004270:	6862      	ldr	r2, [r4, #4]
 8004272:	4628      	mov	r0, r5
 8004274:	f7ff fbaa 	bl	80039cc <memchr>
 8004278:	b108      	cbz	r0, 800427e <_printf_i+0x1da>
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	6060      	str	r0, [r4, #4]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	2300      	movs	r3, #0
 8004284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004288:	e79f      	b.n	80041ca <_printf_i+0x126>
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	462a      	mov	r2, r5
 800428e:	4639      	mov	r1, r7
 8004290:	4630      	mov	r0, r6
 8004292:	47c0      	blx	r8
 8004294:	3001      	adds	r0, #1
 8004296:	d0a2      	beq.n	80041de <_printf_i+0x13a>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	079b      	lsls	r3, r3, #30
 800429c:	d507      	bpl.n	80042ae <_printf_i+0x20a>
 800429e:	2500      	movs	r5, #0
 80042a0:	f104 0919 	add.w	r9, r4, #25
 80042a4:	68e3      	ldr	r3, [r4, #12]
 80042a6:	9a03      	ldr	r2, [sp, #12]
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	429d      	cmp	r5, r3
 80042ac:	db05      	blt.n	80042ba <_printf_i+0x216>
 80042ae:	68e0      	ldr	r0, [r4, #12]
 80042b0:	9b03      	ldr	r3, [sp, #12]
 80042b2:	4298      	cmp	r0, r3
 80042b4:	bfb8      	it	lt
 80042b6:	4618      	movlt	r0, r3
 80042b8:	e793      	b.n	80041e2 <_printf_i+0x13e>
 80042ba:	2301      	movs	r3, #1
 80042bc:	464a      	mov	r2, r9
 80042be:	4639      	mov	r1, r7
 80042c0:	4630      	mov	r0, r6
 80042c2:	47c0      	blx	r8
 80042c4:	3001      	adds	r0, #1
 80042c6:	d08a      	beq.n	80041de <_printf_i+0x13a>
 80042c8:	3501      	adds	r5, #1
 80042ca:	e7eb      	b.n	80042a4 <_printf_i+0x200>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1a7      	bne.n	8004220 <_printf_i+0x17c>
 80042d0:	780b      	ldrb	r3, [r1, #0]
 80042d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042da:	e765      	b.n	80041a8 <_printf_i+0x104>
 80042dc:	08005812 	.word	0x08005812
 80042e0:	08005801 	.word	0x08005801

080042e4 <_realloc_r>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	4607      	mov	r7, r0
 80042e8:	4614      	mov	r4, r2
 80042ea:	460e      	mov	r6, r1
 80042ec:	b921      	cbnz	r1, 80042f8 <_realloc_r+0x14>
 80042ee:	4611      	mov	r1, r2
 80042f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80042f4:	f7ff bc00 	b.w	8003af8 <_malloc_r>
 80042f8:	b922      	cbnz	r2, 8004304 <_realloc_r+0x20>
 80042fa:	f7ff fbb1 	bl	8003a60 <_free_r>
 80042fe:	4625      	mov	r5, r4
 8004300:	4628      	mov	r0, r5
 8004302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004304:	f000 f814 	bl	8004330 <_malloc_usable_size_r>
 8004308:	4284      	cmp	r4, r0
 800430a:	d90f      	bls.n	800432c <_realloc_r+0x48>
 800430c:	4621      	mov	r1, r4
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff fbf2 	bl	8003af8 <_malloc_r>
 8004314:	4605      	mov	r5, r0
 8004316:	2800      	cmp	r0, #0
 8004318:	d0f2      	beq.n	8004300 <_realloc_r+0x1c>
 800431a:	4631      	mov	r1, r6
 800431c:	4622      	mov	r2, r4
 800431e:	f7ff fb72 	bl	8003a06 <memcpy>
 8004322:	4631      	mov	r1, r6
 8004324:	4638      	mov	r0, r7
 8004326:	f7ff fb9b 	bl	8003a60 <_free_r>
 800432a:	e7e9      	b.n	8004300 <_realloc_r+0x1c>
 800432c:	4635      	mov	r5, r6
 800432e:	e7e7      	b.n	8004300 <_realloc_r+0x1c>

08004330 <_malloc_usable_size_r>:
 8004330:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004334:	2800      	cmp	r0, #0
 8004336:	f1a0 0004 	sub.w	r0, r0, #4
 800433a:	bfbc      	itt	lt
 800433c:	580b      	ldrlt	r3, [r1, r0]
 800433e:	18c0      	addlt	r0, r0, r3
 8004340:	4770      	bx	lr
	...

08004344 <_getpid>:
 8004344:	2258      	movs	r2, #88	; 0x58
 8004346:	4b02      	ldr	r3, [pc, #8]	; (8004350 <_getpid+0xc>)
 8004348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4770      	bx	lr
 8004350:	200004e0 	.word	0x200004e0

08004354 <_kill>:
 8004354:	2258      	movs	r2, #88	; 0x58
 8004356:	4b02      	ldr	r3, [pc, #8]	; (8004360 <_kill+0xc>)
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	4770      	bx	lr
 8004360:	200004e0 	.word	0x200004e0

08004364 <_sbrk>:
 8004364:	4b04      	ldr	r3, [pc, #16]	; (8004378 <_sbrk+0x14>)
 8004366:	4602      	mov	r2, r0
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	b909      	cbnz	r1, 8004370 <_sbrk+0xc>
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <_sbrk+0x18>)
 800436e:	6019      	str	r1, [r3, #0]
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	4402      	add	r2, r0
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	4770      	bx	lr
 8004378:	200004d0 	.word	0x200004d0
 800437c:	200004e4 	.word	0x200004e4

08004380 <_exit>:
 8004380:	e7fe      	b.n	8004380 <_exit>
	...

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
