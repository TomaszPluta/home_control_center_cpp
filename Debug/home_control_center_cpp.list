
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000312c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800325c  0800325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003264  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003bc  20000004  08003268  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200003c0  08003268  000203c0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b518  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002168  00000000  00000000  0002b545  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a18  00000000  00000000  0002d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000918  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004338  00000000  00000000  0002e9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000037c9  00000000  00000000  00032d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000364e1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000289c  00000000  00000000  00036560  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00038dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000004 	.word	0x20000004
 800012c:	00000000 	.word	0x00000000
 8000130:	08003224 	.word	0x08003224

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000008 	.word	0x20000008
 800014c:	08003224 	.word	0x08003224

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
 800016c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	685b      	ldr	r3, [r3, #4]
 8000172:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	689a      	ldr	r2, [r3, #8]
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	689b      	ldr	r3, [r3, #8]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	683a      	ldr	r2, [r7, #0]
 800018e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1c5a      	adds	r2, r3, #1
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001aa:	b480      	push	{r7}
 80001ac:	b085      	sub	sp, #20
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	691b      	ldr	r3, [r3, #16]
 80001b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	6892      	ldr	r2, [r2, #8]
 80001c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	6852      	ldr	r2, [r2, #4]
 80001ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d103      	bne.n	80001de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689a      	ldr	r2, [r3, #8]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	1e5a      	subs	r2, r3, #1
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	681b      	ldr	r3, [r3, #0]
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <pxCurrentTCBConst2>)
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	6808      	ldr	r0, [r1, #0]
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800020a:	f380 8809 	msr	PSP, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f04f 0000 	mov.w	r0, #0
 8000216:	f380 8811 	msr	BASEPRI, r0
 800021a:	f04e 0e0d 	orr.w	lr, lr, #13
 800021e:	4770      	bx	lr

08000220 <pxCurrentTCBConst2>:
 8000220:	20000020 	.word	0x20000020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
	...

08000230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000230:	f3ef 8009 	mrs	r0, PSP
 8000234:	f3bf 8f6f 	isb	sy
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pxCurrentTCBConst>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000240:	6010      	str	r0, [r2, #0]
 8000242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000246:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800024a:	f380 8811 	msr	BASEPRI, r0
 800024e:	f000 f8df 	bl	8000410 <vTaskSwitchContext>
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	f380 8811 	msr	BASEPRI, r0
 800025a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025e:	6819      	ldr	r1, [r3, #0]
 8000260:	6808      	ldr	r0, [r1, #0]
 8000262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000266:	f380 8809 	msr	PSP, r0
 800026a:	f3bf 8f6f 	isb	sy
 800026e:	4770      	bx	lr

08000270 <pxCurrentTCBConst>:
 8000270:	20000020 	.word	0x20000020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop

08000278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800027e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000282:	f383 8811 	msr	BASEPRI, r3
 8000286:	f3bf 8f6f 	isb	sy
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000290:	f000 f812 	bl	80002b8 <xTaskIncrementTick>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SysTick_Handler+0x3c>)
 800029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000ed04 	.word	0xe000ed04

080002b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002c2:	4b48      	ldr	r3, [pc, #288]	; (80003e4 <xTaskIncrementTick+0x12c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d17c      	bne.n	80003c4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ca:	4b47      	ldr	r3, [pc, #284]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002d2:	4a45      	ldr	r2, [pc, #276]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d110      	bne.n	8000300 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002de:	4b43      	ldr	r3, [pc, #268]	; (80003ec <xTaskIncrementTick+0x134>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <xTaskIncrementTick+0x134>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	4b40      	ldr	r3, [pc, #256]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a3e      	ldr	r2, [pc, #248]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	f000 f8ce 	bl	800049c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	693a      	ldr	r2, [r7, #16]
 8000306:	429a      	cmp	r2, r3
 8000308:	d34d      	bcc.n	80003a6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <xTaskIncrementTick+0x134>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <xTaskIncrementTick+0x60>
 8000314:	2301      	movs	r3, #1
 8000316:	e000      	b.n	800031a <xTaskIncrementTick+0x62>
 8000318:	2300      	movs	r3, #0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d004      	beq.n	8000328 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800031e:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000324:	601a      	str	r2, [r3, #0]
					break;
 8000326:	e03e      	b.n	80003a6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <xTaskIncrementTick+0x134>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	d203      	bcs.n	8000348 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000340:	4a2d      	ldr	r2, [pc, #180]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6013      	str	r3, [r2, #0]
						break;
 8000346:	e02e      	b.n	80003a6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3304      	adds	r3, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff2c 	bl	80001aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	2b00      	cmp	r3, #0
 8000358:	d004      	beq.n	8000364 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3318      	adds	r3, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff23 	bl	80001aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	2201      	movs	r2, #1
 800036a:	409a      	lsls	r2, r3
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <xTaskIncrementTick+0x144>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <xTaskIncrementTick+0x144>)
 8000374:	6013      	str	r3, [r2, #0]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4a1f      	ldr	r2, [pc, #124]	; (8000400 <xTaskIncrementTick+0x148>)
 8000384:	441a      	add	r2, r3
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	3304      	adds	r3, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4610      	mov	r0, r2
 800038e:	f7ff fee9 	bl	8000164 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039c:	429a      	cmp	r2, r3
 800039e:	d3b4      	bcc.n	800030a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003a4:	e7b1      	b.n	800030a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ac:	4914      	ldr	r1, [pc, #80]	; (8000400 <xTaskIncrementTick+0x148>)
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d907      	bls.n	80003ce <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e004      	b.n	80003ce <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <xTaskIncrementTick+0x150>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <xTaskIncrementTick+0x150>)
 80003cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <xTaskIncrementTick+0x154>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003da:	697b      	ldr	r3, [r7, #20]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200000a8 	.word	0x200000a8
 80003e8:	20000090 	.word	0x20000090
 80003ec:	20000088 	.word	0x20000088
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	200000a0 	.word	0x200000a0
 80003f8:	200000a4 	.word	0x200000a4
 80003fc:	20000094 	.word	0x20000094
 8000400:	20000024 	.word	0x20000024
 8000404:	20000020 	.word	0x20000020
 8000408:	20000098 	.word	0x20000098
 800040c:	2000009c 	.word	0x2000009c

08000410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <vTaskSwitchContext+0x78>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <vTaskSwitchContext+0x7c>)
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000424:	e02a      	b.n	800047c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <vTaskSwitchContext+0x7c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <vTaskSwitchContext+0x80>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	fab3 f383 	clz	r3, r3
 8000438:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	f1c3 031f 	rsb	r3, r3, #31
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <vTaskSwitchContext+0x84>)
 800044e:	4413      	add	r3, r2
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3308      	adds	r3, #8
 8000464:	429a      	cmp	r2, r3
 8000466:	d104      	bne.n	8000472 <vTaskSwitchContext+0x62>
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <vTaskSwitchContext+0x88>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200000a8 	.word	0x200000a8
 800048c:	2000009c 	.word	0x2000009c
 8000490:	20000094 	.word	0x20000094
 8000494:	20000024 	.word	0x20000024
 8000498:	20000020 	.word	0x20000020

0800049c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <prvResetNextTaskUnblockTime+0x14>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <prvResetNextTaskUnblockTime+0x16>
 80004b0:	2300      	movs	r3, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004be:	e008      	b.n	80004d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000088 	.word	0x20000088
 80004e0:	200000a4 	.word	0x200000a4

080004e4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <EXTI_ClearFlag+0x18>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6153      	str	r3, [r2, #20]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40010400 	.word	0x40010400

08000500 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <EXTI_ClearITPendingBit+0x18>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6153      	str	r3, [r2, #20]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40010400 	.word	0x40010400

0800051c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800051c:	b480      	push	{r7}
 800051e:	b089      	sub	sp, #36	; 0x24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	f003 030f 	and.w	r3, r3, #15
 8000546:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	78db      	ldrb	r3, [r3, #3]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	2b00      	cmp	r3, #0
 8000552:	d005      	beq.n	8000560 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	461a      	mov	r2, r3
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	4313      	orrs	r3, r2
 800055e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d044      	beq.n	80005f4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	e038      	b.n	80005e8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000576:	2201      	movs	r2, #1
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	429a      	cmp	r2, r3
 8000592:	d126      	bne.n	80005e2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800059a:	220f      	movs	r2, #15
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	4013      	ands	r3, r2
 80005ac:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	2b28      	cmp	r3, #40	; 0x28
 80005c2:	d105      	bne.n	80005d0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005c4:	2201      	movs	r2, #1
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	409a      	lsls	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	e008      	b.n	80005e2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	2b48      	cmp	r3, #72	; 0x48
 80005d6:	d104      	bne.n	80005e2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005d8:	2201      	movs	r2, #1
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	409a      	lsls	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	d9c3      	bls.n	8000576 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d946      	bls.n	800068a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	e03a      	b.n	800067e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	3308      	adds	r3, #8
 800060c:	2201      	movs	r2, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d127      	bne.n	8000678 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800062e:	220f      	movs	r2, #15
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	43db      	mvns	r3, r3
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	4013      	ands	r3, r2
 8000640:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4313      	orrs	r3, r2
 800064e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	2b28      	cmp	r3, #40	; 0x28
 8000656:	d105      	bne.n	8000664 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	3308      	adds	r3, #8
 800065c:	2201      	movs	r2, #1
 800065e:	409a      	lsls	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	2b48      	cmp	r3, #72	; 0x48
 800066a:	d105      	bne.n	8000678 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	3308      	adds	r3, #8
 8000670:	2201      	movs	r2, #1
 8000672:	409a      	lsls	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	3301      	adds	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d9c1      	bls.n	8000608 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	605a      	str	r2, [r3, #4]
  }
}
 800068a:	bf00      	nop
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006a0:	887a      	ldrh	r2, [r7, #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	611a      	str	r2, [r3, #16]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	615a      	str	r2, [r3, #20]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006ea:	e006      	b.n	80006fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006ec:	4905      	ldr	r1, [pc, #20]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4013      	ands	r3, r2
 80006f8:	618b      	str	r3, [r1, #24]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000

08000708 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800071e:	69da      	ldr	r2, [r3, #28]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000726:	e006      	b.n	8000736 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000728:	4905      	ldr	r1, [pc, #20]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	43db      	mvns	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	61cb      	str	r3, [r1, #28]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800075e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	881a      	ldrh	r2, [r3, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	885b      	ldrh	r3, [r3, #2]
 8000768:	4313      	orrs	r3, r2
 800076a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000770:	4313      	orrs	r3, r2
 8000772:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	4313      	orrs	r3, r2
 80007a0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	89fa      	ldrh	r2, [r7, #14]
 80007a6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8b9b      	ldrh	r3, [r3, #28]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	8a1a      	ldrh	r2, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	821a      	strh	r2, [r3, #16]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007ec:	e007      	b.n	80007fe <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	801a      	strh	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	887a      	ldrh	r2, [r7, #2]
 8000818:	819a      	strh	r2, [r3, #12]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	b29b      	uxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d008      	beq.n	8000860 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	889b      	ldrh	r3, [r3, #4]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800085e:	e007      	b.n	8000870 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f023 0304 	bic.w	r3, r3, #4
 800086a:	b29a      	uxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	809a      	strh	r2, [r3, #4]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	891b      	ldrh	r3, [r3, #8]
 800088e:	b29a      	uxth	r2, r3
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	4013      	ands	r3, r2
 8000894:	b29b      	uxth	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e001      	b.n	80008a4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <SELECT>:
static
BYTE PowerFlag = 0;     /* indicates if "power" is on */

static
void SELECT (void) 		// CS w stan niski
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SD_PORT_SS, SD_BIT_SS);
 80008b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <SELECT+0x14>)
 80008ba:	f7ff fef9 	bl	80006b0 <GPIO_ResetBits>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <DESELECT>:

static
void DESELECT (void) 	// CS w stan wysoki
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	GPIO_SetBits(SD_PORT_SS, SD_BIT_SS);
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <DESELECT+0x14>)
 80008d2:	f7ff fedf 	bl	8000694 <GPIO_SetBits>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010c00 	.word	0x40010c00

080008e0 <SpiTransmitSD>:



uint8_t SpiTransmitSD( uint8_t cmd )
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 80008ea:	bf00      	nop
 80008ec:	2102      	movs	r1, #2
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <SpiTransmitSD+0x4c>)
 80008f0:	f7ff ffc3 	bl	800087a <SPI_I2S_GetFlagStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f8      	beq.n	80008ec <SpiTransmitSD+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	4619      	mov	r1, r3
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <SpiTransmitSD+0x4c>)
 8000902:	f7ff ff81 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8000906:	bf00      	nop
 8000908:	2101      	movs	r1, #1
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <SpiTransmitSD+0x4c>)
 800090c:	f7ff ffb5 	bl	800087a <SPI_I2S_GetFlagStatus>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f8      	beq.n	8000908 <SpiTransmitSD+0x28>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <SpiTransmitSD+0x4c>)
 8000918:	f7ff ff84 	bl	8000824 <SPI_I2S_ReceiveData>
 800091c:	4603      	mov	r3, r0
 800091e:	81fb      	strh	r3, [r7, #14]

	return recData;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	b2db      	uxtb	r3, r3

}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40003800 	.word	0x40003800

08000930 <xmit_spi>:



static
void xmit_spi (BYTE Data)  // Wyslanie bajtu do SD
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	SpiTransmitSD(Data);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ffcf 	bl	80008e0 <SpiTransmitSD>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <rcvr_spi>:

static
BYTE rcvr_spi (void) 		// Odebranie bajtu z SD
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
	 u8 Data = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	71fb      	strb	r3, [r7, #7]

	 Data = SpiTransmitSD(0xFF);
 8000954:	20ff      	movs	r0, #255	; 0xff
 8000956:	f7ff ffc3 	bl	80008e0 <SpiTransmitSD>
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
//
//  // Odebranie bajtu
//  while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_RXNE) == RESET);
//  Data = SPI_I2S_ReceiveData(SD_SPI);

  return Data;
 800095e:	79fb      	ldrb	r3, [r7, #7]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <rcvr_spi_m>:


static
void rcvr_spi_m (BYTE *dst)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    *dst = rcvr_spi();
 8000970:	f7ff ffeb 	bl	800094a <rcvr_spi>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	701a      	strb	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
    BYTE res;

    Timer2 = 50;    /* Wait for ready in timeout of 500ms */
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <wait_ready+0x34>)
 800098c:	2232      	movs	r2, #50	; 0x32
 800098e:	701a      	strb	r2, [r3, #0]
    rcvr_spi();
 8000990:	f7ff ffdb 	bl	800094a <rcvr_spi>
    do
        res = rcvr_spi();
 8000994:	f7ff ffd9 	bl	800094a <rcvr_spi>
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
    while ((res != 0xFF) && Timer2);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d004      	beq.n	80009ac <wait_ready+0x28>
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <wait_ready+0x34>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f3      	bne.n	8000994 <wait_ready+0x10>

    return res;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000ad 	.word	0x200000ad

080009bc <power_on>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	u8 i;
 
  DESELECT();      // CS = 1
 80009c2:	f7ff ff81 	bl	80008c8 <DESELECT>

  //Wyslanie 10 razy 0xFF co daje ponad 80 (>74) cykle zegara 
  //wymagane przez specyfikacje SD
  for (i = 0; i < 10; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	e005      	b.n	80009d8 <power_on+0x1c>
    xmit_spi(0xFF);
 80009cc:	20ff      	movs	r0, #255	; 0xff
 80009ce:	f7ff ffaf 	bl	8000930 <xmit_spi>
  for (i = 0; i < 10; i++)
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	3301      	adds	r3, #1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b09      	cmp	r3, #9
 80009dc:	d9f6      	bls.n	80009cc <power_on+0x10>

  PowerFlag = 1;
 80009de:	4b03      	ldr	r3, [pc, #12]	; (80009ec <power_on+0x30>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000af 	.word	0x200000af

080009f0 <power_off>:


static
void power_off (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <power_off+0x14>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	200000af 	.word	0x200000af

08000a08 <rcvr_datablock>:
static
bool rcvr_datablock (
    BYTE *buff,            /* Data buffer to store received data */
    UINT btr            /* Byte count (must be even number) */
)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
    BYTE token;

    Timer1 = 10;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <rcvr_datablock+0x68>)
 8000a14:	220a      	movs	r2, #10
 8000a16:	701a      	strb	r2, [r3, #0]
    do {                            /* Wait for data packet in timeout of 100ms */
        token = rcvr_spi();
 8000a18:	f7ff ff97 	bl	800094a <rcvr_spi>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d104      	bne.n	8000a30 <rcvr_datablock+0x28>
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <rcvr_datablock+0x68>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1f3      	bne.n	8000a18 <rcvr_datablock+0x10>
    if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	2bfe      	cmp	r3, #254	; 0xfe
 8000a34:	d001      	beq.n	8000a3a <rcvr_datablock+0x32>
 8000a36:	2300      	movs	r3, #0
 8000a38:	e016      	b.n	8000a68 <rcvr_datablock+0x60>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	607a      	str	r2, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff91 	bl	8000968 <rcvr_spi_m>
        rcvr_spi_m(buff++);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff8b 	bl	8000968 <rcvr_spi_m>
    } while (btr -= 2);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	3b02      	subs	r3, #2
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1ed      	bne.n	8000a3a <rcvr_datablock+0x32>
    rcvr_spi();                        /* Discard CRC */
 8000a5e:	f7ff ff74 	bl	800094a <rcvr_spi>
    rcvr_spi();
 8000a62:	f7ff ff72 	bl	800094a <rcvr_spi>

    return TRUE;                    /* Return with success */
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200000ac 	.word	0x200000ac

08000a74 <xmit_datablock>:
static
bool xmit_datablock (
    const BYTE *buff,    /* 512 byte data block to be transmitted */
    BYTE token            /* Data/Stop token */
)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
  BYTE resp, wc;
	u32 i = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]

    if (wait_ready() != 0xFF) return FALSE;
 8000a84:	f7ff ff7e 	bl	8000984 <wait_ready>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2bff      	cmp	r3, #255	; 0xff
 8000a8c:	d001      	beq.n	8000a92 <xmit_datablock+0x1e>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e040      	b.n	8000b14 <xmit_datablock+0xa0>

    xmit_spi(token);                    /* Xmit data token */
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff4b 	bl	8000930 <xmit_spi>
    if (token != 0xFD) 
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2bfd      	cmp	r3, #253	; 0xfd
 8000a9e:	d031      	beq.n	8000b04 <xmit_datablock+0x90>
	{    /* Is data token */
        wc = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73bb      	strb	r3, [r7, #14]
        do 
		{                            /* Xmit the 512 byte data block to MMC */
            xmit_spi(*buff++);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff3f 	bl	8000930 <xmit_spi>
            xmit_spi(*buff++);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff38 	bl	8000930 <xmit_spi>
        } while (--wc);
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	73bb      	strb	r3, [r7, #14]
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1eb      	bne.n	8000aa4 <xmit_datablock+0x30>

 		rcvr_spi();
 8000acc:	f7ff ff3d 	bl	800094a <rcvr_spi>
		rcvr_spi();
 8000ad0:	f7ff ff3b 	bl	800094a <rcvr_spi>

		while (i <= 64)
 8000ad4:	e00b      	b.n	8000aee <xmit_datablock+0x7a>
		{
        	resp = rcvr_spi();                /* Reveive data response */
 8000ad6:	f7ff ff38 	bl	800094a <rcvr_spi>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73fb      	strb	r3, [r7, #15]
        	if ((resp & 0x1F) == 0x05)        /* If not accepted, return with error */
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	f003 031f 	and.w	r3, r3, #31
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d006      	beq.n	8000af6 <xmit_datablock+0x82>
            	break;
			i++;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
		while (i <= 64)
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2b40      	cmp	r3, #64	; 0x40
 8000af2:	d9f0      	bls.n	8000ad6 <xmit_datablock+0x62>
 8000af4:	e000      	b.n	8000af8 <xmit_datablock+0x84>
            	break;
 8000af6:	bf00      	nop
    	}
		while (rcvr_spi() == 0);
 8000af8:	bf00      	nop
 8000afa:	f7ff ff26 	bl	800094a <rcvr_spi>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0fa      	beq.n	8000afa <xmit_datablock+0x86>
	}
	if ((resp & 0x1F) == 0x05)  
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	f003 031f 	and.w	r3, r3, #31
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d101      	bne.n	8000b12 <xmit_datablock+0x9e>
		return TRUE;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <xmit_datablock+0xa0>
	else 
		return FALSE;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <send_cmd>:
static
BYTE send_cmd (
    BYTE cmd,        /* Command byte */
    DWORD arg        /* Argument */
)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (wait_ready() != 0xFF) return 0xFF;
 8000b28:	f7ff ff2c 	bl	8000984 <wait_ready>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2bff      	cmp	r3, #255	; 0xff
 8000b30:	d001      	beq.n	8000b36 <send_cmd+0x1a>
 8000b32:	23ff      	movs	r3, #255	; 0xff
 8000b34:	e040      	b.n	8000bb8 <send_cmd+0x9c>

    /* Send command packet */
    xmit_spi(cmd);                        /* Command */
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fef9 	bl	8000930 <xmit_spi>
    xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	0e1b      	lsrs	r3, r3, #24
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fef3 	bl	8000930 <xmit_spi>
    xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	0c1b      	lsrs	r3, r3, #16
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff feed 	bl	8000930 <xmit_spi>
    xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fee7 	bl	8000930 <xmit_spi>
    xmit_spi((BYTE)arg);                /* Argument[7..0] */
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fee2 	bl	8000930 <xmit_spi>
    n = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d101      	bne.n	8000b7a <send_cmd+0x5e>
 8000b76:	2395      	movs	r3, #149	; 0x95
 8000b78:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b48      	cmp	r3, #72	; 0x48
 8000b7e:	d101      	bne.n	8000b84 <send_cmd+0x68>
 8000b80:	2387      	movs	r3, #135	; 0x87
 8000b82:	73fb      	strb	r3, [r7, #15]
    xmit_spi(n);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fed2 	bl	8000930 <xmit_spi>

    /* Receive command response */
    if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b4c      	cmp	r3, #76	; 0x4c
 8000b90:	d101      	bne.n	8000b96 <send_cmd+0x7a>
 8000b92:	f7ff feda 	bl	800094a <rcvr_spi>
    n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
 8000b96:	230a      	movs	r3, #10
 8000b98:	73fb      	strb	r3, [r7, #15]
    do
        res = rcvr_spi();
 8000b9a:	f7ff fed6 	bl	800094a <rcvr_spi>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73bb      	strb	r3, [r7, #14]
    while ((res & 0x80) && --n);
 8000ba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	da05      	bge.n	8000bb6 <send_cmd+0x9a>
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f1      	bne.n	8000b9a <send_cmd+0x7e>

    return res;            /* Return with the response value */
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, ocr[4];


    if (drv) return STA_NOINIT;            /* Supports only single drive */
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <disk_initialize+0x14>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e0d5      	b.n	8000d80 <disk_initialize+0x1c0>
    if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
 8000bd4:	4b6c      	ldr	r3, [pc, #432]	; (8000d88 <disk_initialize+0x1c8>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <disk_initialize+0x2a>
 8000be2:	4b69      	ldr	r3, [pc, #420]	; (8000d88 <disk_initialize+0x1c8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	e0ca      	b.n	8000d80 <disk_initialize+0x1c0>

    power_on();                            /* Force socket power on */
 8000bea:	f7ff fee7 	bl	80009bc <power_on>
    //send_initial_clock_train();

    SELECT();                /* CS = L */
 8000bee:	f7ff fe5f 	bl	80008b0 <SELECT>
    ty = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73bb      	strb	r3, [r7, #14]
    if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2040      	movs	r0, #64	; 0x40
 8000bfa:	f7ff ff8f 	bl	8000b1c <send_cmd>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	f040 80a5 	bne.w	8000d50 <disk_initialize+0x190>
        Timer1 = 100;                        /* Initialization timeout of 1000 msec */
 8000c06:	4b61      	ldr	r3, [pc, #388]	; (8000d8c <disk_initialize+0x1cc>)
 8000c08:	2264      	movs	r2, #100	; 0x64
 8000c0a:	701a      	strb	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
 8000c0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c10:	2048      	movs	r0, #72	; 0x48
 8000c12:	f7ff ff83 	bl	8000b1c <send_cmd>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d158      	bne.n	8000cce <disk_initialize+0x10e>
            for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e00c      	b.n	8000c3c <disk_initialize+0x7c>
 8000c22:	7bfc      	ldrb	r4, [r7, #15]
 8000c24:	f7ff fe91 	bl	800094a <rcvr_spi>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4423      	add	r3, r4
 8000c32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d9ef      	bls.n	8000c22 <disk_initialize+0x62>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
 8000c42:	7abb      	ldrb	r3, [r7, #10]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f040 8083 	bne.w	8000d50 <disk_initialize+0x190>
 8000c4a:	7afb      	ldrb	r3, [r7, #11]
 8000c4c:	2baa      	cmp	r3, #170	; 0xaa
 8000c4e:	d17f      	bne.n	8000d50 <disk_initialize+0x190>
                do {
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 8000c50:	2100      	movs	r1, #0
 8000c52:	2077      	movs	r0, #119	; 0x77
 8000c54:	f7ff ff62 	bl	8000b1c <send_cmd>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d807      	bhi.n	8000c6e <disk_initialize+0xae>
 8000c5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c62:	2069      	movs	r0, #105	; 0x69
 8000c64:	f7ff ff5a 	bl	8000b1c <send_cmd>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <disk_initialize+0xba>
                } while (Timer1);
 8000c6e:	4b47      	ldr	r3, [pc, #284]	; (8000d8c <disk_initialize+0x1cc>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1eb      	bne.n	8000c50 <disk_initialize+0x90>
 8000c78:	e000      	b.n	8000c7c <disk_initialize+0xbc>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 8000c7a:	bf00      	nop
                if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
 8000c7c:	4b43      	ldr	r3, [pc, #268]	; (8000d8c <disk_initialize+0x1cc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d064      	beq.n	8000d50 <disk_initialize+0x190>
 8000c86:	2100      	movs	r1, #0
 8000c88:	207a      	movs	r0, #122	; 0x7a
 8000c8a:	f7ff ff47 	bl	8000b1c <send_cmd>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d15d      	bne.n	8000d50 <disk_initialize+0x190>
                    for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e00c      	b.n	8000cb4 <disk_initialize+0xf4>
 8000c9a:	7bfc      	ldrb	r4, [r7, #15]
 8000c9c:	f7ff fe55 	bl	800094a <rcvr_spi>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4423      	add	r3, r4
 8000caa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d9ef      	bls.n	8000c9a <disk_initialize+0xda>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
 8000cba:	7a3b      	ldrb	r3, [r7, #8]
 8000cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <disk_initialize+0x108>
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	e000      	b.n	8000cca <disk_initialize+0x10a>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	73bb      	strb	r3, [r7, #14]
 8000ccc:	e040      	b.n	8000d50 <disk_initialize+0x190>
                }
            }
        } else {                            /* SDC Ver1 or MMC */
            ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2077      	movs	r0, #119	; 0x77
 8000cd2:	f7ff ff23 	bl	8000b1c <send_cmd>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <disk_initialize+0x12e>
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2069      	movs	r0, #105	; 0x69
 8000ce0:	f7ff ff1c 	bl	8000b1c <send_cmd>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d801      	bhi.n	8000cee <disk_initialize+0x12e>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e000      	b.n	8000cf0 <disk_initialize+0x130>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73bb      	strb	r3, [r7, #14]
            do {
                if (ty == 2) {
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d10e      	bne.n	8000d16 <disk_initialize+0x156>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2077      	movs	r0, #119	; 0x77
 8000cfc:	f7ff ff0e 	bl	8000b1c <send_cmd>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d80e      	bhi.n	8000d24 <disk_initialize+0x164>
 8000d06:	2100      	movs	r1, #0
 8000d08:	2069      	movs	r0, #105	; 0x69
 8000d0a:	f7ff ff07 	bl	8000b1c <send_cmd>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d107      	bne.n	8000d24 <disk_initialize+0x164>
 8000d14:	e00d      	b.n	8000d32 <disk_initialize+0x172>
                } else {
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8000d16:	2100      	movs	r1, #0
 8000d18:	2041      	movs	r0, #65	; 0x41
 8000d1a:	f7ff feff 	bl	8000b1c <send_cmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <disk_initialize+0x170>
                }
            } while (Timer1);
 8000d24:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <disk_initialize+0x1cc>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1e1      	bne.n	8000cf2 <disk_initialize+0x132>
 8000d2e:	e000      	b.n	8000d32 <disk_initialize+0x172>
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8000d30:	bf00      	nop
            if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <disk_initialize+0x1cc>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d007      	beq.n	8000d4c <disk_initialize+0x18c>
 8000d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d40:	2050      	movs	r0, #80	; 0x50
 8000d42:	f7ff feeb 	bl	8000b1c <send_cmd>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <disk_initialize+0x190>
                ty = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73bb      	strb	r3, [r7, #14]
        }
    }
    CardType = ty;
 8000d50:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <disk_initialize+0x1d0>)
 8000d52:	7bbb      	ldrb	r3, [r7, #14]
 8000d54:	7013      	strb	r3, [r2, #0]
    DESELECT();            /* CS = H */
 8000d56:	f7ff fdb7 	bl	80008c8 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8000d5a:	f7ff fdf6 	bl	800094a <rcvr_spi>

    if (ty)           /* Initialization succeded */
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <disk_initialize+0x1b6>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <disk_initialize+0x1c8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <disk_initialize+0x1c8>)
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e001      	b.n	8000d7a <disk_initialize+0x1ba>
	else          /* Initialization failed */
        power_off();
 8000d76:	f7ff fe3b 	bl	80009f0 <power_off>

    return Stat;
 8000d7a:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <disk_initialize+0x1c8>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b2db      	uxtb	r3, r3
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200000ac 	.word	0x200000ac
 8000d90:	200000ae 	.word	0x200000ae

08000d94 <disk_read>:
    BYTE drv,            /* Physical drive nmuber (0) */
    BYTE *buff,            /* Pointer to the data buffer to store read data */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	4613      	mov	r3, r2
 8000da6:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <disk_read+0x20>
 8000dae:	7bbb      	ldrb	r3, [r7, #14]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <disk_read+0x24>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e054      	b.n	8000e62 <disk_read+0xce>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <disk_read+0xd8>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <disk_read+0x36>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e04b      	b.n	8000e62 <disk_read+0xce>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <disk_read+0xdc>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <disk_read+0x48>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	025b      	lsls	r3, r3, #9
 8000dda:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8000ddc:	f7ff fd68 	bl	80008b0 <SELECT>

    if (count == 1) {    /* Single block read */
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d111      	bne.n	8000e0a <disk_read+0x76>
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	2051      	movs	r0, #81	; 0x51
 8000dea:	f7ff fe97 	bl	8000b1c <send_cmd>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d12c      	bne.n	8000e4e <disk_read+0xba>
            && rcvr_datablock(buff, 512))
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	68b8      	ldr	r0, [r7, #8]
 8000dfa:	f7ff fe05 	bl	8000a08 <rcvr_datablock>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d024      	beq.n	8000e4e <disk_read+0xba>
            count = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73bb      	strb	r3, [r7, #14]
 8000e08:	e021      	b.n	8000e4e <disk_read+0xba>
    }
    else {                /* Multiple block read */
        if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2052      	movs	r0, #82	; 0x52
 8000e0e:	f7ff fe85 	bl	8000b1c <send_cmd>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d11a      	bne.n	8000e4e <disk_read+0xba>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f7ff fdf3 	bl	8000a08 <rcvr_datablock>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f083 0301 	eor.w	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10a      	bne.n	8000e44 <disk_read+0xb0>
                buff += 512;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e34:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	73bb      	strb	r3, [r7, #14]
 8000e3c:	7bbb      	ldrb	r3, [r7, #14]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1ea      	bne.n	8000e18 <disk_read+0x84>
 8000e42:	e000      	b.n	8000e46 <disk_read+0xb2>
                if (!rcvr_datablock(buff, 512)) break;
 8000e44:	bf00      	nop
            send_cmd(CMD12, 0);                /* STOP_TRANSMISSION */
 8000e46:	2100      	movs	r1, #0
 8000e48:	204c      	movs	r0, #76	; 0x4c
 8000e4a:	f7ff fe67 	bl	8000b1c <send_cmd>
        }
    }

    DESELECT();            /* CS = H */
 8000e4e:	f7ff fd3b 	bl	80008c8 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8000e52:	f7ff fd7a 	bl	800094a <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf14      	ite	ne
 8000e5c:	2301      	movne	r3, #1
 8000e5e:	2300      	moveq	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	200000ae 	.word	0x200000ae

08000e74 <disk_write>:
    BYTE drv,            /* Physical drive nmuber (0) */
    const BYTE *buff,    /* Pointer to the data to be written */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	4613      	mov	r3, r2
 8000e86:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <disk_write+0x20>
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <disk_write+0x24>
 8000e94:	2304      	movs	r3, #4
 8000e96:	e072      	b.n	8000f7e <disk_write+0x10a>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <disk_write+0x114>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <disk_write+0x36>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e069      	b.n	8000f7e <disk_write+0x10a>
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <disk_write+0x114>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <disk_write+0x48>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e060      	b.n	8000f7e <disk_write+0x10a>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8000ebc:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <disk_write+0x118>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <disk_write+0x5a>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	025b      	lsls	r3, r3, #9
 8000ecc:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8000ece:	f7ff fcef 	bl	80008b0 <SELECT>

    if (count == 1) {    /* Single block write */
 8000ed2:	7bbb      	ldrb	r3, [r7, #14]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d110      	bne.n	8000efa <disk_write+0x86>
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	2058      	movs	r0, #88	; 0x58
 8000edc:	f7ff fe1e 	bl	8000b1c <send_cmd>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d141      	bne.n	8000f6a <disk_write+0xf6>
            && xmit_datablock(buff, 0xFE))
 8000ee6:	21fe      	movs	r1, #254	; 0xfe
 8000ee8:	68b8      	ldr	r0, [r7, #8]
 8000eea:	f7ff fdc3 	bl	8000a74 <xmit_datablock>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03a      	beq.n	8000f6a <disk_write+0xf6>
            count = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73bb      	strb	r3, [r7, #14]
 8000ef8:	e037      	b.n	8000f6a <disk_write+0xf6>
    }
    else {                /* Multiple block write */
        if (CardType & 2) {
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <disk_write+0x118>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <disk_write+0xa4>
            send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
 8000f06:	2100      	movs	r1, #0
 8000f08:	2077      	movs	r0, #119	; 0x77
 8000f0a:	f7ff fe07 	bl	8000b1c <send_cmd>
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	4619      	mov	r1, r3
 8000f12:	2057      	movs	r0, #87	; 0x57
 8000f14:	f7ff fe02 	bl	8000b1c <send_cmd>
        }
        if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	2059      	movs	r0, #89	; 0x59
 8000f1c:	f7ff fdfe 	bl	8000b1c <send_cmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d121      	bne.n	8000f6a <disk_write+0xf6>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 8000f26:	21fc      	movs	r1, #252	; 0xfc
 8000f28:	68b8      	ldr	r0, [r7, #8]
 8000f2a:	f7ff fda3 	bl	8000a74 <xmit_datablock>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <disk_write+0xdc>
                buff += 512;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f40:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	73bb      	strb	r3, [r7, #14]
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1eb      	bne.n	8000f26 <disk_write+0xb2>
 8000f4e:	e000      	b.n	8000f52 <disk_write+0xde>
                if (!xmit_datablock(buff, 0xFC)) break;
 8000f50:	bf00      	nop
            if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
 8000f52:	21fd      	movs	r1, #253	; 0xfd
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff fd8d 	bl	8000a74 <xmit_datablock>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <disk_write+0xf6>
                count = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73bb      	strb	r3, [r7, #14]
        }
    }

    DESELECT();            /* CS = H */
 8000f6a:	f7ff fcad 	bl	80008c8 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8000f6e:	f7ff fcec 	bl	800094a <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8000f72:	7bbb      	ldrb	r3, [r7, #14]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf14      	ite	ne
 8000f78:	2301      	movne	r3, #1
 8000f7a:	2300      	moveq	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	200000ae 	.word	0x200000ae

08000f90 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 8000f94:	f000 f9a2 	bl	80012dc <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 fa0b 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8000f9e:	f248 00e7 	movw	r0, #32999	; 0x80e7
 8000fa2:	f000 fa07 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 8000fa6:	f248 2008 	movw	r0, #33288	; 0x8208
 8000faa:	f000 fa03 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8000fae:	f24a 6040 	movw	r0, #42560	; 0xa640
 8000fb2:	f000 f9ff 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 8000fb6:	f24c 6048 	movw	r0, #50760	; 0xc648
 8000fba:	f000 f9fb 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8000fbe:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8000fc2:	f000 f9f7 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 8000fc6:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8000fca:	f000 f9f3 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8000fce:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000fd2:	f000 f9ef 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 8000fd6:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8000fda:	f000 f9eb 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8000fde:	f24c 4083 	movw	r0, #50307	; 0xc483
 8000fe2:	f000 f9e7 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8000fe6:	f649 0050 	movw	r0, #38992	; 0x9850
 8000fea:	f000 f9e3 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8000fee:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8000ff2:	f000 f9df 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8000ff6:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8000ffa:	f000 f9db 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 8000ffe:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8001002:	f000 f9d7 	bl	80013b4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8001006:	f24c 0040 	movw	r0, #49216	; 0xc040
 800100a:	f000 f9d3 	bl	80013b4 <Rfm12bWriteCmd>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}

08001012 <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 800101e:	f240 320e 	movw	r2, #782	; 0x30e
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f002 f8cd 	bl	80031c4 <memset>
	rfm12bObj->module_addr = module_addr;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	78fa      	ldrb	r2, [r7, #3]
 800102e:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <Rfm12bTranssmitSeqByte>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 800104a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 800104e:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	b2d1      	uxtb	r1, r2
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	7011      	strb	r1, [r2, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	b29a      	uxth	r2, r3
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	4313      	orrs	r3, r2
 8001070:	b29b      	uxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f99e 	bl	80013b4 <Rfm12bWriteCmd>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <Rfm12bStartSending>:


void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	460b      	mov	r3, r1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4613      	mov	r3, r2
 8001094:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	22aa      	movs	r2, #170	; 0xaa
 800109a:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0xAA;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	22aa      	movs	r2, #170	; 0xaa
 80010a0:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0x2D;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	222d      	movs	r2, #45	; 0x2d
 80010a6:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = 0xD4;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	22d4      	movs	r2, #212	; 0xd4
 80010ac:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = dataNb;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	79fa      	ldrb	r2, [r7, #7]
 80010b2:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = toAddr;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	79ba      	ldrb	r2, [r7, #6]
 80010b8:	725a      	strb	r2, [r3, #9]
	rfm12b->txBuff.data[6] = rfm12b->module_addr;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	729a      	strb	r2, [r3, #10]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	330b      	adds	r3, #11
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f86d 	bl	80031ae <memcpy>
	rfm12b->txBuff.pos =0;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + ALL_HEADER_SIZE;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3307      	adds	r3, #7
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 80010e4:	f000 f8f2 	bl	80012cc <rfm12bSwitchTx>
    rfm12b->state = transmit;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffa5 	bl	8001042 <Rfm12bTranssmitSeqByte>
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Rfm12bMantainSending>:



void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos <= rfm12b->txBuff.dataNb){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	429a      	cmp	r2, r3
 8001116:	d804      	bhi.n	8001122 <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff91 	bl	8001042 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8001120:	e005      	b.n	800112e <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 800112a:	f000 f8c7 	bl	80012bc <rfm12bSwitchRx>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f002 f83a 	bl	80031c4 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f203 110b 	addw	r1, r3, #267	; 0x10b
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	f002 f822 	bl	80031ae <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800117e:	b2da      	uxtb	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800118c:	b2da      	uxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800119a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 f80f 	bl	80031c4 <memset>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 80011be:	f000 f863 	bl	8001288 <rfm12bFifoReset>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 80011d4:	f000 f864 	bl	80012a0 <rfm12bReadFifo>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	b2d1      	uxtb	r1, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == (rfm12b->rxBuff.dataNb + L2_HEADER_SIZE)){
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3303      	adds	r3, #3
 8001222:	429a      	cmp	r2, r3
 8001224:	d10b      	bne.n	800123e <Rfm12bMantainreceiving+0x72>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff85 	bl	8001136 <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ffbe 	bl	80011ae <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <Rfm12bMantainreceiving+0x7c>)
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <Rfm12bMantainreceiving+0x7c>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800123c:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40011000 	.word	0x40011000

0800124c <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8001254:	2000      	movs	r0, #0
 8001256:	f000 f8ad 	bl	80013b4 <Rfm12bWriteCmd>
 800125a:	4603      	mov	r3, r0
 800125c:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 800125e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da0c      	bge.n	8001280 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d103      	bne.n	800127a <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff44 	bl	8001100 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8001278:	e002      	b.n	8001280 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa6 	bl	80011cc <Rfm12bMantainreceiving>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 800128c:	f64c 2081 	movw	r0, #51841	; 0xca81
 8001290:	f000 f890 	bl	80013b4 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8001294:	f64c 2083 	movw	r0, #51843	; 0xca83
 8001298:	f000 f88c 	bl	80013b4 <Rfm12bWriteCmd>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 80012a6:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80012aa:	f000 f883 	bl	80013b4 <Rfm12bWriteCmd>
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 80012c0:	f248 2099 	movw	r0, #33433	; 0x8299
 80012c4:	f000 f876 	bl	80013b4 <Rfm12bWriteCmd>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 80012d0:	f248 2039 	movw	r0, #33337	; 0x8239
 80012d4:	f000 f86e 	bl	80013b4 <Rfm12bWriteCmd>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80012e2:	2101      	movs	r1, #1
 80012e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012e8:	f7ff f9f0 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80012ec:	2101      	movs	r1, #1
 80012ee:	2004      	movs	r0, #4
 80012f0:	f7ff f9ec 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2008      	movs	r0, #8
 80012f8:	f7ff f9e8 	bl	80006cc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80012fc:	23e0      	movs	r3, #224	; 0xe0
 80012fe:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001300:	2318      	movs	r3, #24
 8001302:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001304:	2301      	movs	r3, #1
 8001306:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001308:	f107 0308 	add.w	r3, r7, #8
 800130c:	4619      	mov	r1, r3
 800130e:	4825      	ldr	r0, [pc, #148]	; (80013a4 <Rfm12bSpiInit+0xc8>)
 8001310:	f7ff f904 	bl	800051c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001318:	2310      	movs	r3, #16
 800131a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 800131c:	2301      	movs	r3, #1
 800131e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4619      	mov	r1, r3
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <Rfm12bSpiInit+0xcc>)
 8001328:	f7ff f8f8 	bl	800051c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800132c:	2300      	movs	r3, #0
 800132e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001330:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001334:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8001336:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800133a:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800133c:	2300      	movs	r3, #0
 800133e:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001340:	2300      	movs	r3, #0
 8001342:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 800134a:	2330      	movs	r3, #48	; 0x30
 800134c:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800134e:	2300      	movs	r3, #0
 8001350:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001352:	2307      	movs	r3, #7
 8001354:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8001356:	2101      	movs	r1, #1
 8001358:	4814      	ldr	r0, [pc, #80]	; (80013ac <Rfm12bSpiInit+0xd0>)
 800135a:	f7ff fa6f 	bl	800083c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <Rfm12bSpiInit+0xd0>)
 8001366:	f7ff f9ed 	bl	8000744 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 800136a:	2101      	movs	r1, #1
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <Rfm12bSpiInit+0xd0>)
 800136e:	f7ff fa2c 	bl	80007ca <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <Rfm12bSpiInit+0xd4>)
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <Rfm12bSpiInit+0xd4>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 800137e:	2310      	movs	r3, #16
 8001380:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8001382:	2302      	movs	r3, #2
 8001384:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8001386:	2302      	movs	r3, #2
 8001388:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <Rfm12bSpiInit+0xcc>)
 8001390:	f7ff f8c4 	bl	800051c <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8001394:	2102      	movs	r1, #2
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <Rfm12bSpiInit+0xcc>)
 8001398:	f7ff f97c 	bl	8000694 <GPIO_SetBits>
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40013000 	.word	0x40013000
 80013b0:	40021000 	.word	0x40021000

080013b4 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 80013be:	2102      	movs	r1, #2
 80013c0:	4812      	ldr	r0, [pc, #72]	; (800140c <Rfm12bWriteCmd+0x58>)
 80013c2:	f7ff f975 	bl	80006b0 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80013c6:	bf00      	nop
 80013c8:	2102      	movs	r1, #2
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <Rfm12bWriteCmd+0x5c>)
 80013cc:	f7ff fa55 	bl	800087a <SPI_I2S_GetFlagStatus>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f8      	beq.n	80013c8 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	4619      	mov	r1, r3
 80013da:	480d      	ldr	r0, [pc, #52]	; (8001410 <Rfm12bWriteCmd+0x5c>)
 80013dc:	f7ff fa14 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 80013e0:	bf00      	nop
 80013e2:	2101      	movs	r1, #1
 80013e4:	480a      	ldr	r0, [pc, #40]	; (8001410 <Rfm12bWriteCmd+0x5c>)
 80013e6:	f7ff fa48 	bl	800087a <SPI_I2S_GetFlagStatus>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f8      	beq.n	80013e2 <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <Rfm12bWriteCmd+0x5c>)
 80013f2:	f7ff fa17 	bl	8000824 <SPI_I2S_ReceiveData>
 80013f6:	4603      	mov	r3, r0
 80013f8:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 80013fa:	2102      	movs	r1, #2
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <Rfm12bWriteCmd+0x58>)
 80013fe:	f7ff f949 	bl	8000694 <GPIO_SetBits>

	return recData;
 8001402:	89fb      	ldrh	r3, [r7, #14]

}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40013000 	.word	0x40013000

08001414 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <NVIC_EnableIRQ+0x2c>)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	095b      	lsrs	r3, r3, #5
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	f002 021f 	and.w	r2, r2, #31
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100

08001444 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <EnableGpioClk+0x68>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d106      	bne.n	8001462 <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001454:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <EnableGpioClk+0x6c>)
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <EnableGpioClk+0x6c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8001460:	e01f      	b.n	80014a2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <EnableGpioClk+0x70>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d106      	bne.n	8001478 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <EnableGpioClk+0x6c>)
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <EnableGpioClk+0x6c>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6193      	str	r3, [r2, #24]
	 		 }
 8001476:	e014      	b.n	80014a2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <EnableGpioClk+0x74>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d106      	bne.n	800148e <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <EnableGpioClk+0x6c>)
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <EnableGpioClk+0x6c>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6193      	str	r3, [r2, #24]
	 		 }
 800148c:	e009      	b.n	80014a2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <EnableGpioClk+0x78>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d105      	bne.n	80014a2 <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <EnableGpioClk+0x6c>)
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <EnableGpioClk+0x6c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f043 0320 	orr.w	r3, r3, #32
 80014a0:	6193      	str	r3, [r2, #24]
	 		 }
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40010800 	.word	0x40010800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40011400 	.word	0x40011400

080014c0 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	d81d      	bhi.n	800150e <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	78fa      	ldrb	r2, [r7, #3]
 80014d8:	2103      	movs	r1, #3
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	43d2      	mvns	r2, r2
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	2103      	movs	r1, #3
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	43d2      	mvns	r2, r2
 80014f4:	401a      	ands	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 800150c:	e023      	b.n	8001556 <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	3a08      	subs	r2, #8
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	2103      	movs	r1, #3
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	43d2      	mvns	r2, r2
 8001520:	401a      	ands	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	3a08      	subs	r2, #8
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	2103      	movs	r1, #3
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	43d2      	mvns	r2, r2
 8001538:	401a      	ands	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	78fa      	ldrb	r2, [r7, #3]
 8001544:	3a08      	subs	r2, #8
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	3202      	adds	r2, #2
 800154a:	2101      	movs	r1, #1
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	605a      	str	r2, [r3, #4]
	 		 }
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	2b07      	cmp	r3, #7
 8001570:	d82b      	bhi.n	80015ca <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	2103      	movs	r1, #3
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	43d2      	mvns	r2, r2
 8001582:	401a      	ands	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	3202      	adds	r2, #2
 8001592:	2103      	movs	r1, #3
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	3202      	adds	r2, #2
 80015aa:	2102      	movs	r1, #2
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	2101      	movs	r1, #1
 80015be:	fa01 f202 	lsl.w	r2, r1, r2
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 80015c8:	e02d      	b.n	8001626 <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	78fa      	ldrb	r2, [r7, #3]
 80015d0:	3a08      	subs	r2, #8
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	2103      	movs	r1, #3
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	43d2      	mvns	r2, r2
 80015dc:	401a      	ands	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	78fa      	ldrb	r2, [r7, #3]
 80015e8:	3a08      	subs	r2, #8
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	3202      	adds	r2, #2
 80015ee:	2103      	movs	r1, #3
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	3a08      	subs	r2, #8
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	3202      	adds	r2, #2
 8001608:	2102      	movs	r1, #2
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60da      	str	r2, [r3, #12]
	 		 }
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	2b07      	cmp	r3, #7
 8001640:	d92f      	bls.n	80016a2 <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	3a08      	subs	r2, #8
 800164a:	0092      	lsls	r2, r2, #2
 800164c:	2103      	movs	r1, #3
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	43d2      	mvns	r2, r2
 8001654:	401a      	ands	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	3a08      	subs	r2, #8
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	3202      	adds	r2, #2
 8001666:	2103      	movs	r1, #3
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	43d2      	mvns	r2, r2
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	3a08      	subs	r2, #8
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	3a08      	subs	r2, #8
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	3202      	adds	r2, #2
 8001696:	2102      	movs	r1, #2
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	70fb      	strb	r3, [r7, #3]
 80016be:	460b      	mov	r3, r1
 80016c0:	70bb      	strb	r3, [r7, #2]
 80016c2:	4613      	mov	r3, r2
 80016c4:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <EnableExti+0x84>)
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <EnableExti+0x84>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <EnableExti+0x88>)
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <EnableExti+0x88>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 80016de:	4916      	ldr	r1, [pc, #88]	; (8001738 <EnableExti+0x8c>)
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <EnableExti+0x8c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	2001      	movs	r0, #1
 80016e8:	fa00 f202 	lsl.w	r2, r0, r2
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 80016f0:	78bb      	ldrb	r3, [r7, #2]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 80016f6:	4910      	ldr	r1, [pc, #64]	; (8001738 <EnableExti+0x8c>)
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <EnableExti+0x8c>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	2001      	movs	r0, #1
 8001700:	fa00 f202 	lsl.w	r2, r0, r2
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <EnableExti+0x8c>)
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <EnableExti+0x8c>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	2001      	movs	r0, #1
 8001718:	fa00 f202 	lsl.w	r2, r0, r2
 800171c:	4313      	orrs	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001720:	2017      	movs	r0, #23
 8001722:	f7ff fe77 	bl	8001414 <NVIC_EnableIRQ>
	 		 }
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	40010400 	.word	0x40010400

0800173c <EnableExtiGeneral>:




			 	 void EnableExtiGeneral(uint8_t gpioPortNb, uint8_t pinNb, bool rise, bool fall){
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	4604      	mov	r4, r0
 8001744:	4608      	mov	r0, r1
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	4623      	mov	r3, r4
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	4603      	mov	r3, r0
 8001750:	71bb      	strb	r3, [r7, #6]
 8001752:	460b      	mov	r3, r1
 8001754:	717b      	strb	r3, [r7, #5]
 8001756:	4613      	mov	r3, r2
 8001758:	713b      	strb	r3, [r7, #4]
		 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <EnableExtiGeneral+0xe4>)
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <EnableExtiGeneral+0xe4>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6193      	str	r3, [r2, #24]
		 		 	AFIO->EXTICR[pinNb >> 0x02] |= ((gpioPortNb) << (0x04 * (pinNb & 0x03)));
 8001766:	482f      	ldr	r0, [pc, #188]	; (8001824 <EnableExtiGeneral+0xe8>)
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461c      	mov	r4, r3
 8001770:	4a2c      	ldr	r2, [pc, #176]	; (8001824 <EnableExtiGeneral+0xe8>)
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3302      	adds	r3, #2
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	79f9      	ldrb	r1, [r7, #7]
 8001780:	79ba      	ldrb	r2, [r7, #6]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	431a      	orrs	r2, r3
 800178e:	1ca3      	adds	r3, r4, #2
 8001790:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		 		 	EXTI->IMR  |= (1<<pinNb);
 8001794:	4924      	ldr	r1, [pc, #144]	; (8001828 <EnableExtiGeneral+0xec>)
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <EnableExtiGeneral+0xec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	79ba      	ldrb	r2, [r7, #6]
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
		 		 	if (rise){
 80017a6:	797b      	ldrb	r3, [r7, #5]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <EnableExtiGeneral+0x82>
		 		 		EXTI->RTSR |= (1<<pinNb);
 80017ac:	491e      	ldr	r1, [pc, #120]	; (8001828 <EnableExtiGeneral+0xec>)
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <EnableExtiGeneral+0xec>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	79ba      	ldrb	r2, [r7, #6]
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
		 		 	}
		 		 	if (fall){
 80017be:	793b      	ldrb	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <EnableExtiGeneral+0x9a>
		 		 		EXTI->FTSR |= (1<<pinNb);
 80017c4:	4918      	ldr	r1, [pc, #96]	; (8001828 <EnableExtiGeneral+0xec>)
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <EnableExtiGeneral+0xec>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	79ba      	ldrb	r2, [r7, #6]
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
		 		 	}


		 		 	uint8_t irqNb;

		 		 	if (pinNb >=0  && pinNb <=3){
 80017d6:	79bb      	ldrb	r3, [r7, #6]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d806      	bhi.n	80017ea <EnableExtiGeneral+0xae>
		 		 		const uint8_t irqOffset = 6;
 80017dc:	2306      	movs	r3, #6
 80017de:	73bb      	strb	r3, [r7, #14]
		 		 		irqNb = (pinNb +  irqOffset);
 80017e0:	79ba      	ldrb	r2, [r7, #6]
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	4413      	add	r3, r2
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e010      	b.n	800180c <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=5  && pinNb <9){
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d905      	bls.n	80017fc <EnableExtiGeneral+0xc0>
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d802      	bhi.n	80017fc <EnableExtiGeneral+0xc0>
		 		 		irqNb = EXTI9_5_IRQn;
 80017f6:	2317      	movs	r3, #23
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e007      	b.n	800180c <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=10  && pinNb <=15){
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	2b09      	cmp	r3, #9
 8001800:	d904      	bls.n	800180c <EnableExtiGeneral+0xd0>
 8001802:	79bb      	ldrb	r3, [r7, #6]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d801      	bhi.n	800180c <EnableExtiGeneral+0xd0>
		 		 		irqNb = EXTI15_10_IRQn;
 8001808:	2328      	movs	r3, #40	; 0x28
 800180a:	73fb      	strb	r3, [r7, #15]
		 		 	}


		 		 	NVIC_EnableIRQ(irqNb);
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fdff 	bl	8001414 <NVIC_EnableIRQ>



		 		 }
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	40010400 	.word	0x40010400

0800182c <_delay_ms>:





	 		 void _delay_ms(int n) {
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

	 		 	int i, j;
	 		 	j= n*1000;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	60bb      	str	r3, [r7, #8]
	 		 	while(j--) {
 8001840:	e007      	b.n	8001852 <_delay_ms+0x26>
	 		 		i=2;
 8001842:	2302      	movs	r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
	 		 		while(i--);
 8001846:	bf00      	nop
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e5a      	subs	r2, r3, #1
 800184c:	60fa      	str	r2, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1fa      	bne.n	8001848 <_delay_ms+0x1c>
	 		 	while(j--) {
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f2      	bne.n	8001842 <_delay_ms+0x16>
	 		 	}
	 		 }
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <NVIC_EnableIRQ>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <NVIC_EnableIRQ+0x2c>)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	095b      	lsrs	r3, r3, #5
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	f002 021f 	and.w	r2, r2, #31
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100

08001898 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 800189c:	2020      	movs	r0, #32
 800189e:	f7fe fe2f 	bl	8000500 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 80018a2:	4802      	ldr	r0, [pc, #8]	; (80018ac <EXTI9_5_IRQHandler+0x14>)
 80018a4:	f7ff fcd2 	bl	800124c <Rfm12bIrqCallback>

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200000b0 	.word	0x200000b0

080018b0 <_Z9ReadTouchv>:




void ReadTouch(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0


	uint16_t TouchXval;
	uint16_t TouchYval;;

	CS_LOW
 80018b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ba:	480e      	ldr	r0, [pc, #56]	; (80018f4 <_Z9ReadTouchv+0x44>)
 80018bc:	f7fe fef8 	bl	80006b0 <GPIO_ResetBits>

	SpiTransmit(0xD2);
 80018c0:	20d2      	movs	r0, #210	; 0xd2
 80018c2:	f000 fa17 	bl	8001cf4 <SpiTransmit>
	TouchXval = SpiTransmit(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 fa14 	bl	8001cf4 <SpiTransmit>
 80018cc:	4603      	mov	r3, r0
 80018ce:	80fb      	strh	r3, [r7, #6]

	SpiTransmit(0x92);
 80018d0:	2092      	movs	r0, #146	; 0x92
 80018d2:	f000 fa0f 	bl	8001cf4 <SpiTransmit>
	TouchYval = SpiTransmit(0x00);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 fa0c 	bl	8001cf4 <SpiTransmit>
 80018dc:	4603      	mov	r3, r0
 80018de:	80bb      	strh	r3, [r7, #4]

	CS_HIGH
 80018e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <_Z9ReadTouchv+0x44>)
 80018e6:	f7fe fed5 	bl	8000694 <GPIO_SetBits>

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40010800 	.word	0x40010800

080018f8 <EXTI15_10_IRQHandler>:



extern "C" void EXTI15_10_IRQHandler (void);

void EXTI15_10_IRQHandler (void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	ReadTouch();
 80018fc:	f7ff ffd8 	bl	80018b0 <_Z9ReadTouchv>
	EXTI_ClearFlag(EXTI_Line12);
 8001900:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001904:	f7fe fdee 	bl	80004e4 <EXTI_ClearFlag>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6978      	ldr	r0, [r7, #20]
 8001942:	f7ff fb9d 	bl	8001080 <Rfm12bStartSending>
	return buffLen;
 8001946:	887b      	ldrh	r3, [r7, #2]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8001968:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd17      	ble.n	80019a0 <_Z10broker_recPvP11sockaddr_inPht+0x50>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	7dfb      	ldrb	r3, [r7, #23]
 8001974:	4293      	cmp	r3, r2
 8001976:	bfa8      	it	ge
 8001978:	4613      	movge	r3, r2
 800197a:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001982:	7dfa      	ldrb	r2, [r7, #23]
 8001984:	4619      	mov	r1, r3
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f001 fc11 	bl	80031ae <memcpy>
		obj->completedRxBuff.dataNb = 0;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		sockaddr->sin_addr.s_addr = obj->completedRxBuff.rxFromAddr;
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	605a      	str	r2, [r3, #4]
	}

	return byteNb;
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
	return 1;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <main>:

}



int main(){
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	f5ad 5d06 	sub.w	sp, sp, #8576	; 0x2180
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0

	spiInit();
 80019ca:	f000 f933 	bl	8001c34 <spiInit>


	SetGpioAsInFloating(GPIOA, 12);
 80019ce:	210c      	movs	r1, #12
 80019d0:	4877      	ldr	r0, [pc, #476]	; (8001bb0 <main+0x1f0>)
 80019d2:	f7ff fd75 	bl	80014c0 <SetGpioAsInFloating>
	EnableExtiGeneral(0, 12, false, true);
 80019d6:	2301      	movs	r3, #1
 80019d8:	2200      	movs	r2, #0
 80019da:	210c      	movs	r1, #12
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fead 	bl	800173c <EnableExtiGeneral>


	uint8_t buffSD[4096];
	disk_initialize(0);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff f8ec 	bl	8000bc0 <disk_initialize>

	uint8_t inputBuff[128];
	memset(inputBuff, 'x', 128);
 80019e8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80019ec:	f103 0308 	add.w	r3, r3, #8
 80019f0:	3b04      	subs	r3, #4
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	2178      	movs	r1, #120	; 0x78
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fbe4 	bl	80031c4 <memset>
	disk_write(0,inputBuff,0, 1);
 80019fc:	f507 5188 	add.w	r1, r7, #4352	; 0x1100
 8001a00:	f101 0108 	add.w	r1, r1, #8
 8001a04:	3904      	subs	r1, #4
 8001a06:	2301      	movs	r3, #1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fa32 	bl	8000e74 <disk_write>
	disk_read(0,buffSD,0, 1);
 8001a10:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001a14:	f101 0108 	add.w	r1, r1, #8
 8001a18:	3904      	subs	r1, #4
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff f9b8 	bl	8000d94 <disk_read>

 	EnableGpioClk(LOG_UART_PORT);
 8001a24:	4862      	ldr	r0, [pc, #392]	; (8001bb0 <main+0x1f0>)
 8001a26:	f7ff fd0d 	bl	8001444 <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8001a2a:	2109      	movs	r1, #9
 8001a2c:	4860      	ldr	r0, [pc, #384]	; (8001bb0 <main+0x1f0>)
 8001a2e:	f7ff fdff 	bl	8001630 <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8001a32:	210a      	movs	r1, #10
 8001a34:	485e      	ldr	r0, [pc, #376]	; (8001bb0 <main+0x1f0>)
 8001a36:	f7ff fd43 	bl	80014c0 <SetGpioAsInFloating>
 	EnableUart(USART1);
 8001a3a:	485e      	ldr	r0, [pc, #376]	; (8001bb4 <main+0x1f4>)
 8001a3c:	f000 f8cc 	bl	8001bd8 <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001a40:	2101      	movs	r1, #1
 8001a42:	2010      	movs	r0, #16
 8001a44:	f7fe fe42 	bl	80006cc <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a48:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001a4c:	f103 0308 	add.w	r3, r3, #8
 8001a50:	3b08      	subs	r3, #8
 8001a52:	2210      	movs	r2, #16
 8001a54:	70da      	strb	r2, [r3, #3]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8001a56:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001a5a:	f103 0308 	add.w	r3, r3, #8
 8001a5e:	3b08      	subs	r3, #8
 8001a60:	2202      	movs	r2, #2
 8001a62:	709a      	strb	r2, [r3, #2]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 8001a64:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001a68:	f103 0308 	add.w	r3, r3, #8
 8001a6c:	3b08      	subs	r3, #8
 8001a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a72:	801a      	strh	r2, [r3, #0]
 	GPIO_Init(GPIOC, &PORT);
 8001a74:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001a78:	f103 0308 	add.w	r3, r3, #8
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	484d      	ldr	r0, [pc, #308]	; (8001bb8 <main+0x1f8>)
 8001a82:	f7fe fd4b 	bl	800051c <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 8001a86:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <main+0x1f8>)
 8001a88:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <main+0x1f8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a90:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 8001a92:	f7ff fa7d 	bl	8000f90 <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 8001a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9a:	f7ff fec7 	bl	800182c <_delay_ms>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fc88 	bl	80013b4 <Rfm12bWriteCmd>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f507 5206 	add.w	r2, r7, #8576	; 0x2180
 8001aaa:	f102 0207 	add.w	r2, r2, #7
 8001aae:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	2008      	movs	r0, #8
 8001ab4:	f7fe fe0a 	bl	80006cc <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2200      	movs	r2, #0
 8001abc:	2105      	movs	r1, #5
 8001abe:	483f      	ldr	r0, [pc, #252]	; (8001bbc <main+0x1fc>)
 8001ac0:	f7ff fdf4 	bl	80016ac <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	483d      	ldr	r0, [pc, #244]	; (8001bbc <main+0x1fc>)
 8001ac8:	f7ff fd4a 	bl	8001560 <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 8001acc:	210b      	movs	r1, #11
 8001ace:	483b      	ldr	r0, [pc, #236]	; (8001bbc <main+0x1fc>)
 8001ad0:	f7ff fd46 	bl	8001560 <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 8001ad4:	f7ff fbd8 	bl	8001288 <rfm12bFifoReset>
 	rfm12bSwitchRx();
 8001ad8:	f7ff fbf0 	bl	80012bc <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001adc:	2017      	movs	r0, #23
 8001ade:	f7ff fec3 	bl	8001868 <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4836      	ldr	r0, [pc, #216]	; (8001bc0 <main+0x200>)
 8001ae6:	f7ff fa94 	bl	8001012 <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 8001aea:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001aee:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <main+0x200>)
 8001af0:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 8001af2:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001af6:	4a33      	ldr	r2, [pc, #204]	; (8001bc4 <main+0x204>)
 8001af8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 8001afc:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001b00:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <main+0x208>)
 8001b02:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 8001b06:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001b0a:	4a30      	ldr	r2, [pc, #192]	; (8001bcc <main+0x20c>)
 8001b0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 8001b10:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001b14:	4a2e      	ldr	r2, [pc, #184]	; (8001bd0 <main+0x210>)
 8001b16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8001b1a:	f607 72e8 	addw	r2, r7, #4072	; 0xfe8
 8001b1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b22:	3b24      	subs	r3, #36	; 0x24
 8001b24:	4611      	mov	r1, r2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fa06 	bl	8001f38 <broker_init_by_given_net>
	uint8_t frameBuff[MAX_FRAME_SIZE];



	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8001b2c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001b30:	3a34      	subs	r2, #52	; 0x34
 8001b32:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b36:	3924      	subs	r1, #36	; 0x24
 8001b38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b3c:	3b24      	subs	r3, #36	; 0x24
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fa49 	bl	8001fd6 <broker_receive>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <main+0x1a2>
	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 8001b4a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001b4e:	3a34      	subs	r2, #52	; 0x34
 8001b50:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b54:	3924      	subs	r1, #36	; 0x24
 8001b56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b5a:	3b24      	subs	r3, #36	; 0x24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fa53 	bl	8002008 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <main+0x1fc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0d9      	beq.n	8001b2c <main+0x16c>
	 			  uint8_t buff[] = "abcdefghijabcdefghijabcdefghij";
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	3b04      	subs	r3, #4
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <main+0x214>)
 8001b80:	461c      	mov	r4, r3
 8001b82:	4615      	mov	r5, r2
 8001b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b8c:	c407      	stmia	r4!, {r0, r1, r2}
 8001b8e:	8023      	strh	r3, [r4, #0]
 8001b90:	3402      	adds	r4, #2
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	7023      	strb	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 8001b96:	f107 0108 	add.w	r1, r7, #8
 8001b9a:	3904      	subs	r1, #4
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	221e      	movs	r2, #30
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <main+0x200>)
 8001ba2:	f7ff fa6d 	bl	8001080 <Rfm12bStartSending>
	 			 _delay_ms(250);
 8001ba6:	20fa      	movs	r0, #250	; 0xfa
 8001ba8:	f7ff fe40 	bl	800182c <_delay_ms>


	 		  }


	 	}
 8001bac:	e7be      	b.n	8001b2c <main+0x16c>
 8001bae:	bf00      	nop
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	200000b0 	.word	0x200000b0
 8001bc4:	0800190d 	.word	0x0800190d
 8001bc8:	08001923 	.word	0x08001923
 8001bcc:	08001951 	.word	0x08001951
 8001bd0:	080019ab 	.word	0x080019ab
 8001bd4:	0800323c 	.word	0x0800323c

08001bd8 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <EnableUart+0x58>)
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <EnableUart+0x58>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bea:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001bf2:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	899b      	ldrh	r3, [r3, #12]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	899b      	ldrh	r3, [r3, #12]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	899b      	ldrh	r3, [r3, #12]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	819a      	strh	r2, [r3, #12]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <spiInit>:

#include "stdint.h"
#include "spi.h"
#include "stm32f10x.h"

void spiInit(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c40:	f7fe fd62 	bl	8000708 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7fe fd40 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	2008      	movs	r0, #8
 8001c50:	f7fe fd3c 	bl	80006cc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001c54:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c58:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8001c5a:	2318      	movs	r3, #24
 8001c5c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c62:	463b      	mov	r3, r7
 8001c64:	4619      	mov	r1, r3
 8001c66:	4820      	ldr	r0, [pc, #128]	; (8001ce8 <spiInit+0xb4>)
 8001c68:	f7fe fc58 	bl	800051c <GPIO_Init>


	//CS touch hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c70:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001c72:	2310      	movs	r3, #16
 8001c74:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001c76:	2301      	movs	r3, #1
 8001c78:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481b      	ldr	r0, [pc, #108]	; (8001cec <spiInit+0xb8>)
 8001c80:	f7fe fc4c 	bl	800051c <GPIO_Init>

	//CS sd card
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <spiInit+0xb4>)
 8001c98:	f7fe fc40 	bl	800051c <GPIO_Init>




	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001ca0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ca4:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001caa:	2300      	movs	r3, #0
 8001cac:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb6:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8001cb8:	2318      	movs	r3, #24
 8001cba:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	82bb      	strh	r3, [r7, #20]
	SPI_SSOutputCmd(SPI2, ENABLE);
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <spiInit+0xbc>)
 8001cc8:	f7fe fdb8 	bl	800083c <SPI_SSOutputCmd>
	SPI_Init(SPI2, &SPI_InitStructure);
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <spiInit+0xbc>)
 8001cd2:	f7fe fd37 	bl	8000744 <SPI_Init>

	/* Enable SPI  */
	SPI_Cmd(SPI2, ENABLE);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <spiInit+0xbc>)
 8001cda:	f7fe fd76 	bl	80007ca <SPI_Cmd>

}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40010800 	.word	0x40010800
 8001cf0:	40003800 	.word	0x40003800

08001cf4 <SpiTransmit>:



uint16_t SpiTransmit( uint16_t cmd )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
//	CS_LOW;

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8001cfe:	bf00      	nop
 8001d00:	2102      	movs	r1, #2
 8001d02:	480e      	ldr	r0, [pc, #56]	; (8001d3c <SpiTransmit+0x48>)
 8001d04:	f7fe fdb9 	bl	800087a <SPI_I2S_GetFlagStatus>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f8      	beq.n	8001d00 <SpiTransmit+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4619      	mov	r1, r3
 8001d12:	480a      	ldr	r0, [pc, #40]	; (8001d3c <SpiTransmit+0x48>)
 8001d14:	f7fe fd78 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8001d18:	bf00      	nop
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <SpiTransmit+0x48>)
 8001d1e:	f7fe fdac 	bl	800087a <SPI_I2S_GetFlagStatus>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f8      	beq.n	8001d1a <SpiTransmit+0x26>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <SpiTransmit+0x48>)
 8001d2a:	f7fe fd7b 	bl	8000824 <SPI_I2S_ReceiveData>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	81fb      	strh	r3, [r7, #14]

//	CS_HIGH;

	return recData;
 8001d32:	89fb      	ldrh	r3, [r7, #14]

}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40003800 	.word	0x40003800

08001d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d44:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d46:	e003      	b.n	8001d50 <LoopCopyDataInit>

08001d48 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001d4a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d4c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d4e:	3104      	adds	r1, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d50:	480b      	ldr	r0, [pc, #44]	; (8001d80 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001d54:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d56:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d58:	d3f6      	bcc.n	8001d48 <CopyDataInit>
	ldr	r2, =_sbss
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001d5c:	e002      	b.n	8001d64 <LoopFillZerobss>

08001d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d5e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d60:	f842 3b04 	str.w	r3, [r2], #4

08001d64 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001d66:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d68:	d3f9      	bcc.n	8001d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d6a:	f000 f82b 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f001 f9eb 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d72:	f7ff fe25 	bl	80019c0 <main>
	bx	lr
 8001d76:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d78:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001d7c:	08003264 	.word	0x08003264
	ldr	r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d84:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001d88:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001d8c:	200003c0 	.word	0x200003c0

08001d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d90:	e7fe      	b.n	8001d90 <ADC1_2_IRQHandler>

08001d92 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <HardFault_Handler+0x4>

08001da4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <MemManage_Handler+0x4>

08001daa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <SystemInit+0x5c>)
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <SystemInit+0x5c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001dd4:	4912      	ldr	r1, [pc, #72]	; (8001e20 <SystemInit+0x5c>)
 8001dd6:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <SystemInit+0x5c>)
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <SystemInit+0x60>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001de0:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <SystemInit+0x5c>)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <SystemInit+0x5c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <SystemInit+0x5c>)
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <SystemInit+0x5c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001dfc:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <SystemInit+0x5c>)
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <SystemInit+0x5c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e06:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SystemInit+0x5c>)
 8001e0a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e0e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001e10:	f000 f80c 	bl	8001e2c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SystemInit+0x64>)
 8001e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	f8ff0000 	.word	0xf8ff0000
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001e30:	f000 f802 	bl	8001e38 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001e48:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <SetSysClockTo72+0x38>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e6e:	d1f0      	bne.n	8001e52 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	e001      	b.n	8001e86 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e82:	2300      	movs	r3, #0
 8001e84:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d14b      	bne.n	8001f24 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001e8c:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <SetSysClockTo72+0xfc>)
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <SetSysClockTo72+0xfc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <SetSysClockTo72+0xfc>)
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <SetSysClockTo72+0xfc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <SetSysClockTo72+0xfc>)
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <SetSysClockTo72+0xfc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eca:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001ed6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001ee2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eee:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ef0:	bf00      	nop
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f9      	beq.n	8001ef2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 0303 	bic.w	r3, r3, #3
 8001f08:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001f16:	bf00      	nop
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SetSysClockTo72+0xf8>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d1f9      	bne.n	8001f18 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40022000 	.word	0x40022000

08001f38 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001f42:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001f46:	2100      	movs	r1, #0
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f001 f93b 	bl	80031c4 <memset>
	broker->net = broker_net;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2208      	movs	r2, #8
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f001 f925 	bl	80031c4 <memset>
	const uint8_t max_nb_bytes = 4;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8001f7e:	7c3b      	ldrb	r3, [r7, #16]
 8001f80:	461a      	mov	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	4413      	add	r3, r2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	7d7a      	ldrb	r2, [r7, #21]
 8001f8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f92:	7df9      	ldrb	r1, [r7, #23]
 8001f94:	fb01 f202 	mul.w	r2, r1, r2
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001f9c:	7dfb      	ldrb	r3, [r7, #23]
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8001fa2:	7c3b      	ldrb	r3, [r7, #16]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001faa:	7c3b      	ldrb	r3, [r7, #16]
 8001fac:	7dba      	ldrb	r2, [r7, #22]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d004      	beq.n	8001fbc <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8001fb2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	dbe1      	blt.n	8001f7e <decode_pck_len+0x20>
 8001fba:	e000      	b.n	8001fbe <decode_pck_len+0x60>
			break;
 8001fbc:	bf00      	nop
	return rem_length;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f107 030c 	add.w	r3, r7, #12
 8001fc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <broker_receive>:



bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8001fd6:	b590      	push	{r4, r7, lr}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001fe8:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	23f0      	movs	r3, #240	; 0xf0
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	47a0      	blx	r4
}
 8001ffc:	bf00      	nop
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}
	...

08002008 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 800200e:	af00      	add	r7, sp, #0
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	6018      	str	r0, [r3, #0]
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	6019      	str	r1, [r3, #0]
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 8002020:	f107 0308 	add.w	r3, r7, #8
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
	switch (pckt_type) {
 800202e:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 8002032:	3b01      	subs	r3, #1
 8002034:	2b0b      	cmp	r3, #11
 8002036:	f200 8146 	bhi.w	80022c6 <broker_packets_dispatcher+0x2be>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <broker_packets_dispatcher+0x38>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002071 	.word	0x08002071
 8002044:	080022c7 	.word	0x080022c7
 8002048:	08002149 	.word	0x08002149
 800204c:	080022c7 	.word	0x080022c7
 8002050:	080022c7 	.word	0x080022c7
 8002054:	080022c7 	.word	0x080022c7
 8002058:	080022c7 	.word	0x080022c7
 800205c:	080021ad 	.word	0x080021ad
 8002060:	080022c7 	.word	0x080022c7
 8002064:	08002271 	.word	0x08002271
 8002068:	080022c7 	.word	0x080022c7
 800206c:	080022b1 	.word	0x080022b1
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 8002070:	f107 0214 	add.w	r2, r7, #20
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	4611      	mov	r1, r2
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	f000 fa1d 	bl	80024ba <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 8002080:	f107 0214 	add.w	r2, r7, #20
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	4611      	mov	r1, r2
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	f000 fc00 	bl	8002890 <broker_validate_conn>
		bool sesion_present = false;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (was_clean_session_requested(&conn_pck)
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fc24 	bl	80028e8 <was_clean_session_requested>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d017      	beq.n	80020d6 <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4611      	mov	r1, r2
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f000 f966 	bl	8002384 <is_client_exist>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4611      	mov	r1, r2
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	f000 f98d 	bl	80023ea <broker_remove_client>
			sesion_present = true;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 80020d6:	f107 0214 	add.w	r2, r7, #20
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	4611      	mov	r1, r2
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	f000 fbd5 	bl	8002890 <broker_validate_conn>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	f107 0114 	add.w	r1, r7, #20
 80020f2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f000 fb42 	bl	8002780 <broker_create_new_client>
		add_client(broker, &new_client);
 80020fc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	4611      	mov	r1, r2
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f000 f9b1 	bl	800246e <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 800210c:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 8002110:	f897 127f 	ldrb.w	r1, [r7, #639]	; 0x27f
 8002114:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fb10 	bl	800273e <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002128:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800213c:	1d39      	adds	r1, r7, #4
 800213e:	2304      	movs	r3, #4
 8002140:	6809      	ldr	r1, [r1, #0]
 8002142:	47a0      	blx	r4
		break;
 8002144:	bf00      	nop
 8002146:	e0be      	b.n	80022c6 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 8002148:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	4611      	mov	r1, r2
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	f000 fbdc 	bl	8002910 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 8002158:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	4611      	mov	r1, r2
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	f000 fc40 	bl	80029e8 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8002168:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fc90 	bl	8002a9a <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 800217a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	f340 809c 	ble.w	80022c4 <broker_packets_dispatcher+0x2bc>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002196:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800219a:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800219e:	1d39      	adds	r1, r7, #4
 80021a0:	2304      	movs	r3, #4
 80021a2:	6809      	ldr	r1, [r1, #0]
 80021a4:	2000      	movs	r0, #0
 80021a6:	47a0      	blx	r4
		}
		break;
 80021a8:	bf00      	nop
 80021aa:	e08b      	b.n	80022c4 <broker_packets_dispatcher+0x2bc>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 80021ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	4611      	mov	r1, r2
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f000 fc8c 	bl	8002ad4 <broker_decode_subscribe>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 80021c2:	1d3a      	adds	r2, r7, #4
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	6811      	ldr	r1, [r2, #0]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	f000 f8a4 	bl	8002318 <broker_get_client_by_socket>
 80021d0:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		uint8_t sub_result[MAX_SUBS_TOPIC];
		if (subscribing_client){
 80021d4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00d      	beq.n	80021f8 <broker_packets_dispatcher+0x1f0>
			add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 80021dc:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80021e0:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 80021e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021e8:	f103 010c 	add.w	r1, r3, #12
 80021ec:	4603      	mov	r3, r0
 80021ee:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80021f2:	f000 fdd1 	bl	8002d98 <add_subscriptions_from_list>
 80021f6:	e016      	b.n	8002226 <broker_packets_dispatcher+0x21e>
		} else {
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 80021fe:	e00c      	b.n	800221a <broker_packets_dispatcher+0x212>
				sub_result[i] = SUB_ACK_FAIL;
 8002200:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8002204:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8002208:	4413      	add	r3, r2
 800220a:	2250      	movs	r2, #80	; 0x50
 800220c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8002210:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8002214:	3301      	adds	r3, #1
 8002216:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 800221a:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 800221e:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8002222:	429a      	cmp	r2, r3
 8002224:	d3ec      	bcc.n	8002200 <broker_packets_dispatcher+0x1f8>
			}
		}
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 8002226:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	8819      	ldrh	r1, [r3, #0]
 800222e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002232:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 8002236:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800223a:	f000 fe39 	bl	8002eb0 <encode_subscribe_ack>
		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&sub_ack, (SUB_ACK_ALL_HEAD_LEN + topic_nb));
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002248:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 800225c:	b29b      	uxth	r3, r3
 800225e:	3304      	adds	r3, #4
 8002260:	b29b      	uxth	r3, r3
 8002262:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8002266:	1d39      	adds	r1, r7, #4
 8002268:	6809      	ldr	r1, [r1, #0]
 800226a:	47a0      	blx	r4
		break;
 800226c:	bf00      	nop
 800226e:	e02a      	b.n	80022c6 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 8002270:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	4611      	mov	r1, r2
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	f000 fe40 	bl	8002f00 <broker_decode_unsubscribe>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8002286:	1d3a      	adds	r2, r7, #4
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	6811      	ldr	r1, [r2, #0]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	f000 f842 	bl	8002318 <broker_get_client_by_socket>
 8002294:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 8002298:	f897 2273 	ldrb.w	r2, [r7, #627]	; 0x273
 800229c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022a0:	330c      	adds	r3, #12
 80022a2:	4619      	mov	r1, r3
 80022a4:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80022a8:	f000 ff13 	bl	80030d2 <delete_listed_subscriptions>
		break;
 80022ac:	bf00      	nop
 80022ae:	e00a      	b.n	80022c6 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 80022b0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80022b4:	f107 0308 	add.w	r3, r7, #8
 80022b8:	4611      	mov	r1, r2
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	f000 ff2b 	bl	8003116 <broker_decode_ping_req>
		break;
 80022c0:	bf00      	nop
 80022c2:	e000      	b.n	80022c6 <broker_packets_dispatcher+0x2be>
		break;
 80022c4:	bf00      	nop
	}
	}
}
 80022c6:	bf00      	nop
 80022c8:	f507 7721 	add.w	r7, r7, #644	; 0x284
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}

080022d0 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e013      	b.n	8002308 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	3310      	adds	r3, #16
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fd ff2c 	bl	8000150 <strcmp>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <broker_get_client_pos_by_id+0x32>
			return i;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	e006      	b.n	8002310 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3301      	adds	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b07      	cmp	r3, #7
 800230c:	d9e8      	bls.n	80022e0 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 800230e:	23ff      	movs	r3, #255	; 0xff
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e025      	b.n	8002374 <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d016      	beq.n	800236e <broker_get_client_by_socket+0x56>
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	2210      	movs	r2, #16
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 ff1c 	bl	8003190 <memcmp>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d107      	bne.n	800236e <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002364:	fb02 f303 	mul.w	r3, r2, r3
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	e006      	b.n	800237c <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b07      	cmp	r3, #7
 8002378:	d9d6      	bls.n	8002328 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 800238e:	6839      	ldr	r1, [r7, #0]
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff9d 	bl	80022d0 <broker_get_client_pos_by_id>
 8002396:	4603      	mov	r3, r0
 8002398:	2bff      	cmp	r3, #255	; 0xff
 800239a:	d001      	beq.n	80023a0 <is_client_exist+0x1c>
		return true;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <is_client_exist+0x1e>
	}
	return false;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e00f      	b.n	80023d8 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3310      	adds	r3, #16
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <can_broker_accept_next_client+0x28>
			return true;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e006      	b.n	80023e0 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	3301      	adds	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b07      	cmp	r3, #7
 80023dc:	d9ec      	bls.n	80023b8 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr

080023ea <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 80023f4:	6839      	ldr	r1, [r7, #0]
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ff6a 	bl	80022d0 <broker_get_client_pos_by_id>
 80023fc:	4603      	mov	r3, r0
 80023fe:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d00e      	beq.n	8002424 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fed2 	bl	80031c4 <memset>
		return true;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <broker_remove_client+0x3c>
	}
	return false;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	e00f      	b.n	800245c <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3310      	adds	r3, #16
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <broker_first_free_pos_for_client+0x28>
			return i;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	e006      	b.n	8002464 <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	3301      	adds	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b07      	cmp	r3, #7
 8002460:	d9ec      	bls.n	800243c <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8002462:	23ff      	movs	r3, #255	; 0xff
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ffd8 	bl	800242e <broker_first_free_pos_for_client>
 800247e:	4603      	mov	r3, r0
 8002480:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fe89 	bl	80031ae <memcpy>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	return true;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	441a      	add	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	601a      	str	r2, [r3, #0]
	pos ++;
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	3301      	adds	r3, #1
 80024d6:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80024d8:	7dfb      	ldrb	r3, [r7, #23]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	441a      	add	r2, r3
 80024de:	f107 030c 	add.w	r3, r7, #12
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fd3a 	bl	8001f5e <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80024f0:	7c3a      	ldrb	r2, [r7, #16]
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	4413      	add	r3, r2
 80024f6:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	441a      	add	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	0a12      	lsrs	r2, r2, #8
 800250e:	b292      	uxth	r2, r2
 8002510:	b211      	sxth	r1, r2
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	6892      	ldr	r2, [r2, #8]
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	0212      	lsls	r2, r2, #8
 800251a:	b212      	sxth	r2, r2
 800251c:	430a      	orrs	r2, r1
 800251e:	b212      	sxth	r2, r2
 8002520:	b292      	uxth	r2, r2
 8002522:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	3302      	adds	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 800252a:	7dfb      	ldrb	r3, [r7, #23]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	441a      	add	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	4413      	add	r3, r2
 8002540:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	441a      	add	r2, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	611a      	str	r2, [r3, #16]
	pos += 1;
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	3301      	adds	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	441a      	add	r2, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	615a      	str	r2, [r3, #20]
	pos += 1;
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	3301      	adds	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	441a      	add	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6992      	ldr	r2, [r2, #24]
 8002574:	8812      	ldrh	r2, [r2, #0]
 8002576:	0a12      	lsrs	r2, r2, #8
 8002578:	b292      	uxth	r2, r2
 800257a:	b211      	sxth	r1, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	6992      	ldr	r2, [r2, #24]
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	0212      	lsls	r2, r2, #8
 8002584:	b212      	sxth	r2, r2
 8002586:	430a      	orrs	r2, r1
 8002588:	b212      	sxth	r2, r2
 800258a:	b292      	uxth	r2, r2
 800258c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	3302      	adds	r3, #2
 8002592:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	441a      	add	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	69d2      	ldr	r2, [r2, #28]
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	0a12      	lsrs	r2, r2, #8
 80025aa:	b292      	uxth	r2, r2
 80025ac:	b211      	sxth	r1, r2
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	69d2      	ldr	r2, [r2, #28]
 80025b2:	8812      	ldrh	r2, [r2, #0]
 80025b4:	0212      	lsls	r2, r2, #8
 80025b6:	b212      	sxth	r2, r2
 80025b8:	430a      	orrs	r2, r1
 80025ba:	b212      	sxth	r2, r2
 80025bc:	b292      	uxth	r2, r2
 80025be:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	3302      	adds	r3, #2
 80025c4:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	441a      	add	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	4413      	add	r3, r2
 80025dc:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d049      	beq.n	8002682 <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	441a      	add	r2, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	0a12      	lsrs	r2, r2, #8
 8002604:	b292      	uxth	r2, r2
 8002606:	b211      	sxth	r1, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	0212      	lsls	r2, r2, #8
 8002610:	b212      	sxth	r2, r2
 8002612:	430a      	orrs	r2, r1
 8002614:	b212      	sxth	r2, r2
 8002616:	b292      	uxth	r2, r2
 8002618:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	3302      	adds	r3, #2
 800261e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	441a      	add	r2, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	4413      	add	r3, r2
 8002636:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	441a      	add	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800264a:	8812      	ldrh	r2, [r2, #0]
 800264c:	0a12      	lsrs	r2, r2, #8
 800264e:	b292      	uxth	r2, r2
 8002650:	b211      	sxth	r1, r2
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002656:	8812      	ldrh	r2, [r2, #0]
 8002658:	0212      	lsls	r2, r2, #8
 800265a:	b212      	sxth	r2, r2
 800265c:	430a      	orrs	r2, r1
 800265e:	b212      	sxth	r2, r2
 8002660:	b292      	uxth	r2, r2
 8002662:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	3302      	adds	r3, #2
 8002668:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	441a      	add	r2, r3
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	4413      	add	r3, r2
 8002680:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d024      	beq.n	80026dc <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	441a      	add	r2, r3
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	0a12      	lsrs	r2, r2, #8
 80026a8:	b292      	uxth	r2, r2
 80026aa:	b211      	sxth	r1, r2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	0212      	lsls	r2, r2, #8
 80026b4:	b212      	sxth	r2, r2
 80026b6:	430a      	orrs	r2, r1
 80026b8:	b212      	sxth	r2, r2
 80026ba:	b292      	uxth	r2, r2
 80026bc:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	3302      	adds	r3, #2
 80026c2:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 80026c4:	7dfb      	ldrb	r3, [r7, #23]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	441a      	add	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	4413      	add	r3, r2
 80026da:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d024      	beq.n	8002736 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	441a      	add	r2, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026fe:	8812      	ldrh	r2, [r2, #0]
 8002700:	0a12      	lsrs	r2, r2, #8
 8002702:	b292      	uxth	r2, r2
 8002704:	b211      	sxth	r1, r2
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	0212      	lsls	r2, r2, #8
 800270e:	b212      	sxth	r2, r2
 8002710:	430a      	orrs	r2, r1
 8002712:	b212      	sxth	r2, r2
 8002714:	b292      	uxth	r2, r2
 8002716:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	3302      	adds	r3, #2
 800271c:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	441a      	add	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	4413      	add	r3, r2
 8002734:	75fb      	strb	r3, [r7, #23]
	}
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	70fb      	strb	r3, [r7, #3]
 800274a:	4613      	mov	r3, r2
 800274c:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 800274e:	2204      	movs	r2, #4
 8002750:	2100      	movs	r1, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fd36 	bl	80031c4 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	7893      	ldrb	r3, [r2, #2]
 8002768:	78f9      	ldrb	r1, [r7, #3]
 800276a:	f361 0300 	bfi	r3, r1, #0, #1
 800276e:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	78ba      	ldrb	r2, [r7, #2]
 8002774:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 800278c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002790:	2100      	movs	r1, #0
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fd16 	bl	80031c4 <memset>
	memcpy(&new_client->sockaddr, sockaddr, sizeof (sockaddr_t));
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2210      	movs	r2, #16
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fd05 	bl	80031ae <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f103 0010 	add.w	r0, r3, #16
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6a19      	ldr	r1, [r3, #32]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	f000 fd1f 	bl	80031f8 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	881a      	ldrh	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d023      	beq.n	8002834 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f103 0073 	add.w	r0, r3, #115	; 0x73
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	f000 fcf7 	bl	80031f8 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 fcec 	bl	80031f8 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f103 0032 	add.w	r0, r3, #50	; 0x32
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	f000 fccf 	bl	80031f8 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f103 0052 	add.w	r0, r3, #82	; 0x52
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 fcbc 	bl	80031f8 <strncpy>
	}

	new_client->connected = true;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d001      	beq.n	80028a8 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e01b      	b.n	80028e0 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fd7e 	bl	80023aa <can_broker_accept_next_client>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e010      	b.n	80028e0 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7ff fdeb 	bl	80024a4 <is_client_authorised>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 80028da:	2305      	movs	r3, #5
 80028dc:	e000      	b.n	80028e0 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 80028de:	2300      	movs	r3, #0
	}
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	601a      	str	r2, [r3, #0]
	pos ++;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	3301      	adds	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	441a      	add	r2, r3
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fb11 	bl	8001f5e <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002942:	7c3a      	ldrb	r2, [r7, #16]
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	4413      	add	r3, r2
 8002948:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	441a      	add	r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	6892      	ldr	r2, [r2, #8]
 800295c:	8812      	ldrh	r2, [r2, #0]
 800295e:	0a12      	lsrs	r2, r2, #8
 8002960:	b292      	uxth	r2, r2
 8002962:	b211      	sxth	r1, r2
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	8812      	ldrh	r2, [r2, #0]
 800296a:	0212      	lsls	r2, r2, #8
 800296c:	b212      	sxth	r2, r2
 800296e:	430a      	orrs	r2, r1
 8002970:	b212      	sxth	r2, r2
 8002972:	b292      	uxth	r2, r2
 8002974:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	3302      	adds	r3, #2
 800297a:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	441a      	add	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	4413      	add	r3, r2
 8002992:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	dd18      	ble.n	80029d6 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	441a      	add	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	6912      	ldr	r2, [r2, #16]
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	0a12      	lsrs	r2, r2, #8
 80029ba:	b292      	uxth	r2, r2
 80029bc:	b211      	sxth	r1, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6912      	ldr	r2, [r2, #16]
 80029c2:	8812      	ldrh	r2, [r2, #0]
 80029c4:	0212      	lsls	r2, r2, #8
 80029c6:	b212      	sxth	r2, r2
 80029c8:	430a      	orrs	r2, r1
 80029ca:	b212      	sxth	r2, r2
 80029cc:	b292      	uxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	3302      	adds	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	441a      	add	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	615a      	str	r2, [r3, #20]
}
 80029e0:	bf00      	nop
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	e049      	b.n	8002a8c <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03a      	beq.n	8002a86 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8002a10:	2300      	movs	r3, #0
 8002a12:	73bb      	strb	r3, [r7, #14]
 8002a14:	e034      	b.n	8002a80 <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 8002a24:	7bf9      	ldrb	r1, [r7, #15]
 8002a26:	7bba      	ldrb	r2, [r7, #14]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002a34:	fb02 f201 	mul.w	r2, r2, r1
 8002a38:	4413      	add	r3, r2
 8002a3a:	33b0      	adds	r3, #176	; 0xb0
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3308      	adds	r3, #8
 8002a42:	89ba      	ldrh	r2, [r7, #12]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fbc4 	bl	80031d4 <strncmp>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d013      	beq.n	8002a7a <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002a58:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	18d1      	adds	r1, r2, r3
 8002a72:	463a      	mov	r2, r7
 8002a74:	2318      	movs	r3, #24
 8002a76:	47a0      	blx	r4
					break;
 8002a78:	e005      	b.n	8002a86 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	73bb      	strb	r3, [r7, #14]
 8002a80:	7bbb      	ldrb	r3, [r7, #14]
 8002a82:	2b07      	cmp	r3, #7
 8002a84:	d9c7      	bls.n	8002a16 <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	2b07      	cmp	r3, #7
 8002a90:	d9b2      	bls.n	80029f8 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}

08002a9a <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2240      	movs	r2, #64	; 0x40
 8002aaa:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = X_HTONS(pckt_id);
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	b21b      	sxth	r3, r3
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	b21b      	sxth	r3, r3
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	805a      	strh	r2, [r3, #2]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	601a      	str	r2, [r3, #0]
	pos++;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	3301      	adds	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	441a      	add	r2, r3
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fa2f 	bl	8001f5e <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002b06:	7c3a      	ldrb	r2, [r7, #16]
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	441a      	add	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	6892      	ldr	r2, [r2, #8]
 8002b20:	8812      	ldrh	r2, [r2, #0]
 8002b22:	0a12      	lsrs	r2, r2, #8
 8002b24:	b292      	uxth	r2, r2
 8002b26:	b211      	sxth	r1, r2
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	0212      	lsls	r2, r2, #8
 8002b30:	b212      	sxth	r2, r2
 8002b32:	430a      	orrs	r2, r1
 8002b34:	b212      	sxth	r2, r2
 8002b36:	b292      	uxth	r2, r2
 8002b38:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002b40:	2302      	movs	r3, #2
 8002b42:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002b48:	e060      	b.n	8002c0c <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002b4a:	7dba      	ldrb	r2, [r7, #22]
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4419      	add	r1, r3
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4403      	add	r3, r0
 8002b5e:	330c      	adds	r3, #12
 8002b60:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 8002b62:	7dba      	ldrb	r2, [r7, #22]
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	330c      	adds	r3, #12
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	7dba      	ldrb	r2, [r7, #22]
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	330c      	adds	r3, #12
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b218      	sxth	r0, r3
 8002b8e:	7dba      	ldrb	r2, [r7, #22]
 8002b90:	683c      	ldr	r4, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4423      	add	r3, r4
 8002b9c:	330c      	adds	r3, #12
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	4303      	orrs	r3, r0
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8002bb4:	7dba      	ldrb	r2, [r7, #22]
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4419      	add	r1, r3
 8002bbc:	6838      	ldr	r0, [r7, #0]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4403      	add	r3, r0
 8002bc8:	3310      	adds	r3, #16
 8002bca:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 8002bcc:	7dba      	ldrb	r2, [r7, #22]
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	330c      	adds	r3, #12
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	4413      	add	r3, r2
 8002be6:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002be8:	7dba      	ldrb	r2, [r7, #22]
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4419      	add	r1, r3
 8002bf0:	6838      	ldr	r0, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4403      	add	r3, r0
 8002bfc:	3314      	adds	r3, #20
 8002bfe:	6019      	str	r1, [r3, #0]
		pos += 1;
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	3301      	adds	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8002c06:	7dbb      	ldrb	r3, [r7, #22]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8002c0c:	7dfa      	ldrb	r2, [r7, #23]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	7d7b      	ldrb	r3, [r7, #21]
 8002c14:	440b      	add	r3, r1
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d397      	bcc.n	8002b4a <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 8002c1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 faa9 	bl	8003190 <memcmp>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <is_the_same_topic+0x24>
		return true;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <is_the_same_topic+0x26>
	}
	return false;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002c60:	2300      	movs	r3, #0
 8002c62:	75fb      	strb	r3, [r7, #23]
 8002c64:	e020      	b.n	8002ca8 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8002c66:	7dfa      	ldrb	r2, [r7, #23]
 8002c68:	68f9      	ldr	r1, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	33b8      	adds	r3, #184	; 0xb8
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d012      	beq.n	8002ca2 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 8002c7c:	7dfa      	ldrb	r2, [r7, #23]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	33b0      	adds	r3, #176	; 0xb0
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	79fa      	ldrb	r2, [r7, #7]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ffc6 	bl	8002c24 <is_the_same_topic>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <get_subscribed_topic_pos+0x50>
			return i;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	e006      	b.n	8002cb0 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b07      	cmp	r3, #7
 8002cac:	d9db      	bls.n	8002c66 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 8002cae:	23ff      	movs	r3, #255	; 0xff
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e00f      	b.n	8002d04 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	33b8      	adds	r3, #184	; 0xb8
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	e006      	b.n	8002d0c <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3301      	adds	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b07      	cmp	r3, #7
 8002d08:	d9ec      	bls.n	8002ce4 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 8002d0a:	23ff      	movs	r3, #255	; 0xff
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ffd8 	bl	8002cd6 <find_first_free_slot_for_subs_topic>
 8002d26:	4603      	mov	r3, r0
 8002d28:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2bff      	cmp	r3, #255	; 0xff
 8002d2e:	d02e      	beq.n	8002d8e <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	33b0      	adds	r3, #176	; 0xb0
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f103 0008 	add.w	r0, r3, #8
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6859      	ldr	r1, [r3, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 fa2d 	bl	80031ae <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	33b0      	adds	r3, #176	; 0xb0
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	3306      	adds	r3, #6
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	33d0      	adds	r3, #208	; 0xd0
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	3308      	adds	r3, #8
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	6892      	ldr	r2, [r2, #8]
 8002d86:	7812      	ldrb	r2, [r2, #0]
 8002d88:	701a      	strb	r2, [r3, #0]
		return true;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <add_new_subscription_to_client+0x7a>
	}
	return false;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8002dac:	e077      	b.n	8002e9e <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 8002dae:	7dfa      	ldrb	r2, [r7, #23]
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	7dfa      	ldrb	r2, [r7, #23]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff ff3a 	bl	8002c52 <get_subscribed_topic_pos>
 8002dde:	4603      	mov	r3, r0
 8002de0:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){ //reverse if & else
 8002de2:	7d7b      	ldrb	r3, [r7, #21]
 8002de4:	2bff      	cmp	r3, #255	; 0xff
 8002de6:	d024      	beq.n	8002e32 <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 8002de8:	7d7a      	ldrb	r2, [r7, #21]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	33b0      	adds	r3, #176	; 0xb0
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	1d98      	adds	r0, r3, #6
 8002dfa:	7dfa      	ldrb	r2, [r7, #23]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4413      	add	r3, r2
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f7ff ff52 	bl	8002cb8 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos; //refactor, extract doubled code
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	18d1      	adds	r1, r2, r3
 8002e1a:	7dfa      	ldrb	r2, [r7, #23]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4413      	add	r3, r2
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	700b      	strb	r3, [r1, #0]
 8002e30:	e032      	b.n	8002e98 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 8002e32:	7dfa      	ldrb	r2, [r7, #23]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff66 	bl	8002d16 <add_new_subscription_to_client>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	18d1      	adds	r1, r2, r3
 8002e54:	7dfa      	ldrb	r2, [r7, #23]
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4413      	add	r3, r2
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	700b      	strb	r3, [r1, #0]
			if (!res){
 8002e6a:	7d3b      	ldrb	r3, [r7, #20]
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d010      	beq.n	8002e98 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	75bb      	strb	r3, [r7, #22]
 8002e7a:	e007      	b.n	8002e8c <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 8002e7c:	7dbb      	ldrb	r3, [r7, #22]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	4413      	add	r3, r2
 8002e82:	2250      	movs	r2, #80	; 0x50
 8002e84:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8002e86:	7dbb      	ldrb	r3, [r7, #22]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	75bb      	strb	r3, [r7, #22]
 8002e8c:	7dba      	ldrb	r2, [r7, #22]
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3f3      	bcc.n	8002e7c <add_subscriptions_from_list+0xe4>
				}
			return false;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e007      	b.n	8002ea8 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8002e9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d383      	bcc.n	8002dae <add_subscriptions_from_list+0x16>
	}
	return true;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	817b      	strh	r3, [r7, #10]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2290      	movs	r2, #144	; 0x90
 8002ec6:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_VAR_HEAD_LEN + topic_nb;  //(?)
 8002ec8:	7a7b      	ldrb	r3, [r7, #9]
 8002eca:	3302      	adds	r3, #2
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = X_HTONS(pckt_id);
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	b21a      	sxth	r2, r3
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b21b      	sxth	r3, r3
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3304      	adds	r3, #4
 8002eee:	7a7a      	ldrb	r2, [r7, #9]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f95b 	bl	80031ae <memcpy>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
	pos++;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	3301      	adds	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	441a      	add	r2, r3
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f819 	bl	8001f5e <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8002f32:	7c3a      	ldrb	r2, [r7, #16]
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	4413      	add	r3, r2
 8002f38:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	441a      	add	r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	8812      	ldrh	r2, [r2, #0]
 8002f4e:	0a12      	lsrs	r2, r2, #8
 8002f50:	b292      	uxth	r2, r2
 8002f52:	b211      	sxth	r1, r2
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	6892      	ldr	r2, [r2, #8]
 8002f58:	8812      	ldrh	r2, [r2, #0]
 8002f5a:	0212      	lsls	r2, r2, #8
 8002f5c:	b212      	sxth	r2, r2
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	b212      	sxth	r2, r2
 8002f62:	b292      	uxth	r2, r2
 8002f64:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	3302      	adds	r3, #2
 8002f6a:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8002f74:	e060      	b.n	8003038 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002f76:	7dba      	ldrb	r2, [r7, #22]
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4419      	add	r1, r3
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 8002f8e:	7dba      	ldrb	r2, [r7, #22]
 8002f90:	6839      	ldr	r1, [r7, #0]
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	7dba      	ldrb	r2, [r7, #22]
 8002fa2:	6838      	ldr	r0, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4403      	add	r3, r0
 8002fae:	330c      	adds	r3, #12
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	b218      	sxth	r0, r3
 8002fba:	7dba      	ldrb	r2, [r7, #22]
 8002fbc:	683c      	ldr	r4, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4423      	add	r3, r4
 8002fc8:	330c      	adds	r3, #12
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	b21b      	sxth	r3, r3
 8002fd2:	4303      	orrs	r3, r0
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8002fe0:	7dba      	ldrb	r2, [r7, #22]
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4419      	add	r1, r3
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4403      	add	r3, r0
 8002ff4:	3310      	adds	r3, #16
 8002ff6:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 8002ff8:	7dba      	ldrb	r2, [r7, #22]
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	330c      	adds	r3, #12
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	4413      	add	r3, r2
 8003012:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8003014:	7dba      	ldrb	r2, [r7, #22]
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4419      	add	r1, r3
 800301c:	6838      	ldr	r0, [r7, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3314      	adds	r3, #20
 800302a:	6019      	str	r1, [r3, #0]
		pos += 1;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
 800302e:	3301      	adds	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8003032:	7dbb      	ldrb	r3, [r7, #22]
 8003034:	3301      	adds	r3, #1
 8003036:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8003038:	7dfa      	ldrb	r2, [r7, #23]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	7d7b      	ldrb	r3, [r7, #21]
 8003040:	440b      	add	r3, r1
 8003042:	429a      	cmp	r2, r3
 8003044:	d397      	bcc.n	8002f76 <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 8003046:	7dbb      	ldrb	r3, [r7, #22]
}
 8003048:	4618      	mov	r0, r3
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}

08003050 <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e031      	b.n	80030c4 <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	33b8      	adds	r3, #184	; 0xb8
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d023      	beq.n	80030be <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	33b0      	adds	r3, #176	; 0xb0
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	f103 0008 	add.w	r0, r3, #8
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	f7ff fdc4 	bl	8002c24 <is_the_same_topic>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	33b0      	adds	r3, #176	; 0xb0
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	3306      	adds	r3, #6
 80030b4:	2224      	movs	r2, #36	; 0x24
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f883 	bl	80031c4 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	3301      	adds	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b07      	cmp	r3, #7
 80030c8:	d9ca      	bls.n	8003060 <delete_subscribed_topic+0x10>
		}
	}
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80030e4:	e00e      	b.n	8003104 <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 80030e6:	7dfa      	ldrb	r2, [r7, #23]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	461a      	mov	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4413      	add	r3, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ffa9 	bl	8003050 <delete_subscribed_topic>
		i++;
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	3301      	adds	r3, #1
 8003102:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8003104:	7dfa      	ldrb	r2, [r7, #23]
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3ec      	bcc.n	80030e6 <delete_listed_subscriptions+0x14>
	}
	return true;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	441a      	add	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]
	pos++;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	3301      	adds	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	441a      	add	r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	2500      	movs	r5, #0
 800314c:	4e0c      	ldr	r6, [pc, #48]	; (8003180 <__libc_init_array+0x38>)
 800314e:	4c0d      	ldr	r4, [pc, #52]	; (8003184 <__libc_init_array+0x3c>)
 8003150:	1ba4      	subs	r4, r4, r6
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	42a5      	cmp	r5, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	f000 f864 	bl	8003224 <_init>
 800315c:	2500      	movs	r5, #0
 800315e:	4e0a      	ldr	r6, [pc, #40]	; (8003188 <__libc_init_array+0x40>)
 8003160:	4c0a      	ldr	r4, [pc, #40]	; (800318c <__libc_init_array+0x44>)
 8003162:	1ba4      	subs	r4, r4, r6
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	42a5      	cmp	r5, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003170:	4798      	blx	r3
 8003172:	3501      	adds	r5, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800317a:	4798      	blx	r3
 800317c:	3501      	adds	r5, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	0800325c 	.word	0x0800325c
 8003184:	0800325c 	.word	0x0800325c
 8003188:	0800325c 	.word	0x0800325c
 800318c:	08003260 	.word	0x08003260

08003190 <memcmp>:
 8003190:	b510      	push	{r4, lr}
 8003192:	3901      	subs	r1, #1
 8003194:	4402      	add	r2, r0
 8003196:	4290      	cmp	r0, r2
 8003198:	d101      	bne.n	800319e <memcmp+0xe>
 800319a:	2000      	movs	r0, #0
 800319c:	bd10      	pop	{r4, pc}
 800319e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80031a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80031a6:	42a3      	cmp	r3, r4
 80031a8:	d0f5      	beq.n	8003196 <memcmp+0x6>
 80031aa:	1b18      	subs	r0, r3, r4
 80031ac:	bd10      	pop	{r4, pc}

080031ae <memcpy>:
 80031ae:	b510      	push	{r4, lr}
 80031b0:	1e43      	subs	r3, r0, #1
 80031b2:	440a      	add	r2, r1
 80031b4:	4291      	cmp	r1, r2
 80031b6:	d100      	bne.n	80031ba <memcpy+0xc>
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031c2:	e7f7      	b.n	80031b4 <memcpy+0x6>

080031c4 <memset>:
 80031c4:	4603      	mov	r3, r0
 80031c6:	4402      	add	r2, r0
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d100      	bne.n	80031ce <memset+0xa>
 80031cc:	4770      	bx	lr
 80031ce:	f803 1b01 	strb.w	r1, [r3], #1
 80031d2:	e7f9      	b.n	80031c8 <memset+0x4>

080031d4 <strncmp>:
 80031d4:	b510      	push	{r4, lr}
 80031d6:	b16a      	cbz	r2, 80031f4 <strncmp+0x20>
 80031d8:	3901      	subs	r1, #1
 80031da:	1884      	adds	r4, r0, r2
 80031dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80031e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <strncmp+0x1c>
 80031e8:	42a0      	cmp	r0, r4
 80031ea:	d001      	beq.n	80031f0 <strncmp+0x1c>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f5      	bne.n	80031dc <strncmp+0x8>
 80031f0:	1a98      	subs	r0, r3, r2
 80031f2:	bd10      	pop	{r4, pc}
 80031f4:	4610      	mov	r0, r2
 80031f6:	bd10      	pop	{r4, pc}

080031f8 <strncpy>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	b902      	cbnz	r2, 8003200 <strncpy+0x8>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	4623      	mov	r3, r4
 8003202:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003206:	1e56      	subs	r6, r2, #1
 8003208:	f803 5b01 	strb.w	r5, [r3], #1
 800320c:	b91d      	cbnz	r5, 8003216 <strncpy+0x1e>
 800320e:	4414      	add	r4, r2
 8003210:	42a3      	cmp	r3, r4
 8003212:	d103      	bne.n	800321c <strncpy+0x24>
 8003214:	bd70      	pop	{r4, r5, r6, pc}
 8003216:	461c      	mov	r4, r3
 8003218:	4632      	mov	r2, r6
 800321a:	e7ef      	b.n	80031fc <strncpy+0x4>
 800321c:	f803 5b01 	strb.w	r5, [r3], #1
 8003220:	e7f6      	b.n	8003210 <strncpy+0x18>
	...

08003224 <_init>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr

08003230 <_fini>:
 8003230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003232:	bf00      	nop
 8003234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003236:	bc08      	pop	{r3}
 8003238:	469e      	mov	lr, r3
 800323a:	4770      	bx	lr
