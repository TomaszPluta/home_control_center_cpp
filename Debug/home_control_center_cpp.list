
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00012b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b8  20000000  08002b00  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200003b8  08002b00  000203b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012b00  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000abad  00000000  00000000  00012b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ec0  00000000  00000000  0001d6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000950  00000000  00000000  0001f598  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000860  00000000  00000000  0001fee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003db5  00000000  00000000  00020748  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003601  00000000  00000000  000244fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027afe  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002580  00000000  00000000  00027b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002a0fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ac0 	.word	0x08002ac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	08002ac0 	.word	0x08002ac0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
 800016c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	685b      	ldr	r3, [r3, #4]
 8000172:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	689a      	ldr	r2, [r3, #8]
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	689b      	ldr	r3, [r3, #8]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	683a      	ldr	r2, [r7, #0]
 800018e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1c5a      	adds	r2, r3, #1
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001aa:	b480      	push	{r7}
 80001ac:	b085      	sub	sp, #20
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	691b      	ldr	r3, [r3, #16]
 80001b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	6892      	ldr	r2, [r2, #8]
 80001c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	6852      	ldr	r2, [r2, #4]
 80001ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d103      	bne.n	80001de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689a      	ldr	r2, [r3, #8]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	1e5a      	subs	r2, r3, #1
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	681b      	ldr	r3, [r3, #0]
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <pxCurrentTCBConst2>)
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	6808      	ldr	r0, [r1, #0]
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800020a:	f380 8809 	msr	PSP, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f04f 0000 	mov.w	r0, #0
 8000216:	f380 8811 	msr	BASEPRI, r0
 800021a:	f04e 0e0d 	orr.w	lr, lr, #13
 800021e:	4770      	bx	lr

08000220 <pxCurrentTCBConst2>:
 8000220:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
	...

08000230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000230:	f3ef 8009 	mrs	r0, PSP
 8000234:	f3bf 8f6f 	isb	sy
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pxCurrentTCBConst>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000240:	6010      	str	r0, [r2, #0]
 8000242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000246:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800024a:	f380 8811 	msr	BASEPRI, r0
 800024e:	f000 f8df 	bl	8000410 <vTaskSwitchContext>
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	f380 8811 	msr	BASEPRI, r0
 800025a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025e:	6819      	ldr	r1, [r3, #0]
 8000260:	6808      	ldr	r0, [r1, #0]
 8000262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000266:	f380 8809 	msr	PSP, r0
 800026a:	f3bf 8f6f 	isb	sy
 800026e:	4770      	bx	lr

08000270 <pxCurrentTCBConst>:
 8000270:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop

08000278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800027e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000282:	f383 8811 	msr	BASEPRI, r3
 8000286:	f3bf 8f6f 	isb	sy
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000290:	f000 f812 	bl	80002b8 <xTaskIncrementTick>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SysTick_Handler+0x3c>)
 800029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000ed04 	.word	0xe000ed04

080002b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002c2:	4b48      	ldr	r3, [pc, #288]	; (80003e4 <xTaskIncrementTick+0x12c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d17c      	bne.n	80003c4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ca:	4b47      	ldr	r3, [pc, #284]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002d2:	4a45      	ldr	r2, [pc, #276]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d110      	bne.n	8000300 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002de:	4b43      	ldr	r3, [pc, #268]	; (80003ec <xTaskIncrementTick+0x134>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <xTaskIncrementTick+0x134>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	4b40      	ldr	r3, [pc, #256]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a3e      	ldr	r2, [pc, #248]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	f000 f8ce 	bl	800049c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	693a      	ldr	r2, [r7, #16]
 8000306:	429a      	cmp	r2, r3
 8000308:	d34d      	bcc.n	80003a6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <xTaskIncrementTick+0x134>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <xTaskIncrementTick+0x60>
 8000314:	2301      	movs	r3, #1
 8000316:	e000      	b.n	800031a <xTaskIncrementTick+0x62>
 8000318:	2300      	movs	r3, #0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d004      	beq.n	8000328 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800031e:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000324:	601a      	str	r2, [r3, #0]
					break;
 8000326:	e03e      	b.n	80003a6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <xTaskIncrementTick+0x134>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	d203      	bcs.n	8000348 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000340:	4a2d      	ldr	r2, [pc, #180]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6013      	str	r3, [r2, #0]
						break;
 8000346:	e02e      	b.n	80003a6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3304      	adds	r3, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff2c 	bl	80001aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	2b00      	cmp	r3, #0
 8000358:	d004      	beq.n	8000364 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3318      	adds	r3, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff23 	bl	80001aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	2201      	movs	r2, #1
 800036a:	409a      	lsls	r2, r3
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <xTaskIncrementTick+0x144>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <xTaskIncrementTick+0x144>)
 8000374:	6013      	str	r3, [r2, #0]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4a1f      	ldr	r2, [pc, #124]	; (8000400 <xTaskIncrementTick+0x148>)
 8000384:	441a      	add	r2, r3
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	3304      	adds	r3, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4610      	mov	r0, r2
 800038e:	f7ff fee9 	bl	8000164 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039c:	429a      	cmp	r2, r3
 800039e:	d3b4      	bcc.n	800030a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003a4:	e7b1      	b.n	800030a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ac:	4914      	ldr	r1, [pc, #80]	; (8000400 <xTaskIncrementTick+0x148>)
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d907      	bls.n	80003ce <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e004      	b.n	80003ce <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <xTaskIncrementTick+0x150>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <xTaskIncrementTick+0x150>)
 80003cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <xTaskIncrementTick+0x154>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003da:	697b      	ldr	r3, [r7, #20]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200000a4 	.word	0x200000a4
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	20000084 	.word	0x20000084
 80003f0:	20000088 	.word	0x20000088
 80003f4:	2000009c 	.word	0x2000009c
 80003f8:	200000a0 	.word	0x200000a0
 80003fc:	20000090 	.word	0x20000090
 8000400:	20000020 	.word	0x20000020
 8000404:	2000001c 	.word	0x2000001c
 8000408:	20000094 	.word	0x20000094
 800040c:	20000098 	.word	0x20000098

08000410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <vTaskSwitchContext+0x78>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <vTaskSwitchContext+0x7c>)
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000424:	e02a      	b.n	800047c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <vTaskSwitchContext+0x7c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <vTaskSwitchContext+0x80>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	fab3 f383 	clz	r3, r3
 8000438:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	f1c3 031f 	rsb	r3, r3, #31
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <vTaskSwitchContext+0x84>)
 800044e:	4413      	add	r3, r2
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3308      	adds	r3, #8
 8000464:	429a      	cmp	r2, r3
 8000466:	d104      	bne.n	8000472 <vTaskSwitchContext+0x62>
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <vTaskSwitchContext+0x88>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200000a4 	.word	0x200000a4
 800048c:	20000098 	.word	0x20000098
 8000490:	20000090 	.word	0x20000090
 8000494:	20000020 	.word	0x20000020
 8000498:	2000001c 	.word	0x2000001c

0800049c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <prvResetNextTaskUnblockTime+0x14>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <prvResetNextTaskUnblockTime+0x16>
 80004b0:	2300      	movs	r3, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004be:	e008      	b.n	80004d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000084 	.word	0x20000084
 80004e0:	200000a0 	.word	0x200000a0

080004e4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <EXTI_ClearFlag+0x18>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6153      	str	r3, [r2, #20]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40010400 	.word	0x40010400

08000500 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000508:	4a03      	ldr	r2, [pc, #12]	; (8000518 <EXTI_ClearITPendingBit+0x18>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6153      	str	r3, [r2, #20]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40010400 	.word	0x40010400

0800051c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800051c:	b480      	push	{r7}
 800051e:	b089      	sub	sp, #36	; 0x24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	78db      	ldrb	r3, [r3, #3]
 8000542:	f003 030f 	and.w	r3, r3, #15
 8000546:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	78db      	ldrb	r3, [r3, #3]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	2b00      	cmp	r3, #0
 8000552:	d005      	beq.n	8000560 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	789b      	ldrb	r3, [r3, #2]
 8000558:	461a      	mov	r2, r3
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	4313      	orrs	r3, r2
 800055e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d044      	beq.n	80005f4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	e038      	b.n	80005e8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000576:	2201      	movs	r2, #1
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800058c:	693a      	ldr	r2, [r7, #16]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	429a      	cmp	r2, r3
 8000592:	d126      	bne.n	80005e2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800059a:	220f      	movs	r2, #15
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	4013      	ands	r3, r2
 80005ac:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005ae:	69fa      	ldr	r2, [r7, #28]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	697a      	ldr	r2, [r7, #20]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	78db      	ldrb	r3, [r3, #3]
 80005c0:	2b28      	cmp	r3, #40	; 0x28
 80005c2:	d105      	bne.n	80005d0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005c4:	2201      	movs	r2, #1
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	409a      	lsls	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	615a      	str	r2, [r3, #20]
 80005ce:	e008      	b.n	80005e2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	2b48      	cmp	r3, #72	; 0x48
 80005d6:	d104      	bne.n	80005e2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005d8:	2201      	movs	r2, #1
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	409a      	lsls	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	d9c3      	bls.n	8000576 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d946      	bls.n	800068a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
 8000606:	e03a      	b.n	800067e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	3308      	adds	r3, #8
 800060c:	2201      	movs	r2, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4013      	ands	r3, r2
 800061e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	429a      	cmp	r2, r3
 8000626:	d127      	bne.n	8000678 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800062e:	220f      	movs	r2, #15
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	43db      	mvns	r3, r3
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	4013      	ands	r3, r2
 8000640:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	fa02 f303 	lsl.w	r3, r2, r3
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	4313      	orrs	r3, r2
 800064e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	2b28      	cmp	r3, #40	; 0x28
 8000656:	d105      	bne.n	8000664 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	3308      	adds	r3, #8
 800065c:	2201      	movs	r2, #1
 800065e:	409a      	lsls	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	2b48      	cmp	r3, #72	; 0x48
 800066a:	d105      	bne.n	8000678 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	3308      	adds	r3, #8
 8000670:	2201      	movs	r2, #1
 8000672:	409a      	lsls	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	3301      	adds	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d9c1      	bls.n	8000608 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	605a      	str	r2, [r3, #4]
  }
}
 800068a:	bf00      	nop
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006a0:	887a      	ldrh	r2, [r7, #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	611a      	str	r2, [r3, #16]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006bc:	887a      	ldrh	r2, [r7, #2]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	615a      	str	r2, [r3, #20]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006de:	4909      	ldr	r1, [pc, #36]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006ea:	e006      	b.n	80006fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006ec:	4905      	ldr	r1, [pc, #20]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <RCC_APB2PeriphClockCmd+0x38>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4013      	ands	r3, r2
 80006f8:	618b      	str	r3, [r1, #24]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000

08000708 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d006      	beq.n	8000728 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800071a:	4909      	ldr	r1, [pc, #36]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800071e:	69da      	ldr	r2, [r3, #28]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000726:	e006      	b.n	8000736 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000728:	4905      	ldr	r1, [pc, #20]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <RCC_APB1PeriphClockCmd+0x38>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	43db      	mvns	r3, r3
 8000732:	4013      	ands	r3, r2
 8000734:	61cb      	str	r3, [r1, #28]
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800075e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	881a      	ldrh	r2, [r3, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	885b      	ldrh	r3, [r3, #2]
 8000768:	4313      	orrs	r3, r2
 800076a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000770:	4313      	orrs	r3, r2
 8000772:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	4313      	orrs	r3, r2
 80007a0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	89fa      	ldrh	r2, [r7, #14]
 80007a6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	8b9b      	ldrh	r3, [r3, #28]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	8a1a      	ldrh	r2, [r3, #16]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	821a      	strh	r2, [r3, #16]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007ec:	e007      	b.n	80007fe <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	801a      	strh	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	887a      	ldrh	r2, [r7, #2]
 8000818:	819a      	strh	r2, [r3, #12]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	899b      	ldrh	r3, [r3, #12]
 8000830:	b29b      	uxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d008      	beq.n	8000860 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	889b      	ldrh	r3, [r3, #4]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	b29a      	uxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800085e:	e007      	b.n	8000870 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	889b      	ldrh	r3, [r3, #4]
 8000864:	b29b      	uxth	r3, r3
 8000866:	f023 0304 	bic.w	r3, r3, #4
 800086a:	b29a      	uxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	809a      	strh	r2, [r3, #4]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	460b      	mov	r3, r1
 8000884:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	891b      	ldrh	r3, [r3, #8]
 800088e:	b29a      	uxth	r2, r3
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	4013      	ands	r3, r2
 8000894:	b29b      	uxth	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e001      	b.n	80008a4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 80008b4:	f000 f9a2 	bl	8000bfc <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 fa0b 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 80008be:	f248 00e7 	movw	r0, #32999	; 0x80e7
 80008c2:	f000 fa07 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 80008c6:	f248 2008 	movw	r0, #33288	; 0x8208
 80008ca:	f000 fa03 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 80008ce:	f24a 6040 	movw	r0, #42560	; 0xa640
 80008d2:	f000 f9ff 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 80008d6:	f24c 6048 	movw	r0, #50760	; 0xc648
 80008da:	f000 f9fb 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 80008de:	f249 40a0 	movw	r0, #38048	; 0x94a0
 80008e2:	f000 f9f7 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 80008e6:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 80008ea:	f000 f9f3 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 80008ee:	f64c 2081 	movw	r0, #51841	; 0xca81
 80008f2:	f000 f9ef 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 80008f6:	f64c 60d4 	movw	r0, #52948	; 0xced4
 80008fa:	f000 f9eb 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 80008fe:	f24c 4083 	movw	r0, #50307	; 0xc483
 8000902:	f000 f9e7 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8000906:	f649 0050 	movw	r0, #38992	; 0x9850
 800090a:	f000 f9e3 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 800090e:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8000912:	f000 f9df 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8000916:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800091a:	f000 f9db 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 800091e:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8000922:	f000 f9d7 	bl	8000cd4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8000926:	f24c 0040 	movw	r0, #49216	; 0xc040
 800092a:	f000 f9d3 	bl	8000cd4 <Rfm12bWriteCmd>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}

08000932 <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	460b      	mov	r3, r1
 800093c:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 800093e:	f240 320e 	movw	r2, #782	; 0x30e
 8000942:	2100      	movs	r1, #0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f002 f88b 	bl	8002a60 <memset>
	rfm12bObj->module_addr = module_addr;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	78fa      	ldrb	r2, [r7, #3]
 800094e:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <Rfm12bTranssmitSeqByte>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 800096a:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 800096e:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	b2d1      	uxtb	r1, r2
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	7011      	strb	r1, [r2, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	791b      	ldrb	r3, [r3, #4]
 8000986:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 8000988:	7b7b      	ldrb	r3, [r7, #13]
 800098a:	b29a      	uxth	r2, r3
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	4313      	orrs	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f99e 	bl	8000cd4 <Rfm12bWriteCmd>
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <Rfm12bStartSending>:


void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	460b      	mov	r3, r1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	4613      	mov	r3, r2
 80009b4:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	22aa      	movs	r2, #170	; 0xaa
 80009ba:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0xAA;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	22aa      	movs	r2, #170	; 0xaa
 80009c0:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0x2D;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	222d      	movs	r2, #45	; 0x2d
 80009c6:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = 0xD4;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	22d4      	movs	r2, #212	; 0xd4
 80009cc:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = dataNb;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = toAddr;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	725a      	strb	r2, [r3, #9]
	rfm12b->txBuff.data[6] = rfm12b->module_addr;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	729a      	strb	r2, [r3, #10]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	330b      	adds	r3, #11
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f002 f82b 	bl	8002a4a <memcpy>
	rfm12b->txBuff.pos =0;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + ALL_HEADER_SIZE;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	3307      	adds	r3, #7
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 8000a04:	f000 f8f2 	bl	8000bec <rfm12bSwitchTx>
    rfm12b->state = transmit;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ffa5 	bl	8000962 <Rfm12bTranssmitSeqByte>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <Rfm12bMantainSending>:



void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos <= rfm12b->txBuff.dataNb){
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d804      	bhi.n	8000a42 <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff91 	bl	8000962 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8000a40:	e005      	b.n	8000a4e <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 8000a4a:	f000 f8c7 	bl	8000bdc <rfm12bSwitchRx>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fff8 	bl	8002a60 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f203 110b 	addw	r1, r3, #267	; 0x10b
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	461a      	mov	r2, r3
 8000a86:	f001 ffe0 	bl	8002a4a <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000aba:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 ffcd 	bl	8002a60 <memset>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 8000ade:	f000 f863 	bl	8000ba8 <rfm12bFifoReset>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 8000af4:	f000 f864 	bl	8000bc0 <rfm12bReadFifo>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	b2d1      	uxtb	r1, r2
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	7bfa      	ldrb	r2, [r7, #15]
 8000b1c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == (rfm12b->rxBuff.dataNb + L2_HEADER_SIZE)){
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	3303      	adds	r3, #3
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d10b      	bne.n	8000b5e <Rfm12bMantainreceiving+0x72>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff85 	bl	8000a56 <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ffbe 	bl	8000ace <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <Rfm12bMantainreceiving+0x7c>)
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <Rfm12bMantainreceiving+0x7c>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000b5c:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40011000 	.word	0x40011000

08000b6c <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f8ad 	bl	8000cd4 <Rfm12bWriteCmd>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 8000b7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da0c      	bge.n	8000ba0 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d103      	bne.n	8000b9a <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff44 	bl	8000a20 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8000b98:	e002      	b.n	8000ba0 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa6 	bl	8000aec <Rfm12bMantainreceiving>
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8000bac:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000bb0:	f000 f890 	bl	8000cd4 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8000bb4:	f64c 2083 	movw	r0, #51843	; 0xca83
 8000bb8:	f000 f88c 	bl	8000cd4 <Rfm12bWriteCmd>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 8000bc6:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000bca:	f000 f883 	bl	8000cd4 <Rfm12bWriteCmd>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 8000be0:	f248 2099 	movw	r0, #33433	; 0x8299
 8000be4:	f000 f876 	bl	8000cd4 <Rfm12bWriteCmd>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 8000bf0:	f248 2039 	movw	r0, #33337	; 0x8239
 8000bf4:	f000 f86e 	bl	8000cd4 <Rfm12bWriteCmd>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000c02:	2101      	movs	r1, #1
 8000c04:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c08:	f7ff fd60 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2004      	movs	r0, #4
 8000c10:	f7ff fd5c 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000c14:	2101      	movs	r1, #1
 8000c16:	2008      	movs	r0, #8
 8000c18:	f7ff fd58 	bl	80006cc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000c1c:	23e0      	movs	r3, #224	; 0xe0
 8000c1e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000c20:	2318      	movs	r3, #24
 8000c22:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000c24:	2301      	movs	r3, #1
 8000c26:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <Rfm12bSpiInit+0xc8>)
 8000c30:	f7ff fc74 	bl	800051c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000c34:	2340      	movs	r3, #64	; 0x40
 8000c36:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	4619      	mov	r1, r3
 8000c46:	4820      	ldr	r0, [pc, #128]	; (8000cc8 <Rfm12bSpiInit+0xcc>)
 8000c48:	f7ff fc68 	bl	800051c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000c50:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c54:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8000c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c5a:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000c60:	2300      	movs	r3, #0
 8000c62:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c68:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000c6a:	2330      	movs	r3, #48	; 0x30
 8000c6c:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000c72:	2307      	movs	r3, #7
 8000c74:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8000c76:	2101      	movs	r1, #1
 8000c78:	4814      	ldr	r0, [pc, #80]	; (8000ccc <Rfm12bSpiInit+0xd0>)
 8000c7a:	f7ff fddf 	bl	800083c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <Rfm12bSpiInit+0xd0>)
 8000c86:	f7ff fd5d 	bl	8000744 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	480f      	ldr	r0, [pc, #60]	; (8000ccc <Rfm12bSpiInit+0xd0>)
 8000c8e:	f7ff fd9c 	bl	80007ca <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <Rfm12bSpiInit+0xd4>)
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <Rfm12bSpiInit+0xd4>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <Rfm12bSpiInit+0xcc>)
 8000cb0:	f7ff fc34 	bl	800051c <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8000cb4:	2102      	movs	r1, #2
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <Rfm12bSpiInit+0xcc>)
 8000cb8:	f7ff fcec 	bl	8000694 <GPIO_SetBits>
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	40013000 	.word	0x40013000
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4812      	ldr	r0, [pc, #72]	; (8000d2c <Rfm12bWriteCmd+0x58>)
 8000ce2:	f7ff fce5 	bl	80006b0 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8000ce6:	bf00      	nop
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4811      	ldr	r0, [pc, #68]	; (8000d30 <Rfm12bWriteCmd+0x5c>)
 8000cec:	f7ff fdc5 	bl	800087a <SPI_I2S_GetFlagStatus>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f8      	beq.n	8000ce8 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <Rfm12bWriteCmd+0x5c>)
 8000cfc:	f7ff fd84 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8000d00:	bf00      	nop
 8000d02:	2101      	movs	r1, #1
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <Rfm12bWriteCmd+0x5c>)
 8000d06:	f7ff fdb8 	bl	800087a <SPI_I2S_GetFlagStatus>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f8      	beq.n	8000d02 <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <Rfm12bWriteCmd+0x5c>)
 8000d12:	f7ff fd87 	bl	8000824 <SPI_I2S_ReceiveData>
 8000d16:	4603      	mov	r3, r0
 8000d18:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <Rfm12bWriteCmd+0x58>)
 8000d1e:	f7ff fcb9 	bl	8000694 <GPIO_SetBits>

	return recData;
 8000d22:	89fb      	ldrh	r3, [r7, #14]

}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	40013000 	.word	0x40013000

08000d34 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <NVIC_EnableIRQ+0x2c>)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	f002 021f 	and.w	r2, r2, #31
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <EnableGpioClk+0x68>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d106      	bne.n	8000d82 <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f043 0304 	orr.w	r3, r3, #4
 8000d7e:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8000d80:	e01f      	b.n	8000dc2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <EnableGpioClk+0x70>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d106      	bne.n	8000d98 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	6193      	str	r3, [r2, #24]
	 		 }
 8000d96:	e014      	b.n	8000dc2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <EnableGpioClk+0x74>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d106      	bne.n	8000dae <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6193      	str	r3, [r2, #24]
	 		 }
 8000dac:	e009      	b.n	8000dc2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <EnableGpioClk+0x78>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d105      	bne.n	8000dc2 <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <EnableGpioClk+0x6c>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f043 0320 	orr.w	r3, r3, #32
 8000dc0:	6193      	str	r3, [r2, #24]
	 		 }
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40011400 	.word	0x40011400

08000de0 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b07      	cmp	r3, #7
 8000df0:	d81d      	bhi.n	8000e2e <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	78fa      	ldrb	r2, [r7, #3]
 8000df8:	2103      	movs	r1, #3
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	43d2      	mvns	r2, r2
 8000e00:	401a      	ands	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	78fa      	ldrb	r2, [r7, #3]
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	43d2      	mvns	r2, r2
 8000e14:	401a      	ands	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8000e2c:	e023      	b.n	8000e76 <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	3a08      	subs	r2, #8
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	2103      	movs	r1, #3
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	43d2      	mvns	r2, r2
 8000e40:	401a      	ands	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	3a08      	subs	r2, #8
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	2103      	movs	r1, #3
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	43d2      	mvns	r2, r2
 8000e58:	401a      	ands	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	78fa      	ldrb	r2, [r7, #3]
 8000e64:	3a08      	subs	r2, #8
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	3202      	adds	r2, #2
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	605a      	str	r2, [r3, #4]
	 		 }
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2b07      	cmp	r3, #7
 8000e90:	d82b      	bhi.n	8000eea <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	78fa      	ldrb	r2, [r7, #3]
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	78fa      	ldrb	r2, [r7, #3]
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	3202      	adds	r2, #2
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	3202      	adds	r2, #2
 8000eca:	2102      	movs	r1, #2
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 8000ee8:	e02d      	b.n	8000f46 <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	78fa      	ldrb	r2, [r7, #3]
 8000ef0:	3a08      	subs	r2, #8
 8000ef2:	0092      	lsls	r2, r2, #2
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	43d2      	mvns	r2, r2
 8000efc:	401a      	ands	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	3a08      	subs	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	3202      	adds	r2, #2
 8000f0e:	2103      	movs	r1, #3
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	43d2      	mvns	r2, r2
 8000f16:	401a      	ands	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	78fa      	ldrb	r2, [r7, #3]
 8000f22:	3a08      	subs	r2, #8
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	3202      	adds	r2, #2
 8000f28:	2102      	movs	r1, #2
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	78fa      	ldrb	r2, [r7, #3]
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60da      	str	r2, [r3, #12]
	 		 }
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	d92f      	bls.n	8000fc2 <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	3a08      	subs	r2, #8
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	43d2      	mvns	r2, r2
 8000f74:	401a      	ands	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	3a08      	subs	r2, #8
 8000f82:	0092      	lsls	r2, r2, #2
 8000f84:	3202      	adds	r2, #2
 8000f86:	2103      	movs	r1, #3
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	401a      	ands	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	3a08      	subs	r2, #8
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	78fa      	ldrb	r2, [r7, #3]
 8000fb0:	3a08      	subs	r2, #8
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	3202      	adds	r2, #2
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	70fb      	strb	r3, [r7, #3]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70bb      	strb	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000fe6:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <EnableExti+0x84>)
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <EnableExti+0x84>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <EnableExti+0x88>)
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <EnableExti+0x88>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 8000ffe:	4916      	ldr	r1, [pc, #88]	; (8001058 <EnableExti+0x8c>)
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <EnableExti+0x8c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	2001      	movs	r0, #1
 8001008:	fa00 f202 	lsl.w	r2, r0, r2
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d008      	beq.n	8001028 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 8001016:	4910      	ldr	r1, [pc, #64]	; (8001058 <EnableExti+0x8c>)
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <EnableExti+0x8c>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	2001      	movs	r0, #1
 8001020:	fa00 f202 	lsl.w	r2, r0, r2
 8001024:	4313      	orrs	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <EnableExti+0x8c>)
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <EnableExti+0x8c>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	2001      	movs	r0, #1
 8001038:	fa00 f202 	lsl.w	r2, r0, r2
 800103c:	4313      	orrs	r3, r2
 800103e:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001040:	2017      	movs	r0, #23
 8001042:	f7ff fe77 	bl	8000d34 <NVIC_EnableIRQ>
	 		 }
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	40010000 	.word	0x40010000
 8001058:	40010400 	.word	0x40010400

0800105c <EnableExtiGeneral>:




			 	 void EnableExtiGeneral(uint8_t gpioPortNb, uint8_t pinNb, bool rise, bool fall){
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	4611      	mov	r1, r2
 8001068:	461a      	mov	r2, r3
 800106a:	4623      	mov	r3, r4
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	4603      	mov	r3, r0
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	460b      	mov	r3, r1
 8001074:	717b      	strb	r3, [r7, #5]
 8001076:	4613      	mov	r3, r2
 8001078:	713b      	strb	r3, [r7, #4]
		 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800107a:	4a31      	ldr	r2, [pc, #196]	; (8001140 <EnableExtiGeneral+0xe4>)
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <EnableExtiGeneral+0xe4>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
		 		 	AFIO->EXTICR[pinNb >> 0x02] |= ((gpioPortNb) << (0x04 * (pinNb & 0x03)));
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <EnableExtiGeneral+0xe8>)
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461c      	mov	r4, r3
 8001090:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <EnableExtiGeneral+0xe8>)
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	79f9      	ldrb	r1, [r7, #7]
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	431a      	orrs	r2, r3
 80010ae:	1ca3      	adds	r3, r4, #2
 80010b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		 		 	EXTI->IMR  |= (1<<pinNb);
 80010b4:	4924      	ldr	r1, [pc, #144]	; (8001148 <EnableExtiGeneral+0xec>)
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <EnableExtiGeneral+0xec>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
		 		 	if (rise){
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <EnableExtiGeneral+0x82>
		 		 		EXTI->RTSR |= (1<<pinNb);
 80010cc:	491e      	ldr	r1, [pc, #120]	; (8001148 <EnableExtiGeneral+0xec>)
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <EnableExtiGeneral+0xec>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
		 		 	}
		 		 	if (fall){
 80010de:	793b      	ldrb	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <EnableExtiGeneral+0x9a>
		 		 		EXTI->FTSR |= (1<<pinNb);
 80010e4:	4918      	ldr	r1, [pc, #96]	; (8001148 <EnableExtiGeneral+0xec>)
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <EnableExtiGeneral+0xec>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
		 		 	}


		 		 	uint8_t irqNb;

		 		 	if (pinNb >=0  && pinNb <=3){
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d806      	bhi.n	800110a <EnableExtiGeneral+0xae>
		 		 		const uint8_t irqOffset = 6;
 80010fc:	2306      	movs	r3, #6
 80010fe:	73bb      	strb	r3, [r7, #14]
		 		 		irqNb = (pinNb +  irqOffset);
 8001100:	79ba      	ldrb	r2, [r7, #6]
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	4413      	add	r3, r2
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e010      	b.n	800112c <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=5  && pinNb <9){
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	2b04      	cmp	r3, #4
 800110e:	d905      	bls.n	800111c <EnableExtiGeneral+0xc0>
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	2b08      	cmp	r3, #8
 8001114:	d802      	bhi.n	800111c <EnableExtiGeneral+0xc0>
		 		 		irqNb = EXTI9_5_IRQn;
 8001116:	2317      	movs	r3, #23
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e007      	b.n	800112c <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=10  && pinNb <=15){
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b09      	cmp	r3, #9
 8001120:	d904      	bls.n	800112c <EnableExtiGeneral+0xd0>
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d801      	bhi.n	800112c <EnableExtiGeneral+0xd0>
		 		 		irqNb = EXTI15_10_IRQn;
 8001128:	2328      	movs	r3, #40	; 0x28
 800112a:	73fb      	strb	r3, [r7, #15]
		 		 	}


		 		 	NVIC_EnableIRQ(irqNb);
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fdff 	bl	8000d34 <NVIC_EnableIRQ>



		 		 }
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	40010400 	.word	0x40010400

0800114c <_delay_ms>:





	 		 void _delay_ms(int n) {
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

	 		 	int i, j;
	 		 	j= n*1000;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	60bb      	str	r3, [r7, #8]
	 		 	while(j--) {
 8001160:	e007      	b.n	8001172 <_delay_ms+0x26>
	 		 		i=2;
 8001162:	2302      	movs	r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
	 		 		while(i--);
 8001166:	bf00      	nop
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e5a      	subs	r2, r3, #1
 800116c:	60fa      	str	r2, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1fa      	bne.n	8001168 <_delay_ms+0x1c>
	 		 	while(j--) {
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1e5a      	subs	r2, r3, #1
 8001176:	60ba      	str	r2, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f2      	bne.n	8001162 <_delay_ms+0x16>
	 		 	}
	 		 }
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <NVIC_EnableIRQ>:
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <NVIC_EnableIRQ+0x2c>)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	f002 021f 	and.w	r2, r2, #31
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 80011bc:	2020      	movs	r0, #32
 80011be:	f7ff f99f 	bl	8000500 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <EXTI9_5_IRQHandler+0x14>)
 80011c4:	f7ff fcd2 	bl	8000b6c <Rfm12bIrqCallback>

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200000a8 	.word	0x200000a8

080011d0 <EXTI15_10_IRQHandler>:


extern "C" void EXTI15_10_IRQHandler (void);


void EXTI15_10_IRQHandler (void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	EXTI_ClearFlag(EXTI_Line12);
 80011d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011d8:	f7ff f984 	bl	80004e4 <EXTI_ClearFlag>

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f7ff fbc3 	bl	80009a0 <Rfm12bStartSending>
	return buffLen;
 800121a:	887b      	ldrh	r3, [r7, #2]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 800123c:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	2b00      	cmp	r3, #0
 8001242:	dd17      	ble.n	8001274 <_Z10broker_recPvP11sockaddr_inPht+0x50>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8001244:	887a      	ldrh	r2, [r7, #2]
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	4293      	cmp	r3, r2
 800124a:	bfa8      	it	ge
 800124c:	4613      	movge	r3, r2
 800124e:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8001256:	7dfa      	ldrb	r2, [r7, #23]
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f001 fbf5 	bl	8002a4a <memcpy>
		obj->completedRxBuff.dataNb = 0;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		sockaddr->sin_addr.s_addr = obj->completedRxBuff.rxFromAddr;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	605a      	str	r2, [r3, #4]
	}

	return byteNb;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
	return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <main>:
//




int main(){
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	f5ad 5d88 	sub.w	sp, sp, #4352	; 0x1100
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

	SetGpioAsInFloating(GPIOA, 12);
 800129e:	210c      	movs	r1, #12
 80012a0:	486a      	ldr	r0, [pc, #424]	; (800144c <main+0x1b8>)
 80012a2:	f7ff fd9d 	bl	8000de0 <SetGpioAsInFloating>
	EnableExtiGeneral(0, 12, false, true);
 80012a6:	2301      	movs	r3, #1
 80012a8:	2200      	movs	r2, #0
 80012aa:	210c      	movs	r1, #12
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fed5 	bl	800105c <EnableExtiGeneral>

	spiInit();
 80012b2:	f000 f90d 	bl	80014d0 <spiInit>
	uint16_t rec= SPiTransmit(0b11010111);
 80012b6:	20d7      	movs	r0, #215	; 0xd7
 80012b8:	f000 f95e 	bl	8001578 <SPiTransmit>
 80012bc:	4603      	mov	r3, r0
 80012be:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80012c2:	f102 0206 	add.w	r2, r2, #6
 80012c6:	8013      	strh	r3, [r2, #0]
	 rec= SPiTransmit(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f955 	bl	8001578 <SPiTransmit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80012d4:	f102 0206 	add.w	r2, r2, #6
 80012d8:	8013      	strh	r3, [r2, #0]

 	EnableGpioClk(LOG_UART_PORT);
 80012da:	485c      	ldr	r0, [pc, #368]	; (800144c <main+0x1b8>)
 80012dc:	f7ff fd42 	bl	8000d64 <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 80012e0:	2109      	movs	r1, #9
 80012e2:	485a      	ldr	r0, [pc, #360]	; (800144c <main+0x1b8>)
 80012e4:	f7ff fe34 	bl	8000f50 <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 80012e8:	210a      	movs	r1, #10
 80012ea:	4858      	ldr	r0, [pc, #352]	; (800144c <main+0x1b8>)
 80012ec:	f7ff fd78 	bl	8000de0 <SetGpioAsInFloating>
 	EnableUart(USART1);
 80012f0:	4857      	ldr	r0, [pc, #348]	; (8001450 <main+0x1bc>)
 80012f2:	f000 f8bf 	bl	8001474 <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80012f6:	2101      	movs	r1, #1
 80012f8:	2010      	movs	r0, #16
 80012fa:	f7ff f9e7 	bl	80006cc <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80012fe:	2310      	movs	r3, #16
 8001300:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001304:	f102 0203 	add.w	r2, r2, #3
 8001308:	7013      	strb	r3, [r2, #0]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 800130a:	2302      	movs	r3, #2
 800130c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001310:	f102 0202 	add.w	r2, r2, #2
 8001314:	7013      	strb	r3, [r2, #0]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800131e:	8013      	strh	r3, [r2, #0]
 	GPIO_Init(GPIOC, &PORT);
 8001320:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001324:	4619      	mov	r1, r3
 8001326:	484b      	ldr	r0, [pc, #300]	; (8001454 <main+0x1c0>)
 8001328:	f7ff f8f8 	bl	800051c <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <main+0x1c0>)
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <main+0x1c0>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001336:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 8001338:	f7ff faba 	bl	80008b0 <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 800133c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001340:	f7ff ff04 	bl	800114c <_delay_ms>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fcc5 	bl	8000cd4 <Rfm12bWriteCmd>
 800134a:	4603      	mov	r3, r0
 800134c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001350:	f102 0205 	add.w	r2, r2, #5
 8001354:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001356:	2101      	movs	r1, #1
 8001358:	2008      	movs	r0, #8
 800135a:	f7ff f9b7 	bl	80006cc <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 800135e:	2301      	movs	r3, #1
 8001360:	2200      	movs	r2, #0
 8001362:	2105      	movs	r1, #5
 8001364:	483c      	ldr	r0, [pc, #240]	; (8001458 <main+0x1c4>)
 8001366:	f7ff fe31 	bl	8000fcc <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 800136a:	2105      	movs	r1, #5
 800136c:	483a      	ldr	r0, [pc, #232]	; (8001458 <main+0x1c4>)
 800136e:	f7ff fd87 	bl	8000e80 <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 8001372:	210b      	movs	r1, #11
 8001374:	4838      	ldr	r0, [pc, #224]	; (8001458 <main+0x1c4>)
 8001376:	f7ff fd83 	bl	8000e80 <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 800137a:	f7ff fc15 	bl	8000ba8 <rfm12bFifoReset>
 	rfm12bSwitchRx();
 800137e:	f7ff fc2d 	bl	8000bdc <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001382:	2017      	movs	r0, #23
 8001384:	f7ff ff00 	bl	8001188 <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 8001388:	2101      	movs	r1, #1
 800138a:	4834      	ldr	r0, [pc, #208]	; (800145c <main+0x1c8>)
 800138c:	f7ff fad1 	bl	8000932 <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 8001390:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001394:	4a31      	ldr	r2, [pc, #196]	; (800145c <main+0x1c8>)
 8001396:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 8001398:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800139c:	4a30      	ldr	r2, [pc, #192]	; (8001460 <main+0x1cc>)
 800139e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 80013a2:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80013a6:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <main+0x1d0>)
 80013a8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 80013ac:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80013b0:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <main+0x1d4>)
 80013b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 80013b6:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 80013ba:	4a2c      	ldr	r2, [pc, #176]	; (800146c <main+0x1d8>)
 80013bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 80013c0:	f607 72e8 	addw	r2, r7, #4072	; 0xfe8
 80013c4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fa02 	bl	80017d4 <broker_init_by_given_net>
	uint8_t frameBuff[MAX_FRAME_SIZE];



	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 80013d0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80013d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d8:	3b04      	subs	r3, #4
 80013da:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80013de:	4619      	mov	r1, r3
 80013e0:	f000 fa47 	bl	8001872 <broker_receive>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <main+0x16a>
	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 80013ea:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	3b04      	subs	r3, #4
 80013f4:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80013f8:	4619      	mov	r1, r3
 80013fa:	f000 fa53 	bl	80018a4 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <main+0x1c4>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001406:	2b00      	cmp	r3, #0
 8001408:	bf0c      	ite	eq
 800140a:	2301      	moveq	r3, #1
 800140c:	2300      	movne	r3, #0
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0dd      	beq.n	80013d0 <main+0x13c>
	 			  uint8_t buff[] = "abcdefghijabcdefghijabcdefghij";
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	3b04      	subs	r3, #4
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <main+0x1dc>)
 800141c:	461c      	mov	r4, r3
 800141e:	4615      	mov	r5, r2
 8001420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001428:	c407      	stmia	r4!, {r0, r1, r2}
 800142a:	8023      	strh	r3, [r4, #0]
 800142c:	3402      	adds	r4, #2
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	7023      	strb	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 8001432:	f107 0108 	add.w	r1, r7, #8
 8001436:	3904      	subs	r1, #4
 8001438:	2302      	movs	r3, #2
 800143a:	221e      	movs	r2, #30
 800143c:	4807      	ldr	r0, [pc, #28]	; (800145c <main+0x1c8>)
 800143e:	f7ff faaf 	bl	80009a0 <Rfm12bStartSending>
	 			 _delay_ms(250);
 8001442:	20fa      	movs	r0, #250	; 0xfa
 8001444:	f7ff fe82 	bl	800114c <_delay_ms>


	 		  }


	 	}
 8001448:	e7c2      	b.n	80013d0 <main+0x13c>
 800144a:	bf00      	nop
 800144c:	40010800 	.word	0x40010800
 8001450:	40013800 	.word	0x40013800
 8001454:	40011000 	.word	0x40011000
 8001458:	40010c00 	.word	0x40010c00
 800145c:	200000a8 	.word	0x200000a8
 8001460:	080011e1 	.word	0x080011e1
 8001464:	080011f7 	.word	0x080011f7
 8001468:	08001225 	.word	0x08001225
 800146c:	0800127f 	.word	0x0800127f
 8001470:	08002ad8 	.word	0x08002ad8

08001474 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <EnableUart+0x58>)
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <EnableUart+0x58>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001486:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800148e:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	899b      	ldrh	r3, [r3, #12]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	899b      	ldrh	r3, [r3, #12]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	899b      	ldrh	r3, [r3, #12]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	819a      	strh	r2, [r3, #12]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <spiInit>:

#include "stdint.h"
#include "spi.h"
#include "stm32f10x.h"

void spiInit(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80014d6:	2101      	movs	r1, #1
 80014d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014dc:	f7ff f914 	bl	8000708 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80014e0:	2101      	movs	r1, #1
 80014e2:	2004      	movs	r0, #4
 80014e4:	f7ff f8f2 	bl	80006cc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80014e8:	2101      	movs	r1, #1
 80014ea:	2008      	movs	r0, #8
 80014ec:	f7ff f8ee 	bl	80006cc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80014f0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014f4:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80014f6:	2318      	movs	r3, #24
 80014f8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80014fa:	2301      	movs	r3, #1
 80014fc:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	; (800156c <spiInit+0x9c>)
 8001504:	f7ff f80a 	bl	800051c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001508:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800150c:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800150e:	2310      	movs	r3, #16
 8001510:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8001512:	2301      	movs	r3, #1
 8001514:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001516:	463b      	mov	r3, r7
 8001518:	4619      	mov	r1, r3
 800151a:	4815      	ldr	r0, [pc, #84]	; (8001570 <spiInit+0xa0>)
 800151c:	f7fe fffe 	bl	800051c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001520:	2300      	movs	r3, #0
 8001522:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001524:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001528:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 800152a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800152e:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001530:	2300      	movs	r3, #0
 8001532:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001534:	2300      	movs	r3, #0
 8001536:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 800153e:	2330      	movs	r3, #48	; 0x30
 8001540:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001542:	2300      	movs	r3, #0
 8001544:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001546:	2307      	movs	r3, #7
 8001548:	82bb      	strh	r3, [r7, #20]
	SPI_SSOutputCmd(SPI2, ENABLE);
 800154a:	2101      	movs	r1, #1
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <spiInit+0xa4>)
 800154e:	f7ff f975 	bl	800083c <SPI_SSOutputCmd>
	SPI_Init(SPI2, &SPI_InitStructure);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <spiInit+0xa4>)
 8001558:	f7ff f8f4 	bl	8000744 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI2, ENABLE);
 800155c:	2101      	movs	r1, #1
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <spiInit+0xa4>)
 8001560:	f7ff f933 	bl	80007ca <SPI_Cmd>

}
 8001564:	bf00      	nop
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40010800 	.word	0x40010800
 8001574:	40003800 	.word	0x40003800

08001578 <SPiTransmit>:



uint16_t SPiTransmit( uint16_t cmd )
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	CS_LOW;
 8001582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <SPiTransmit+0x5c>)
 8001588:	f7ff f892 	bl	80006b0 <GPIO_ResetBits>

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 800158c:	bf00      	nop
 800158e:	2102      	movs	r1, #2
 8001590:	4811      	ldr	r0, [pc, #68]	; (80015d8 <SPiTransmit+0x60>)
 8001592:	f7ff f972 	bl	800087a <SPI_I2S_GetFlagStatus>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f8      	beq.n	800158e <SPiTransmit+0x16>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4619      	mov	r1, r3
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <SPiTransmit+0x60>)
 80015a2:	f7ff f931 	bl	8000808 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 80015a6:	bf00      	nop
 80015a8:	2101      	movs	r1, #1
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <SPiTransmit+0x60>)
 80015ac:	f7ff f965 	bl	800087a <SPI_I2S_GetFlagStatus>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f8      	beq.n	80015a8 <SPiTransmit+0x30>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <SPiTransmit+0x60>)
 80015b8:	f7ff f934 	bl	8000824 <SPI_I2S_ReceiveData>
 80015bc:	4603      	mov	r3, r0
 80015be:	81fb      	strh	r3, [r7, #14]

	CS_HIGH;
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <SPiTransmit+0x5c>)
 80015c6:	f7ff f865 	bl	8000694 <GPIO_SetBits>

	return recData;
 80015ca:	89fb      	ldrh	r3, [r7, #14]

}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40003800 	.word	0x40003800

080015dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001614 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80015e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
	ldr	r2, =_sbss
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015fc:	f842 3b04 	str.w	r3, [r2], #4

08001600 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001602:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001606:	f000 f82b 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f001 f9eb 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800160e:	f7ff fe41 	bl	8001294 <main>
	bx	lr
 8001612:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001614:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001618:	08002b00 	.word	0x08002b00
	ldr	r0, =_sdata
 800161c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001620:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001624:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001628:	200003b8 	.word	0x200003b8

0800162c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_2_IRQHandler>

0800162e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
	...

08001660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <SystemInit+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <SystemInit+0x5c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001670:	4912      	ldr	r1, [pc, #72]	; (80016bc <SystemInit+0x5c>)
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <SystemInit+0x5c>)
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <SystemInit+0x60>)
 8001678:	4013      	ands	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <SystemInit+0x5c>)
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <SystemInit+0x5c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <SystemInit+0x5c>)
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <SystemInit+0x5c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <SystemInit+0x5c>)
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <SystemInit+0x5c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SystemInit+0x5c>)
 80016a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016aa:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80016ac:	f000 f80c 	bl	80016c8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SystemInit+0x64>)
 80016b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000
 80016c0:	f8ff0000 	.word	0xf8ff0000
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80016cc:	f000 f802 	bl	80016d4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	2300      	movs	r3, #0
 80016e0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80016e2:	4a3a      	ldr	r2, [pc, #232]	; (80017cc <SetSysClockTo72+0xf8>)
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <SetSysClockTo72+0xf8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <SetSysClockTo72+0xf8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <SetSysClockTo72+0x38>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800170a:	d1f0      	bne.n	80016ee <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <SetSysClockTo72+0xf8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001718:	2301      	movs	r3, #1
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	e001      	b.n	8001722 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d14b      	bne.n	80017c0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001728:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <SetSysClockTo72+0xfc>)
 800172a:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <SetSysClockTo72+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <SetSysClockTo72+0xfc>)
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <SetSysClockTo72+0xfc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001740:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <SetSysClockTo72+0xfc>)
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <SetSysClockTo72+0xfc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <SetSysClockTo72+0xf8>)
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SetSysClockTo72+0xf8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <SetSysClockTo72+0xf8>)
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <SetSysClockTo72+0xf8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <SetSysClockTo72+0xf8>)
 800175e:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <SetSysClockTo72+0xf8>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001766:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001768:	4a18      	ldr	r2, [pc, #96]	; (80017cc <SetSysClockTo72+0xf8>)
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <SetSysClockTo72+0xf8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001772:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001774:	4a15      	ldr	r2, [pc, #84]	; (80017cc <SetSysClockTo72+0xf8>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <SetSysClockTo72+0xf8>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800177e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <SetSysClockTo72+0xf8>)
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <SetSysClockTo72+0xf8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800178c:	bf00      	nop
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <SetSysClockTo72+0xf8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f9      	beq.n	800178e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800179a:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <SetSysClockTo72+0xf8>)
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <SetSysClockTo72+0xf8>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 0303 	bic.w	r3, r3, #3
 80017a4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <SetSysClockTo72+0xf8>)
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <SetSysClockTo72+0xf8>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80017b2:	bf00      	nop
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SetSysClockTo72+0xf8>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d1f9      	bne.n	80017b4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40022000 	.word	0x40022000

080017d4 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 80017de:	f640 62c4 	movw	r2, #3780	; 0xec4
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f001 f93b 	bl	8002a60 <memset>
	broker->net = broker_net;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2208      	movs	r2, #8
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f001 f925 	bl	8002a60 <memset>
	const uint8_t max_nb_bytes = 4;
 8001816:	2304      	movs	r3, #4
 8001818:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 800181a:	7c3b      	ldrb	r3, [r7, #16]
 800181c:	461a      	mov	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	7d7a      	ldrb	r2, [r7, #21]
 800182a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800182e:	7df9      	ldrb	r1, [r7, #23]
 8001830:	fb01 f202 	mul.w	r2, r1, r2
 8001834:	4413      	add	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	01db      	lsls	r3, r3, #7
 800183c:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 800183e:	7c3b      	ldrb	r3, [r7, #16]
 8001840:	3301      	adds	r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8001846:	7c3b      	ldrb	r3, [r7, #16]
 8001848:	7dba      	ldrb	r2, [r7, #22]
 800184a:	429a      	cmp	r2, r3
 800184c:	d004      	beq.n	8001858 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 800184e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001852:	2b00      	cmp	r3, #0
 8001854:	dbe1      	blt.n	800181a <decode_pck_len+0x20>
 8001856:	e000      	b.n	800185a <decode_pck_len+0x60>
			break;
 8001858:	bf00      	nop
	return rem_length;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	461a      	mov	r2, r3
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001866:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <broker_receive>:



bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8001872:	b590      	push	{r4, r7, lr}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001884:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	23f0      	movs	r3, #240	; 0xf0
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	47a0      	blx	r4
}
 8001898:	bf00      	nop
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
	...

080018a4 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	6018      	str	r0, [r3, #0]
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	6019      	str	r1, [r3, #0]
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
	switch (pckt_type) {
 80018ca:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 80018ce:	3b01      	subs	r3, #1
 80018d0:	2b0b      	cmp	r3, #11
 80018d2:	f200 8146 	bhi.w	8001b62 <broker_packets_dispatcher+0x2be>
 80018d6:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <broker_packets_dispatcher+0x38>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	0800190d 	.word	0x0800190d
 80018e0:	08001b63 	.word	0x08001b63
 80018e4:	080019e5 	.word	0x080019e5
 80018e8:	08001b63 	.word	0x08001b63
 80018ec:	08001b63 	.word	0x08001b63
 80018f0:	08001b63 	.word	0x08001b63
 80018f4:	08001b63 	.word	0x08001b63
 80018f8:	08001a49 	.word	0x08001a49
 80018fc:	08001b63 	.word	0x08001b63
 8001900:	08001b0d 	.word	0x08001b0d
 8001904:	08001b63 	.word	0x08001b63
 8001908:	08001b4d 	.word	0x08001b4d
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 800190c:	f107 0214 	add.w	r2, r7, #20
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4611      	mov	r1, r2
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	f000 fa1d 	bl	8001d56 <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 800191c:	f107 0214 	add.w	r2, r7, #20
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4611      	mov	r1, r2
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	f000 fc00 	bl	800212c <broker_validate_conn>
		bool sesion_present = false;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (was_clean_session_requested(&conn_pck)
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fc24 	bl	8002184 <was_clean_session_requested>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d017      	beq.n	8001972 <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	6a1a      	ldr	r2, [r3, #32]
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4611      	mov	r1, r2
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f000 f966 	bl	8001c20 <is_client_exist>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	6a1a      	ldr	r2, [r3, #32]
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4611      	mov	r1, r2
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	f000 f98d 	bl	8001c86 <broker_remove_client>
			sesion_present = true;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 8001972:	f107 0214 	add.w	r2, r7, #20
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	4611      	mov	r1, r2
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f000 fbd5 	bl	800212c <broker_validate_conn>
 8001982:	4603      	mov	r3, r0
 8001984:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	f107 0114 	add.w	r1, r7, #20
 800198e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	f000 fb42 	bl	800201c <broker_create_new_client>
		add_client(broker, &new_client);
 8001998:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4611      	mov	r1, r2
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f000 f9b1 	bl	8001d0a <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 80019a8:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 80019ac:	f897 127f 	ldrb.w	r1, [r7, #639]	; 0x27f
 80019b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fb10 	bl	8001fda <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80019c4:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80019d8:	1d39      	adds	r1, r7, #4
 80019da:	2304      	movs	r3, #4
 80019dc:	6809      	ldr	r1, [r1, #0]
 80019de:	47a0      	blx	r4
		break;
 80019e0:	bf00      	nop
 80019e2:	e0be      	b.n	8001b62 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 80019e4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	4611      	mov	r1, r2
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f000 fbdc 	bl	80021ac <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 80019f4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4611      	mov	r1, r2
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	f000 fc40 	bl	8002284 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8001a04:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001a08:	881a      	ldrh	r2, [r3, #0]
 8001a0a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fc90 	bl	8002336 <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 8001a16:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f340 809c 	ble.w	8001b60 <broker_packets_dispatcher+0x2bc>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001a32:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8001a36:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8001a3a:	1d39      	adds	r1, r7, #4
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	6809      	ldr	r1, [r1, #0]
 8001a40:	2000      	movs	r0, #0
 8001a42:	47a0      	blx	r4
		}
		break;
 8001a44:	bf00      	nop
 8001a46:	e08b      	b.n	8001b60 <broker_packets_dispatcher+0x2bc>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 8001a48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	4611      	mov	r1, r2
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f000 fc8c 	bl	8002370 <broker_decode_subscribe>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	6811      	ldr	r1, [r2, #0]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	f000 f8a4 	bl	8001bb4 <broker_get_client_by_socket>
 8001a6c:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		uint8_t sub_result[MAX_SUBS_TOPIC];
		if (subscribing_client){
 8001a70:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00d      	beq.n	8001a94 <broker_packets_dispatcher+0x1f0>
			add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 8001a78:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8001a7c:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 8001a80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a84:	f103 010c 	add.w	r1, r3, #12
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8001a8e:	f000 fdd1 	bl	8002634 <add_subscriptions_from_list>
 8001a92:	e016      	b.n	8001ac2 <broker_packets_dispatcher+0x21e>
		} else {
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8001a9a:	e00c      	b.n	8001ab6 <broker_packets_dispatcher+0x212>
				sub_result[i] = SUB_ACK_FAIL;
 8001a9c:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001aa0:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2250      	movs	r2, #80	; 0x50
 8001aa8:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8001aac:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8001ab6:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 8001aba:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3ec      	bcc.n	8001a9c <broker_packets_dispatcher+0x1f8>
			}
		}
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 8001ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	8819      	ldrh	r1, [r3, #0]
 8001aca:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001ace:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 8001ad2:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8001ad6:	f000 fe39 	bl	800274c <encode_subscribe_ack>
		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&sub_ack, (SUB_ACK_ALL_HEAD_LEN + topic_nb));
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001ae4:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3304      	adds	r3, #4
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8001b02:	1d39      	adds	r1, r7, #4
 8001b04:	6809      	ldr	r1, [r1, #0]
 8001b06:	47a0      	blx	r4
		break;
 8001b08:	bf00      	nop
 8001b0a:	e02a      	b.n	8001b62 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 8001b0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4611      	mov	r1, r2
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	f000 fe40 	bl	800279c <broker_decode_unsubscribe>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8001b22:	1d3a      	adds	r2, r7, #4
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	6811      	ldr	r1, [r2, #0]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	f000 f842 	bl	8001bb4 <broker_get_client_by_socket>
 8001b30:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 8001b34:	f897 2273 	ldrb.w	r2, [r7, #627]	; 0x273
 8001b38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 8001b44:	f000 ff13 	bl	800296e <delete_listed_subscriptions>
		break;
 8001b48:	bf00      	nop
 8001b4a:	e00a      	b.n	8001b62 <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 8001b4c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4611      	mov	r1, r2
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f000 ff2b 	bl	80029b2 <broker_decode_ping_req>
		break;
 8001b5c:	bf00      	nop
 8001b5e:	e000      	b.n	8001b62 <broker_packets_dispatcher+0x2be>
		break;
 8001b60:	bf00      	nop
	}
	}
}
 8001b62:	bf00      	nop
 8001b64:	f507 7721 	add.w	r7, r7, #644	; 0x284
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}

08001b6c <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e013      	b.n	8001ba4 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	3310      	adds	r3, #16
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	6839      	ldr	r1, [r7, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fade 	bl	8000150 <strcmp>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <broker_get_client_pos_by_id+0x32>
			return i;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	e006      	b.n	8001bac <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b07      	cmp	r3, #7
 8001ba8:	d9e8      	bls.n	8001b7c <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 8001baa:	23ff      	movs	r3, #255	; 0xff
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e025      	b.n	8001c10 <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <broker_get_client_by_socket+0x56>
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	2210      	movs	r2, #16
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 ff1c 	bl	8002a2c <memcmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	e006      	b.n	8001c18 <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b07      	cmp	r3, #7
 8001c14:	d9d6      	bls.n	8001bc4 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff9d 	bl	8001b6c <broker_get_client_pos_by_id>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2bff      	cmp	r3, #255	; 0xff
 8001c36:	d001      	beq.n	8001c3c <is_client_exist+0x1c>
		return true;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <is_client_exist+0x1e>
	}
	return false;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e00f      	b.n	8001c74 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3310      	adds	r3, #16
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <can_broker_accept_next_client+0x28>
			return true;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e006      	b.n	8001c7c <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	2b07      	cmp	r3, #7
 8001c78:	d9ec      	bls.n	8001c54 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 8001c90:	6839      	ldr	r1, [r7, #0]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff6a 	bl	8001b6c <broker_get_client_pos_by_id>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2bff      	cmp	r3, #255	; 0xff
 8001ca0:	d00e      	beq.n	8001cc0 <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fed2 	bl	8002a60 <memset>
		return true;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <broker_remove_client+0x3c>
	}
	return false;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e00f      	b.n	8001cf8 <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3310      	adds	r3, #16
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <broker_first_free_pos_for_client+0x28>
			return i;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	e006      	b.n	8001d00 <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b07      	cmp	r3, #7
 8001cfc:	d9ec      	bls.n	8001cd8 <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001cfe:	23ff      	movs	r3, #255	; 0xff
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffd8 	bl	8001cca <broker_first_free_pos_for_client>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fe89 	bl	8002a4a <memcpy>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	return true;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	441a      	add	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
	pos ++;
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	3301      	adds	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	441a      	add	r2, r3
 8001d7a:	f107 030c 	add.w	r3, r7, #12
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fd3a 	bl	80017fa <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001d8c:	7c3a      	ldrb	r2, [r7, #16]
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	4413      	add	r3, r2
 8001d92:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	441a      	add	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	6892      	ldr	r2, [r2, #8]
 8001da6:	8812      	ldrh	r2, [r2, #0]
 8001da8:	0a12      	lsrs	r2, r2, #8
 8001daa:	b292      	uxth	r2, r2
 8001dac:	b211      	sxth	r1, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	6892      	ldr	r2, [r2, #8]
 8001db2:	8812      	ldrh	r2, [r2, #0]
 8001db4:	0212      	lsls	r2, r2, #8
 8001db6:	b212      	sxth	r2, r2
 8001db8:	430a      	orrs	r2, r1
 8001dba:	b212      	sxth	r2, r2
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	441a      	add	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	4413      	add	r3, r2
 8001ddc:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	441a      	add	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	611a      	str	r2, [r3, #16]
	pos += 1;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	3301      	adds	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	441a      	add	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	615a      	str	r2, [r3, #20]
	pos += 1;
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	441a      	add	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	6992      	ldr	r2, [r2, #24]
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	0a12      	lsrs	r2, r2, #8
 8001e14:	b292      	uxth	r2, r2
 8001e16:	b211      	sxth	r1, r2
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	6992      	ldr	r2, [r2, #24]
 8001e1c:	8812      	ldrh	r2, [r2, #0]
 8001e1e:	0212      	lsls	r2, r2, #8
 8001e20:	b212      	sxth	r2, r2
 8001e22:	430a      	orrs	r2, r1
 8001e24:	b212      	sxth	r2, r2
 8001e26:	b292      	uxth	r2, r2
 8001e28:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	441a      	add	r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	69d2      	ldr	r2, [r2, #28]
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	0a12      	lsrs	r2, r2, #8
 8001e46:	b292      	uxth	r2, r2
 8001e48:	b211      	sxth	r1, r2
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	69d2      	ldr	r2, [r2, #28]
 8001e4e:	8812      	ldrh	r2, [r2, #0]
 8001e50:	0212      	lsls	r2, r2, #8
 8001e52:	b212      	sxth	r2, r2
 8001e54:	430a      	orrs	r2, r1
 8001e56:	b212      	sxth	r2, r2
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	441a      	add	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	4413      	add	r3, r2
 8001e78:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d049      	beq.n	8001f1e <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	441a      	add	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	0a12      	lsrs	r2, r2, #8
 8001ea0:	b292      	uxth	r2, r2
 8001ea2:	b211      	sxth	r1, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea8:	8812      	ldrh	r2, [r2, #0]
 8001eaa:	0212      	lsls	r2, r2, #8
 8001eac:	b212      	sxth	r2, r2
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	b212      	sxth	r2, r2
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	441a      	add	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ee6:	8812      	ldrh	r2, [r2, #0]
 8001ee8:	0a12      	lsrs	r2, r2, #8
 8001eea:	b292      	uxth	r2, r2
 8001eec:	b211      	sxth	r1, r2
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ef2:	8812      	ldrh	r2, [r2, #0]
 8001ef4:	0212      	lsls	r2, r2, #8
 8001ef6:	b212      	sxth	r2, r2
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	b212      	sxth	r2, r2
 8001efc:	b292      	uxth	r2, r2
 8001efe:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	3302      	adds	r3, #2
 8001f04:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d024      	beq.n	8001f78 <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	441a      	add	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	0a12      	lsrs	r2, r2, #8
 8001f44:	b292      	uxth	r2, r2
 8001f46:	b211      	sxth	r1, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	0212      	lsls	r2, r2, #8
 8001f50:	b212      	sxth	r2, r2
 8001f52:	430a      	orrs	r2, r1
 8001f54:	b212      	sxth	r2, r2
 8001f56:	b292      	uxth	r2, r2
 8001f58:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	441a      	add	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	4413      	add	r3, r2
 8001f76:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d024      	beq.n	8001fd2 <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f9a:	8812      	ldrh	r2, [r2, #0]
 8001f9c:	0a12      	lsrs	r2, r2, #8
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	b211      	sxth	r1, r2
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fa6:	8812      	ldrh	r2, [r2, #0]
 8001fa8:	0212      	lsls	r2, r2, #8
 8001faa:	b212      	sxth	r2, r2
 8001fac:	430a      	orrs	r2, r1
 8001fae:	b212      	sxth	r2, r2
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	441a      	add	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	4413      	add	r3, r2
 8001fd0:	75fb      	strb	r3, [r7, #23]
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8001fea:	2204      	movs	r2, #4
 8001fec:	2100      	movs	r1, #0
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fd36 	bl	8002a60 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	7893      	ldrb	r3, [r2, #2]
 8002004:	78f9      	ldrb	r1, [r7, #3]
 8002006:	f361 0300 	bfi	r3, r1, #0, #1
 800200a:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	78ba      	ldrb	r2, [r7, #2]
 8002010:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8002012:	687b      	ldr	r3, [r7, #4]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 8002028:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800202c:	2100      	movs	r1, #0
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fd16 	bl	8002a60 <memset>
	memcpy(&new_client->sockaddr, sockaddr, sizeof (sockaddr_t));
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2210      	movs	r2, #16
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fd05 	bl	8002a4a <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f103 0010 	add.w	r0, r3, #16
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6a19      	ldr	r1, [r3, #32]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	f000 fd1f 	bl	8002a94 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f000 fcf7 	bl	8002a94 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f103 0093 	add.w	r0, r3, #147	; 0x93
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f000 fcec 	bl	8002a94 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f103 0032 	add.w	r0, r3, #50	; 0x32
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f000 fccf 	bl	8002a94 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f103 0052 	add.w	r0, r3, #82	; 0x52
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f000 fcbc 	bl	8002a94 <strncpy>
	}

	new_client->connected = true;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d001      	beq.n	8002144 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 8002140:	2301      	movs	r3, #1
 8002142:	e01b      	b.n	800217c <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fd7e 	bl	8001c46 <can_broker_accept_next_client>
 800214a:	4603      	mov	r3, r0
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 8002156:	2303      	movs	r3, #3
 8002158:	e010      	b.n	800217c <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f7ff fdeb 	bl	8001d40 <is_client_authorised>
 800216a:	4603      	mov	r3, r0
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8002176:	2305      	movs	r3, #5
 8002178:	e000      	b.n	800217c <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 800217a:	2300      	movs	r3, #0
	}
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
	pos ++;
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	3301      	adds	r3, #1
 80021c4:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	441a      	add	r2, r3
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fb11 	bl	80017fa <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80021de:	7c3a      	ldrb	r2, [r7, #16]
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	4413      	add	r3, r2
 80021e4:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	441a      	add	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	6892      	ldr	r2, [r2, #8]
 80021f8:	8812      	ldrh	r2, [r2, #0]
 80021fa:	0a12      	lsrs	r2, r2, #8
 80021fc:	b292      	uxth	r2, r2
 80021fe:	b211      	sxth	r1, r2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	6892      	ldr	r2, [r2, #8]
 8002204:	8812      	ldrh	r2, [r2, #0]
 8002206:	0212      	lsls	r2, r2, #8
 8002208:	b212      	sxth	r2, r2
 800220a:	430a      	orrs	r2, r1
 800220c:	b212      	sxth	r2, r2
 800220e:	b292      	uxth	r2, r2
 8002210:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
 8002214:	3302      	adds	r3, #2
 8002216:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	441a      	add	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	4413      	add	r3, r2
 800222e:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	dd18      	ble.n	8002272 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	441a      	add	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	6912      	ldr	r2, [r2, #16]
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	b292      	uxth	r2, r2
 8002258:	b211      	sxth	r1, r2
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	6912      	ldr	r2, [r2, #16]
 800225e:	8812      	ldrh	r2, [r2, #0]
 8002260:	0212      	lsls	r2, r2, #8
 8002262:	b212      	sxth	r2, r2
 8002264:	430a      	orrs	r2, r1
 8002266:	b212      	sxth	r2, r2
 8002268:	b292      	uxth	r2, r2
 800226a:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	3302      	adds	r3, #2
 8002270:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8002272:	7dfb      	ldrb	r3, [r7, #23]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	441a      	add	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	615a      	str	r2, [r3, #20]
}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e049      	b.n	8002328 <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03a      	beq.n	8002322 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 80022ac:	2300      	movs	r3, #0
 80022ae:	73bb      	strb	r3, [r7, #14]
 80022b0:	e034      	b.n	800231c <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 80022c0:	7bf9      	ldrb	r1, [r7, #15]
 80022c2:	7bba      	ldrb	r2, [r7, #14]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80022d0:	fb02 f201 	mul.w	r2, r2, r1
 80022d4:	4413      	add	r3, r2
 80022d6:	33b0      	adds	r3, #176	; 0xb0
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	3308      	adds	r3, #8
 80022de:	89ba      	ldrh	r2, [r7, #12]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fbc4 	bl	8002a70 <strncmp>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d013      	beq.n	8002316 <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80022f4:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	18d1      	adds	r1, r2, r3
 800230e:	463a      	mov	r2, r7
 8002310:	2318      	movs	r3, #24
 8002312:	47a0      	blx	r4
					break;
 8002314:	e005      	b.n	8002322 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	3301      	adds	r3, #1
 800231a:	73bb      	strb	r3, [r7, #14]
 800231c:	7bbb      	ldrb	r3, [r7, #14]
 800231e:	2b07      	cmp	r3, #7
 8002320:	d9c7      	bls.n	80022b2 <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3301      	adds	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b07      	cmp	r3, #7
 800232c:	d9b2      	bls.n	8002294 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}

08002336 <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = X_HTONS(pckt_id);
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b29b      	uxth	r3, r3
 8002354:	b21a      	sxth	r2, r3
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	b21b      	sxth	r3, r3
 800235c:	4313      	orrs	r3, r2
 800235e:	b21b      	sxth	r3, r3
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	805a      	strh	r2, [r3, #2]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	601a      	str	r2, [r3, #0]
	pos++;
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	3301      	adds	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	441a      	add	r2, r3
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fa2f 	bl	80017fa <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80023a2:	7c3a      	ldrb	r2, [r7, #16]
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	4413      	add	r3, r2
 80023a8:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	441a      	add	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6892      	ldr	r2, [r2, #8]
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	0a12      	lsrs	r2, r2, #8
 80023c0:	b292      	uxth	r2, r2
 80023c2:	b211      	sxth	r1, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	6892      	ldr	r2, [r2, #8]
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	0212      	lsls	r2, r2, #8
 80023cc:	b212      	sxth	r2, r2
 80023ce:	430a      	orrs	r2, r1
 80023d0:	b212      	sxth	r2, r2
 80023d2:	b292      	uxth	r2, r2
 80023d4:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	3302      	adds	r3, #2
 80023da:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 80023dc:	2302      	movs	r3, #2
 80023de:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80023e4:	e060      	b.n	80024a8 <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 80023e6:	7dba      	ldrb	r2, [r7, #22]
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4419      	add	r1, r3
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4403      	add	r3, r0
 80023fa:	330c      	adds	r3, #12
 80023fc:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 80023fe:	7dba      	ldrb	r2, [r7, #22]
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	330c      	adds	r3, #12
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	7dba      	ldrb	r2, [r7, #22]
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4403      	add	r3, r0
 800241e:	330c      	adds	r3, #12
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b218      	sxth	r0, r3
 800242a:	7dba      	ldrb	r2, [r7, #22]
 800242c:	683c      	ldr	r4, [r7, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4423      	add	r3, r4
 8002438:	330c      	adds	r3, #12
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	b21b      	sxth	r3, r3
 8002442:	4303      	orrs	r3, r0
 8002444:	b21b      	sxth	r3, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	800b      	strh	r3, [r1, #0]
		pos += 2;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	3302      	adds	r3, #2
 800244e:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8002450:	7dba      	ldrb	r2, [r7, #22]
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4419      	add	r1, r3
 8002458:	6838      	ldr	r0, [r7, #0]
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4403      	add	r3, r0
 8002464:	3310      	adds	r3, #16
 8002466:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 8002468:	7dba      	ldrb	r2, [r7, #22]
 800246a:	6839      	ldr	r1, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	330c      	adds	r3, #12
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	4413      	add	r3, r2
 8002482:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002484:	7dba      	ldrb	r2, [r7, #22]
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4419      	add	r1, r3
 800248c:	6838      	ldr	r0, [r7, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4403      	add	r3, r0
 8002498:	3314      	adds	r3, #20
 800249a:	6019      	str	r1, [r3, #0]
		pos += 1;
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	3301      	adds	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 80024a2:	7dbb      	ldrb	r3, [r7, #22]
 80024a4:	3301      	adds	r3, #1
 80024a6:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80024a8:	7dfa      	ldrb	r2, [r7, #23]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	7d7b      	ldrb	r3, [r7, #21]
 80024b0:	440b      	add	r3, r1
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d397      	bcc.n	80023e6 <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 80024b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	461a      	mov	r2, r3
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 faa9 	bl	8002a2c <memcmp>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <is_the_same_topic+0x24>
		return true;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <is_the_same_topic+0x26>
	}
	return false;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80024fc:	2300      	movs	r3, #0
 80024fe:	75fb      	strb	r3, [r7, #23]
 8002500:	e020      	b.n	8002544 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8002502:	7dfa      	ldrb	r2, [r7, #23]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	33b8      	adds	r3, #184	; 0xb8
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d012      	beq.n	800253e <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 8002518:	7dfa      	ldrb	r2, [r7, #23]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	33b0      	adds	r3, #176	; 0xb0
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	3308      	adds	r3, #8
 800252a:	79fa      	ldrb	r2, [r7, #7]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffc6 	bl	80024c0 <is_the_same_topic>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <get_subscribed_topic_pos+0x50>
			return i;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
 800253c:	e006      	b.n	800254c <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	3301      	adds	r3, #1
 8002542:	75fb      	strb	r3, [r7, #23]
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b07      	cmp	r3, #7
 8002548:	d9db      	bls.n	8002502 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 800254a:	23ff      	movs	r3, #255	; 0xff
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	e00f      	b.n	80025a0 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	33b8      	adds	r3, #184	; 0xb8
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	e006      	b.n	80025a8 <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b07      	cmp	r3, #7
 80025a4:	d9ec      	bls.n	8002580 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 80025a6:	23ff      	movs	r3, #255	; 0xff
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffd8 	bl	8002572 <find_first_free_slot_for_subs_topic>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2bff      	cmp	r3, #255	; 0xff
 80025ca:	d02e      	beq.n	800262a <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	33b0      	adds	r3, #176	; 0xb0
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	f103 0008 	add.w	r0, r3, #8
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f000 fa2d 	bl	8002a4a <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	33b0      	adds	r3, #176	; 0xb0
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	3306      	adds	r3, #6
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	8812      	ldrh	r2, [r2, #0]
 8002608:	b292      	uxth	r2, r2
 800260a:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	33d0      	adds	r3, #208	; 0xd0
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	3308      	adds	r3, #8
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	7812      	ldrb	r2, [r2, #0]
 8002624:	701a      	strb	r2, [r3, #0]
		return true;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <add_new_subscription_to_client+0x7a>
	}
	return false;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8002644:	2300      	movs	r3, #0
 8002646:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8002648:	e077      	b.n	800273a <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 800264a:	7dfa      	ldrb	r2, [r7, #23]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	7dfa      	ldrb	r2, [r7, #23]
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff ff3a 	bl	80024ee <get_subscribed_topic_pos>
 800267a:	4603      	mov	r3, r0
 800267c:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){ //reverse if & else
 800267e:	7d7b      	ldrb	r3, [r7, #21]
 8002680:	2bff      	cmp	r3, #255	; 0xff
 8002682:	d024      	beq.n	80026ce <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 8002684:	7d7a      	ldrb	r2, [r7, #21]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	33b0      	adds	r3, #176	; 0xb0
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4413      	add	r3, r2
 8002694:	1d98      	adds	r0, r3, #6
 8002696:	7dfa      	ldrb	r2, [r7, #23]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4413      	add	r3, r2
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff ff52 	bl	8002554 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos; //refactor, extract doubled code
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	18d1      	adds	r1, r2, r3
 80026b6:	7dfa      	ldrb	r2, [r7, #23]
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4413      	add	r3, r2
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	700b      	strb	r3, [r1, #0]
 80026cc:	e032      	b.n	8002734 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 80026ce:	7dfa      	ldrb	r2, [r7, #23]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4413      	add	r3, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff ff66 	bl	80025b2 <add_new_subscription_to_client>
 80026e6:	4603      	mov	r3, r0
 80026e8:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	18d1      	adds	r1, r2, r3
 80026f0:	7dfa      	ldrb	r2, [r7, #23]
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	461a      	mov	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	4413      	add	r3, r2
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	700b      	strb	r3, [r1, #0]
			if (!res){
 8002706:	7d3b      	ldrb	r3, [r7, #20]
 8002708:	f083 0301 	eor.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	75bb      	strb	r3, [r7, #22]
 8002716:	e007      	b.n	8002728 <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 8002718:	7dbb      	ldrb	r3, [r7, #22]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	4413      	add	r3, r2
 800271e:	2250      	movs	r2, #80	; 0x50
 8002720:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8002722:	7dbb      	ldrb	r3, [r7, #22]
 8002724:	3301      	adds	r3, #1
 8002726:	75bb      	strb	r3, [r7, #22]
 8002728:	7dba      	ldrb	r2, [r7, #22]
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3f3      	bcc.n	8002718 <add_subscriptions_from_list+0xe4>
				}
			return false;
 8002730:	2300      	movs	r3, #0
 8002732:	e007      	b.n	8002744 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	3301      	adds	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800273a:	7dfa      	ldrb	r2, [r7, #23]
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	429a      	cmp	r2, r3
 8002740:	d383      	bcc.n	800264a <add_subscriptions_from_list+0x16>
	}
	return true;
 8002742:	2301      	movs	r3, #1
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	4613      	mov	r3, r2
 800275c:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2290      	movs	r2, #144	; 0x90
 8002762:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_VAR_HEAD_LEN + topic_nb;  //(?)
 8002764:	7a7b      	ldrb	r3, [r7, #9]
 8002766:	3302      	adds	r3, #2
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = X_HTONS(pckt_id);
 800276e:	897b      	ldrh	r3, [r7, #10]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	b29b      	uxth	r3, r3
 8002774:	b21a      	sxth	r2, r3
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b21b      	sxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b21b      	sxth	r3, r3
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3304      	adds	r3, #4
 800278a:	7a7a      	ldrb	r2, [r7, #9]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f95b 	bl	8002a4a <memcpy>
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
	pos++;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	3301      	adds	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	441a      	add	r2, r3
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f819 	bl	80017fa <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80027ce:	7c3a      	ldrb	r2, [r7, #16]
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	4413      	add	r3, r2
 80027d4:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	441a      	add	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	6892      	ldr	r2, [r2, #8]
 80027e8:	8812      	ldrh	r2, [r2, #0]
 80027ea:	0a12      	lsrs	r2, r2, #8
 80027ec:	b292      	uxth	r2, r2
 80027ee:	b211      	sxth	r1, r2
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	6892      	ldr	r2, [r2, #8]
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	0212      	lsls	r2, r2, #8
 80027f8:	b212      	sxth	r2, r2
 80027fa:	430a      	orrs	r2, r1
 80027fc:	b212      	sxth	r2, r2
 80027fe:	b292      	uxth	r2, r2
 8002800:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	3302      	adds	r3, #2
 8002806:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002808:	2302      	movs	r3, #2
 800280a:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 800280c:	2300      	movs	r3, #0
 800280e:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8002810:	e060      	b.n	80028d4 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8002812:	7dba      	ldrb	r2, [r7, #22]
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4419      	add	r1, r3
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4403      	add	r3, r0
 8002826:	330c      	adds	r3, #12
 8002828:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 800282a:	7dba      	ldrb	r2, [r7, #22]
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	330c      	adds	r3, #12
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	7dba      	ldrb	r2, [r7, #22]
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4403      	add	r3, r0
 800284a:	330c      	adds	r3, #12
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	b29b      	uxth	r3, r3
 8002854:	b218      	sxth	r0, r3
 8002856:	7dba      	ldrb	r2, [r7, #22]
 8002858:	683c      	ldr	r4, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4423      	add	r3, r4
 8002864:	330c      	adds	r3, #12
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	b21b      	sxth	r3, r3
 800286e:	4303      	orrs	r3, r0
 8002870:	b21b      	sxth	r3, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	3302      	adds	r3, #2
 800287a:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 800287c:	7dba      	ldrb	r2, [r7, #22]
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4419      	add	r1, r3
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4403      	add	r3, r0
 8002890:	3310      	adds	r3, #16
 8002892:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 8002894:	7dba      	ldrb	r2, [r7, #22]
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	330c      	adds	r3, #12
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	4413      	add	r3, r2
 80028ae:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 80028b0:	7dba      	ldrb	r2, [r7, #22]
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4419      	add	r1, r3
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4403      	add	r3, r0
 80028c4:	3314      	adds	r3, #20
 80028c6:	6019      	str	r1, [r3, #0]
		pos += 1;
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	3301      	adds	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 80028ce:	7dbb      	ldrb	r3, [r7, #22]
 80028d0:	3301      	adds	r3, #1
 80028d2:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 80028d4:	7dfa      	ldrb	r2, [r7, #23]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	7d7b      	ldrb	r3, [r7, #21]
 80028dc:	440b      	add	r3, r1
 80028de:	429a      	cmp	r2, r3
 80028e0:	d397      	bcc.n	8002812 <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 80028e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}

080028ec <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e031      	b.n	8002960 <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	33b8      	adds	r3, #184	; 0xb8
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d023      	beq.n	800295a <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	33b0      	adds	r3, #176	; 0xb0
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	f103 0008 	add.w	r0, r3, #8
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	f7ff fdc4 	bl	80024c0 <is_the_same_topic>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 800293e:	7bfa      	ldrb	r2, [r7, #15]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	33b0      	adds	r3, #176	; 0xb0
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	3306      	adds	r3, #6
 8002950:	2224      	movs	r2, #36	; 0x24
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f883 	bl	8002a60 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	3301      	adds	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b07      	cmp	r3, #7
 8002964:	d9ca      	bls.n	80028fc <delete_subscribed_topic+0x10>
		}
	}
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	4613      	mov	r3, r2
 800297a:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8002980:	e00e      	b.n	80029a0 <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 8002982:	7dfa      	ldrb	r2, [r7, #23]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	4619      	mov	r1, r3
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ffa9 	bl	80028ec <delete_subscribed_topic>
		i++;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	3301      	adds	r3, #1
 800299e:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80029a0:	7dfa      	ldrb	r2, [r7, #23]
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3ec      	bcc.n	8002982 <delete_listed_subscriptions+0x14>
	}
	return true;
 80029a8:	2301      	movs	r3, #1
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	441a      	add	r2, r3
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	601a      	str	r2, [r3, #0]
	pos++;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	3301      	adds	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	441a      	add	r2, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	605a      	str	r2, [r3, #4]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2500      	movs	r5, #0
 80029e8:	4e0c      	ldr	r6, [pc, #48]	; (8002a1c <__libc_init_array+0x38>)
 80029ea:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ec:	1ba4      	subs	r4, r4, r6
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	42a5      	cmp	r5, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	f000 f864 	bl	8002ac0 <_init>
 80029f8:	2500      	movs	r5, #0
 80029fa:	4e0a      	ldr	r6, [pc, #40]	; (8002a24 <__libc_init_array+0x40>)
 80029fc:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <__libc_init_array+0x44>)
 80029fe:	1ba4      	subs	r4, r4, r6
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	42a5      	cmp	r5, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a0c:	4798      	blx	r3
 8002a0e:	3501      	adds	r5, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a16:	4798      	blx	r3
 8002a18:	3501      	adds	r5, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08002af8 	.word	0x08002af8
 8002a20:	08002af8 	.word	0x08002af8
 8002a24:	08002af8 	.word	0x08002af8
 8002a28:	08002afc 	.word	0x08002afc

08002a2c <memcmp>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	3901      	subs	r1, #1
 8002a30:	4402      	add	r2, r0
 8002a32:	4290      	cmp	r0, r2
 8002a34:	d101      	bne.n	8002a3a <memcmp+0xe>
 8002a36:	2000      	movs	r0, #0
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002a3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	d0f5      	beq.n	8002a32 <memcmp+0x6>
 8002a46:	1b18      	subs	r0, r3, r4
 8002a48:	bd10      	pop	{r4, pc}

08002a4a <memcpy>:
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	1e43      	subs	r3, r0, #1
 8002a4e:	440a      	add	r2, r1
 8002a50:	4291      	cmp	r1, r2
 8002a52:	d100      	bne.n	8002a56 <memcpy+0xc>
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a5e:	e7f7      	b.n	8002a50 <memcpy+0x6>

08002a60 <memset>:
 8002a60:	4603      	mov	r3, r0
 8002a62:	4402      	add	r2, r0
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d100      	bne.n	8002a6a <memset+0xa>
 8002a68:	4770      	bx	lr
 8002a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6e:	e7f9      	b.n	8002a64 <memset+0x4>

08002a70 <strncmp>:
 8002a70:	b510      	push	{r4, lr}
 8002a72:	b16a      	cbz	r2, 8002a90 <strncmp+0x20>
 8002a74:	3901      	subs	r1, #1
 8002a76:	1884      	adds	r4, r0, r2
 8002a78:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002a7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d103      	bne.n	8002a8c <strncmp+0x1c>
 8002a84:	42a0      	cmp	r0, r4
 8002a86:	d001      	beq.n	8002a8c <strncmp+0x1c>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f5      	bne.n	8002a78 <strncmp+0x8>
 8002a8c:	1a98      	subs	r0, r3, r2
 8002a8e:	bd10      	pop	{r4, pc}
 8002a90:	4610      	mov	r0, r2
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <strncpy>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4604      	mov	r4, r0
 8002a98:	b902      	cbnz	r2, 8002a9c <strncpy+0x8>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8002aa2:	1e56      	subs	r6, r2, #1
 8002aa4:	f803 5b01 	strb.w	r5, [r3], #1
 8002aa8:	b91d      	cbnz	r5, 8002ab2 <strncpy+0x1e>
 8002aaa:	4414      	add	r4, r2
 8002aac:	42a3      	cmp	r3, r4
 8002aae:	d103      	bne.n	8002ab8 <strncpy+0x24>
 8002ab0:	bd70      	pop	{r4, r5, r6, pc}
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	e7ef      	b.n	8002a98 <strncpy+0x4>
 8002ab8:	f803 5b01 	strb.w	r5, [r3], #1
 8002abc:	e7f6      	b.n	8002aac <strncpy+0x18>
	...

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
