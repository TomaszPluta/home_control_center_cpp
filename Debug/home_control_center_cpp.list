
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  0800837c  0800837c  0001837c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08008394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000484  20000070  08008404  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200004f4  08008404  000204f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001519c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002cdd  00000000  00000000  00035235  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c98  00000000  00000000  00037f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b68  00000000  00000000  00038bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005bfd  00000000  00000000  00039718  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000d2ea  00000000  00000000  0003f315  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004c5ff  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000b628  00000000  00000000  0004c67c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000030  00000000  00000000  00057e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000001ed  00000000  00000000  00057ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e1c 	.word	0x08006e1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006e1c 	.word	0x08006e1c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	689a      	ldr	r2, [r3, #8]
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	683a      	ldr	r2, [r7, #0]
 800019e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	6892      	ldr	r2, [r2, #8]
 80001d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	6852      	ldr	r2, [r2, #4]
 80001da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d103      	bne.n	80001ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <pxCurrentTCBConst2>)
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	6808      	ldr	r0, [r1, #0]
 8000216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800021a:	f380 8809 	msr	PSP, r0
 800021e:	f3bf 8f6f 	isb	sy
 8000222:	f04f 0000 	mov.w	r0, #0
 8000226:	f380 8811 	msr	BASEPRI, r0
 800022a:	f04e 0e0d 	orr.w	lr, lr, #13
 800022e:	4770      	bx	lr

08000230 <pxCurrentTCBConst2>:
 8000230:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
	...

08000240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000240:	f3ef 8009 	mrs	r0, PSP
 8000244:	f3bf 8f6f 	isb	sy
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <pxCurrentTCBConst>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000250:	6010      	str	r0, [r2, #0]
 8000252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000256:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800025a:	f380 8811 	msr	BASEPRI, r0
 800025e:	f000 f8df 	bl	8000420 <vTaskSwitchContext>
 8000262:	f04f 0000 	mov.w	r0, #0
 8000266:	f380 8811 	msr	BASEPRI, r0
 800026a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	6808      	ldr	r0, [r1, #0]
 8000272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000276:	f380 8809 	msr	PSP, r0
 800027a:	f3bf 8f6f 	isb	sy
 800027e:	4770      	bx	lr

08000280 <pxCurrentTCBConst>:
 8000280:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop

08000288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800028e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	f3bf 8f6f 	isb	sy
 800029a:	f3bf 8f4f 	dsb	sy
 800029e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80002a0:	f000 f812 	bl	80002c8 <xTaskIncrementTick>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <SysTick_Handler+0x3c>)
 80002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	e000ed04 	.word	0xe000ed04

080002c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002d2:	4b48      	ldr	r3, [pc, #288]	; (80003f4 <xTaskIncrementTick+0x12c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d17c      	bne.n	80003d4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002da:	4b47      	ldr	r3, [pc, #284]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002e2:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d110      	bne.n	8000310 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ee:	4b43      	ldr	r3, [pc, #268]	; (80003fc <xTaskIncrementTick+0x134>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <xTaskIncrementTick+0x138>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a40      	ldr	r2, [pc, #256]	; (80003fc <xTaskIncrementTick+0x134>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	4a40      	ldr	r2, [pc, #256]	; (8000400 <xTaskIncrementTick+0x138>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b40      	ldr	r3, [pc, #256]	; (8000404 <xTaskIncrementTick+0x13c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <xTaskIncrementTick+0x13c>)
 800030a:	6013      	str	r3, [r2, #0]
 800030c:	f000 f8ce 	bl	80004ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000310:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <xTaskIncrementTick+0x140>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	429a      	cmp	r2, r3
 8000318:	d34d      	bcc.n	80003b6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <xTaskIncrementTick+0x134>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <xTaskIncrementTick+0x60>
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <xTaskIncrementTick+0x62>
 8000328:	2300      	movs	r3, #0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <xTaskIncrementTick+0x140>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000334:	601a      	str	r2, [r3, #0]
					break;
 8000336:	e03e      	b.n	80003b6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <xTaskIncrementTick+0x134>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d203      	bcs.n	8000358 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <xTaskIncrementTick+0x140>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
						break;
 8000356:	e02e      	b.n	80003b6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3304      	adds	r3, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff2c 	bl	80001ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000366:	2b00      	cmp	r3, #0
 8000368:	d004      	beq.n	8000374 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3318      	adds	r3, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff23 	bl	80001ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000378:	2201      	movs	r2, #1
 800037a:	409a      	lsls	r2, r3
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <xTaskIncrementTick+0x144>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	4a22      	ldr	r2, [pc, #136]	; (800040c <xTaskIncrementTick+0x144>)
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4a1f      	ldr	r2, [pc, #124]	; (8000410 <xTaskIncrementTick+0x148>)
 8000394:	441a      	add	r2, r3
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	3304      	adds	r3, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4610      	mov	r0, r2
 800039e:	f7ff fee9 	bl	8000174 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d3b4      	bcc.n	800031a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003b4:	e7b1      	b.n	800031a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003bc:	4914      	ldr	r1, [pc, #80]	; (8000410 <xTaskIncrementTick+0x148>)
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d907      	bls.n	80003de <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e004      	b.n	80003de <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <xTaskIncrementTick+0x150>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <xTaskIncrementTick+0x150>)
 80003dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <xTaskIncrementTick+0x154>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ea:	697b      	ldr	r3, [r7, #20]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000114 	.word	0x20000114
 80003f8:	200000fc 	.word	0x200000fc
 80003fc:	200000f4 	.word	0x200000f4
 8000400:	200000f8 	.word	0x200000f8
 8000404:	2000010c 	.word	0x2000010c
 8000408:	20000110 	.word	0x20000110
 800040c:	20000100 	.word	0x20000100
 8000410:	20000090 	.word	0x20000090
 8000414:	2000008c 	.word	0x2000008c
 8000418:	20000104 	.word	0x20000104
 800041c:	20000108 	.word	0x20000108

08000420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <vTaskSwitchContext+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d003      	beq.n	8000436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800042e:	4b1b      	ldr	r3, [pc, #108]	; (800049c <vTaskSwitchContext+0x7c>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000434:	e02a      	b.n	800048c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <vTaskSwitchContext+0x7c>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <vTaskSwitchContext+0x80>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	fab3 f383 	clz	r3, r3
 8000448:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	f1c3 031f 	rsb	r3, r3, #31
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <vTaskSwitchContext+0x84>)
 800045e:	4413      	add	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3308      	adds	r3, #8
 8000474:	429a      	cmp	r2, r3
 8000476:	d104      	bne.n	8000482 <vTaskSwitchContext+0x62>
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <vTaskSwitchContext+0x88>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000114 	.word	0x20000114
 800049c:	20000108 	.word	0x20000108
 80004a0:	20000100 	.word	0x20000100
 80004a4:	20000090 	.word	0x20000090
 80004a8:	2000008c 	.word	0x2000008c

080004ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <prvResetNextTaskUnblockTime+0x14>
 80004bc:	2301      	movs	r3, #1
 80004be:	e000      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x16>
 80004c0:	2300      	movs	r3, #0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ce:	e008      	b.n	80004e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	200000f4 	.word	0x200000f4
 80004f0:	20000110 	.word	0x20000110

080004f4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004fc:	4a03      	ldr	r2, [pc, #12]	; (800050c <EXTI_ClearFlag+0x18>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6153      	str	r3, [r2, #20]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40010400 	.word	0x40010400

08000510 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <EXTI_ClearITPendingBit+0x18>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6153      	str	r3, [r2, #20]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40010400 	.word	0x40010400

0800052c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800052c:	b480      	push	{r7}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	78db      	ldrb	r3, [r3, #3]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	78db      	ldrb	r3, [r3, #3]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	461a      	mov	r2, r3
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	4313      	orrs	r3, r2
 800056e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d044      	beq.n	8000604 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	e038      	b.n	80005f8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000586:	2201      	movs	r2, #1
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d126      	bne.n	80005f2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005aa:	220f      	movs	r2, #15
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	4013      	ands	r3, r2
 80005bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005be:	69fa      	ldr	r2, [r7, #28]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	2b28      	cmp	r3, #40	; 0x28
 80005d2:	d105      	bne.n	80005e0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005d4:	2201      	movs	r2, #1
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	409a      	lsls	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	e008      	b.n	80005f2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	2b48      	cmp	r3, #72	; 0x48
 80005e6:	d104      	bne.n	80005f2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005e8:	2201      	movs	r2, #1
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	409a      	lsls	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	3301      	adds	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d946      	bls.n	800069a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	e03a      	b.n	800068e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	3308      	adds	r3, #8
 800061c:	2201      	movs	r2, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d127      	bne.n	8000688 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800063e:	220f      	movs	r2, #15
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	43db      	mvns	r3, r3
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	4013      	ands	r3, r2
 8000650:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000652:	69fa      	ldr	r2, [r7, #28]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4313      	orrs	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	78db      	ldrb	r3, [r3, #3]
 8000664:	2b28      	cmp	r3, #40	; 0x28
 8000666:	d105      	bne.n	8000674 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	3308      	adds	r3, #8
 800066c:	2201      	movs	r2, #1
 800066e:	409a      	lsls	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	2b48      	cmp	r3, #72	; 0x48
 800067a:	d105      	bne.n	8000688 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	3308      	adds	r3, #8
 8000680:	2201      	movs	r2, #1
 8000682:	409a      	lsls	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	3301      	adds	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d9c1      	bls.n	8000618 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	605a      	str	r2, [r3, #4]
  }
}
 800069a:	bf00      	nop
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	611a      	str	r2, [r3, #16]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	615a      	str	r2, [r3, #20]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ee:	4909      	ldr	r1, [pc, #36]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006fa:	e006      	b.n	800070a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006fc:	4905      	ldr	r1, [pc, #20]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	43db      	mvns	r3, r3
 8000706:	4013      	ands	r3, r2
 8000708:	618b      	str	r3, [r1, #24]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000

08000718 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000736:	e006      	b.n	8000746 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000738:	4905      	ldr	r1, [pc, #20]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	43db      	mvns	r3, r3
 8000742:	4013      	ands	r3, r2
 8000744:	61cb      	str	r3, [r1, #28]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800076e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	89fa      	ldrh	r2, [r7, #14]
 80007b6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8b9b      	ldrh	r3, [r3, #28]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	8a1a      	ldrh	r2, [r3, #16]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	821a      	strh	r2, [r3, #16]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	460b      	mov	r3, r1
 80007e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d008      	beq.n	80007fe <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007fc:	e007      	b.n	800080e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	b29a      	uxth	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	801a      	strh	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	819a      	strh	r2, [r3, #12]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	b29b      	uxth	r3, r3
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d008      	beq.n	8000870 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	889b      	ldrh	r3, [r3, #4]
 8000862:	b29b      	uxth	r3, r3
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800086e:	e007      	b.n	8000880 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	b29b      	uxth	r3, r3
 8000876:	f023 0304 	bic.w	r3, r3, #4
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	809a      	strh	r2, [r3, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	891b      	ldrh	r3, [r3, #8]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	4013      	ands	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e001      	b.n	80008b4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80008d4:	e007      	b.n	80008e6 <mem_cpy+0x26>
		*d++ = *s++;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	617a      	str	r2, [r7, #20]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	1c51      	adds	r1, r2, #1
 80008e0:	6139      	str	r1, [r7, #16]
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f2      	bne.n	80008d6 <mem_cpy+0x16>
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80008fa:	b480      	push	{r7}
 80008fc:	b087      	sub	sp, #28
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800090a:	e005      	b.n	8000918 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	617a      	str	r2, [r7, #20]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f4      	bne.n	800090c <mem_set+0x12>
}
 8000922:	bf00      	nop
 8000924:	371c      	adds	r7, #28
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8000944:	bf00      	nop
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d00d      	beq.n	800096c <mem_cmp+0x40>
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	61fa      	str	r2, [r7, #28]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	61ba      	str	r2, [r7, #24]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	1acb      	subs	r3, r1, r3
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0ec      	beq.n	8000946 <mem_cmp+0x1a>
	return r;
 800096c:	697b      	ldr	r3, [r7, #20]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000982:	e002      	b.n	800098a <chk_chr+0x12>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <chk_chr+0x26>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	429a      	cmp	r2, r3
 800099c:	d1f2      	bne.n	8000984 <chk_chr+0xc>
	return *str;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d048      	beq.n	8000a56 <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d030      	beq.n	8000a2e <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7858      	ldrb	r0, [r3, #1]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80009d6:	2301      	movs	r3, #1
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	f002 f88f 	bl	8002afc <disk_write>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <move_window+0x3c>
				return FR_DISK_ERR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e037      	b.n	8000a58 <move_window+0xac>
			fs->wflag = 0;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a1a      	ldr	r2, [r3, #32]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	441a      	add	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d917      	bls.n	8000a2e <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	78db      	ldrb	r3, [r3, #3]
 8000a02:	72fb      	strb	r3, [r7, #11]
 8000a04:	e010      	b.n	8000a28 <move_window+0x7c>
					wsect += fs->fsize;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7858      	ldrb	r0, [r3, #1]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	f002 f86d 	bl	8002afc <disk_write>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000a22:	7afb      	ldrb	r3, [r7, #11]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	72fb      	strb	r3, [r7, #11]
 8000a28:	7afb      	ldrb	r3, [r7, #11]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d8eb      	bhi.n	8000a06 <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d010      	beq.n	8000a56 <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7858      	ldrb	r0, [r3, #1]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000a3e:	2301      	movs	r3, #1
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	f001 ffeb 	bl	8002a1c <disk_read>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <move_window+0xa4>
				return FR_DISK_ERR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e003      	b.n	8000a58 <move_window+0xac>
			fs->winsect = sector;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff9e 	bl	80009ac <move_window>
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 808e 	bne.w	8000b98 <sync+0x138>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d17d      	bne.n	8000b80 <sync+0x120>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	795b      	ldrb	r3, [r3, #5]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d079      	beq.n	8000b80 <sync+0x120>
			fs->winsect = 0;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3330      	adds	r3, #48	; 0x30
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff2c 	bl	80008fa <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2255      	movs	r2, #85	; 0x55
 8000aa6:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	22aa      	movs	r2, #170	; 0xaa
 8000aae:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2252      	movs	r2, #82	; 0x52
 8000ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2252      	movs	r2, #82	; 0x52
 8000abe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2261      	movs	r2, #97	; 0x61
 8000ac6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2241      	movs	r2, #65	; 0x41
 8000ace:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2272      	movs	r2, #114	; 0x72
 8000ad6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2272      	movs	r2, #114	; 0x72
 8000ade:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2241      	movs	r2, #65	; 0x41
 8000ae6:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2261      	movs	r2, #97	; 0x61
 8000aee:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	0c1b      	lsrs	r3, r3, #16
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	0e1b      	lsrs	r3, r3, #24
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	0c1b      	lsrs	r3, r3, #16
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0e1b      	lsrs	r3, r3, #24
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7858      	ldrb	r0, [r3, #1]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	2301      	movs	r3, #1
 8000b76:	f001 ffc1 	bl	8002afc <disk_write>
			fs->fsi_flag = 0;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 f845 	bl	8002c18 <disk_ioctl>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <sync+0x138>
			res = FR_DISK_ERR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3b02      	subs	r3, #2
 8000bb0:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	1e9a      	subs	r2, r3, #2
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d801      	bhi.n	8000bc2 <clust2sect+0x20>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e008      	b.n	8000bd4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	fb03 f202 	mul.w	r2, r3, r2
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	4413      	add	r3, r2
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d904      	bls.n	8000bf8 <get_fat+0x1a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	699a      	ldr	r2, [r3, #24]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d801      	bhi.n	8000bfc <get_fat+0x1e>
		return 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e09b      	b.n	8000d34 <get_fat+0x156>

	switch (fs->fs_type) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d046      	beq.n	8000c92 <get_fat+0xb4>
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d064      	beq.n	8000cd2 <get_fat+0xf4>
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	f040 8091 	bne.w	8000d30 <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	085b      	lsrs	r3, r3, #1
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4413      	add	r3, r2
 8000c1a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a1a      	ldr	r2, [r3, #32]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	0a5b      	lsrs	r3, r3, #9
 8000c24:	4413      	add	r3, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff febf 	bl	80009ac <move_window>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d176      	bne.n	8000d22 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a1a      	ldr	r2, [r3, #32]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	0a5b      	lsrs	r3, r3, #9
 8000c52:	4413      	add	r3, r2
 8000c54:	4619      	mov	r1, r3
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff fea8 	bl	80009ac <move_window>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d161      	bne.n	8000d26 <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	461a      	mov	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <get_fat+0xac>
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	091b      	lsrs	r3, r3, #4
 8000c88:	e054      	b.n	8000d34 <get_fat+0x156>
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c90:	e050      	b.n	8000d34 <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a1a      	ldr	r2, [r3, #32]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fe84 	bl	80009ac <move_window>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d13f      	bne.n	8000d2a <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000cb2:	3330      	adds	r3, #48	; 0x30
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	e030      	b.n	8000d34 <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a1a      	ldr	r2, [r3, #32]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	09db      	lsrs	r3, r3, #7
 8000cda:	4413      	add	r3, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fe64 	bl	80009ac <move_window>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d121      	bne.n	8000d2e <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000cf2:	3330      	adds	r3, #48	; 0x30
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	061a      	lsls	r2, r3, #24
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3302      	adds	r3, #2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	3201      	adds	r2, #1
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	0212      	lsls	r2, r2, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d20:	e008      	b.n	8000d34 <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000d22:	bf00      	nop
 8000d24:	e004      	b.n	8000d30 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000d26:	bf00      	nop
 8000d28:	e002      	b.n	8000d30 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000d2a:	bf00      	nop
 8000d2c:	e000      	b.n	8000d30 <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000d2e:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d904      	bls.n	8000d58 <put_fat+0x1c>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d802      	bhi.n	8000d5e <put_fat+0x22>
		res = FR_INT_ERR;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	77fb      	strb	r3, [r7, #31]
 8000d5c:	e0e9      	b.n	8000f32 <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d070      	beq.n	8000e48 <put_fat+0x10c>
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	f000 8091 	beq.w	8000e8e <put_fat+0x152>
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	f040 80d3 	bne.w	8000f18 <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	085b      	lsrs	r3, r3, #1
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6a1a      	ldr	r2, [r3, #32]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	4413      	add	r3, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fe0d 	bl	80009ac <move_window>
 8000d92:	4603      	mov	r3, r0
 8000d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000d96:	7ffb      	ldrb	r3, [r7, #31]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f040 80c0 	bne.w	8000f1e <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000da4:	3330      	adds	r3, #48	; 0x30
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00d      	beq.n	8000dd2 <put_fat+0x96>
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	e001      	b.n	8000dd6 <put_fat+0x9a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	7013      	strb	r3, [r2, #0]
			bc++;
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2201      	movs	r2, #1
 8000de4:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a1a      	ldr	r2, [r3, #32]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	0a5b      	lsrs	r3, r3, #9
 8000dee:	4413      	add	r3, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff fdda 	bl	80009ac <move_window>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000dfc:	7ffb      	ldrb	r3, [r7, #31]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 808f 	bne.w	8000f22 <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e0a:	3330      	adds	r3, #48	; 0x30
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <put_fat+0xe8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	e00e      	b.n	8000e42 <put_fat+0x106>
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	f023 030f 	bic.w	r3, r3, #15
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	7013      	strb	r3, [r2, #0]
			break;
 8000e46:	e071      	b.n	8000f2c <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6a1a      	ldr	r2, [r3, #32]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	4413      	add	r3, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fda9 	bl	80009ac <move_window>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000e5e:	7ffb      	ldrb	r3, [r7, #31]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d160      	bne.n	8000f26 <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000e6c:	3330      	adds	r3, #48	; 0x30
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	b292      	uxth	r2, r2
 8000e84:	0a12      	lsrs	r2, r2, #8
 8000e86:	b292      	uxth	r2, r2
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	701a      	strb	r2, [r3, #0]
			break;
 8000e8c:	e04e      	b.n	8000f2c <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a1a      	ldr	r2, [r3, #32]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	09db      	lsrs	r3, r3, #7
 8000e96:	4413      	add	r3, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff fd86 	bl	80009ac <move_window>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000ea4:	7ffb      	ldrb	r3, [r7, #31]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d13f      	bne.n	8000f2a <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000eb2:	3330      	adds	r3, #48	; 0x30
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3303      	adds	r3, #3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	061a      	lsls	r2, r3, #24
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	041b      	lsls	r3, r3, #16
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	3201      	adds	r2, #1
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	0212      	lsls	r2, r2, #8
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	b292      	uxth	r2, r2
 8000ef6:	0a12      	lsrs	r2, r2, #8
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3302      	adds	r3, #2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	0c12      	lsrs	r2, r2, #16
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3303      	adds	r3, #3
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	0e12      	lsrs	r2, r2, #24
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	701a      	strb	r2, [r3, #0]
			break;
 8000f16:	e009      	b.n	8000f2c <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	77fb      	strb	r3, [r7, #31]
 8000f1c:	e006      	b.n	8000f2c <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000f1e:	bf00      	nop
 8000f20:	e004      	b.n	8000f2c <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000f22:	bf00      	nop
 8000f24:	e002      	b.n	8000f2c <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000f26:	bf00      	nop
 8000f28:	e000      	b.n	8000f2c <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000f2a:	bf00      	nop
		}
		fs->wflag = 1;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d904      	bls.n	8000f56 <remove_chain+0x1a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	699a      	ldr	r2, [r3, #24]
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d802      	bhi.n	8000f5c <remove_chain+0x20>
		res = FR_INT_ERR;
 8000f56:	2302      	movs	r3, #2
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e039      	b.n	8000fd0 <remove_chain+0x94>

	} else {
		res = FR_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8000f60:	e02d      	b.n	8000fbe <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8000f62:	6839      	ldr	r1, [r7, #0]
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fe3a 	bl	8000bde <get_fat>
 8000f6a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d02b      	beq.n	8000fca <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <remove_chain+0x42>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e028      	b.n	8000fd0 <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f84:	d102      	bne.n	8000f8c <remove_chain+0x50>
 8000f86:	2301      	movs	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e021      	b.n	8000fd0 <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6839      	ldr	r1, [r7, #0]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fed3 	bl	8000d3c <put_fat>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d116      	bne.n	8000fce <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fa8:	d007      	beq.n	8000fba <remove_chain+0x7e>
				fs->free_clust++;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699a      	ldr	r2, [r3, #24]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8cc      	bhi.n	8000f62 <remove_chain+0x26>
 8000fc8:	e002      	b.n	8000fd0 <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 8000fca:	bf00      	nop
 8000fcc:	e000      	b.n	8000fd0 <remove_chain+0x94>
			if (res != FR_OK) break;
 8000fce:	bf00      	nop
		}
	}

	return res;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10d      	bne.n	8001006 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <create_chain+0x26>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d815      	bhi.n	800102c <create_chain+0x52>
 8001000:	2301      	movs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e012      	b.n	800102c <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8001006:	6839      	ldr	r1, [r7, #0]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fde8 	bl	8000bde <get_fat>
 800100e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d801      	bhi.n	800101a <create_chain+0x40>
 8001016:	2301      	movs	r3, #1
 8001018:	e064      	b.n	80010e4 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	429a      	cmp	r2, r3
 8001022:	d901      	bls.n	8001028 <create_chain+0x4e>
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	e05d      	b.n	80010e4 <create_chain+0x10a>
		scl = clst;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699a      	ldr	r2, [r3, #24]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	d807      	bhi.n	8001050 <create_chain+0x76>
			ncl = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d901      	bls.n	8001050 <create_chain+0x76>
 800104c:	2300      	movs	r3, #0
 800104e:	e049      	b.n	80010e4 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8001050:	6979      	ldr	r1, [r7, #20]
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fdc3 	bl	8000bde <get_fat>
 8001058:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001066:	d002      	beq.n	800106e <create_chain+0x94>
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <create_chain+0x98>
			return cs;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	e038      	b.n	80010e4 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	429a      	cmp	r2, r3
 8001078:	d1da      	bne.n	8001030 <create_chain+0x56>
 800107a:	2300      	movs	r3, #0
 800107c:	e032      	b.n	80010e4 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 800107e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8001080:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8001084:	6979      	ldr	r1, [r7, #20]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fe58 	bl	8000d3c <put_fat>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <create_chain+0xd0>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	6839      	ldr	r1, [r7, #0]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe4b 	bl	8000d3c <put_fat>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d110      	bne.n	80010d2 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010be:	d010      	beq.n	80010e2 <create_chain+0x108>
			fs->free_clust--;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	715a      	strb	r2, [r3, #5]
 80010d0:	e007      	b.n	80010e2 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d102      	bne.n	80010de <create_chain+0x104>
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010dc:	e000      	b.n	80010e0 <create_chain+0x106>
 80010de:	2301      	movs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80010e2:	697b      	ldr	r3, [r7, #20]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d005      	beq.n	8001116 <dir_sdi+0x2a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	429a      	cmp	r2, r3
 8001114:	d801      	bhi.n	800111a <dir_sdi+0x2e>
		return FR_INT_ERR;
 8001116:	2302      	movs	r3, #2
 8001118:	e066      	b.n	80011e8 <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <dir_sdi+0x46>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d103      	bne.n	8001132 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d114      	bne.n	8001162 <dir_sdi+0x76>
		dj->clust = clst;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	891b      	ldrh	r3, [r3, #8]
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	429a      	cmp	r2, r3
 8001148:	d301      	bcc.n	800114e <dir_sdi+0x62>
			return FR_INT_ERR;
 800114a:	2302      	movs	r3, #2
 800114c:	e04c      	b.n	80011e8 <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	887a      	ldrh	r2, [r7, #2]
 8001156:	0912      	lsrs	r2, r2, #4
 8001158:	b292      	uxth	r2, r2
 800115a:	441a      	add	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	e036      	b.n	80011d0 <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	789b      	ldrb	r3, [r3, #2]
 8001168:	b29b      	uxth	r3, r3
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 800116e:	e01b      	b.n	80011a8 <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fd31 	bl	8000bde <get_fat>
 800117c:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001184:	d101      	bne.n	800118a <dir_sdi+0x9e>
 8001186:	2301      	movs	r3, #1
 8001188:	e02e      	b.n	80011e8 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d905      	bls.n	800119c <dir_sdi+0xb0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d801      	bhi.n	80011a0 <dir_sdi+0xb4>
				return FR_INT_ERR;
 800119c:	2302      	movs	r3, #2
 800119e:	e023      	b.n	80011e8 <dir_sdi+0xfc>
			idx -= ic;
 80011a0:	887a      	ldrh	r2, [r7, #2]
 80011a2:	897b      	ldrh	r3, [r7, #10]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 80011a8:	887a      	ldrh	r2, [r7, #2]
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d2df      	bcs.n	8001170 <dir_sdi+0x84>
		}
		dj->clust = clst;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68f9      	ldr	r1, [r7, #12]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fcf0 	bl	8000ba2 <clust2sect>
 80011c2:	4602      	mov	r2, r0
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	441a      	add	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	015b      	lsls	r3, r3, #5
 80011e0:	441a      	add	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	88db      	ldrh	r3, [r3, #6]
 80011fe:	3301      	adds	r3, #1
 8001200:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8001202:	893b      	ldrh	r3, [r7, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <dir_next+0x20>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <dir_next+0x24>
		return FR_NO_FILE;
 8001210:	2304      	movs	r3, #4
 8001212:	e0bd      	b.n	8001390 <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8001214:	893b      	ldrh	r3, [r7, #8]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	b29b      	uxth	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f040 80a8 	bne.w	8001372 <dir_next+0x182>
		dj->sect++;					/* Next sector */
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	891b      	ldrh	r3, [r3, #8]
 800123a:	893a      	ldrh	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	f0c0 8098 	bcc.w	8001372 <dir_next+0x182>
				return FR_NO_FILE;
 8001242:	2304      	movs	r3, #4
 8001244:	e0a4      	b.n	8001390 <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8001246:	893b      	ldrh	r3, [r7, #8]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	789b      	ldrb	r3, [r3, #2]
 8001254:	3b01      	subs	r3, #1
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 808a 	bne.w	8001372 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4619      	mov	r1, r3
 8001268:	4610      	mov	r0, r2
 800126a:	f7ff fcb8 	bl	8000bde <get_fat>
 800126e:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d801      	bhi.n	800127a <dir_next+0x8a>
 8001276:	2302      	movs	r3, #2
 8001278:	e08a      	b.n	8001390 <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d101      	bne.n	8001286 <dir_next+0x96>
 8001282:	2301      	movs	r3, #1
 8001284:	e084      	b.n	8001390 <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	d863      	bhi.n	800135a <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <dir_next+0xac>
 8001298:	2304      	movs	r3, #4
 800129a:	e079      	b.n	8001390 <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4610      	mov	r0, r2
 80012a8:	f7ff fe97 	bl	8000fda <create_chain>
 80012ac:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <dir_next+0xc8>
 80012b4:	2307      	movs	r3, #7
 80012b6:	e06b      	b.n	8001390 <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <dir_next+0xd2>
 80012be:	2302      	movs	r3, #2
 80012c0:	e066      	b.n	8001390 <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c8:	d101      	bne.n	80012ce <dir_next+0xde>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e060      	b.n	8001390 <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fb69 	bl	80009ac <move_window>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <dir_next+0xf4>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e055      	b.n	8001390 <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3330      	adds	r3, #48	; 0x30
 80012ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fb02 	bl	80008fa <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681c      	ldr	r4, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fc4e 	bl	8000ba2 <clust2sect>
 8001306:	4603      	mov	r3, r0
 8001308:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800130a:	2300      	movs	r3, #0
 800130c:	72fb      	strb	r3, [r7, #11]
 800130e:	e016      	b.n	800133e <dir_next+0x14e>
						dj->fs->wflag = 1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb44 	bl	80009ac <move_window>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <dir_next+0x13e>
 800132a:	2301      	movs	r3, #1
 800132c:	e030      	b.n	8001390 <dir_next+0x1a0>
						dj->fs->winsect++;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	3201      	adds	r2, #1
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	3301      	adds	r3, #1
 800133c:	72fb      	strb	r3, [r7, #11]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	789b      	ldrb	r3, [r3, #2]
 8001344:	7afa      	ldrb	r2, [r7, #11]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3e2      	bcc.n	8001310 <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001354:	7afa      	ldrb	r2, [r7, #11]
 8001356:	1a8a      	subs	r2, r1, r2
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68f9      	ldr	r1, [r7, #12]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fc1b 	bl	8000ba2 <clust2sect>
 800136c:	4602      	mov	r2, r0
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	893a      	ldrh	r2, [r7, #8]
 8001376:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001380:	893b      	ldrh	r3, [r7, #8]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	441a      	add	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}

08001398 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 80013a0:	2100      	movs	r1, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fea2 	bl	80010ec <dir_sdi>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <dir_find+0x1e>
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	e037      	b.n	8001426 <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f7ff faf3 	bl	80009ac <move_window>
 80013c6:	4603      	mov	r3, r0
 80013c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d126      	bne.n	800141e <dir_find+0x86>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <dir_find+0x50>
 80013e2:	2304      	movs	r3, #4
 80013e4:	75fb      	strb	r3, [r7, #23]
 80013e6:	e01d      	b.n	8001424 <dir_find+0x8c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	330b      	adds	r3, #11
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <dir_find+0x72>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	220b      	movs	r2, #11
 80013fc:	4619      	mov	r1, r3
 80013fe:	6938      	ldr	r0, [r7, #16]
 8001400:	f7ff fa94 	bl	800092c <mem_cmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <dir_find+0x8a>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff feef 	bl	80011f0 <dir_next>
 8001412:	4603      	mov	r3, r0
 8001414:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0cc      	beq.n	80013b6 <dir_find+0x1e>
 800141c:	e002      	b.n	8001424 <dir_find+0x8c>
		if (res != FR_OK) break;
 800141e:	bf00      	nop
 8001420:	e000      	b.n	8001424 <dir_find+0x8c>
			break;
 8001422:	bf00      	nop

	return res;
 8001424:	7dfb      	ldrb	r3, [r7, #23]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
 8001436:	2100      	movs	r1, #0
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fe57 	bl	80010ec <dir_sdi>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d121      	bne.n	800148c <dir_register+0x5e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4619      	mov	r1, r3
 8001452:	4610      	mov	r0, r2
 8001454:	f7ff faaa 	bl	80009ac <move_window>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d113      	bne.n	800148a <dir_register+0x5c>
			c = *dj->dir;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	2be5      	cmp	r3, #229	; 0xe5
 800146e:	d00d      	beq.n	800148c <dir_register+0x5e>
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <dir_register+0x5e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
 8001476:	2101      	movs	r1, #1
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff feb9 	bl	80011f0 <dir_next>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0df      	beq.n	8001448 <dir_register+0x1a>
 8001488:	e000      	b.n	800148c <dir_register+0x5e>
			if (res != FR_OK) break;
 800148a:	bf00      	nop
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d11f      	bne.n	80014d2 <dir_register+0xa4>
		res = move_window(dj->fs, dj->sect);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff fa85 	bl	80009ac <move_window>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d112      	bne.n	80014d2 <dir_register+0xa4>
			dir = dj->dir;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 80014b2:	2220      	movs	r2, #32
 80014b4:	2100      	movs	r1, #0
 80014b6:	68b8      	ldr	r0, [r7, #8]
 80014b8:	f7ff fa1f 	bl	80008fa <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	220b      	movs	r2, #11
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f7ff f9fb 	bl	80008c0 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 80014ec:	220b      	movs	r2, #11
 80014ee:	2120      	movs	r1, #32
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fa02 	bl	80008fa <mem_set>
	si = i = b = 0; ni = 8;
 80014f6:	2300      	movs	r3, #0
 80014f8:	77fb      	strb	r3, [r7, #31]
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	2308      	movs	r3, #8
 8001504:	61bb      	str	r3, [r7, #24]
	p = *path;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60bb      	str	r3, [r7, #8]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	617a      	str	r2, [r7, #20]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4413      	add	r3, r2
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800151a:	7fbb      	ldrb	r3, [r7, #30]
 800151c:	2b20      	cmp	r3, #32
 800151e:	d953      	bls.n	80015c8 <create_name+0xec>
 8001520:	7fbb      	ldrb	r3, [r7, #30]
 8001522:	2b2f      	cmp	r3, #47	; 0x2f
 8001524:	d050      	beq.n	80015c8 <create_name+0xec>
 8001526:	7fbb      	ldrb	r3, [r7, #30]
 8001528:	2b5c      	cmp	r3, #92	; 0x5c
 800152a:	d04d      	beq.n	80015c8 <create_name+0xec>
		if (c == '.' || i >= ni) {
 800152c:	7fbb      	ldrb	r3, [r7, #30]
 800152e:	2b2e      	cmp	r3, #46	; 0x2e
 8001530:	d003      	beq.n	800153a <create_name+0x5e>
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	429a      	cmp	r2, r3
 8001538:	d30f      	bcc.n	800155a <create_name+0x7e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d102      	bne.n	8001546 <create_name+0x6a>
 8001540:	7fbb      	ldrb	r3, [r7, #30]
 8001542:	2b2e      	cmp	r3, #46	; 0x2e
 8001544:	d001      	beq.n	800154a <create_name+0x6e>
 8001546:	2306      	movs	r3, #6
 8001548:	e073      	b.n	8001632 <create_name+0x156>
			i = 8; ni = 11;
 800154a:	2308      	movs	r3, #8
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	230b      	movs	r3, #11
 8001550:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	77fb      	strb	r3, [r7, #31]
 8001558:	e035      	b.n	80015c6 <create_name+0xea>
		}
		if (c >= 0x80) {				/* Extended char? */
 800155a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800155e:	2b00      	cmp	r3, #0
 8001560:	da08      	bge.n	8001574 <create_name+0x98>
			b |= 3;						/* Eliminate NT flag */
 8001562:	7ffb      	ldrb	r3, [r7, #31]
 8001564:	f043 0303 	orr.w	r3, r3, #3
 8001568:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 800156a:	7fbb      	ldrb	r3, [r7, #30]
 800156c:	3b80      	subs	r3, #128	; 0x80
 800156e:	4a33      	ldr	r2, [pc, #204]	; (800163c <create_name+0x160>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8001574:	7fbb      	ldrb	r3, [r7, #30]
 8001576:	4619      	mov	r1, r3
 8001578:	4831      	ldr	r0, [pc, #196]	; (8001640 <create_name+0x164>)
 800157a:	f7ff f9fd 	bl	8000978 <chk_chr>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <create_name+0xac>
				return FR_INVALID_NAME;
 8001584:	2306      	movs	r3, #6
 8001586:	e054      	b.n	8001632 <create_name+0x156>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001588:	7fbb      	ldrb	r3, [r7, #30]
 800158a:	2b40      	cmp	r3, #64	; 0x40
 800158c:	d907      	bls.n	800159e <create_name+0xc2>
 800158e:	7fbb      	ldrb	r3, [r7, #30]
 8001590:	2b5a      	cmp	r3, #90	; 0x5a
 8001592:	d804      	bhi.n	800159e <create_name+0xc2>
				b |= 2;
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	77fb      	strb	r3, [r7, #31]
 800159c:	e00c      	b.n	80015b8 <create_name+0xdc>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800159e:	7fbb      	ldrb	r3, [r7, #30]
 80015a0:	2b60      	cmp	r3, #96	; 0x60
 80015a2:	d909      	bls.n	80015b8 <create_name+0xdc>
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	2b7a      	cmp	r3, #122	; 0x7a
 80015a8:	d806      	bhi.n	80015b8 <create_name+0xdc>
					b |= 1; c -= 0x20;
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	77fb      	strb	r3, [r7, #31]
 80015b2:	7fbb      	ldrb	r3, [r7, #30]
 80015b4:	3b20      	subs	r3, #32
 80015b6:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	613a      	str	r2, [r7, #16]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	7fba      	ldrb	r2, [r7, #30]
 80015c4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80015c6:	e7a1      	b.n	800150c <create_name+0x30>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	441a      	add	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80015d2:	7fbb      	ldrb	r3, [r7, #30]
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	d801      	bhi.n	80015dc <create_name+0x100>
 80015d8:	2304      	movs	r3, #4
 80015da:	e000      	b.n	80015de <create_name+0x102>
 80015dc:	2300      	movs	r3, #0
 80015de:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <create_name+0x10e>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e023      	b.n	8001632 <create_name+0x156>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2be5      	cmp	r3, #229	; 0xe5
 80015f0:	d102      	bne.n	80015f8 <create_name+0x11c>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2205      	movs	r2, #5
 80015f6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d102      	bne.n	8001604 <create_name+0x128>
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d103      	bne.n	8001616 <create_name+0x13a>
 800160e:	7fbb      	ldrb	r3, [r7, #30]
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b04      	cmp	r3, #4
 800161e:	d103      	bne.n	8001628 <create_name+0x14c>
 8001620:	7fbb      	ldrb	r3, [r7, #30]
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	77bb      	strb	r3, [r7, #30]

	sfn[NS] = c;		/* Store NT flag, File name is created */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	330b      	adds	r3, #11
 800162c:	7fba      	ldrb	r2, [r7, #30]
 800162e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8001630:	2300      	movs	r3, #0
#endif
}
 8001632:	4618      	mov	r0, r3
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08006ed8 	.word	0x08006ed8
 8001640:	08006e34 	.word	0x08006e34

08001644 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b2f      	cmp	r3, #47	; 0x2f
 8001654:	d003      	beq.n	800165e <follow_path+0x1a>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b5c      	cmp	r3, #92	; 0x5c
 800165c:	d102      	bne.n	8001664 <follow_path+0x20>
		path++;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b1f      	cmp	r3, #31
 8001670:	d809      	bhi.n	8001686 <follow_path+0x42>
		res = dir_sdi(dj, 0);
 8001672:	2100      	movs	r1, #0
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fd39 	bl	80010ec <dir_sdi>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	e056      	b.n	8001734 <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff26 	bl	80014dc <create_name>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d145      	bne.n	8001726 <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fe7c 	bl	8001398 <dir_find>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	7adb      	ldrb	r3, [r3, #11]
 80016aa:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d138      	bne.n	800172a <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d135      	bne.n	800172e <follow_path+0xea>
 80016c2:	2305      	movs	r3, #5
 80016c4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80016c6:	e032      	b.n	800172e <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 80016c8:	7bbb      	ldrb	r3, [r7, #14]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d12f      	bne.n	8001732 <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	330b      	adds	r3, #11
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <follow_path+0xa8>
				res = FR_NO_PATH; break;
 80016e6:	2305      	movs	r3, #5
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e023      	b.n	8001734 <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3315      	adds	r3, #21
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3314      	adds	r3, #20
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	b21b      	sxth	r3, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	321b      	adds	r2, #27
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	0212      	lsls	r2, r2, #8
 800170e:	b211      	sxth	r1, r2
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	321a      	adds	r2, #26
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	b212      	sxth	r2, r2
 8001718:	430a      	orrs	r2, r1
 800171a:	b212      	sxth	r2, r2
 800171c:	b292      	uxth	r2, r2
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 8001724:	e7af      	b.n	8001686 <follow_path+0x42>
			if (res != FR_OK) break;
 8001726:	bf00      	nop
 8001728:	e004      	b.n	8001734 <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <follow_path+0xf0>
				break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8001732:	bf00      	nop
		}
	}

	return res;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7858      	ldrb	r0, [r3, #1]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001754:	2301      	movs	r3, #1
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	f001 f960 	bl	8002a1c <disk_read>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <check_fs+0x26>
		return 3;
 8001762:	2303      	movs	r3, #3
 8001764:	e04a      	b.n	80017fc <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f203 232e 	addw	r3, r3, #558	; 0x22e
 800176c:	3301      	adds	r3, #1
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b21a      	sxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <check_fs+0xc4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d001      	beq.n	800178a <check_fs+0x4a>
		return 2;
 8001786:	2302      	movs	r3, #2
 8001788:	e038      	b.n	80017fc <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3366      	adds	r3, #102	; 0x66
 800178e:	3303      	adds	r3, #3
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	061a      	lsls	r2, r3, #24
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3366      	adds	r3, #102	; 0x66
 8001798:	3302      	adds	r3, #2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	041b      	lsls	r3, r3, #16
 800179e:	4313      	orrs	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	3266      	adds	r2, #102	; 0x66
 80017a4:	3201      	adds	r2, #1
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	0212      	lsls	r2, r2, #8
 80017aa:	4313      	orrs	r3, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <check_fs+0xc8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <check_fs+0x82>
		return 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	e01c      	b.n	80017fc <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3382      	adds	r3, #130	; 0x82
 80017c6:	3303      	adds	r3, #3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	061a      	lsls	r2, r3, #24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3382      	adds	r3, #130	; 0x82
 80017d0:	3302      	adds	r3, #2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	041b      	lsls	r3, r3, #16
 80017d6:	4313      	orrs	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	3282      	adds	r2, #130	; 0x82
 80017dc:	3201      	adds	r2, #1
 80017de:	7812      	ldrb	r2, [r2, #0]
 80017e0:	0212      	lsls	r2, r2, #8
 80017e2:	4313      	orrs	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 80017ea:	4313      	orrs	r3, r2
 80017ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017f0:	4a05      	ldr	r2, [pc, #20]	; (8001808 <check_fs+0xc8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <check_fs+0xba>
		return 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <check_fs+0xbc>

	return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	ffffaa55 	.word	0xffffaa55
 8001808:	00544146 	.word	0x00544146

0800180c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b092      	sub	sp, #72	; 0x48
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	4613      	mov	r3, r2
 8001818:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3b30      	subs	r3, #48	; 0x30
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 8001828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182a:	2b09      	cmp	r3, #9
 800182c:	d80b      	bhi.n	8001846 <chk_mounted+0x3a>
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	3301      	adds	r3, #1
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b3a      	cmp	r3, #58	; 0x3a
 8001836:	d106      	bne.n	8001846 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 8001838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183a:	3302      	adds	r3, #2
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e001      	b.n	800184a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
 8001846:	2300      	movs	r3, #0
 8001848:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 800184a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
 8001850:	230b      	movs	r3, #11
 8001852:	e25f      	b.n	8001d14 <chk_mounted+0x508>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 8001854:	4aa6      	ldr	r2, [pc, #664]	; (8001af0 <chk_mounted+0x2e4>)
 8001856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001862:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <chk_mounted+0x62>
 800186a:	230c      	movs	r3, #12
 800186c:	e252      	b.n	8001d14 <chk_mounted+0x508>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
 800186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d01a      	beq.n	80018ac <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
 8001876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f8ba 	bl	80029f4 <disk_status>
 8001880:	4603      	mov	r3, r0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 8001886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <chk_mounted+0xa0>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <chk_mounted+0x9c>
 8001898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
 80018a4:	230a      	movs	r3, #10
 80018a6:	e235      	b.n	8001d14 <chk_mounted+0x508>
#endif
			return FR_OK;				/* The file system object is valid */
 80018a8:	2300      	movs	r3, #0
 80018aa:	e233      	b.n	8001d14 <chk_mounted+0x508>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80018ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 80018b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 80018ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 ffae 	bl	8002820 <disk_initialize>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80018ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 80018d6:	2303      	movs	r3, #3
 80018d8:	e21c      	b.n	8001d14 <chk_mounted+0x508>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <chk_mounted+0xe4>
 80018e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
 80018ec:	230a      	movs	r3, #10
 80018ee:	e211      	b.n	8001d14 <chk_mounted+0x508>
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 80018f0:	2300      	movs	r3, #0
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018f8:	f7ff ff22 	bl	8001740 <check_fs>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 8001902:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001906:	2b01      	cmp	r3, #1
 8001908:	d122      	bne.n	8001950 <chk_mounted+0x144>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 8001910:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {									/* Is the partition existing? */
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	3304      	adds	r3, #4
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d019      	beq.n	8001950 <chk_mounted+0x144>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	330b      	adds	r3, #11
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	061a      	lsls	r2, r3, #24
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	330a      	adds	r3, #10
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	4313      	orrs	r3, r2
 800192e:	6a3a      	ldr	r2, [r7, #32]
 8001930:	3209      	adds	r2, #9
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	0212      	lsls	r2, r2, #8
 8001936:	4313      	orrs	r3, r2
 8001938:	6a3a      	ldr	r2, [r7, #32]
 800193a:	3208      	adds	r2, #8
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);					/* Check the partition */
 8001942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001946:	f7ff fefb 	bl	8001740 <check_fs>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8001950:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001954:	2b03      	cmp	r3, #3
 8001956:	d101      	bne.n	800195c <chk_mounted+0x150>
 8001958:	2301      	movs	r3, #1
 800195a:	e1db      	b.n	8001d14 <chk_mounted+0x508>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 800195c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <chk_mounted+0x15c>
 8001964:	230d      	movs	r3, #13
 8001966:	e1d5      	b.n	8001d14 <chk_mounted+0x508>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001978:	b21b      	sxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001982:	d001      	beq.n	8001988 <chk_mounted+0x17c>
		return FR_NO_FILESYSTEM;
 8001984:	230d      	movs	r3, #13
 8001986:	e1c5      	b.n	8001d14 <chk_mounted+0x508>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21a      	sxth	r2, r3
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b21b      	sxth	r3, r3
 800199e:	b29b      	uxth	r3, r3
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <chk_mounted+0x1c2>
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019aa:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80019ae:	061a      	lsls	r2, r3, #24
 80019b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	4313      	orrs	r3, r2
 80019ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019bc:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80019c0:	0212      	lsls	r2, r2, #8
 80019c2:	4313      	orrs	r3, r2
 80019c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019c6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80019ca:	4313      	orrs	r3, r2
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019d2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019da:	77fb      	strb	r3, [r7, #31]
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	7ffa      	ldrb	r2, [r7, #31]
 80019e0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d004      	beq.n	80019f2 <chk_mounted+0x1e6>
 80019e8:	7ffb      	ldrb	r3, [r7, #31]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d001      	beq.n	80019f2 <chk_mounted+0x1e6>
 80019ee:	230d      	movs	r3, #13
 80019f0:	e190      	b.n	8001d14 <chk_mounted+0x508>
	fasize *= b;										/* Number of sectors for FAT area */
 80019f2:	7ffa      	ldrb	r2, [r7, #31]
 80019f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	77fb      	strb	r3, [r7, #31]
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	7ffa      	ldrb	r2, [r7, #31]
 8001a08:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001a0a:	7ffb      	ldrb	r3, [r7, #31]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <chk_mounted+0x210>
 8001a10:	7ffa      	ldrb	r2, [r7, #31]
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <chk_mounted+0x214>
 8001a1c:	230d      	movs	r3, #13
 8001a1e:	e179      	b.n	8001d14 <chk_mounted+0x508>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a26:	021b      	lsls	r3, r3, #8
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	891b      	ldrh	r3, [r3, #8]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <chk_mounted+0x242>
 8001a4a:	230d      	movs	r3, #13
 8001a4c:	e162      	b.n	8001d14 <chk_mounted+0x508>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8001a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d112      	bne.n	8001a94 <chk_mounted+0x288>
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001a74:	061a      	lsls	r2, r3, #24
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a82:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 8001a86:	0212      	lsls	r2, r2, #8
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8001a90:	4313      	orrs	r3, r2
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 8001aac:	8bbb      	ldrh	r3, [r7, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <chk_mounted+0x2aa>
 8001ab2:	230d      	movs	r3, #13
 8001ab4:	e12e      	b.n	8001d14 <chk_mounted+0x508>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
 8001ab6:	8bba      	ldrh	r2, [r7, #28]
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aba:	4413      	add	r3, r2
 8001abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abe:	8912      	ldrh	r2, [r2, #8]
 8001ac0:	0912      	lsrs	r2, r2, #4
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d201      	bcs.n	8001ad4 <chk_mounted+0x2c8>
 8001ad0:	230d      	movs	r3, #13
 8001ad2:	e11f      	b.n	8001d14 <chk_mounted+0x508>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8001ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001adc:	7892      	ldrb	r2, [r2, #2]
 8001ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d104      	bne.n	8001af4 <chk_mounted+0x2e8>
 8001aea:	230d      	movs	r3, #13
 8001aec:	e112      	b.n	8001d14 <chk_mounted+0x508>
 8001aee:	bf00      	nop
 8001af0:	20000118 	.word	0x20000118
	fmt = FS_FAT12;
 8001af4:	2301      	movs	r3, #1
 8001af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d902      	bls.n	8001b0a <chk_mounted+0x2fe>
 8001b04:	2302      	movs	r3, #2
 8001b06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d902      	bls.n	8001b1a <chk_mounted+0x30e>
 8001b14:	2303      	movs	r3, #3
 8001b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	1c9a      	adds	r2, r3, #2
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 8001b22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	441a      	add	r2, r3
 8001b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8001b2c:	8bba      	ldrh	r2, [r7, #28]
 8001b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b30:	441a      	add	r2, r3
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
 8001b36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d11e      	bne.n	8001b7c <chk_mounted+0x370>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	891b      	ldrh	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <chk_mounted+0x33e>
 8001b46:	230d      	movs	r3, #13
 8001b48:	e0e4      	b.n	8001d14 <chk_mounted+0x508>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5e:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8001b62:	0212      	lsls	r2, r2, #8
 8001b64:	4313      	orrs	r3, r2
 8001b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b68:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7a:	e01f      	b.n	8001bbc <chk_mounted+0x3b0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	891b      	ldrh	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <chk_mounted+0x37c>
 8001b84:	230d      	movs	r3, #13
 8001b86:	e0c5      	b.n	8001d14 <chk_mounted+0x508>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8e:	441a      	add	r2, r3
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d103      	bne.n	8001ba4 <chk_mounted+0x398>
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	e00a      	b.n	8001bba <chk_mounted+0x3ae>
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba6:	699a      	ldr	r2, [r3, #24]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	085a      	lsrs	r2, r3, #1
 8001bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bc6:	0a5b      	lsrs	r3, r3, #9
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d201      	bcs.n	8001bd0 <chk_mounted+0x3c4>
		return FR_NO_FILESYSTEM;
 8001bcc:	230d      	movs	r3, #13
 8001bce:	e0a1      	b.n	8001d14 <chk_mounted+0x508>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8001bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bd6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 8001bde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	f040 8081 	bne.w	8001cea <chk_mounted+0x4de>
	 	fs->fsi_flag = 0;
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	2200      	movs	r2, #0
 8001bec:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0a:	441a      	add	r2, r3
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	7858      	ldrb	r0, [r3, #1]
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f000 fefc 	bl	8002a1c <disk_read>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d15f      	bne.n	8001cea <chk_mounted+0x4de>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001c40:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <chk_mounted+0x510>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d151      	bne.n	8001cea <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001c4c:	061a      	lsls	r2, r3, #24
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	4313      	orrs	r3, r2
 8001c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5a:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8001c5e:	0212      	lsls	r2, r2, #8
 8001c60:	4313      	orrs	r3, r2
 8001c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c64:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001c6a:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <chk_mounted+0x514>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d13c      	bne.n	8001cea <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 8001c76:	061a      	lsls	r2, r3, #24
 8001c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	4313      	orrs	r3, r2
 8001c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c84:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
 8001c88:	0212      	lsls	r2, r2, #8
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c8e:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
 8001c92:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <chk_mounted+0x518>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d127      	bne.n	8001cea <chk_mounted+0x4de>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8001ca0:	061a      	lsls	r2, r3, #24
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	4313      	orrs	r3, r2
 8001cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cae:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 8001cb2:	0212      	lsls	r2, r2, #8
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cb8:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8001cc8:	061a      	lsls	r2, r3, #24
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd6:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 8001cda:	0212      	lsls	r2, r2, #8
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce0:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001cf0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <chk_mounted+0x51c>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <chk_mounted+0x51c>)
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <chk_mounted+0x51c>)
 8001d00:	881a      	ldrh	r2, [r3, #0]
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3748      	adds	r7, #72	; 0x48
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	ffffaa55 	.word	0xffffaa55
 8001d20:	41615252 	.word	0x41615252
 8001d24:	61417272 	.word	0x61417272
 8001d28:	2000011c 	.word	0x2000011c

08001d2c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
	if (!fs || !fs->fs_type || fs->id != id)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <validate+0x24>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <validate+0x24>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	88db      	ldrh	r3, [r3, #6]
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <validate+0x28>
		return FR_INVALID_OBJECT;
 8001d50:	2309      	movs	r3, #9
 8001d52:	e00c      	b.n	8001d6e <validate+0x42>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fe4b 	bl	80029f4 <disk_status>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <validate+0x40>
		return FR_NOT_READY;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <validate+0x42>

	return FR_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <f_mount+0x16>
		return FR_INVALID_DRIVE;
 8001d8a:	230b      	movs	r3, #11
 8001d8c:	e016      	b.n	8001dbc <f_mount+0x44>
	rfs = FatFs[vol];				/* Get current fs object */
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <f_mount+0x50>)
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <f_mount+0x38>
		fs->fs_type = 0;			/* Clear new fs object */
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4905      	ldr	r1, [pc, #20]	; (8001dc8 <f_mount+0x50>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000118 	.word	0x20000118

08001dcc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b092      	sub	sp, #72	; 0x48
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	f107 011c 	add.w	r1, r7, #28
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fd07 	bl	800180c <chk_mounted>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
	if (res == FR_OK)
 8001e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc12 	bl	8001644 <follow_path>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	dir = dj.dir;
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
 8001e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <f_open+0x72>
		if (!dir)	/* Current dir itself */
 8001e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <f_open+0x72>
			res = FR_INVALID_NAME;
 8001e38:	2306      	movs	r3, #6
 8001e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 031c 	and.w	r3, r3, #28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80b2 	beq.w	8001fae <f_open+0x1e2>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
 8001e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d012      	beq.n	8001e78 <f_open+0xac>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8001e52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d107      	bne.n	8001e6a <f_open+0x9e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fae5 	bl	800142e <dir_register>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;					/* New entry */
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	643b      	str	r3, [r7, #64]	; 0x40
 8001e76:	e012      	b.n	8001e9e <f_open+0xd2>
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <f_open+0xbe>
				res = FR_EXIST;
 8001e82:	2308      	movs	r3, #8
 8001e84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e88:	e009      	b.n	8001e9e <f_open+0xd2>
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8c:	330b      	adds	r3, #11
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	f003 0311 	and.w	r3, r3, #17
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <f_open+0xd2>
					res = FR_DENIED;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001e9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80a1 	bne.w	8001fea <f_open+0x21e>
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 809b 	beq.w	8001fea <f_open+0x21e>
			dw = get_fattime();					/* Created time */
 8001eb4:	f000 ffe0 	bl	8002e78 <get_fattime>
 8001eb8:	63f8      	str	r0, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
 8001eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebc:	330e      	adds	r3, #14
 8001ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec6:	330f      	adds	r3, #15
 8001ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eca:	b292      	uxth	r2, r2
 8001ecc:	0a12      	lsrs	r2, r2, #8
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]
 8001ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed6:	3310      	adds	r3, #16
 8001ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001eda:	0c12      	lsrs	r2, r2, #16
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee2:	3311      	adds	r3, #17
 8001ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee6:	0e12      	lsrs	r2, r2, #24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8001eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eee:	330b      	adds	r3, #11
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 8001ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef6:	331c      	adds	r3, #28
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efe:	331d      	adds	r3, #29
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f06:	331e      	adds	r3, #30
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0e:	331f      	adds	r3, #31
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
 8001f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f16:	3315      	adds	r3, #21
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f20:	3314      	adds	r3, #20
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f30:	321b      	adds	r2, #27
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	0212      	lsls	r2, r2, #8
 8001f36:	b211      	sxth	r1, r2
 8001f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f3a:	321a      	adds	r2, #26
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	b212      	sxth	r2, r2
 8001f40:	430a      	orrs	r2, r1
 8001f42:	b212      	sxth	r2, r2
 8001f44:	b292      	uxth	r2, r2
 8001f46:	4313      	orrs	r3, r2
 8001f48:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
 8001f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4c:	331a      	adds	r3, #26
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f54:	331b      	adds	r3, #27
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f5c:	3314      	adds	r3, #20
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f64:	3315      	adds	r3, #21
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
 8001f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d039      	beq.n	8001fea <f_open+0x21e>
				dw = dj.fs->winsect;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe ffdb 	bl	8000f3c <remove_chain>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res == FR_OK) {
 8001f8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d12a      	bne.n	8001fea <f_open+0x21e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f98:	3a01      	subs	r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fd03 	bl	80009ac <move_window>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001fac:	e01d      	b.n	8001fea <f_open+0x21e>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
 8001fae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d119      	bne.n	8001fea <f_open+0x21e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	330b      	adds	r3, #11
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <f_open+0x200>
				res = FR_NO_FILE;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001fca:	e00e      	b.n	8001fea <f_open+0x21e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <f_open+0x21e>
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd8:	330b      	adds	r3, #11
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <f_open+0x21e>
					res = FR_DENIED;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
	}
	if (res == FR_OK) {
 8001fea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <f_open+0x246>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <f_open+0x238>
			mode |= FA__WRITTEN;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f043 0320 	orr.w	r3, r3, #32
 8002002:	71fb      	strb	r3, [r7, #7]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002010:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
 8002012:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13f      	bne.n	800209a <f_open+0x2ce>
		fp->flag = mode;					/* File access mode */
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	719a      	strb	r2, [r3, #6]
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
 8002020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002022:	3315      	adds	r3, #21
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b21a      	sxth	r2, r3
 800202a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800202c:	3314      	adds	r3, #20
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b21b      	sxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b21b      	sxth	r3, r3
 8002036:	b29b      	uxth	r3, r3
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800203c:	321b      	adds	r2, #27
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	0212      	lsls	r2, r2, #8
 8002042:	b211      	sxth	r1, r2
 8002044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002046:	321a      	adds	r2, #26
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	b212      	sxth	r2, r2
 800204c:	430a      	orrs	r2, r1
 800204e:	b212      	sxth	r2, r2
 8002050:	b292      	uxth	r2, r2
 8002052:	431a      	orrs	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8002058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205a:	331f      	adds	r3, #31
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	061a      	lsls	r2, r3, #24
 8002060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002062:	331e      	adds	r3, #30
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	041b      	lsls	r3, r3, #16
 8002068:	4313      	orrs	r3, r2
 800206a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800206c:	321d      	adds	r2, #29
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	0212      	lsls	r2, r2, #8
 8002072:	4313      	orrs	r3, r2
 8002074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002076:	321c      	adds	r2, #28
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	431a      	orrs	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	88da      	ldrh	r2, [r3, #6]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
 800209a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3748      	adds	r7, #72	; 0x48
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b08c      	sub	sp, #48	; 0x30
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Initialize byte counter */
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4610      	mov	r0, r2
 80020ca:	f7ff fe2f 	bl	8001d2c <validate>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80020d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <f_read+0x3c>
 80020dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020e0:	e135      	b.n	800234e <f_read+0x2a8>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	799b      	ldrb	r3, [r3, #6]
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da01      	bge.n	80020f0 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
 80020ec:	2302      	movs	r3, #2
 80020ee:	e12e      	b.n	800234e <f_read+0x2a8>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	799b      	ldrb	r3, [r3, #6]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80020fc:	2307      	movs	r3, #7
 80020fe:	e126      	b.n	800234e <f_read+0x2a8>
	remain = fp->fsize - fp->fptr;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	61fb      	str	r3, [r7, #28]
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	f240 8117 	bls.w	8002344 <f_read+0x29e>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	607b      	str	r3, [r7, #4]

	for ( ;  btr;									/* Repeat until all data transferred */
 800211a:	e113      	b.n	8002344 <f_read+0x29e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002124:	2b00      	cmp	r3, #0
 8002126:	f040 80df 	bne.w	80022e8 <f_read+0x242>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0a5b      	lsrs	r3, r3, #9
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	789b      	ldrb	r3, [r3, #2]
 8002138:	3b01      	subs	r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4013      	ands	r3, r2
 800213e:	76fb      	strb	r3, [r7, #27]
			if (!csect) {							/* On the cluster boundary? */
 8002140:	7efb      	ldrb	r3, [r7, #27]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d12c      	bne.n	80021a0 <f_read+0xfa>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <f_read+0xae>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	e008      	b.n	8002166 <f_read+0xc0>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f7fe fd3d 	bl	8000bde <get_fat>
 8002164:	4603      	mov	r3, r0
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
 8002166:	613b      	str	r3, [r7, #16]
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d808      	bhi.n	8002180 <f_read+0xda>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	799b      	ldrb	r3, [r3, #6]
 8002172:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002176:	b2da      	uxtb	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	719a      	strb	r2, [r3, #6]
 800217c:	2302      	movs	r3, #2
 800217e:	e0e6      	b.n	800234e <f_read+0x2a8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002186:	d108      	bne.n	800219a <f_read+0xf4>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	799b      	ldrb	r3, [r3, #6]
 800218c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002190:	b2da      	uxtb	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	719a      	strb	r2, [r3, #6]
 8002196:	2301      	movs	r3, #1
 8002198:	e0d9      	b.n	800234e <f_read+0x2a8>
				fp->curr_clust = clst;				/* Update current cluster */
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7fe fcf9 	bl	8000ba2 <clust2sect>
 80021b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d108      	bne.n	80021ca <f_read+0x124>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	799b      	ldrb	r3, [r3, #6]
 80021bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	719a      	strb	r2, [r3, #6]
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0c1      	b.n	800234e <f_read+0x2a8>
			sect += csect;
 80021ca:	7efb      	ldrb	r3, [r7, #27]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0a5b      	lsrs	r3, r3, #9
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {								/* Read maximum contiguous sectors directly */
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d042      	beq.n	8002264 <f_read+0x1be>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
 80021de:	7efa      	ldrb	r2, [r7, #27]
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	4413      	add	r3, r2
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	7892      	ldrb	r2, [r2, #2]
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d906      	bls.n	80021fc <f_read+0x156>
					cc = fp->fs->csize - csect;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	461a      	mov	r2, r3
 80021f6:	7efb      	ldrb	r3, [r7, #27]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	7858      	ldrb	r0, [r3, #1]
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	b2db      	uxtb	r3, r3
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220a:	f000 fc07 	bl	8002a1c <disk_read>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <f_read+0x180>
					ABORT(fp->fs, FR_DISK_ERR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	799b      	ldrb	r3, [r3, #6]
 8002218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800221c:	b2da      	uxtb	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	719a      	strb	r2, [r3, #6]
 8002222:	2301      	movs	r3, #1
 8002224:	e093      	b.n	800234e <f_read+0x2a8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	799b      	ldrb	r3, [r3, #6]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b00      	cmp	r3, #0
 8002230:	d014      	beq.n	800225c <f_read+0x1b6>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad2      	subs	r2, r2, r3
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	429a      	cmp	r2, r3
 800223e:	d20d      	bcs.n	800225c <f_read+0x1b6>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	025b      	lsls	r3, r3, #9
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	18d0      	adds	r0, r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3324      	adds	r3, #36	; 0x24
 8002252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fb32 	bl	80008c0 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8002262:	e05b      	b.n	800231c <f_read+0x276>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {				/* Write sector I/O buffer if needed */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	799b      	ldrb	r3, [r3, #6]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01d      	beq.n	80022ac <f_read+0x206>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	7858      	ldrb	r0, [r3, #1]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	2301      	movs	r3, #1
 8002282:	f000 fc3b 	bl	8002afc <disk_write>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <f_read+0x1f8>
					ABORT(fp->fs, FR_DISK_ERR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	799b      	ldrb	r3, [r3, #6]
 8002290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	719a      	strb	r2, [r3, #6]
 800229a:	2301      	movs	r3, #1
 800229c:	e057      	b.n	800234e <f_read+0x2a8>
				fp->flag &= ~FA__DIRTY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	799b      	ldrb	r3, [r3, #6]
 80022a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d015      	beq.n	80022e2 <f_read+0x23c>
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	7858      	ldrb	r0, [r3, #1]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80022c2:	2301      	movs	r3, #1
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	f000 fba9 	bl	8002a1c <disk_read>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <f_read+0x23c>
					ABORT(fp->fs, FR_DISK_ERR);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	799b      	ldrb	r3, [r3, #6]
 80022d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	719a      	strb	r2, [r3, #6]
 80022de:	2301      	movs	r3, #1
 80022e0:	e035      	b.n	800234e <f_read+0x2a8>
			}
#endif
			fp->dsect = sect;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;
 80022f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d901      	bls.n	8002302 <f_read+0x25c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	3320      	adds	r3, #32
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002314:	4619      	mov	r1, r3
 8002316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002318:	f7fe fad2 	bl	80008c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	4413      	add	r3, r2
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	441a      	add	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	441a      	add	r2, r3
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	607b      	str	r3, [r7, #4]
	for ( ;  btr;									/* Repeat until all data transferred */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f aee8 	bne.w	800211c <f_read+0x76>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3730      	adds	r7, #48	; 0x30
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff fcdf 	bl	8001d2c <validate>
 800236e:	4603      	mov	r3, r0
 8002370:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 80a8 	bne.w	80024ca <f_sync+0x174>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	799b      	ldrb	r3, [r3, #6]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a1 	beq.w	80024ca <f_sync+0x174>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	799b      	ldrb	r3, [r3, #6]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d016      	beq.n	80023c2 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	7858      	ldrb	r0, [r3, #1]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	2301      	movs	r3, #1
 80023a6:	f000 fba9 	bl	8002afc <disk_write>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <f_sync+0x5e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80023b0:	2301      	movs	r3, #1
 80023b2:	e08b      	b.n	80024cc <f_sync+0x176>
				fp->flag &= ~FA__DIRTY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	799b      	ldrb	r3, [r3, #6]
 80023b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f7fe faed 	bl	80009ac <move_window>
 80023d2:	4603      	mov	r3, r0
 80023d4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d176      	bne.n	80024ca <f_sync+0x174>
				dir = fp->dir_ptr;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	330b      	adds	r3, #11
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	320b      	adds	r2, #11
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	f042 0220 	orr.w	r2, r2, #32
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	331c      	adds	r3, #28
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68d2      	ldr	r2, [r2, #12]
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	331d      	adds	r3, #29
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68d2      	ldr	r2, [r2, #12]
 8002408:	b292      	uxth	r2, r2
 800240a:	0a12      	lsrs	r2, r2, #8
 800240c:	b292      	uxth	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	331e      	adds	r3, #30
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	0c12      	lsrs	r2, r2, #16
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	331f      	adds	r3, #31
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68d2      	ldr	r2, [r2, #12]
 8002428:	0e12      	lsrs	r2, r2, #24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]
				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	331a      	adds	r3, #26
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6912      	ldr	r2, [r2, #16]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	331b      	adds	r3, #27
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6912      	ldr	r2, [r2, #16]
 8002442:	b292      	uxth	r2, r2
 8002444:	0a12      	lsrs	r2, r2, #8
 8002446:	b292      	uxth	r2, r2
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	3314      	adds	r3, #20
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6912      	ldr	r2, [r2, #16]
 8002454:	0c12      	lsrs	r2, r2, #16
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	3315      	adds	r3, #21
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6912      	ldr	r2, [r2, #16]
 8002462:	0c12      	lsrs	r2, r2, #16
 8002464:	b292      	uxth	r2, r2
 8002466:	0a12      	lsrs	r2, r2, #8
 8002468:	b292      	uxth	r2, r2
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
				tim = get_fattime();						/* Update updated time */
 800246e:	f000 fd03 	bl	8002e78 <get_fattime>
 8002472:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	3316      	adds	r3, #22
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	3317      	adds	r3, #23
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	b292      	uxth	r2, r2
 8002486:	0a12      	lsrs	r2, r2, #8
 8002488:	b292      	uxth	r2, r2
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	3318      	adds	r3, #24
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	0c12      	lsrs	r2, r2, #16
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3319      	adds	r3, #25
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	0e12      	lsrs	r2, r2, #24
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	799b      	ldrb	r3, [r3, #6]
 80024aa:	f023 0320 	bic.w	r3, r3, #32
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2201      	movs	r2, #1
 80024ba:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe facd 	bl	8000a60 <sync>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff3a 	bl	8002356 <f_sync>
 80024e2:	4603      	mov	r3, r0
 80024e4:	73fb      	strb	r3, [r7, #15]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <f_close+0x1e>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
	return res;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <SELECT>:
static
BYTE PowerFlag = 0;     /* indicates if "power" is on */

static
void SELECT (void) 		// CS w stan niski
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SD_PORT_SS, SD_BIT_SS);
 8002500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <SELECT+0x14>)
 8002506:	f7fe f8db 	bl	80006c0 <GPIO_ResetBits>
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40010c00 	.word	0x40010c00

08002514 <DESELECT>:

static
void DESELECT (void) 	// CS w stan wysoki
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	GPIO_SetBits(SD_PORT_SS, SD_BIT_SS);
 8002518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <DESELECT+0x14>)
 800251e:	f7fe f8c1 	bl	80006a4 <GPIO_SetBits>
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40010c00 	.word	0x40010c00

0800252c <SpiTransmitSD>:



uint8_t SpiTransmitSD( uint8_t cmd )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8002536:	bf00      	nop
 8002538:	2102      	movs	r1, #2
 800253a:	480f      	ldr	r0, [pc, #60]	; (8002578 <SpiTransmitSD+0x4c>)
 800253c:	f7fe f9a5 	bl	800088a <SPI_I2S_GetFlagStatus>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f8      	beq.n	8002538 <SpiTransmitSD+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	b29b      	uxth	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	480a      	ldr	r0, [pc, #40]	; (8002578 <SpiTransmitSD+0x4c>)
 800254e:	f7fe f963 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8002552:	bf00      	nop
 8002554:	2101      	movs	r1, #1
 8002556:	4808      	ldr	r0, [pc, #32]	; (8002578 <SpiTransmitSD+0x4c>)
 8002558:	f7fe f997 	bl	800088a <SPI_I2S_GetFlagStatus>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f8      	beq.n	8002554 <SpiTransmitSD+0x28>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <SpiTransmitSD+0x4c>)
 8002564:	f7fe f966 	bl	8000834 <SPI_I2S_ReceiveData>
 8002568:	4603      	mov	r3, r0
 800256a:	81fb      	strh	r3, [r7, #14]

	return recData;
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	b2db      	uxtb	r3, r3

}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40003800 	.word	0x40003800

0800257c <xmit_spi>:



static
void xmit_spi (BYTE Data)  // Wyslanie bajtu do SD
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
	SpiTransmitSD(Data);
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ffcf 	bl	800252c <SpiTransmitSD>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <rcvr_spi>:

static
BYTE rcvr_spi (void) 		// Odebranie bajtu z SD
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
	 u8 Data = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	71fb      	strb	r3, [r7, #7]

	 Data = SpiTransmitSD(0xFF);
 80025a0:	20ff      	movs	r0, #255	; 0xff
 80025a2:	f7ff ffc3 	bl	800252c <SpiTransmitSD>
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
//
//  // Odebranie bajtu
//  while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_RXNE) == RESET);
//  Data = SPI_I2S_ReceiveData(SD_SPI);

  return Data;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <rcvr_spi_m>:


static
void rcvr_spi_m (BYTE *dst)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    *dst = rcvr_spi();
 80025bc:	f7ff ffeb 	bl	8002596 <rcvr_spi>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	701a      	strb	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
    BYTE res;

    Timer2 = 50;    /* Wait for ready in timeout of 500ms */
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <wait_ready+0x34>)
 80025d8:	2232      	movs	r2, #50	; 0x32
 80025da:	701a      	strb	r2, [r3, #0]
    rcvr_spi();
 80025dc:	f7ff ffdb 	bl	8002596 <rcvr_spi>
    do
        res = rcvr_spi();
 80025e0:	f7ff ffd9 	bl	8002596 <rcvr_spi>
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
    while ((res != 0xFF) && Timer2);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2bff      	cmp	r3, #255	; 0xff
 80025ec:	d004      	beq.n	80025f8 <wait_ready+0x28>
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <wait_ready+0x34>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f3      	bne.n	80025e0 <wait_ready+0x10>

    return res;
 80025f8:	79fb      	ldrb	r3, [r7, #7]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000011f 	.word	0x2000011f

08002608 <power_on>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	u8 i;
 
  DESELECT();      // CS = 1
 800260e:	f7ff ff81 	bl	8002514 <DESELECT>

  //Wyslanie 10 razy 0xFF co daje ponad 80 (>74) cykle zegara 
  //wymagane przez specyfikacje SD
  for (i = 0; i < 10; i++)
 8002612:	2300      	movs	r3, #0
 8002614:	71fb      	strb	r3, [r7, #7]
 8002616:	e005      	b.n	8002624 <power_on+0x1c>
    xmit_spi(0xFF);
 8002618:	20ff      	movs	r0, #255	; 0xff
 800261a:	f7ff ffaf 	bl	800257c <xmit_spi>
  for (i = 0; i < 10; i++)
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	3301      	adds	r3, #1
 8002622:	71fb      	strb	r3, [r7, #7]
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	2b09      	cmp	r3, #9
 8002628:	d9f6      	bls.n	8002618 <power_on+0x10>

  PowerFlag = 1;
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <power_on+0x30>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000121 	.word	0x20000121

0800263c <power_off>:


static
void power_off (void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <power_off+0x14>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000121 	.word	0x20000121

08002654 <chk_power>:

static
int chk_power(void)        /* Socket power state: 0=off, 1=on */
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
    return PowerFlag;
 8002658:	4b02      	ldr	r3, [pc, #8]	; (8002664 <chk_power+0x10>)
 800265a:	781b      	ldrb	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000121 	.word	0x20000121

08002668 <rcvr_datablock>:
static
bool rcvr_datablock (
    BYTE *buff,            /* Data buffer to store received data */
    UINT btr            /* Byte count (must be even number) */
)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
    BYTE token;

    Timer1 = 10;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <rcvr_datablock+0x68>)
 8002674:	220a      	movs	r2, #10
 8002676:	701a      	strb	r2, [r3, #0]
    do {                            /* Wait for data packet in timeout of 100ms */
        token = rcvr_spi();
 8002678:	f7ff ff8d 	bl	8002596 <rcvr_spi>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2bff      	cmp	r3, #255	; 0xff
 8002684:	d104      	bne.n	8002690 <rcvr_datablock+0x28>
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <rcvr_datablock+0x68>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f3      	bne.n	8002678 <rcvr_datablock+0x10>
    if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2bfe      	cmp	r3, #254	; 0xfe
 8002694:	d001      	beq.n	800269a <rcvr_datablock+0x32>
 8002696:	2300      	movs	r3, #0
 8002698:	e016      	b.n	80026c8 <rcvr_datablock+0x60>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff87 	bl	80025b4 <rcvr_spi_m>
        rcvr_spi_m(buff++);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff81 	bl	80025b4 <rcvr_spi_m>
    } while (btr -= 2);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	3b02      	subs	r3, #2
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ed      	bne.n	800269a <rcvr_datablock+0x32>
    rcvr_spi();                        /* Discard CRC */
 80026be:	f7ff ff6a 	bl	8002596 <rcvr_spi>
    rcvr_spi();
 80026c2:	f7ff ff68 	bl	8002596 <rcvr_spi>

    return TRUE;                    /* Return with success */
 80026c6:	2301      	movs	r3, #1
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000011e 	.word	0x2000011e

080026d4 <xmit_datablock>:
static
bool xmit_datablock (
    const BYTE *buff,    /* 512 byte data block to be transmitted */
    BYTE token            /* Data/Stop token */
)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
  BYTE resp, wc;
	u32 i = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]

    if (wait_ready() != 0xFF) return FALSE;
 80026e4:	f7ff ff74 	bl	80025d0 <wait_ready>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2bff      	cmp	r3, #255	; 0xff
 80026ec:	d001      	beq.n	80026f2 <xmit_datablock+0x1e>
 80026ee:	2300      	movs	r3, #0
 80026f0:	e040      	b.n	8002774 <xmit_datablock+0xa0>

    xmit_spi(token);                    /* Xmit data token */
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff41 	bl	800257c <xmit_spi>
    if (token != 0xFD) 
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	2bfd      	cmp	r3, #253	; 0xfd
 80026fe:	d031      	beq.n	8002764 <xmit_datablock+0x90>
	{    /* Is data token */
        wc = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	73bb      	strb	r3, [r7, #14]
        do 
		{                            /* Xmit the 512 byte data block to MMC */
            xmit_spi(*buff++);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff35 	bl	800257c <xmit_spi>
            xmit_spi(*buff++);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff2e 	bl	800257c <xmit_spi>
        } while (--wc);
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	3b01      	subs	r3, #1
 8002724:	73bb      	strb	r3, [r7, #14]
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1eb      	bne.n	8002704 <xmit_datablock+0x30>

 		rcvr_spi();
 800272c:	f7ff ff33 	bl	8002596 <rcvr_spi>
		rcvr_spi();
 8002730:	f7ff ff31 	bl	8002596 <rcvr_spi>

		while (i <= 64)
 8002734:	e00b      	b.n	800274e <xmit_datablock+0x7a>
		{
        	resp = rcvr_spi();                /* Reveive data response */
 8002736:	f7ff ff2e 	bl	8002596 <rcvr_spi>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
        	if ((resp & 0x1F) == 0x05)        /* If not accepted, return with error */
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2b05      	cmp	r3, #5
 8002746:	d006      	beq.n	8002756 <xmit_datablock+0x82>
            	break;
			i++;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	3301      	adds	r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
		while (i <= 64)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d9f0      	bls.n	8002736 <xmit_datablock+0x62>
 8002754:	e000      	b.n	8002758 <xmit_datablock+0x84>
            	break;
 8002756:	bf00      	nop
    	}
		while (rcvr_spi() == 0);
 8002758:	bf00      	nop
 800275a:	f7ff ff1c 	bl	8002596 <rcvr_spi>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0fa      	beq.n	800275a <xmit_datablock+0x86>
	}
	if ((resp & 0x1F) == 0x05)  
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2b05      	cmp	r3, #5
 800276c:	d101      	bne.n	8002772 <xmit_datablock+0x9e>
		return TRUE;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <xmit_datablock+0xa0>
	else 
		return FALSE;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <send_cmd>:
static
BYTE send_cmd (
    BYTE cmd,        /* Command byte */
    DWORD arg        /* Argument */
)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (wait_ready() != 0xFF) return 0xFF;
 8002788:	f7ff ff22 	bl	80025d0 <wait_ready>
 800278c:	4603      	mov	r3, r0
 800278e:	2bff      	cmp	r3, #255	; 0xff
 8002790:	d001      	beq.n	8002796 <send_cmd+0x1a>
 8002792:	23ff      	movs	r3, #255	; 0xff
 8002794:	e040      	b.n	8002818 <send_cmd+0x9c>

    /* Send command packet */
    xmit_spi(cmd);                        /* Command */
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff feef 	bl	800257c <xmit_spi>
    xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	0e1b      	lsrs	r3, r3, #24
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fee9 	bl	800257c <xmit_spi>
    xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fee3 	bl	800257c <xmit_spi>
    xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fedd 	bl	800257c <xmit_spi>
    xmit_spi((BYTE)arg);                /* Argument[7..0] */
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fed8 	bl	800257c <xmit_spi>
    n = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b40      	cmp	r3, #64	; 0x40
 80027d4:	d101      	bne.n	80027da <send_cmd+0x5e>
 80027d6:	2395      	movs	r3, #149	; 0x95
 80027d8:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b48      	cmp	r3, #72	; 0x48
 80027de:	d101      	bne.n	80027e4 <send_cmd+0x68>
 80027e0:	2387      	movs	r3, #135	; 0x87
 80027e2:	73fb      	strb	r3, [r7, #15]
    xmit_spi(n);
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fec8 	bl	800257c <xmit_spi>

    /* Receive command response */
    if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b4c      	cmp	r3, #76	; 0x4c
 80027f0:	d101      	bne.n	80027f6 <send_cmd+0x7a>
 80027f2:	f7ff fed0 	bl	8002596 <rcvr_spi>
    n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
 80027f6:	230a      	movs	r3, #10
 80027f8:	73fb      	strb	r3, [r7, #15]
    do
        res = rcvr_spi();
 80027fa:	f7ff fecc 	bl	8002596 <rcvr_spi>
 80027fe:	4603      	mov	r3, r0
 8002800:	73bb      	strb	r3, [r7, #14]
    while ((res & 0x80) && --n);
 8002802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da05      	bge.n	8002816 <send_cmd+0x9a>
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	3b01      	subs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f1      	bne.n	80027fa <send_cmd+0x7e>

    return res;            /* Return with the response value */
 8002816:	7bbb      	ldrb	r3, [r7, #14]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, ocr[4];


    if (drv) return STA_NOINIT;            /* Supports only single drive */
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <disk_initialize+0x14>
 8002830:	2301      	movs	r3, #1
 8002832:	e0d5      	b.n	80029e0 <disk_initialize+0x1c0>
    if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
 8002834:	4b6c      	ldr	r3, [pc, #432]	; (80029e8 <disk_initialize+0x1c8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <disk_initialize+0x2a>
 8002842:	4b69      	ldr	r3, [pc, #420]	; (80029e8 <disk_initialize+0x1c8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	e0ca      	b.n	80029e0 <disk_initialize+0x1c0>

    power_on();                            /* Force socket power on */
 800284a:	f7ff fedd 	bl	8002608 <power_on>
    //send_initial_clock_train();

    SELECT();                /* CS = L */
 800284e:	f7ff fe55 	bl	80024fc <SELECT>
    ty = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	73bb      	strb	r3, [r7, #14]
    if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
 8002856:	2100      	movs	r1, #0
 8002858:	2040      	movs	r0, #64	; 0x40
 800285a:	f7ff ff8f 	bl	800277c <send_cmd>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 80a5 	bne.w	80029b0 <disk_initialize+0x190>
        Timer1 = 100;                        /* Initialization timeout of 1000 msec */
 8002866:	4b61      	ldr	r3, [pc, #388]	; (80029ec <disk_initialize+0x1cc>)
 8002868:	2264      	movs	r2, #100	; 0x64
 800286a:	701a      	strb	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
 800286c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002870:	2048      	movs	r0, #72	; 0x48
 8002872:	f7ff ff83 	bl	800277c <send_cmd>
 8002876:	4603      	mov	r3, r0
 8002878:	2b01      	cmp	r3, #1
 800287a:	d158      	bne.n	800292e <disk_initialize+0x10e>
            for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e00c      	b.n	800289c <disk_initialize+0x7c>
 8002882:	7bfc      	ldrb	r4, [r7, #15]
 8002884:	f7ff fe87 	bl	8002596 <rcvr_spi>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4423      	add	r3, r4
 8002892:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	3301      	adds	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d9ef      	bls.n	8002882 <disk_initialize+0x62>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
 80028a2:	7abb      	ldrb	r3, [r7, #10]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 8083 	bne.w	80029b0 <disk_initialize+0x190>
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	2baa      	cmp	r3, #170	; 0xaa
 80028ae:	d17f      	bne.n	80029b0 <disk_initialize+0x190>
                do {
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 80028b0:	2100      	movs	r1, #0
 80028b2:	2077      	movs	r0, #119	; 0x77
 80028b4:	f7ff ff62 	bl	800277c <send_cmd>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d807      	bhi.n	80028ce <disk_initialize+0xae>
 80028be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028c2:	2069      	movs	r0, #105	; 0x69
 80028c4:	f7ff ff5a 	bl	800277c <send_cmd>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <disk_initialize+0xba>
                } while (Timer1);
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <disk_initialize+0x1cc>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1eb      	bne.n	80028b0 <disk_initialize+0x90>
 80028d8:	e000      	b.n	80028dc <disk_initialize+0xbc>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 80028da:	bf00      	nop
                if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <disk_initialize+0x1cc>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d064      	beq.n	80029b0 <disk_initialize+0x190>
 80028e6:	2100      	movs	r1, #0
 80028e8:	207a      	movs	r0, #122	; 0x7a
 80028ea:	f7ff ff47 	bl	800277c <send_cmd>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d15d      	bne.n	80029b0 <disk_initialize+0x190>
                    for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e00c      	b.n	8002914 <disk_initialize+0xf4>
 80028fa:	7bfc      	ldrb	r4, [r7, #15]
 80028fc:	f7ff fe4b 	bl	8002596 <rcvr_spi>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4423      	add	r3, r4
 800290a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	3301      	adds	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d9ef      	bls.n	80028fa <disk_initialize+0xda>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
 800291a:	7a3b      	ldrb	r3, [r7, #8]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <disk_initialize+0x108>
 8002924:	2306      	movs	r3, #6
 8002926:	e000      	b.n	800292a <disk_initialize+0x10a>
 8002928:	2302      	movs	r3, #2
 800292a:	73bb      	strb	r3, [r7, #14]
 800292c:	e040      	b.n	80029b0 <disk_initialize+0x190>
                }
            }
        } else {                            /* SDC Ver1 or MMC */
            ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
 800292e:	2100      	movs	r1, #0
 8002930:	2077      	movs	r0, #119	; 0x77
 8002932:	f7ff ff23 	bl	800277c <send_cmd>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d808      	bhi.n	800294e <disk_initialize+0x12e>
 800293c:	2100      	movs	r1, #0
 800293e:	2069      	movs	r0, #105	; 0x69
 8002940:	f7ff ff1c 	bl	800277c <send_cmd>
 8002944:	4603      	mov	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d801      	bhi.n	800294e <disk_initialize+0x12e>
 800294a:	2302      	movs	r3, #2
 800294c:	e000      	b.n	8002950 <disk_initialize+0x130>
 800294e:	2301      	movs	r3, #1
 8002950:	73bb      	strb	r3, [r7, #14]
            do {
                if (ty == 2) {
 8002952:	7bbb      	ldrb	r3, [r7, #14]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d10e      	bne.n	8002976 <disk_initialize+0x156>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
 8002958:	2100      	movs	r1, #0
 800295a:	2077      	movs	r0, #119	; 0x77
 800295c:	f7ff ff0e 	bl	800277c <send_cmd>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d80e      	bhi.n	8002984 <disk_initialize+0x164>
 8002966:	2100      	movs	r1, #0
 8002968:	2069      	movs	r0, #105	; 0x69
 800296a:	f7ff ff07 	bl	800277c <send_cmd>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <disk_initialize+0x164>
 8002974:	e00d      	b.n	8002992 <disk_initialize+0x172>
                } else {
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8002976:	2100      	movs	r1, #0
 8002978:	2041      	movs	r0, #65	; 0x41
 800297a:	f7ff feff 	bl	800277c <send_cmd>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <disk_initialize+0x170>
                }
            } while (Timer1);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <disk_initialize+0x1cc>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e1      	bne.n	8002952 <disk_initialize+0x132>
 800298e:	e000      	b.n	8002992 <disk_initialize+0x172>
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8002990:	bf00      	nop
            if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <disk_initialize+0x1cc>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <disk_initialize+0x18c>
 800299c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a0:	2050      	movs	r0, #80	; 0x50
 80029a2:	f7ff feeb 	bl	800277c <send_cmd>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <disk_initialize+0x190>
                ty = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73bb      	strb	r3, [r7, #14]
        }
    }
    CardType = ty;
 80029b0:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <disk_initialize+0x1d0>)
 80029b2:	7bbb      	ldrb	r3, [r7, #14]
 80029b4:	7013      	strb	r3, [r2, #0]
    DESELECT();            /* CS = H */
 80029b6:	f7ff fdad 	bl	8002514 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 80029ba:	f7ff fdec 	bl	8002596 <rcvr_spi>

    if (ty)           /* Initialization succeded */
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <disk_initialize+0x1b6>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <disk_initialize+0x1c8>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <disk_initialize+0x1c8>)
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	e001      	b.n	80029da <disk_initialize+0x1ba>
	else          /* Initialization failed */
        power_off();
 80029d6:	f7ff fe31 	bl	800263c <power_off>

    return Stat;
 80029da:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <disk_initialize+0x1c8>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}
 80029e8:	20000000 	.word	0x20000000
 80029ec:	2000011e 	.word	0x2000011e
 80029f0:	20000120 	.word	0x20000120

080029f4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;        /* Supports only single drive */
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <disk_status+0x14>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e002      	b.n	8002a0e <disk_status+0x1a>
    return Stat;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <disk_status+0x24>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000000 	.word	0x20000000

08002a1c <disk_read>:
    BYTE drv,            /* Physical drive nmuber (0) */
    BYTE *buff,            /* Pointer to the data buffer to store read data */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <disk_read+0x20>
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <disk_read+0x24>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e054      	b.n	8002aea <disk_read+0xce>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a40:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <disk_read+0xd8>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <disk_read+0x36>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04b      	b.n	8002aea <disk_read+0xce>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <disk_read+0xdc>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <disk_read+0x48>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	025b      	lsls	r3, r3, #9
 8002a62:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8002a64:	f7ff fd4a 	bl	80024fc <SELECT>

    if (count == 1) {    /* Single block read */
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d111      	bne.n	8002a92 <disk_read+0x76>
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	2051      	movs	r0, #81	; 0x51
 8002a72:	f7ff fe83 	bl	800277c <send_cmd>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d12c      	bne.n	8002ad6 <disk_read+0xba>
            && rcvr_datablock(buff, 512))
 8002a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a80:	68b8      	ldr	r0, [r7, #8]
 8002a82:	f7ff fdf1 	bl	8002668 <rcvr_datablock>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d024      	beq.n	8002ad6 <disk_read+0xba>
            count = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73bb      	strb	r3, [r7, #14]
 8002a90:	e021      	b.n	8002ad6 <disk_read+0xba>
    }
    else {                /* Multiple block read */
        if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	2052      	movs	r0, #82	; 0x52
 8002a96:	f7ff fe71 	bl	800277c <send_cmd>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11a      	bne.n	8002ad6 <disk_read+0xba>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 8002aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aa4:	68b8      	ldr	r0, [r7, #8]
 8002aa6:	f7ff fddf 	bl	8002668 <rcvr_datablock>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <disk_read+0xb0>
                buff += 512;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002abc:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002abe:	7bbb      	ldrb	r3, [r7, #14]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	73bb      	strb	r3, [r7, #14]
 8002ac4:	7bbb      	ldrb	r3, [r7, #14]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ea      	bne.n	8002aa0 <disk_read+0x84>
 8002aca:	e000      	b.n	8002ace <disk_read+0xb2>
                if (!rcvr_datablock(buff, 512)) break;
 8002acc:	bf00      	nop
            send_cmd(CMD12, 0);                /* STOP_TRANSMISSION */
 8002ace:	2100      	movs	r1, #0
 8002ad0:	204c      	movs	r0, #76	; 0x4c
 8002ad2:	f7ff fe53 	bl	800277c <send_cmd>
        }
    }

    DESELECT();            /* CS = H */
 8002ad6:	f7ff fd1d 	bl	8002514 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8002ada:	f7ff fd5c 	bl	8002596 <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8002ade:	7bbb      	ldrb	r3, [r7, #14]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000120 	.word	0x20000120

08002afc <disk_write>:
    BYTE drv,            /* Physical drive nmuber (0) */
    const BYTE *buff,    /* Pointer to the data to be written */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	461a      	mov	r2, r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <disk_write+0x20>
 8002b16:	7bbb      	ldrb	r3, [r7, #14]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <disk_write+0x24>
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	e072      	b.n	8002c06 <disk_write+0x10a>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002b20:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <disk_write+0x114>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <disk_write+0x36>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e069      	b.n	8002c06 <disk_write+0x10a>
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8002b32:	4b37      	ldr	r3, [pc, #220]	; (8002c10 <disk_write+0x114>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <disk_write+0x48>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e060      	b.n	8002c06 <disk_write+0x10a>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8002b44:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <disk_write+0x118>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <disk_write+0x5a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8002b56:	f7ff fcd1 	bl	80024fc <SELECT>

    if (count == 1) {    /* Single block write */
 8002b5a:	7bbb      	ldrb	r3, [r7, #14]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <disk_write+0x86>
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	2058      	movs	r0, #88	; 0x58
 8002b64:	f7ff fe0a 	bl	800277c <send_cmd>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d141      	bne.n	8002bf2 <disk_write+0xf6>
            && xmit_datablock(buff, 0xFE))
 8002b6e:	21fe      	movs	r1, #254	; 0xfe
 8002b70:	68b8      	ldr	r0, [r7, #8]
 8002b72:	f7ff fdaf 	bl	80026d4 <xmit_datablock>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d03a      	beq.n	8002bf2 <disk_write+0xf6>
            count = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73bb      	strb	r3, [r7, #14]
 8002b80:	e037      	b.n	8002bf2 <disk_write+0xf6>
    }
    else {                /* Multiple block write */
        if (CardType & 2) {
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <disk_write+0x118>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <disk_write+0xa4>
            send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2077      	movs	r0, #119	; 0x77
 8002b92:	f7ff fdf3 	bl	800277c <send_cmd>
 8002b96:	7bbb      	ldrb	r3, [r7, #14]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	2057      	movs	r0, #87	; 0x57
 8002b9c:	f7ff fdee 	bl	800277c <send_cmd>
        }
        if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	2059      	movs	r0, #89	; 0x59
 8002ba4:	f7ff fdea 	bl	800277c <send_cmd>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d121      	bne.n	8002bf2 <disk_write+0xf6>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 8002bae:	21fc      	movs	r1, #252	; 0xfc
 8002bb0:	68b8      	ldr	r0, [r7, #8]
 8002bb2:	f7ff fd8f 	bl	80026d4 <xmit_datablock>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f083 0301 	eor.w	r3, r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <disk_write+0xdc>
                buff += 512;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002bc8:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	73bb      	strb	r3, [r7, #14]
 8002bd0:	7bbb      	ldrb	r3, [r7, #14]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1eb      	bne.n	8002bae <disk_write+0xb2>
 8002bd6:	e000      	b.n	8002bda <disk_write+0xde>
                if (!xmit_datablock(buff, 0xFC)) break;
 8002bd8:	bf00      	nop
            if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
 8002bda:	21fd      	movs	r1, #253	; 0xfd
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7ff fd79 	bl	80026d4 <xmit_datablock>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <disk_write+0xf6>
                count = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73bb      	strb	r3, [r7, #14]
        }
    }

    DESELECT();            /* CS = H */
 8002bf2:	f7ff fc8f 	bl	8002514 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8002bf6:	f7ff fcce 	bl	8002596 <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000120 	.word	0x20000120

08002c18 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE drv,        /* Physical drive nmuber (0) */
    BYTE ctrl,        /* Control code */
    void *buff        /* Buffer to send/receive control data */
)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08b      	sub	sp, #44	; 0x2c
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	603a      	str	r2, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
 8002c24:	460b      	mov	r3, r1
 8002c26:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16], *ptr = buff;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	623b      	str	r3, [r7, #32]
    WORD csize;


    if (drv) return RES_PARERR;
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <disk_ioctl+0x1e>
 8002c32:	2304      	movs	r3, #4
 8002c34:	e119      	b.n	8002e6a <disk_ioctl+0x252>

    res = RES_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (ctrl == CTRL_POWER) {
 8002c3c:	79bb      	ldrb	r3, [r7, #6]
 8002c3e:	2b05      	cmp	r3, #5
 8002c40:	d127      	bne.n	8002c92 <disk_ioctl+0x7a>
        switch (*ptr) {
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d00e      	beq.n	8002c68 <disk_ioctl+0x50>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d012      	beq.n	8002c74 <disk_ioctl+0x5c>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11b      	bne.n	8002c8a <disk_ioctl+0x72>
        case 0:        /* Sub control code == 0 (POWER_OFF) */
            if (chk_power())
 8002c52:	f7ff fcff 	bl	8002654 <chk_power>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <disk_ioctl+0x48>
                power_off();        /* Power off */
 8002c5c:	f7ff fcee 	bl	800263c <power_off>
            res = RES_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002c66:	e0fe      	b.n	8002e66 <disk_ioctl+0x24e>
        case 1:        /* Sub control code == 1 (POWER_ON) */
            power_on();                /* Power on */
 8002c68:	f7ff fcce 	bl	8002608 <power_on>
            res = RES_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002c72:	e0f8      	b.n	8002e66 <disk_ioctl+0x24e>
        case 2:        /* Sub control code == 2 (POWER_GET) */
            *(ptr+1) = (BYTE)chk_power();
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	1c5c      	adds	r4, r3, #1
 8002c78:	f7ff fcec 	bl	8002654 <chk_power>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	7023      	strb	r3, [r4, #0]
            res = RES_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002c88:	e0ed      	b.n	8002e66 <disk_ioctl+0x24e>
        default :
            res = RES_PARERR;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c90:	e0e9      	b.n	8002e66 <disk_ioctl+0x24e>
        }
    }
    else {
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002c92:	4b78      	ldr	r3, [pc, #480]	; (8002e74 <disk_ioctl+0x25c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <disk_ioctl+0x8c>
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e0e2      	b.n	8002e6a <disk_ioctl+0x252>

        SELECT();        /* CS = L */
 8002ca4:	f7ff fc2a 	bl	80024fc <SELECT>

        switch (ctrl) {
 8002ca8:	79bb      	ldrb	r3, [r7, #6]
 8002caa:	2b0d      	cmp	r3, #13
 8002cac:	f200 80cc 	bhi.w	8002e48 <disk_ioctl+0x230>
 8002cb0:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <disk_ioctl+0xa0>)
 8002cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb6:	bf00      	nop
 8002cb8:	08002db3 	.word	0x08002db3
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002da3 	.word	0x08002da3
 8002cc4:	08002e49 	.word	0x08002e49
 8002cc8:	08002e49 	.word	0x08002e49
 8002ccc:	08002e49 	.word	0x08002e49
 8002cd0:	08002e49 	.word	0x08002e49
 8002cd4:	08002e49 	.word	0x08002e49
 8002cd8:	08002e49 	.word	0x08002e49
 8002cdc:	08002e49 	.word	0x08002e49
 8002ce0:	08002e49 	.word	0x08002e49
 8002ce4:	08002dc5 	.word	0x08002dc5
 8002ce8:	08002de9 	.word	0x08002de9
 8002cec:	08002e0d 	.word	0x08002e0d
        case GET_SECTOR_COUNT :    /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2049      	movs	r0, #73	; 0x49
 8002cf4:	f7ff fd42 	bl	800277c <send_cmd>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80a8 	bne.w	8002e50 <disk_ioctl+0x238>
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2110      	movs	r1, #16
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fcae 	bl	8002668 <rcvr_datablock>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 809e 	beq.w	8002e50 <disk_ioctl+0x238>
                if ((csd[0] >> 6) == 1) {    /* SDC ver 2.00 */
 8002d14:	7b3b      	ldrb	r3, [r7, #12]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10e      	bne.n	8002d3c <disk_ioctl+0x124>
                    csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8002d1e:	7d7b      	ldrb	r3, [r7, #21]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	7d3b      	ldrb	r3, [r7, #20]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*)buff = (DWORD)csize << 10;
 8002d32:	8bfb      	ldrh	r3, [r7, #30]
 8002d34:	029a      	lsls	r2, r3, #10
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e02e      	b.n	8002d9a <disk_ioctl+0x182>
                } else {                    /* MMC or SDC ver 1.XX */
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d3c:	7c7b      	ldrb	r3, [r7, #17]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	7dbb      	ldrb	r3, [r7, #22]
 8002d46:	09db      	lsrs	r3, r3, #7
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	7d7b      	ldrb	r3, [r7, #21]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 0306 	and.w	r3, r3, #6
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3302      	adds	r3, #2
 8002d60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002d64:	7d3b      	ldrb	r3, [r7, #20]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	7cbb      	ldrb	r3, [r7, #18]
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3301      	adds	r3, #1
 8002d8a:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*)buff = (DWORD)csize << (n - 9);
 8002d8c:	8bfa      	ldrh	r2, [r7, #30]
 8002d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d92:	3b09      	subs	r3, #9
 8002d94:	409a      	lsls	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8002da0:	e056      	b.n	8002e50 <disk_ioctl+0x238>

        case GET_SECTOR_SIZE :    /* Get sectors on the disk (WORD) */
            *(WORD*)buff = 512;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da8:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002db0:	e055      	b.n	8002e5e <disk_ioctl+0x246>

        case CTRL_SYNC :    /* Make sure that data has been written */
            if (wait_ready() == 0xFF)
 8002db2:	f7ff fc0d 	bl	80025d0 <wait_ready>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2bff      	cmp	r3, #255	; 0xff
 8002dba:	d14b      	bne.n	8002e54 <disk_ioctl+0x23c>
                res = RES_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002dc2:	e047      	b.n	8002e54 <disk_ioctl+0x23c>

        case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0        /* READ_CSD */
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2049      	movs	r0, #73	; 0x49
 8002dc8:	f7ff fcd8 	bl	800277c <send_cmd>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d142      	bne.n	8002e58 <disk_ioctl+0x240>
                && rcvr_datablock(ptr, 16))
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	6a38      	ldr	r0, [r7, #32]
 8002dd6:	f7ff fc47 	bl	8002668 <rcvr_datablock>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d03b      	beq.n	8002e58 <disk_ioctl+0x240>
                res = RES_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002de6:	e037      	b.n	8002e58 <disk_ioctl+0x240>

        case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0        /* READ_CID */
 8002de8:	2100      	movs	r1, #0
 8002dea:	204a      	movs	r0, #74	; 0x4a
 8002dec:	f7ff fcc6 	bl	800277c <send_cmd>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d132      	bne.n	8002e5c <disk_ioctl+0x244>
                && rcvr_datablock(ptr, 16))
 8002df6:	2110      	movs	r1, #16
 8002df8:	6a38      	ldr	r0, [r7, #32]
 8002dfa:	f7ff fc35 	bl	8002668 <rcvr_datablock>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02b      	beq.n	8002e5c <disk_ioctl+0x244>
                res = RES_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002e0a:	e027      	b.n	8002e5c <disk_ioctl+0x244>

        case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0) {    /* READ_OCR */
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	207a      	movs	r0, #122	; 0x7a
 8002e10:	f7ff fcb4 	bl	800277c <send_cmd>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <disk_ioctl+0x230>
                for (n = 0; n < 4; n++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e20:	e00b      	b.n	8002e3a <disk_ioctl+0x222>
                    *ptr++ = rcvr_spi();
 8002e22:	6a3c      	ldr	r4, [r7, #32]
 8002e24:	1c63      	adds	r3, r4, #1
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	f7ff fbb5 	bl	8002596 <rcvr_spi>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8002e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e34:	3301      	adds	r3, #1
 8002e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d9ef      	bls.n	8002e22 <disk_ioctl+0x20a>
                res = RES_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//            *ptr = CardType;
//            res = RES_OK;
//            break;

        default:
            res = RES_PARERR;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002e4e:	e006      	b.n	8002e5e <disk_ioctl+0x246>
            break;
 8002e50:	bf00      	nop
 8002e52:	e004      	b.n	8002e5e <disk_ioctl+0x246>
            break;
 8002e54:	bf00      	nop
 8002e56:	e002      	b.n	8002e5e <disk_ioctl+0x246>
            break;
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <disk_ioctl+0x246>
            break;
 8002e5c:	bf00      	nop
        }

        DESELECT();            /* CS = H */
 8002e5e:	f7ff fb59 	bl	8002514 <DESELECT>
        rcvr_spi();            /* Idle (Release DO) */
 8002e62:	f7ff fb98 	bl	8002596 <rcvr_spi>
    }

    return res;
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	372c      	adds	r7, #44	; 0x2c
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd90      	pop	{r4, r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime (void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	3e216000 	.word	0x3e216000

08002e8c <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 8002e90:	f000 f9a2 	bl	80031d8 <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f000 fa0b 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8002e9a:	f248 00e7 	movw	r0, #32999	; 0x80e7
 8002e9e:	f000 fa07 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 8002ea2:	f248 2008 	movw	r0, #33288	; 0x8208
 8002ea6:	f000 fa03 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8002eaa:	f24a 6040 	movw	r0, #42560	; 0xa640
 8002eae:	f000 f9ff 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 8002eb2:	f24c 6048 	movw	r0, #50760	; 0xc648
 8002eb6:	f000 f9fb 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8002eba:	f249 40a0 	movw	r0, #38048	; 0x94a0
 8002ebe:	f000 f9f7 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 8002ec2:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8002ec6:	f000 f9f3 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8002eca:	f64c 2081 	movw	r0, #51841	; 0xca81
 8002ece:	f000 f9ef 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 8002ed2:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8002ed6:	f000 f9eb 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8002eda:	f24c 4083 	movw	r0, #50307	; 0xc483
 8002ede:	f000 f9e7 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 8002ee2:	f649 0050 	movw	r0, #38992	; 0x9850
 8002ee6:	f000 f9e3 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8002eea:	f64c 4017 	movw	r0, #52247	; 0xcc17
 8002eee:	f000 f9df 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 8002ef2:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8002ef6:	f000 f9db 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 8002efa:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 8002efe:	f000 f9d7 	bl	80032b0 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 8002f02:	f24c 0040 	movw	r0, #49216	; 0xc040
 8002f06:	f000 f9d3 	bl	80032b0 <Rfm12bWriteCmd>
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	460b      	mov	r3, r1
 8002f18:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 8002f1a:	f240 320e 	movw	r2, #782	; 0x30e
 8002f1e:	2100      	movs	r1, #0
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f003 fae1 	bl	80064e8 <memset>
	rfm12bObj->module_addr = module_addr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <Rfm12bTranssmitSeqByte>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 8002f46:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8002f4a:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	b2d1      	uxtb	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	7011      	strb	r1, [r2, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	791b      	ldrb	r3, [r3, #4]
 8002f62:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 8002f64:	7b7b      	ldrb	r3, [r7, #13]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	89fb      	ldrh	r3, [r7, #14]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f99e 	bl	80032b0 <Rfm12bWriteCmd>
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <Rfm12bStartSending>:


void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	4611      	mov	r1, r2
 8002f88:	461a      	mov	r2, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	22aa      	movs	r2, #170	; 0xaa
 8002f96:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0xAA;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	22aa      	movs	r2, #170	; 0xaa
 8002f9c:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0x2D;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	222d      	movs	r2, #45	; 0x2d
 8002fa2:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = 0xD4;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	22d4      	movs	r2, #212	; 0xd4
 8002fa8:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = dataNb;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = toAddr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	79ba      	ldrb	r2, [r7, #6]
 8002fb4:	725a      	strb	r2, [r3, #9]
	rfm12b->txBuff.data[6] = rfm12b->module_addr;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	729a      	strb	r2, [r3, #10]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	330b      	adds	r3, #11
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fa67 	bl	800649e <memcpy>
	rfm12b->txBuff.pos =0;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + ALL_HEADER_SIZE;
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	3307      	adds	r3, #7
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 8002fe0:	f000 f8f2 	bl	80031c8 <rfm12bSwitchTx>
    rfm12b->state = transmit;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ffa5 	bl	8002f3e <Rfm12bTranssmitSeqByte>
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <Rfm12bMantainSending>:



void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos <= rfm12b->txBuff.dataNb){
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	429a      	cmp	r2, r3
 8003012:	d804      	bhi.n	800301e <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff91 	bl	8002f3e <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 800301c:	e005      	b.n	800302a <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 8003026:	f000 f8c7 	bl	80031b8 <rfm12bSwitchRx>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f003 fa4e 	bl	80064e8 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f203 110b 	addw	r1, r3, #267	; 0x10b
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	f003 fa1c 	bl	800649e <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800306c:	b2da      	uxtb	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800307a:	b2da      	uxtb	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003096:	f44f 7282 	mov.w	r2, #260	; 0x104
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fa23 	bl	80064e8 <memset>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 80030ba:	f000 f863 	bl	8003184 <rfm12bFifoReset>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 80030d0:	f000 f864 	bl	800319c <rfm12bReadFifo>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	b2d1      	uxtb	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8003102:	b2da      	uxtb	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == (rfm12b->rxBuff.dataNb + L2_HEADER_SIZE)){
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800311a:	b2db      	uxtb	r3, r3
 800311c:	3303      	adds	r3, #3
 800311e:	429a      	cmp	r2, r3
 8003120:	d10b      	bne.n	800313a <Rfm12bMantainreceiving+0x72>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff85 	bl	8003032 <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ffbe 	bl	80030aa <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <Rfm12bMantainreceiving+0x7c>)
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <Rfm12bMantainreceiving+0x7c>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003138:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40011000 	.word	0x40011000

08003148 <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8003150:	2000      	movs	r0, #0
 8003152:	f000 f8ad 	bl	80032b0 <Rfm12bWriteCmd>
 8003156:	4603      	mov	r3, r0
 8003158:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 800315a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da0c      	bge.n	800317c <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b01      	cmp	r3, #1
 800316c:	d103      	bne.n	8003176 <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff44 	bl	8002ffc <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8003174:	e002      	b.n	800317c <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ffa6 	bl	80030c8 <Rfm12bMantainreceiving>
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8003188:	f64c 2081 	movw	r0, #51841	; 0xca81
 800318c:	f000 f890 	bl	80032b0 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8003190:	f64c 2083 	movw	r0, #51843	; 0xca83
 8003194:	f000 f88c 	bl	80032b0 <Rfm12bWriteCmd>
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 80031a2:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80031a6:	f000 f883 	bl	80032b0 <Rfm12bWriteCmd>
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 80031ae:	79fb      	ldrb	r3, [r7, #7]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 80031bc:	f248 2099 	movw	r0, #33433	; 0x8299
 80031c0:	f000 f876 	bl	80032b0 <Rfm12bWriteCmd>
}
 80031c4:	bf00      	nop
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 80031cc:	f248 2039 	movw	r0, #33337	; 0x8239
 80031d0:	f000 f86e 	bl	80032b0 <Rfm12bWriteCmd>
}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80031de:	2101      	movs	r1, #1
 80031e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031e4:	f7fd fa7a 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80031e8:	2101      	movs	r1, #1
 80031ea:	2004      	movs	r0, #4
 80031ec:	f7fd fa76 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80031f0:	2101      	movs	r1, #1
 80031f2:	2008      	movs	r0, #8
 80031f4:	f7fd fa72 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80031f8:	23e0      	movs	r3, #224	; 0xe0
 80031fa:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80031fc:	2318      	movs	r3, #24
 80031fe:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003200:	2301      	movs	r3, #1
 8003202:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	4619      	mov	r1, r3
 800320a:	4825      	ldr	r0, [pc, #148]	; (80032a0 <Rfm12bSpiInit+0xc8>)
 800320c:	f7fd f98e 	bl	800052c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8003210:	2340      	movs	r3, #64	; 0x40
 8003212:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003214:	2310      	movs	r3, #16
 8003216:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003218:	2301      	movs	r3, #1
 800321a:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800321c:	f107 0308 	add.w	r3, r7, #8
 8003220:	4619      	mov	r1, r3
 8003222:	4820      	ldr	r0, [pc, #128]	; (80032a4 <Rfm12bSpiInit+0xcc>)
 8003224:	f7fd f982 	bl	800052c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8003228:	2300      	movs	r3, #0
 800322a:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 800322c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003230:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8003232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003236:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8003238:	2300      	movs	r3, #0
 800323a:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 800323c:	2300      	movs	r3, #0
 800323e:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8003240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003244:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8003246:	2330      	movs	r3, #48	; 0x30
 8003248:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800324a:	2300      	movs	r3, #0
 800324c:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800324e:	2307      	movs	r3, #7
 8003250:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8003252:	2101      	movs	r1, #1
 8003254:	4814      	ldr	r0, [pc, #80]	; (80032a8 <Rfm12bSpiInit+0xd0>)
 8003256:	f7fd faf9 	bl	800084c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	4619      	mov	r1, r3
 8003260:	4811      	ldr	r0, [pc, #68]	; (80032a8 <Rfm12bSpiInit+0xd0>)
 8003262:	f7fd fa77 	bl	8000754 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8003266:	2101      	movs	r1, #1
 8003268:	480f      	ldr	r0, [pc, #60]	; (80032a8 <Rfm12bSpiInit+0xd0>)
 800326a:	f7fd fab6 	bl	80007da <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <Rfm12bSpiInit+0xd4>)
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <Rfm12bSpiInit+0xd4>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f043 0308 	orr.w	r3, r3, #8
 8003278:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 800327a:	2310      	movs	r3, #16
 800327c:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 800327e:	2302      	movs	r3, #2
 8003280:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8003282:	2302      	movs	r3, #2
 8003284:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4806      	ldr	r0, [pc, #24]	; (80032a4 <Rfm12bSpiInit+0xcc>)
 800328c:	f7fd f94e 	bl	800052c <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8003290:	2102      	movs	r1, #2
 8003292:	4804      	ldr	r0, [pc, #16]	; (80032a4 <Rfm12bSpiInit+0xcc>)
 8003294:	f7fd fa06 	bl	80006a4 <GPIO_SetBits>
}
 8003298:	bf00      	nop
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40010800 	.word	0x40010800
 80032a4:	40010c00 	.word	0x40010c00
 80032a8:	40013000 	.word	0x40013000
 80032ac:	40021000 	.word	0x40021000

080032b0 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 80032ba:	2102      	movs	r1, #2
 80032bc:	4812      	ldr	r0, [pc, #72]	; (8003308 <Rfm12bWriteCmd+0x58>)
 80032be:	f7fd f9ff 	bl	80006c0 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 80032c2:	bf00      	nop
 80032c4:	2102      	movs	r1, #2
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <Rfm12bWriteCmd+0x5c>)
 80032c8:	f7fd fadf 	bl	800088a <SPI_I2S_GetFlagStatus>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f8      	beq.n	80032c4 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	4619      	mov	r1, r3
 80032d6:	480d      	ldr	r0, [pc, #52]	; (800330c <Rfm12bWriteCmd+0x5c>)
 80032d8:	f7fd fa9e 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 80032dc:	bf00      	nop
 80032de:	2101      	movs	r1, #1
 80032e0:	480a      	ldr	r0, [pc, #40]	; (800330c <Rfm12bWriteCmd+0x5c>)
 80032e2:	f7fd fad2 	bl	800088a <SPI_I2S_GetFlagStatus>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f8      	beq.n	80032de <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 80032ec:	4807      	ldr	r0, [pc, #28]	; (800330c <Rfm12bWriteCmd+0x5c>)
 80032ee:	f7fd faa1 	bl	8000834 <SPI_I2S_ReceiveData>
 80032f2:	4603      	mov	r3, r0
 80032f4:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 80032f6:	2102      	movs	r1, #2
 80032f8:	4803      	ldr	r0, [pc, #12]	; (8003308 <Rfm12bWriteCmd+0x58>)
 80032fa:	f7fd f9d3 	bl	80006a4 <GPIO_SetBits>

	return recData;
 80032fe:	89fb      	ldrh	r3, [r7, #14]

}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40010c00 	.word	0x40010c00
 800330c:	40013000 	.word	0x40013000

08003310 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <NVIC_EnableIRQ+0x2c>)
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	79fa      	ldrb	r2, [r7, #7]
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100

08003340 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <EnableGpioClk+0x68>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d106      	bne.n	800335e <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8003350:	4a16      	ldr	r2, [pc, #88]	; (80033ac <EnableGpioClk+0x6c>)
 8003352:	4b16      	ldr	r3, [pc, #88]	; (80033ac <EnableGpioClk+0x6c>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 800335c:	e01f      	b.n	800339e <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <EnableGpioClk+0x70>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d106      	bne.n	8003374 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8003366:	4a11      	ldr	r2, [pc, #68]	; (80033ac <EnableGpioClk+0x6c>)
 8003368:	4b10      	ldr	r3, [pc, #64]	; (80033ac <EnableGpioClk+0x6c>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f043 0308 	orr.w	r3, r3, #8
 8003370:	6193      	str	r3, [r2, #24]
	 		 }
 8003372:	e014      	b.n	800339e <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <EnableGpioClk+0x74>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d106      	bne.n	800338a <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800337c:	4a0b      	ldr	r2, [pc, #44]	; (80033ac <EnableGpioClk+0x6c>)
 800337e:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <EnableGpioClk+0x6c>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f043 0310 	orr.w	r3, r3, #16
 8003386:	6193      	str	r3, [r2, #24]
	 		 }
 8003388:	e009      	b.n	800339e <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <EnableGpioClk+0x78>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d105      	bne.n	800339e <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8003392:	4a06      	ldr	r2, [pc, #24]	; (80033ac <EnableGpioClk+0x6c>)
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <EnableGpioClk+0x6c>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f043 0320 	orr.w	r3, r3, #32
 800339c:	6193      	str	r3, [r2, #24]
	 		 }
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	40010800 	.word	0x40010800
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40010c00 	.word	0x40010c00
 80033b4:	40011000 	.word	0x40011000
 80033b8:	40011400 	.word	0x40011400

080033bc <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	2b07      	cmp	r3, #7
 80033cc:	d81d      	bhi.n	800340a <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	2103      	movs	r1, #3
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	43d2      	mvns	r2, r2
 80033dc:	401a      	ands	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	2103      	movs	r1, #3
 80033ea:	fa01 f202 	lsl.w	r2, r1, r2
 80033ee:	43d2      	mvns	r2, r2
 80033f0:	401a      	ands	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8003408:	e023      	b.n	8003452 <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	3a08      	subs	r2, #8
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	2103      	movs	r1, #3
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	43d2      	mvns	r2, r2
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	3a08      	subs	r2, #8
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	2103      	movs	r1, #3
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	43d2      	mvns	r2, r2
 8003434:	401a      	ands	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	3a08      	subs	r2, #8
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	3202      	adds	r2, #2
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	605a      	str	r2, [r3, #4]
	 		 }
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	2b07      	cmp	r3, #7
 800346c:	d82b      	bhi.n	80034c6 <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	2103      	movs	r1, #3
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	43d2      	mvns	r2, r2
 800347e:	401a      	ands	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	3202      	adds	r2, #2
 800348e:	2103      	movs	r1, #3
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	43d2      	mvns	r2, r2
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	0092      	lsls	r2, r2, #2
 80034a4:	3202      	adds	r2, #2
 80034a6:	2102      	movs	r1, #2
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 80034c4:	e02d      	b.n	8003522 <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	3a08      	subs	r2, #8
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	2103      	movs	r1, #3
 80034d2:	fa01 f202 	lsl.w	r2, r1, r2
 80034d6:	43d2      	mvns	r2, r2
 80034d8:	401a      	ands	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	3a08      	subs	r2, #8
 80034e6:	0092      	lsls	r2, r2, #2
 80034e8:	3202      	adds	r2, #2
 80034ea:	2103      	movs	r1, #3
 80034ec:	fa01 f202 	lsl.w	r2, r1, r2
 80034f0:	43d2      	mvns	r2, r2
 80034f2:	401a      	ands	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	3a08      	subs	r2, #8
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	3202      	adds	r2, #2
 8003504:	2102      	movs	r1, #2
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
	 		 }
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b07      	cmp	r3, #7
 800353c:	d92f      	bls.n	800359e <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	3a08      	subs	r2, #8
 8003546:	0092      	lsls	r2, r2, #2
 8003548:	2103      	movs	r1, #3
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	43d2      	mvns	r2, r2
 8003550:	401a      	ands	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	3a08      	subs	r2, #8
 800355e:	0092      	lsls	r2, r2, #2
 8003560:	3202      	adds	r2, #2
 8003562:	2103      	movs	r1, #3
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	43d2      	mvns	r2, r2
 800356a:	401a      	ands	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	3a08      	subs	r2, #8
 8003578:	0092      	lsls	r2, r2, #2
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f202 	lsl.w	r2, r1, r2
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	3a08      	subs	r2, #8
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	3202      	adds	r2, #2
 8003592:	2102      	movs	r1, #2
 8003594:	fa01 f202 	lsl.w	r2, r1, r2
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	70fb      	strb	r3, [r7, #3]
 80035ba:	460b      	mov	r3, r1
 80035bc:	70bb      	strb	r3, [r7, #2]
 80035be:	4613      	mov	r3, r2
 80035c0:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80035c2:	4a1a      	ldr	r2, [pc, #104]	; (800362c <EnableExti+0x84>)
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <EnableExti+0x84>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <EnableExti+0x88>)
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <EnableExti+0x88>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 80035da:	4916      	ldr	r1, [pc, #88]	; (8003634 <EnableExti+0x8c>)
 80035dc:	4b15      	ldr	r3, [pc, #84]	; (8003634 <EnableExti+0x8c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	2001      	movs	r0, #1
 80035e4:	fa00 f202 	lsl.w	r2, r0, r2
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 80035ec:	78bb      	ldrb	r3, [r7, #2]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 80035f2:	4910      	ldr	r1, [pc, #64]	; (8003634 <EnableExti+0x8c>)
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <EnableExti+0x8c>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	2001      	movs	r0, #1
 80035fc:	fa00 f202 	lsl.w	r2, r0, r2
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <EnableExti+0x8c>)
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <EnableExti+0x8c>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	2001      	movs	r0, #1
 8003614:	fa00 f202 	lsl.w	r2, r0, r2
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 800361c:	2017      	movs	r0, #23
 800361e:	f7ff fe77 	bl	8003310 <NVIC_EnableIRQ>
	 		 }
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40021000 	.word	0x40021000
 8003630:	40010000 	.word	0x40010000
 8003634:	40010400 	.word	0x40010400

08003638 <EnableExtiGeneral>:




			 	 void EnableExtiGeneral(uint8_t gpioPortNb, uint8_t pinNb, bool rise, bool fall){
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	4604      	mov	r4, r0
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4623      	mov	r3, r4
 8003648:	71fb      	strb	r3, [r7, #7]
 800364a:	4603      	mov	r3, r0
 800364c:	71bb      	strb	r3, [r7, #6]
 800364e:	460b      	mov	r3, r1
 8003650:	717b      	strb	r3, [r7, #5]
 8003652:	4613      	mov	r3, r2
 8003654:	713b      	strb	r3, [r7, #4]
		 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8003656:	4a31      	ldr	r2, [pc, #196]	; (800371c <EnableExtiGeneral+0xe4>)
 8003658:	4b30      	ldr	r3, [pc, #192]	; (800371c <EnableExtiGeneral+0xe4>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6193      	str	r3, [r2, #24]
		 		 	AFIO->EXTICR[pinNb >> 0x02] |= ((gpioPortNb) << (0x04 * (pinNb & 0x03)));
 8003662:	482f      	ldr	r0, [pc, #188]	; (8003720 <EnableExtiGeneral+0xe8>)
 8003664:	79bb      	ldrb	r3, [r7, #6]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461c      	mov	r4, r3
 800366c:	4a2c      	ldr	r2, [pc, #176]	; (8003720 <EnableExtiGeneral+0xe8>)
 800366e:	79bb      	ldrb	r3, [r7, #6]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3302      	adds	r3, #2
 8003676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367a:	79f9      	ldrb	r1, [r7, #7]
 800367c:	79ba      	ldrb	r2, [r7, #6]
 800367e:	f002 0203 	and.w	r2, r2, #3
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	431a      	orrs	r2, r3
 800368a:	1ca3      	adds	r3, r4, #2
 800368c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		 		 	EXTI->IMR  |= (1<<pinNb);
 8003690:	4924      	ldr	r1, [pc, #144]	; (8003724 <EnableExtiGeneral+0xec>)
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <EnableExtiGeneral+0xec>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	79ba      	ldrb	r2, [r7, #6]
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
		 		 	if (rise){
 80036a2:	797b      	ldrb	r3, [r7, #5]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <EnableExtiGeneral+0x82>
		 		 		EXTI->RTSR |= (1<<pinNb);
 80036a8:	491e      	ldr	r1, [pc, #120]	; (8003724 <EnableExtiGeneral+0xec>)
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <EnableExtiGeneral+0xec>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	79ba      	ldrb	r2, [r7, #6]
 80036b0:	2001      	movs	r0, #1
 80036b2:	fa00 f202 	lsl.w	r2, r0, r2
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
		 		 	}
		 		 	if (fall){
 80036ba:	793b      	ldrb	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <EnableExtiGeneral+0x9a>
		 		 		EXTI->FTSR |= (1<<pinNb);
 80036c0:	4918      	ldr	r1, [pc, #96]	; (8003724 <EnableExtiGeneral+0xec>)
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <EnableExtiGeneral+0xec>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	79ba      	ldrb	r2, [r7, #6]
 80036c8:	2001      	movs	r0, #1
 80036ca:	fa00 f202 	lsl.w	r2, r0, r2
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60cb      	str	r3, [r1, #12]
		 		 	}


		 		 	uint8_t irqNb;

		 		 	if (pinNb >=0  && pinNb <=3){
 80036d2:	79bb      	ldrb	r3, [r7, #6]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d806      	bhi.n	80036e6 <EnableExtiGeneral+0xae>
		 		 		const uint8_t irqOffset = 6;
 80036d8:	2306      	movs	r3, #6
 80036da:	73bb      	strb	r3, [r7, #14]
		 		 		irqNb = (pinNb +  irqOffset);
 80036dc:	79ba      	ldrb	r2, [r7, #6]
 80036de:	7bbb      	ldrb	r3, [r7, #14]
 80036e0:	4413      	add	r3, r2
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e010      	b.n	8003708 <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=5  && pinNb <9){
 80036e6:	79bb      	ldrb	r3, [r7, #6]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d905      	bls.n	80036f8 <EnableExtiGeneral+0xc0>
 80036ec:	79bb      	ldrb	r3, [r7, #6]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d802      	bhi.n	80036f8 <EnableExtiGeneral+0xc0>
		 		 		irqNb = EXTI9_5_IRQn;
 80036f2:	2317      	movs	r3, #23
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e007      	b.n	8003708 <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=10  && pinNb <=15){
 80036f8:	79bb      	ldrb	r3, [r7, #6]
 80036fa:	2b09      	cmp	r3, #9
 80036fc:	d904      	bls.n	8003708 <EnableExtiGeneral+0xd0>
 80036fe:	79bb      	ldrb	r3, [r7, #6]
 8003700:	2b0f      	cmp	r3, #15
 8003702:	d801      	bhi.n	8003708 <EnableExtiGeneral+0xd0>
		 		 		irqNb = EXTI15_10_IRQn;
 8003704:	2328      	movs	r3, #40	; 0x28
 8003706:	73fb      	strb	r3, [r7, #15]
		 		 	}


		 		 	NVIC_EnableIRQ(irqNb);
 8003708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fdff 	bl	8003310 <NVIC_EnableIRQ>



		 		 }
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400

08003728 <NVIC_EnableIRQ>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <NVIC_EnableIRQ+0x2c>)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	79fa      	ldrb	r2, [r7, #7]
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2001      	movs	r0, #1
 8003742:	fa00 f202 	lsl.w	r2, r0, r2
 8003746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100

08003758 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 800375c:	2020      	movs	r0, #32
 800375e:	f7fc fed7 	bl	8000510 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 8003762:	4802      	ldr	r0, [pc, #8]	; (800376c <EXTI9_5_IRQHandler+0x14>)
 8003764:	f7ff fcf0 	bl	8003148 <Rfm12bIrqCallback>

}
 8003768:	bf00      	nop
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000124 	.word	0x20000124

08003770 <_Z9ReadTouchv>:




void ReadTouch(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0


	uint16_t TouchXval;
	uint16_t TouchYval;;

	CS_LOW
 8003776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800377a:	480e      	ldr	r0, [pc, #56]	; (80037b4 <_Z9ReadTouchv+0x44>)
 800377c:	f7fc ffa0 	bl	80006c0 <GPIO_ResetBits>

	SpiTransmit(0xD2);
 8003780:	20d2      	movs	r0, #210	; 0xd2
 8003782:	f000 fc09 	bl	8003f98 <SpiTransmit>
	TouchXval = SpiTransmit(0x00);
 8003786:	2000      	movs	r0, #0
 8003788:	f000 fc06 	bl	8003f98 <SpiTransmit>
 800378c:	4603      	mov	r3, r0
 800378e:	80fb      	strh	r3, [r7, #6]

	SpiTransmit(0x92);
 8003790:	2092      	movs	r0, #146	; 0x92
 8003792:	f000 fc01 	bl	8003f98 <SpiTransmit>
	TouchYval = SpiTransmit(0x00);
 8003796:	2000      	movs	r0, #0
 8003798:	f000 fbfe 	bl	8003f98 <SpiTransmit>
 800379c:	4603      	mov	r3, r0
 800379e:	80bb      	strh	r3, [r7, #4]

	CS_HIGH
 80037a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80037a4:	4803      	ldr	r0, [pc, #12]	; (80037b4 <_Z9ReadTouchv+0x44>)
 80037a6:	f7fc ff7d 	bl	80006a4 <GPIO_SetBits>

}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40010800 	.word	0x40010800

080037b8 <EXTI15_10_IRQHandler>:



extern "C" void EXTI15_10_IRQHandler (void);

void EXTI15_10_IRQHandler (void){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
	ReadTouch();
 80037bc:	f7ff ffd8 	bl	8003770 <_Z9ReadTouchv>
	EXTI_ClearFlag(EXTI_Line12);
 80037c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80037c4:	f7fc fe96 	bl	80004f4 <EXTI_ClearFlag>
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	return 1;
 80037d6:	2301      	movs	r3, #1
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 80037f4:	887b      	ldrh	r3, [r7, #2]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	6978      	ldr	r0, [r7, #20]
 8003802:	f7ff fbbb 	bl	8002f7c <Rfm12bStartSending>
	return buffLen;
 8003806:	887b      	ldrh	r3, [r7, #2]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8003828:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	dd17      	ble.n	8003860 <_Z10broker_recPvP11sockaddr_inPht+0x50>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8003830:	887a      	ldrh	r2, [r7, #2]
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	4293      	cmp	r3, r2
 8003836:	bfa8      	it	ge
 8003838:	4613      	movge	r3, r2
 800383a:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8003842:	7dfa      	ldrb	r2, [r7, #23]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f002 fe29 	bl	800649e <memcpy>
		obj->completedRxBuff.dataNb = 0;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		sockaddr->sin_addr.s_addr = obj->completedRxBuff.rxFromAddr;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	605a      	str	r2, [r3, #4]
	}

	return byteNb;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
	return 1;
 8003874:	2301      	movs	r3, #1
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <_Z9_delay_msm>:


void _delay_ms(uint32_t x){
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	;
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
	...

08003894 <_Z11intToStringB5cxx11m>:



std::string intToString(uint32_t intVal){
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
	/*due to not available "to_string()" c++11 func*/
	const uint8_t intSize = 8;
 800389e:	2308      	movs	r3, #8
 80038a0:	75fb      	strb	r3, [r7, #23]
	char charVal[intSize];
	snprintf(charVal, intSize, "%u", intVal);
 80038a2:	f107 000c 	add.w	r0, r7, #12
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <_Z11intToStringB5cxx11m+0x4c>)
 80038aa:	2108      	movs	r1, #8
 80038ac:	f002 ff22 	bl	80066f4 <sniprintf>
	std::string strVal(charVal);
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 fb63 	bl	8005f80 <_ZNSaIcEC1Ev>
 80038ba:	f107 0214 	add.w	r2, r7, #20
 80038be:	f107 030c 	add.w	r3, r7, #12
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f002 fc11 	bl	80060ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4618      	mov	r0, r3
 80038d0:	f002 fb57 	bl	8005f82 <_ZNSaIcED1Ev>
	return strVal;
 80038d4:	bf00      	nop
}
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	08006e44 	.word	0x08006e44

080038e4 <_Z7LCD_BMPPKc>:
}



void LCD_BMP(const char * nazwa_pliku)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	6018      	str	r0, [r3, #0]

	  TM_ILI9341_DrawPixel(80, 80, ILI9341_COLOR_RED);
 80038f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80038f4:	2150      	movs	r1, #80	; 0x50
 80038f6:	2050      	movs	r0, #80	; 0x50
 80038f8:	f000 fec4 	bl	8004684 <TM_ILI9341_DrawPixel>


	u32 i = 0, j = 0, liczba_pikseli = 0, liczba_bajtow =0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8003902:	2300      	movs	r3, #0
 8003904:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800390e:	2300      	movs	r3, #0
 8003910:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	u8 temp[4];
	UINT ile_bajtow;
	FRESULT fresult;
	FIL plik;
	// Otwarcie do odczytu pliku bitmapy
	fresult = f_open (&plik, (const char *) nazwa_pliku, FA_READ);
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	f107 000c 	add.w	r0, r7, #12
 800391a:	2201      	movs	r2, #1
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	f7fe fa55 	bl	8001dcc <f_open>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	// Opuszczenie dwoch pierwszych bajtow
	fresult = f_read (&plik, &temp[0], 2, &ile_bajtow);
 8003928:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800392c:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8003930:	f107 000c 	add.w	r0, r7, #12
 8003934:	2202      	movs	r2, #2
 8003936:	f7fe fbb6 	bl	80020a6 <f_read>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	// rozmiar pliku w bajtach
	fresult = f_read (&plik, (u8*) &liczba_bajtow, 4, &ile_bajtow);
 8003940:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003944:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8003948:	f107 000c 	add.w	r0, r7, #12
 800394c:	2204      	movs	r2, #4
 800394e:	f7fe fbaa 	bl	80020a6 <f_read>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	// Opuszczenie 4 bajtow
	fresult = f_read (&plik, &temp[0], 4, &ile_bajtow);
 8003958:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800395c:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8003960:	f107 000c 	add.w	r0, r7, #12
 8003964:	2204      	movs	r2, #4
 8003966:	f7fe fb9e 	bl	80020a6 <f_read>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	// Odczytanie przesuniecia (offsetu) od poczatku pliku do
	// poczatku bajtow opisujacych obraz
	fresult = f_read (&plik, (u8*) &i, 4, &ile_bajtow);
 8003970:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003974:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8003978:	f107 000c 	add.w	r0, r7, #12
 800397c:	2204      	movs	r2, #4
 800397e:	f7fe fb92 	bl	80020a6 <f_read>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	// Opuszczenie liczby bajtow od aktualnego miejsca
	// do poczatku danych obrazu, wartosc 14, bo odczytane zostalo
	// juz z pliku 2+4+4+4=14 bajtow
	for(j = 0; j < (i - 14); j++){
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800398e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003992:	f1a3 020e 	sub.w	r2, r3, #14
 8003996:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800399a:	429a      	cmp	r2, r3
 800399c:	d911      	bls.n	80039c2 <_Z7LCD_BMPPKc+0xde>
		fresult = f_read (&plik, &temp[0], 1, &ile_bajtow);
 800399e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80039a2:	f507 710d 	add.w	r1, r7, #564	; 0x234
 80039a6:	f107 000c 	add.w	r0, r7, #12
 80039aa:	2201      	movs	r2, #1
 80039ac:	f7fe fb7b 	bl	80020a6 <f_read>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	for(j = 0; j < (i - 14); j++){
 80039b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80039ba:	3301      	adds	r3, #1
 80039bc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80039c0:	e7e5      	b.n	800398e <_Z7LCD_BMPPKc+0xaa>
	}
	// Liczba pikseli obrazu = (rozmiar pliku - offset)/2 bajty na pisel
	liczba_pikseli = (liczba_bajtow - i)/2;
 80039c2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80039c6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	// Ustawienie parametrow pracy LCD (m. in. format BGR 5-6-5)
//	LCD_WriteReg(R3, 0x1008);
//	LCD_WriteRAM_Prepare();
	// Odczyt bajtow z karty SD i wyslanie danych do LCD
	TM_ILI9341_SetCursorPosition(20, 20, 20, 20);
 80039d2:	2314      	movs	r3, #20
 80039d4:	2214      	movs	r2, #20
 80039d6:	2114      	movs	r1, #20
 80039d8:	2014      	movs	r0, #20
 80039da:	f000 fe73 	bl	80046c4 <TM_ILI9341_SetCursorPosition>
	TM_ILI9341_SendCommand(0x2C);
 80039de:	202c      	movs	r0, #44	; 0x2c
 80039e0:	f000 fe08 	bl	80045f4 <TM_ILI9341_SendCommand>


	//for(i = 0; i < liczba_pikseli; i++)

		for(i = 0; i < 100; i++)
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80039ea:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80039ee:	2b63      	cmp	r3, #99	; 0x63
 80039f0:	d820      	bhi.n	8003a34 <_Z7LCD_BMPPKc+0x150>
	{
		fresult = f_read (&plik, (u8*) &piksel, 2, &ile_bajtow);
 80039f2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80039f6:	f207 213a 	addw	r1, r7, #570	; 0x23a
 80039fa:	f107 000c 	add.w	r0, r7, #12
 80039fe:	2202      	movs	r2, #2
 8003a00:	f7fe fb51 	bl	80020a6 <f_read>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	//	LCD_WriteRAM(piksel);
		//TM_ILI9341_DrawPixel(i, 30, piksel);

		  TM_ILI9341_DrawPixel(30, 30, ILI9341_COLOR_RED);
 8003a0a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a0e:	211e      	movs	r1, #30
 8003a10:	201e      	movs	r0, #30
 8003a12:	f000 fe37 	bl	8004684 <TM_ILI9341_DrawPixel>
		  TM_ILI9341_DrawPixel(i, 30, piksel);
 8003a16:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f8b7 223a 	ldrh.w	r2, [r7, #570]	; 0x23a
 8003a20:	211e      	movs	r1, #30
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fe2e 	bl	8004684 <TM_ILI9341_DrawPixel>
		for(i = 0; i < 100; i++)
 8003a28:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8003a32:	e7da      	b.n	80039ea <_Z7LCD_BMPPKc+0x106>
	}
	//LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
	// Przywrocenie ustawien LCD
//	LCD_WriteReg(R3, 0x1018);
	// Zamyka plik
	fresult = f_close (&plik);
 8003a34:	f107 030c 	add.w	r3, r7, #12
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fd4b 	bl	80024d4 <f_close>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
}
 8003a44:	bf00      	nop
 8003a46:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <main>:



int main(){
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	f5ad 5dee 	sub.w	sp, sp, #7616	; 0x1dc0
 8003a56:	af02      	add	r7, sp, #8

	spiInit();
 8003a58:	f000 fa3e 	bl	8003ed8 <spiInit>


	SetGpioAsInFloating(GPIOA, 12);
 8003a5c:	210c      	movs	r1, #12
 8003a5e:	48a5      	ldr	r0, [pc, #660]	; (8003cf4 <main+0x2a4>)
 8003a60:	f7ff fcac 	bl	80033bc <SetGpioAsInFloating>
	EnableExtiGeneral(0, 12, false, true);
 8003a64:	2301      	movs	r3, #1
 8003a66:	2200      	movs	r2, #0
 8003a68:	210c      	movs	r1, #12
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7ff fde4 	bl	8003638 <EnableExtiGeneral>


	uint8_t buffSD[2048];
	memset(buffSD, 0, 2048);
 8003a70:	f507 53ac 	add.w	r3, r7, #5504	; 0x1580
 8003a74:	f103 031c 	add.w	r3, r3, #28
 8003a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fd32 	bl	80064e8 <memset>
	disk_initialize(0);
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fe fecb 	bl	8002820 <disk_initialize>
//	memset(inputBuff, 'x', 128);
//	disk_write(0,inputBuff,0, 1);
//	disk_read(0,buffSD,0, 1);

	FATFS fatDrive;
	bool res = f_mount( 0, &fatDrive);
 8003a8a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8003a8e:	f103 030c 	add.w	r3, r3, #12
 8003a92:	4619      	mov	r1, r3
 8003a94:	2000      	movs	r0, #0
 8003a96:	f7fe f96f 	bl	8001d78 <f_mount>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8003aa8:	f102 0215 	add.w	r2, r2, #21
 8003aac:	7013      	strb	r3, [r2, #0]
	FIL fp;
	res = f_open(&fp, "dataFile.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8003aae:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8003ab2:	f103 0308 	add.w	r3, r3, #8
 8003ab6:	2213      	movs	r2, #19
 8003ab8:	498f      	ldr	r1, [pc, #572]	; (8003cf8 <main+0x2a8>)
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f986 	bl	8001dcc <f_open>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8003ace:	f102 0215 	add.w	r2, r2, #21
 8003ad2:	7013      	strb	r3, [r2, #0]
	uint8_t writeBuff[] = "-- Start new log -- ";
 8003ad4:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8003ad8:	f103 0310 	add.w	r3, r3, #16
 8003adc:	4a87      	ldr	r2, [pc, #540]	; (8003cfc <main+0x2ac>)
 8003ade:	461c      	mov	r4, r3
 8003ae0:	4615      	mov	r5, r2
 8003ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ae6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003aea:	6020      	str	r0, [r4, #0]
 8003aec:	3404      	adds	r4, #4
 8003aee:	7021      	strb	r1, [r4, #0]
	UINT writtenBytes;

	uint8_t readBuff[16];
	UINT readBytes;
	res = f_read(&fp,readBuff, 16, &readBytes);
 8003af0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8003af4:	f103 031c 	add.w	r3, r3, #28
 8003af8:	f507 5189 	add.w	r1, r7, #4384	; 0x1120
 8003afc:	f507 508a 	add.w	r0, r7, #4416	; 0x1140
 8003b00:	f100 0008 	add.w	r0, r0, #8
 8003b04:	2210      	movs	r2, #16
 8003b06:	f7fe face 	bl	80020a6 <f_read>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8003b18:	f102 0215 	add.w	r2, r2, #21
 8003b1c:	7013      	strb	r3, [r2, #0]

	 TM_ILI9341_Init();
 8003b1e:	f000 fbcf 	bl	80042c0 <TM_ILI9341_Init>
	LCD_BMP("bgg.bmp");
 8003b22:	4877      	ldr	r0, [pc, #476]	; (8003d00 <main+0x2b0>)
 8003b24:	f7ff fede 	bl	80038e4 <_Z7LCD_BMPPKc>





	  TM_ILI9341_DrawPixel(10, 10, ILI9341_COLOR_ORANGE);
 8003b28:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8003b2c:	210a      	movs	r1, #10
 8003b2e:	200a      	movs	r0, #10
 8003b30:	f000 fda8 	bl	8004684 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(11, 11, ILI9341_COLOR_ORANGE);
 8003b34:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8003b38:	210b      	movs	r1, #11
 8003b3a:	200b      	movs	r0, #11
 8003b3c:	f000 fda2 	bl	8004684 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(12, 12, ILI9341_COLOR_ORANGE);
 8003b40:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8003b44:	210c      	movs	r1, #12
 8003b46:	200c      	movs	r0, #12
 8003b48:	f000 fd9c 	bl	8004684 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(20, 20, ILI9341_COLOR_YELLOW);
 8003b4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003b50:	2114      	movs	r1, #20
 8003b52:	2014      	movs	r0, #20
 8003b54:	f000 fd96 	bl	8004684 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(30, 30, ILI9341_COLOR_BLUE);
 8003b58:	221f      	movs	r2, #31
 8003b5a:	211e      	movs	r1, #30
 8003b5c:	201e      	movs	r0, #30
 8003b5e:	f000 fd91 	bl	8004684 <TM_ILI9341_DrawPixel>
//		f_write(&fp, write_buff, sizeof(write_buff), &writtenBytes);
//		f_close(&fp);
//


	 TM_ILI9341_Puts(0,0, "Temp.  22.46", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8003b62:	2300      	movs	r3, #0
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	231f      	movs	r3, #31
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <main+0x2b4>)
 8003b6c:	4a66      	ldr	r2, [pc, #408]	; (8003d08 <main+0x2b8>)
 8003b6e:	2100      	movs	r1, #0
 8003b70:	2000      	movs	r0, #0
 8003b72:	f001 f813 	bl	8004b9c <TM_ILI9341_Puts>
	// TM_ILI9341_Puts(0,25, "Hum.  57%", &TM_Font_16x26, ILI9341_COLOR_CYAN, ILI9341_COLOR_BLACK);
	 TM_ILI9341_Puts(0,50, "Out1  ON", &TM_Font_16x26, ILI9341_COLOR_GREEN, ILI9341_COLOR_BLACK);
 8003b76:	2300      	movs	r3, #0
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	4b60      	ldr	r3, [pc, #384]	; (8003d04 <main+0x2b4>)
 8003b82:	4a62      	ldr	r2, [pc, #392]	; (8003d0c <main+0x2bc>)
 8003b84:	2132      	movs	r1, #50	; 0x32
 8003b86:	2000      	movs	r0, #0
 8003b88:	f001 f808 	bl	8004b9c <TM_ILI9341_Puts>
	 TM_ILI9341_Puts(0,75, "Out2  OFF", &TM_Font_16x26, ILI9341_COLOR_GRAY, ILI9341_COLOR_BLACK);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <main+0x2b4>)
 8003b98:	4a5d      	ldr	r2, [pc, #372]	; (8003d10 <main+0x2c0>)
 8003b9a:	214b      	movs	r1, #75	; 0x4b
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f000 fffd 	bl	8004b9c <TM_ILI9341_Puts>





 	EnableGpioClk(LOG_UART_PORT);
 8003ba2:	4854      	ldr	r0, [pc, #336]	; (8003cf4 <main+0x2a4>)
 8003ba4:	f7ff fbcc 	bl	8003340 <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8003ba8:	2109      	movs	r1, #9
 8003baa:	4852      	ldr	r0, [pc, #328]	; (8003cf4 <main+0x2a4>)
 8003bac:	f7ff fcbe 	bl	800352c <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8003bb0:	210a      	movs	r1, #10
 8003bb2:	4850      	ldr	r0, [pc, #320]	; (8003cf4 <main+0x2a4>)
 8003bb4:	f7ff fc02 	bl	80033bc <SetGpioAsInFloating>
 	EnableUart(USART1);
 8003bb8:	4856      	ldr	r0, [pc, #344]	; (8003d14 <main+0x2c4>)
 8003bba:	f000 f95f 	bl	8003e7c <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	2010      	movs	r0, #16
 8003bc2:	f7fc fd8b 	bl	80006dc <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8003bc6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8003bca:	f103 0318 	add.w	r3, r3, #24
 8003bce:	2210      	movs	r2, #16
 8003bd0:	70da      	strb	r2, [r3, #3]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8003bd2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8003bd6:	f103 0318 	add.w	r3, r3, #24
 8003bda:	2202      	movs	r2, #2
 8003bdc:	709a      	strb	r2, [r3, #2]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 8003bde:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8003be2:	f103 0318 	add.w	r3, r3, #24
 8003be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bea:	801a      	strh	r2, [r3, #0]
 	GPIO_Init(GPIOC, &PORT);
 8003bec:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8003bf0:	f103 0318 	add.w	r3, r3, #24
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4848      	ldr	r0, [pc, #288]	; (8003d18 <main+0x2c8>)
 8003bf8:	f7fc fc98 	bl	800052c <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 8003bfc:	4a46      	ldr	r2, [pc, #280]	; (8003d18 <main+0x2c8>)
 8003bfe:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <main+0x2c8>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c06:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 8003c08:	f7ff f940 	bl	8002e8c <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 8003c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c10:	f7ff fe36 	bl	8003880 <_Z9_delay_msm>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff fb4b 	bl	80032b0 <Rfm12bWriteCmd>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8003c20:	f102 0214 	add.w	r2, r2, #20
 8003c24:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003c26:	2101      	movs	r1, #1
 8003c28:	2008      	movs	r0, #8
 8003c2a:	f7fc fd57 	bl	80006dc <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 8003c2e:	2301      	movs	r3, #1
 8003c30:	2200      	movs	r2, #0
 8003c32:	2105      	movs	r1, #5
 8003c34:	4839      	ldr	r0, [pc, #228]	; (8003d1c <main+0x2cc>)
 8003c36:	f7ff fcb7 	bl	80035a8 <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 8003c3a:	2105      	movs	r1, #5
 8003c3c:	4837      	ldr	r0, [pc, #220]	; (8003d1c <main+0x2cc>)
 8003c3e:	f7ff fc0d 	bl	800345c <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 8003c42:	210b      	movs	r1, #11
 8003c44:	4835      	ldr	r0, [pc, #212]	; (8003d1c <main+0x2cc>)
 8003c46:	f7ff fc09 	bl	800345c <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 8003c4a:	f7ff fa9b 	bl	8003184 <rfm12bFifoReset>
 	rfm12bSwitchRx();
 8003c4e:	f7ff fab3 	bl	80031b8 <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c52:	2017      	movs	r0, #23
 8003c54:	f7ff fd68 	bl	8003728 <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4831      	ldr	r0, [pc, #196]	; (8003d20 <main+0x2d0>)
 8003c5c:	f7ff f957 	bl	8002f0e <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 8003c60:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c64:	4a2e      	ldr	r2, [pc, #184]	; (8003d20 <main+0x2d0>)
 8003c66:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 8003c68:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c6c:	4a2d      	ldr	r2, [pc, #180]	; (8003d24 <main+0x2d4>)
 8003c6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 8003c72:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c76:	4a2c      	ldr	r2, [pc, #176]	; (8003d28 <main+0x2d8>)
 8003c78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 8003c7c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c80:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <main+0x2dc>)
 8003c82:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 8003c86:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003c8a:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <main+0x2e0>)
 8003c8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8003c90:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003c94:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003c98:	3b1c      	subs	r3, #28
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 f867 	bl	8004d70 <broker_init_by_given_net>

	sockaddr_t sockaddr;
	uint8_t frameBuff[MAX_FRAME_SIZE];


uint16_t i =0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8003ca8:	f102 0216 	add.w	r2, r2, #22
 8003cac:	8013      	strh	r3, [r2, #0]
	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8003cae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003cb2:	3a0c      	subs	r2, #12
 8003cb4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003cb8:	391c      	subs	r1, #28
 8003cba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003cbe:	3b1c      	subs	r3, #28
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 f8a4 	bl	8004e0e <broker_receive>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a5 	beq.w	8003e18 <main+0x3c8>
	 			if (frameBuff[42] == 'T'){
 8003cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cd2:	3b1c      	subs	r3, #28
 8003cd4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cd8:	2b54      	cmp	r3, #84	; 0x54
 8003cda:	d12d      	bne.n	8003d38 <main+0x2e8>
	 				TM_ILI9341_Puts(0,0, "Temp.  99.88", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	231f      	movs	r3, #31
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <main+0x2b4>)
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <main+0x2e4>)
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2000      	movs	r0, #0
 8003cec:	f000 ff56 	bl	8004b9c <TM_ILI9341_Puts>
 8003cf0:	e086      	b.n	8003e00 <main+0x3b0>
 8003cf2:	bf00      	nop
 8003cf4:	40010800 	.word	0x40010800
 8003cf8:	08006e48 	.word	0x08006e48
 8003cfc:	08006ea0 	.word	0x08006ea0
 8003d00:	08006e58 	.word	0x08006e58
 8003d04:	20000004 	.word	0x20000004
 8003d08:	08006e60 	.word	0x08006e60
 8003d0c:	08006e70 	.word	0x08006e70
 8003d10:	08006e7c 	.word	0x08006e7c
 8003d14:	40013800 	.word	0x40013800
 8003d18:	40011000 	.word	0x40011000
 8003d1c:	40010c00 	.word	0x40010c00
 8003d20:	20000124 	.word	0x20000124
 8003d24:	080037cd 	.word	0x080037cd
 8003d28:	080037e3 	.word	0x080037e3
 8003d2c:	08003811 	.word	0x08003811
 8003d30:	0800386b 	.word	0x0800386b
 8003d34:	08006e88 	.word	0x08006e88
	 			} else{
	 				TM_ILI9341_Puts(0,25, "cnt: ", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	231f      	movs	r3, #31
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <main+0x418>)
 8003d42:	4a4a      	ldr	r2, [pc, #296]	; (8003e6c <main+0x41c>)
 8003d44:	2119      	movs	r1, #25
 8003d46:	2000      	movs	r0, #0
 8003d48:	f000 ff28 	bl	8004b9c <TM_ILI9341_Puts>
	 				i++;
 8003d4c:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8003d50:	f103 0316 	add.w	r3, r3, #22
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	f507 52ed 	add.w	r2, r7, #7584	; 0x1da0
 8003d5c:	f102 0216 	add.w	r2, r2, #22
 8003d60:	8013      	strh	r3, [r2, #0]
	 				std::string cnt;
 8003d62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d66:	3b14      	subs	r3, #20
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 f967 	bl	800603c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	 				cnt = intToString(i);
 8003d6e:	f507 53ed 	add.w	r3, r7, #7584	; 0x1da0
 8003d72:	f103 0316 	add.w	r3, r3, #22
 8003d76:	881a      	ldrh	r2, [r3, #0]
 8003d78:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8003d7c:	f103 031c 	add.w	r3, r3, #28
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fd86 	bl	8003894 <_Z11intToStringB5cxx11m>
 8003d88:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 8003d8c:	f102 021c 	add.w	r2, r2, #28
 8003d90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d94:	3b14      	subs	r3, #20
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 f95c 	bl	8006056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003d9e:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 8003da2:	f103 031c 	add.w	r3, r3, #28
 8003da6:	4618      	mov	r0, r3
 8003da8:	f002 f94f 	bl	800604a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	 				frameBuff[86]=0;
 8003dac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003db0:	3b1c      	subs	r3, #28
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	 				TM_ILI9341_Puts(100,25, (char*) cnt.data(), &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8003db8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003dbc:	3b14      	subs	r3, #20
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f002 f96e 	bl	80060a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	231f      	movs	r3, #31
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <main+0x418>)
 8003dd0:	2119      	movs	r1, #25
 8003dd2:	2064      	movs	r0, #100	; 0x64
 8003dd4:	f000 fee2 	bl	8004b9c <TM_ILI9341_Puts>
	 				TM_ILI9341_Puts(100,50, (char*) &frameBuff[16], &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 8003dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ddc:	3b1c      	subs	r3, #28
 8003dde:	f103 0210 	add.w	r2, r3, #16
 8003de2:	2300      	movs	r3, #0
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	231f      	movs	r3, #31
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <main+0x418>)
 8003dec:	2132      	movs	r1, #50	; 0x32
 8003dee:	2064      	movs	r0, #100	; 0x64
 8003df0:	f000 fed4 	bl	8004b9c <TM_ILI9341_Puts>
	 				std::string cnt;
 8003df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003df8:	3b14      	subs	r3, #20
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f002 f925 	bl	800604a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>





	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 8003e00:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003e04:	3a0c      	subs	r2, #12
 8003e06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003e0a:	391c      	subs	r1, #28
 8003e0c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003e10:	3b1c      	subs	r3, #28
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f814 	bl	8004e40 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <main+0x420>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f43f af3f 	beq.w	8003cae <main+0x25e>
	 			  uint8_t buff[] = "abcdefghijabcdefghijabcdefghij";
 8003e30:	f107 0318 	add.w	r3, r7, #24
 8003e34:	3b14      	subs	r3, #20
 8003e36:	4a0f      	ldr	r2, [pc, #60]	; (8003e74 <main+0x424>)
 8003e38:	461c      	mov	r4, r3
 8003e3a:	4615      	mov	r5, r2
 8003e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e44:	c407      	stmia	r4!, {r0, r1, r2}
 8003e46:	8023      	strh	r3, [r4, #0]
 8003e48:	3402      	adds	r4, #2
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	7023      	strb	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 8003e4e:	f107 0118 	add.w	r1, r7, #24
 8003e52:	3914      	subs	r1, #20
 8003e54:	2302      	movs	r3, #2
 8003e56:	221e      	movs	r2, #30
 8003e58:	4807      	ldr	r0, [pc, #28]	; (8003e78 <main+0x428>)
 8003e5a:	f7ff f88f 	bl	8002f7c <Rfm12bStartSending>
	 			 _delay_ms(250);
 8003e5e:	20fa      	movs	r0, #250	; 0xfa
 8003e60:	f7ff fd0e 	bl	8003880 <_Z9_delay_msm>
	 		  }




	 	}
 8003e64:	e723      	b.n	8003cae <main+0x25e>
 8003e66:	bf00      	nop
 8003e68:	20000004 	.word	0x20000004
 8003e6c:	08006e98 	.word	0x08006e98
 8003e70:	40010c00 	.word	0x40010c00
 8003e74:	08006eb8 	.word	0x08006eb8
 8003e78:	20000124 	.word	0x20000124

08003e7c <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <EnableUart+0x58>)
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <EnableUart+0x58>)
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8e:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003e96:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	899b      	ldrh	r3, [r3, #12]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	899b      	ldrh	r3, [r3, #12]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f043 0308 	orr.w	r3, r3, #8
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	899b      	ldrh	r3, [r3, #12]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	819a      	strh	r2, [r3, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000

08003ed8 <spiInit>:

#include "stdint.h"
#include "spi.h"
#include "stm32f10x.h"

void spiInit(void) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8003ede:	2101      	movs	r1, #1
 8003ee0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003ee4:	f7fc fc18 	bl	8000718 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003ee8:	2101      	movs	r1, #1
 8003eea:	2004      	movs	r0, #4
 8003eec:	f7fc fbf6 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	2008      	movs	r0, #8
 8003ef4:	f7fc fbf2 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8003ef8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003efc:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003efe:	2318      	movs	r3, #24
 8003f00:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003f02:	2301      	movs	r3, #1
 8003f04:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003f06:	463b      	mov	r3, r7
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4820      	ldr	r0, [pc, #128]	; (8003f8c <spiInit+0xb4>)
 8003f0c:	f7fc fb0e 	bl	800052c <GPIO_Init>


	//CS touch hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f14:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003f16:	2310      	movs	r3, #16
 8003f18:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003f1e:	463b      	mov	r3, r7
 8003f20:	4619      	mov	r1, r3
 8003f22:	481b      	ldr	r0, [pc, #108]	; (8003f90 <spiInit+0xb8>)
 8003f24:	f7fc fb02 	bl	800052c <GPIO_Init>

	//CS sd card
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8003f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f2c:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8003f2e:	2310      	movs	r3, #16
 8003f30:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8003f32:	2301      	movs	r3, #1
 8003f34:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003f36:	463b      	mov	r3, r7
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4814      	ldr	r0, [pc, #80]	; (8003f8c <spiInit+0xb4>)
 8003f3c:	f7fc faf6 	bl	800052c <GPIO_Init>




	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8003f40:	2300      	movs	r3, #0
 8003f42:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8003f44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f48:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8003f52:	2300      	movs	r3, #0
 8003f54:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8003f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5a:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8003f5c:	2318      	movs	r3, #24
 8003f5e:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8003f60:	2300      	movs	r3, #0
 8003f62:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8003f64:	2307      	movs	r3, #7
 8003f66:	82bb      	strh	r3, [r7, #20]
	SPI_SSOutputCmd(SPI2, ENABLE);
 8003f68:	2101      	movs	r1, #1
 8003f6a:	480a      	ldr	r0, [pc, #40]	; (8003f94 <spiInit+0xbc>)
 8003f6c:	f7fc fc6e 	bl	800084c <SPI_SSOutputCmd>
	SPI_Init(SPI2, &SPI_InitStructure);
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4807      	ldr	r0, [pc, #28]	; (8003f94 <spiInit+0xbc>)
 8003f76:	f7fc fbed 	bl	8000754 <SPI_Init>

	/* Enable SPI  */
	SPI_Cmd(SPI2, ENABLE);
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4805      	ldr	r0, [pc, #20]	; (8003f94 <spiInit+0xbc>)
 8003f7e:	f7fc fc2c 	bl	80007da <SPI_Cmd>

}
 8003f82:	bf00      	nop
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40010c00 	.word	0x40010c00
 8003f90:	40010800 	.word	0x40010800
 8003f94:	40003800 	.word	0x40003800

08003f98 <SpiTransmit>:



uint16_t SpiTransmit( uint16_t cmd )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
//	CS_LOW;

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8003fa2:	bf00      	nop
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	480e      	ldr	r0, [pc, #56]	; (8003fe0 <SpiTransmit+0x48>)
 8003fa8:	f7fc fc6f 	bl	800088a <SPI_I2S_GetFlagStatus>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f8      	beq.n	8003fa4 <SpiTransmit+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	480a      	ldr	r0, [pc, #40]	; (8003fe0 <SpiTransmit+0x48>)
 8003fb8:	f7fc fc2e 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8003fbc:	bf00      	nop
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4807      	ldr	r0, [pc, #28]	; (8003fe0 <SpiTransmit+0x48>)
 8003fc2:	f7fc fc62 	bl	800088a <SPI_I2S_GetFlagStatus>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f8      	beq.n	8003fbe <SpiTransmit+0x26>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8003fcc:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <SpiTransmit+0x48>)
 8003fce:	f7fc fc31 	bl	8000834 <SPI_I2S_ReceiveData>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	81fb      	strh	r3, [r7, #14]

//	CS_HIGH;

	return recData;
 8003fd6:	89fb      	ldrh	r3, [r7, #14]

}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40003800 	.word	0x40003800

08003fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800401c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fe8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fea:	e003      	b.n	8003ff4 <LoopCopyDataInit>

08003fec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003fee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ff0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ff2:	3104      	adds	r1, #4

08003ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ff4:	480b      	ldr	r0, [pc, #44]	; (8004024 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8003ff8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ffa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ffc:	d3f6      	bcc.n	8003fec <CopyDataInit>
	ldr	r2, =_sbss
 8003ffe:	4a0b      	ldr	r2, [pc, #44]	; (800402c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8004000:	e002      	b.n	8004008 <LoopFillZerobss>

08004002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004002:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004004:	f842 3b04 	str.w	r3, [r2], #4

08004008 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800400a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800400c:	d3f9      	bcc.n	8004002 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800400e:	f000 f82b 	bl	8004068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004012:	f002 f9f3 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004016:	f7ff fd1b 	bl	8003a50 <main>
	bx	lr
 800401a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800401c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8004020:	08008394 	.word	0x08008394
	ldr	r0, =_sdata
 8004024:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004028:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800402c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004030:	200004f4 	.word	0x200004f4

08004034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004034:	e7fe      	b.n	8004034 <ADC1_2_IRQHandler>

08004036 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
}
 800403a:	bf00      	nop
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004046:	e7fe      	b.n	8004046 <HardFault_Handler+0x4>

08004048 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800404c:	e7fe      	b.n	800404c <MemManage_Handler+0x4>

0800404e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004052:	e7fe      	b.n	8004052 <BusFault_Handler+0x4>

08004054 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004058:	e7fe      	b.n	8004058 <UsageFault_Handler+0x4>

0800405a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
	...

08004068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <SystemInit+0x5c>)
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <SystemInit+0x5c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004078:	4912      	ldr	r1, [pc, #72]	; (80040c4 <SystemInit+0x5c>)
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <SystemInit+0x5c>)
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <SystemInit+0x60>)
 8004080:	4013      	ands	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004084:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <SystemInit+0x5c>)
 8004086:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <SystemInit+0x5c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004094:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <SystemInit+0x5c>)
 8004096:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <SystemInit+0x5c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80040a0:	4a08      	ldr	r2, [pc, #32]	; (80040c4 <SystemInit+0x5c>)
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <SystemInit+0x5c>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80040aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <SystemInit+0x5c>)
 80040ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80040b2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80040b4:	f000 f80c 	bl	80040d0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <SystemInit+0x64>)
 80040ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040be:	609a      	str	r2, [r3, #8]
#endif 
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40021000 	.word	0x40021000
 80040c8:	f8ff0000 	.word	0xf8ff0000
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80040d4:	f000 f802 	bl	80040dc <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}

080040dc <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	2300      	movs	r3, #0
 80040e8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80040ea:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <SetSysClockTo72+0xf8>)
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <SetSysClockTo72+0xf8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80040f6:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <SetSysClockTo72+0xf8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3301      	adds	r3, #1
 8004104:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d103      	bne.n	8004114 <SetSysClockTo72+0x38>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004112:	d1f0      	bne.n	80040f6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004114:	4b2f      	ldr	r3, [pc, #188]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004120:	2301      	movs	r3, #1
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	e001      	b.n	800412a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004126:	2300      	movs	r3, #0
 8004128:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d14b      	bne.n	80041c8 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004130:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <SetSysClockTo72+0xfc>)
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <SetSysClockTo72+0xfc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f043 0310 	orr.w	r3, r3, #16
 800413a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <SetSysClockTo72+0xfc>)
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <SetSysClockTo72+0xfc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004148:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <SetSysClockTo72+0xfc>)
 800414a:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <SetSysClockTo72+0xfc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f043 0302 	orr.w	r3, r3, #2
 8004152:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <SetSysClockTo72+0xf8>)
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004166:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8004170:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800417a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <SetSysClockTo72+0xf8>)
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8004186:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004188:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <SetSysClockTo72+0xf8>)
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <SetSysClockTo72+0xf8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004192:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004194:	bf00      	nop
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <SetSysClockTo72+0xf8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f9      	beq.n	8004196 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80041a2:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <SetSysClockTo72+0xf8>)
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <SetSysClockTo72+0xf8>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 0303 	bic.w	r3, r3, #3
 80041ac:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <SetSysClockTo72+0xf8>)
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <SetSysClockTo72+0xf8>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f043 0302 	orr.w	r3, r3, #2
 80041b8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80041ba:	bf00      	nop
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <SetSysClockTo72+0xf8>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d1f9      	bne.n	80041bc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40022000 	.word	0x40022000

080041dc <spi2_init_lcd>:
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);




void spi2_init_lcd(void) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI2 and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 80041e2:	2101      	movs	r1, #1
 80041e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80041e8:	f7fc fa96 	bl	8000718 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80041ec:	2101      	movs	r1, #1
 80041ee:	2008      	movs	r0, #8
 80041f0:	f7fc fa74 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80041f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80041f8:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80041fa:	2318      	movs	r3, #24
 80041fc:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80041fe:	2301      	movs	r3, #1
 8004200:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004202:	463b      	mov	r3, r7
 8004204:	4619      	mov	r1, r3
 8004206:	4818      	ldr	r0, [pc, #96]	; (8004268 <spi2_init_lcd+0x8c>)
 8004208:	f7fc f990 	bl	800052c <GPIO_Init>
//	/* Enable SPI1  */
//	SPI_Cmd(SPI2, ENABLE);



	 RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <spi2_init_lcd+0x90>)
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <spi2_init_lcd+0x90>)
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004216:	61d3      	str	r3, [r2, #28]
		 SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8004218:	4a15      	ldr	r2, [pc, #84]	; (8004270 <spi2_init_lcd+0x94>)
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <spi2_init_lcd+0x94>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f043 0318 	orr.w	r3, r3, #24
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSM;
 8004228:	4a11      	ldr	r2, [pc, #68]	; (8004270 <spi2_init_lcd+0x94>)
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <spi2_init_lcd+0x94>)
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSI;
 8004238:	4a0d      	ldr	r2, [pc, #52]	; (8004270 <spi2_init_lcd+0x94>)
 800423a:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <spi2_init_lcd+0x94>)
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	b29b      	uxth	r3, r3
 8004246:	8013      	strh	r3, [r2, #0]
		 SPI2->CRCPR = 7;
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <spi2_init_lcd+0x94>)
 800424a:	2207      	movs	r2, #7
 800424c:	821a      	strh	r2, [r3, #16]
		 SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 800424e:	4a08      	ldr	r2, [pc, #32]	; (8004270 <spi2_init_lcd+0x94>)
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <spi2_init_lcd+0x94>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]



}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40010c00 	.word	0x40010c00
 800426c:	40021000 	.word	0x40021000
 8004270:	40003800 	.word	0x40003800

08004274 <TM_SPI_Send>:


uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 8004280:	bf00      	nop
 8004282:	2102      	movs	r1, #2
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7fc fb00 	bl	800088a <SPI_I2S_GetFlagStatus>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f8      	beq.n	8004282 <TM_SPI_Send+0xe>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(SPIx, data);
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fabe 	bl	8000818 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
 800429c:	bf00      	nop
 800429e:	2101      	movs	r1, #1
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fc faf2 	bl	800088a <SPI_I2S_GetFlagStatus>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f8      	beq.n	800429e <TM_SPI_Send+0x2a>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(SPIx);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fc fac1 	bl	8000834 <SPI_I2S_ReceiveData>
 80042b2:	4603      	mov	r3, r0
 80042b4:	b2db      	uxtb	r3, r3
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <TM_ILI9341_Init>:


void TM_ILI9341_Init() {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80042c6:	2101      	movs	r1, #1
 80042c8:	2004      	movs	r0, #4
 80042ca:	f7fc fa07 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80042ce:	2101      	movs	r1, #1
 80042d0:	2008      	movs	r0, #8
 80042d2:	f7fc fa03 	bl	80006dc <RCC_APB2PeriphClockCmd>
	/* Init WRX pin */
	//TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_wrx;
	port_wrx.GPIO_Mode = GPIO_Mode_Out_PP;
 80042d6:	2310      	movs	r3, #16
 80042d8:	73fb      	strb	r3, [r7, #15]
	port_wrx.GPIO_Speed = GPIO_Speed_2MHz;
 80042da:	2302      	movs	r3, #2
 80042dc:	73bb      	strb	r3, [r7, #14]
	port_wrx.GPIO_Pin = ILI9341_WRX_PIN;
 80042de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042e2:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(ILI9341_WRX_PORT, &port_wrx);
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	4619      	mov	r1, r3
 80042ea:	481f      	ldr	r0, [pc, #124]	; (8004368 <TM_ILI9341_Init+0xa8>)
 80042ec:	f7fc f91e 	bl	800052c <GPIO_Init>

	
	/* Init CS pin */
//	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_cs;
	port_cs.GPIO_Mode = GPIO_Mode_Out_PP;
 80042f0:	2310      	movs	r3, #16
 80042f2:	72fb      	strb	r3, [r7, #11]
	port_cs.GPIO_Speed = GPIO_Speed_2MHz;
 80042f4:	2302      	movs	r3, #2
 80042f6:	72bb      	strb	r3, [r7, #10]
	port_cs.GPIO_Pin = ILI9341_CS_PIN;
 80042f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042fc:	813b      	strh	r3, [r7, #8]
	GPIO_Init(ILI9341_CS_PORT, &port_cs);
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	4619      	mov	r1, r3
 8004304:	4819      	ldr	r0, [pc, #100]	; (800436c <TM_ILI9341_Init+0xac>)
 8004306:	f7fc f911 	bl	800052c <GPIO_Init>

	
	/* Init RST pin */
//	TM_GPIO_Init(ILI9341_RST_PORT, ILI9341_RST_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
	GPIO_InitTypeDef port_rst;
	port_rst.GPIO_Mode = GPIO_Mode_Out_PP;
 800430a:	2310      	movs	r3, #16
 800430c:	71fb      	strb	r3, [r7, #7]
	port_rst.GPIO_Speed = GPIO_Speed_2MHz;
 800430e:	2302      	movs	r3, #2
 8004310:	71bb      	strb	r3, [r7, #6]
	port_rst.GPIO_Pin = ILI9341_RST_PIN;
 8004312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004316:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(ILI9341_RST_PORT, &port_rst);
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	4619      	mov	r1, r3
 800431c:	4812      	ldr	r0, [pc, #72]	; (8004368 <TM_ILI9341_Init+0xa8>)
 800431e:	f7fc f905 	bl	800052c <GPIO_Init>


	/* CS high */
	ILI9341_CS_SET;
 8004322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004326:	4811      	ldr	r0, [pc, #68]	; (800436c <TM_ILI9341_Init+0xac>)
 8004328:	f7fc f9bc 	bl	80006a4 <GPIO_SetBits>
	
	/* Init SPI */
	spi2_init_lcd();
 800432c:	f7ff ff56 	bl	80041dc <spi2_init_lcd>
	
	/* Init DMA for SPI */
	//TM_SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 8004330:	f000 f824 	bl	800437c <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <TM_ILI9341_Init+0xb0>)
 8004336:	2200      	movs	r2, #0
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <TM_ILI9341_Init+0xb0>)
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <TM_ILI9341_Init+0xb4>)
 8004340:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <TM_ILI9341_Init+0xb8>)
 8004344:	22f0      	movs	r2, #240	; 0xf0
 8004346:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <TM_ILI9341_Init+0xb8>)
 800434a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800434e:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <TM_ILI9341_Init+0xb8>)
 8004352:	2201      	movs	r2, #1
 8004354:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	glcd_fill_screen(ILI9341_COLOR_BROWN);
 8004356:	f64b 30ca 	movw	r0, #48074	; 0xbbca
 800435a:	f000 f9fd 	bl	8004758 <glcd_fill_screen>
//	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40010800 	.word	0x40010800
 800436c:	40010c00 	.word	0x40010c00
 8004370:	200004ea 	.word	0x200004ea
 8004374:	200004ec 	.word	0x200004ec
 8004378:	200004e4 	.word	0x200004e4

0800437c <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 8004380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004384:	4899      	ldr	r0, [pc, #612]	; (80045ec <TM_ILI9341_InitLCD+0x270>)
 8004386:	f7fc f99b 	bl	80006c0 <GPIO_ResetBits>
	TM_ILI9341_Delay(20000);
 800438a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800438e:	f000 fb45 	bl	8004a1c <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 8004392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004396:	4895      	ldr	r0, [pc, #596]	; (80045ec <TM_ILI9341_InitLCD+0x270>)
 8004398:	f7fc f984 	bl	80006a4 <GPIO_SetBits>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 800439c:	f644 6020 	movw	r0, #20000	; 0x4e20
 80043a0:	f000 fb3c 	bl	8004a1c <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 80043a4:	2001      	movs	r0, #1
 80043a6:	f000 f925 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 80043aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043ae:	f000 fb35 	bl	8004a1c <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 80043b2:	20cb      	movs	r0, #203	; 0xcb
 80043b4:	f000 f91e 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 80043b8:	2039      	movs	r0, #57	; 0x39
 80043ba:	f000 f93f 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 80043be:	202c      	movs	r0, #44	; 0x2c
 80043c0:	f000 f93c 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f000 f939 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 80043ca:	2034      	movs	r0, #52	; 0x34
 80043cc:	f000 f936 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 80043d0:	2002      	movs	r0, #2
 80043d2:	f000 f933 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 80043d6:	20cf      	movs	r0, #207	; 0xcf
 80043d8:	f000 f90c 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80043dc:	2000      	movs	r0, #0
 80043de:	f000 f92d 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 80043e2:	20c1      	movs	r0, #193	; 0xc1
 80043e4:	f000 f92a 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 80043e8:	2030      	movs	r0, #48	; 0x30
 80043ea:	f000 f927 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 80043ee:	20e8      	movs	r0, #232	; 0xe8
 80043f0:	f000 f900 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 80043f4:	2085      	movs	r0, #133	; 0x85
 80043f6:	f000 f921 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80043fa:	2000      	movs	r0, #0
 80043fc:	f000 f91e 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8004400:	2078      	movs	r0, #120	; 0x78
 8004402:	f000 f91b 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 8004406:	20ea      	movs	r0, #234	; 0xea
 8004408:	f000 f8f4 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800440c:	2000      	movs	r0, #0
 800440e:	f000 f915 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8004412:	2000      	movs	r0, #0
 8004414:	f000 f912 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8004418:	20ed      	movs	r0, #237	; 0xed
 800441a:	f000 f8eb 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 800441e:	2064      	movs	r0, #100	; 0x64
 8004420:	f000 f90c 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8004424:	2003      	movs	r0, #3
 8004426:	f000 f909 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 800442a:	2012      	movs	r0, #18
 800442c:	f000 f906 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8004430:	2081      	movs	r0, #129	; 0x81
 8004432:	f000 f903 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 8004436:	20f7      	movs	r0, #247	; 0xf7
 8004438:	f000 f8dc 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 800443c:	2020      	movs	r0, #32
 800443e:	f000 f8fd 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 8004442:	20c0      	movs	r0, #192	; 0xc0
 8004444:	f000 f8d6 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 8004448:	2023      	movs	r0, #35	; 0x23
 800444a:	f000 f8f7 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 800444e:	20c1      	movs	r0, #193	; 0xc1
 8004450:	f000 f8d0 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8004454:	2010      	movs	r0, #16
 8004456:	f000 f8f1 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 800445a:	20c5      	movs	r0, #197	; 0xc5
 800445c:	f000 f8ca 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 8004460:	203e      	movs	r0, #62	; 0x3e
 8004462:	f000 f8eb 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 8004466:	2028      	movs	r0, #40	; 0x28
 8004468:	f000 f8e8 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 800446c:	20c7      	movs	r0, #199	; 0xc7
 800446e:	f000 f8c1 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 8004472:	2086      	movs	r0, #134	; 0x86
 8004474:	f000 f8e2 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8004478:	2036      	movs	r0, #54	; 0x36
 800447a:	f000 f8bb 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 800447e:	2048      	movs	r0, #72	; 0x48
 8004480:	f000 f8dc 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 8004484:	203a      	movs	r0, #58	; 0x3a
 8004486:	f000 f8b5 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 800448a:	2055      	movs	r0, #85	; 0x55
 800448c:	f000 f8d6 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 8004490:	20b1      	movs	r0, #177	; 0xb1
 8004492:	f000 f8af 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8004496:	2000      	movs	r0, #0
 8004498:	f000 f8d0 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 800449c:	2018      	movs	r0, #24
 800449e:	f000 f8cd 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 80044a2:	20b6      	movs	r0, #182	; 0xb6
 80044a4:	f000 f8a6 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 80044a8:	2008      	movs	r0, #8
 80044aa:	f000 f8c7 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 80044ae:	2082      	movs	r0, #130	; 0x82
 80044b0:	f000 f8c4 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 80044b4:	2027      	movs	r0, #39	; 0x27
 80044b6:	f000 f8c1 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 80044ba:	20f2      	movs	r0, #242	; 0xf2
 80044bc:	f000 f89a 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f000 f8bb 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80044c6:	202a      	movs	r0, #42	; 0x2a
 80044c8:	f000 f894 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80044cc:	2000      	movs	r0, #0
 80044ce:	f000 f8b5 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80044d2:	2000      	movs	r0, #0
 80044d4:	f000 f8b2 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80044d8:	2000      	movs	r0, #0
 80044da:	f000 f8af 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 80044de:	20ef      	movs	r0, #239	; 0xef
 80044e0:	f000 f8ac 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 80044e4:	202b      	movs	r0, #43	; 0x2b
 80044e6:	f000 f885 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80044ea:	2000      	movs	r0, #0
 80044ec:	f000 f8a6 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f000 f8a3 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 80044f6:	2001      	movs	r0, #1
 80044f8:	f000 f8a0 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 80044fc:	203f      	movs	r0, #63	; 0x3f
 80044fe:	f000 f89d 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8004502:	2026      	movs	r0, #38	; 0x26
 8004504:	f000 f876 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8004508:	2001      	movs	r0, #1
 800450a:	f000 f897 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 800450e:	20e0      	movs	r0, #224	; 0xe0
 8004510:	f000 f870 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8004514:	200f      	movs	r0, #15
 8004516:	f000 f891 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800451a:	2031      	movs	r0, #49	; 0x31
 800451c:	f000 f88e 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8004520:	202b      	movs	r0, #43	; 0x2b
 8004522:	f000 f88b 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8004526:	200c      	movs	r0, #12
 8004528:	f000 f888 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800452c:	200e      	movs	r0, #14
 800452e:	f000 f885 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8004532:	2008      	movs	r0, #8
 8004534:	f000 f882 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8004538:	204e      	movs	r0, #78	; 0x4e
 800453a:	f000 f87f 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 800453e:	20f1      	movs	r0, #241	; 0xf1
 8004540:	f000 f87c 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 8004544:	2037      	movs	r0, #55	; 0x37
 8004546:	f000 f879 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 800454a:	2007      	movs	r0, #7
 800454c:	f000 f876 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 8004550:	2010      	movs	r0, #16
 8004552:	f000 f873 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8004556:	2003      	movs	r0, #3
 8004558:	f000 f870 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800455c:	200e      	movs	r0, #14
 800455e:	f000 f86d 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8004562:	2009      	movs	r0, #9
 8004564:	f000 f86a 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8004568:	2000      	movs	r0, #0
 800456a:	f000 f867 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 800456e:	20e1      	movs	r0, #225	; 0xe1
 8004570:	f000 f840 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8004574:	2000      	movs	r0, #0
 8004576:	f000 f861 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800457a:	200e      	movs	r0, #14
 800457c:	f000 f85e 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 8004580:	2014      	movs	r0, #20
 8004582:	f000 f85b 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8004586:	2003      	movs	r0, #3
 8004588:	f000 f858 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 800458c:	2011      	movs	r0, #17
 800458e:	f000 f855 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8004592:	2007      	movs	r0, #7
 8004594:	f000 f852 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8004598:	2031      	movs	r0, #49	; 0x31
 800459a:	f000 f84f 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800459e:	20c1      	movs	r0, #193	; 0xc1
 80045a0:	f000 f84c 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 80045a4:	2048      	movs	r0, #72	; 0x48
 80045a6:	f000 f849 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 80045aa:	2008      	movs	r0, #8
 80045ac:	f000 f846 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 80045b0:	200f      	movs	r0, #15
 80045b2:	f000 f843 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 80045b6:	200c      	movs	r0, #12
 80045b8:	f000 f840 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 80045bc:	2031      	movs	r0, #49	; 0x31
 80045be:	f000 f83d 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 80045c2:	2036      	movs	r0, #54	; 0x36
 80045c4:	f000 f83a 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 80045c8:	200f      	movs	r0, #15
 80045ca:	f000 f837 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 80045ce:	2011      	movs	r0, #17
 80045d0:	f000 f810 	bl	80045f4 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 80045d4:	4806      	ldr	r0, [pc, #24]	; (80045f0 <TM_ILI9341_InitLCD+0x274>)
 80045d6:	f000 fa21 	bl	8004a1c <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 80045da:	2029      	movs	r0, #41	; 0x29
 80045dc:	f000 f80a 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80045e0:	202c      	movs	r0, #44	; 0x2c
 80045e2:	f000 f807 	bl	80045f4 <TM_ILI9341_SendCommand>
}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40010800 	.word	0x40010800
 80045f0:	000f4240 	.word	0x000f4240

080045f4 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 80045fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004602:	480b      	ldr	r0, [pc, #44]	; (8004630 <TM_ILI9341_SendCommand+0x3c>)
 8004604:	f7fc f85c 	bl	80006c0 <GPIO_ResetBits>
	ILI9341_CS_RESET;
 8004608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800460c:	4809      	ldr	r0, [pc, #36]	; (8004634 <TM_ILI9341_SendCommand+0x40>)
 800460e:	f7fc f857 	bl	80006c0 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	4619      	mov	r1, r3
 8004616:	4808      	ldr	r0, [pc, #32]	; (8004638 <TM_ILI9341_SendCommand+0x44>)
 8004618:	f7ff fe2c 	bl	8004274 <TM_SPI_Send>
	ILI9341_CS_SET;
 800461c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004620:	4804      	ldr	r0, [pc, #16]	; (8004634 <TM_ILI9341_SendCommand+0x40>)
 8004622:	f7fc f83f 	bl	80006a4 <GPIO_SetBits>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40010800 	.word	0x40010800
 8004634:	40010c00 	.word	0x40010c00
 8004638:	40003800 	.word	0x40003800

0800463c <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8004646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800464a:	480b      	ldr	r0, [pc, #44]	; (8004678 <TM_ILI9341_SendData+0x3c>)
 800464c:	f7fc f82a 	bl	80006a4 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8004650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004654:	4809      	ldr	r0, [pc, #36]	; (800467c <TM_ILI9341_SendData+0x40>)
 8004656:	f7fc f833 	bl	80006c0 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	4619      	mov	r1, r3
 800465e:	4808      	ldr	r0, [pc, #32]	; (8004680 <TM_ILI9341_SendData+0x44>)
 8004660:	f7ff fe08 	bl	8004274 <TM_SPI_Send>
	ILI9341_CS_SET;
 8004664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004668:	4804      	ldr	r0, [pc, #16]	; (800467c <TM_ILI9341_SendData+0x40>)
 800466a:	f7fc f81b 	bl	80006a4 <GPIO_SetBits>
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40010800 	.word	0x40010800
 800467c:	40010c00 	.word	0x40010c00
 8004680:	40003800 	.word	0x40003800

08004684 <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	603a      	str	r2, [r7, #0]
 800468e:	80fb      	strh	r3, [r7, #6]
 8004690:	460b      	mov	r3, r1
 8004692:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 8004694:	88bb      	ldrh	r3, [r7, #4]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	88b9      	ldrh	r1, [r7, #4]
 800469a:	88f8      	ldrh	r0, [r7, #6]
 800469c:	f000 f812 	bl	80046c4 <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80046a0:	202c      	movs	r0, #44	; 0x2c
 80046a2:	f7ff ffa7 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ffc5 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ffc0 	bl	800463c <TM_ILI9341_SendData>
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	461a      	mov	r2, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	80fb      	strh	r3, [r7, #6]
 80046d6:	4603      	mov	r3, r0
 80046d8:	80bb      	strh	r3, [r7, #4]
 80046da:	460b      	mov	r3, r1
 80046dc:	807b      	strh	r3, [r7, #2]
 80046de:	4613      	mov	r3, r2
 80046e0:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80046e2:	202a      	movs	r0, #42	; 0x2a
 80046e4:	f7ff ff86 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	0a1b      	lsrs	r3, r3, #8
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ffa3 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 80046f6:	88fb      	ldrh	r3, [r7, #6]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff9e 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 8004700:	887b      	ldrh	r3, [r7, #2]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	b29b      	uxth	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff97 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 800470e:	887b      	ldrh	r3, [r7, #2]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff ff92 	bl	800463c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8004718:	202b      	movs	r0, #43	; 0x2b
 800471a:	f7ff ff6b 	bl	80045f4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 800471e:	88bb      	ldrh	r3, [r7, #4]
 8004720:	0a1b      	lsrs	r3, r3, #8
 8004722:	b29b      	uxth	r3, r3
 8004724:	b2db      	uxtb	r3, r3
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ff88 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 800472c:	88bb      	ldrh	r3, [r7, #4]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ff83 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 8004736:	883b      	ldrh	r3, [r7, #0]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	b29b      	uxth	r3, r3
 800473c:	b2db      	uxtb	r3, r3
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff7c 	bl	800463c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 8004744:	883b      	ldrh	r3, [r7, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff ff77 	bl	800463c <TM_ILI9341_SendData>
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bd90      	pop	{r4, r7, pc}
	...

08004758 <glcd_fill_screen>:
//	}
//}



void glcd_fill_screen (uint16_t color){
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	80fb      	strh	r3, [r7, #6]

	///////////////////////////////////////////////



	TM_ILI9341_SetCursorPosition(0, 0, 240, 320);
 8004762:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004766:	22f0      	movs	r2, #240	; 0xf0
 8004768:	2100      	movs	r1, #0
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff ffaa 	bl	80046c4 <TM_ILI9341_SetCursorPosition>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8004770:	202c      	movs	r0, #44	; 0x2c
 8004772:	f7ff ff3f 	bl	80045f4 <TM_ILI9341_SendCommand>
	ILI9341_WRX_SET;
 8004776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800477a:	4884      	ldr	r0, [pc, #528]	; (800498c <glcd_fill_screen+0x234>)
 800477c:	f7fb ff92 	bl	80006a4 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8004780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004784:	4882      	ldr	r0, [pc, #520]	; (8004990 <glcd_fill_screen+0x238>)
 8004786:	f7fb ff9b 	bl	80006c0 <GPIO_ResetBits>



	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800478a:	4a82      	ldr	r2, [pc, #520]	; (8004994 <glcd_fill_screen+0x23c>)
 800478c:	4b81      	ldr	r3, [pc, #516]	; (8004994 <glcd_fill_screen+0x23c>)
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	6153      	str	r3, [r2, #20]
	static uint8_t color_static = ILI9341_COLOR_BLACK;

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8004796:	4a80      	ldr	r2, [pc, #512]	; (8004998 <glcd_fill_screen+0x240>)
 8004798:	4b7f      	ldr	r3, [pc, #508]	; (8004998 <glcd_fill_screen+0x240>)
 800479a:	889b      	ldrh	r3, [r3, #4]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f043 0302 	orr.w	r3, r3, #2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 80047a6:	4b7d      	ldr	r3, [pc, #500]	; (800499c <glcd_fill_screen+0x244>)
 80047a8:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80047ac:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 80047ae:	4b7b      	ldr	r3, [pc, #492]	; (800499c <glcd_fill_screen+0x244>)
 80047b0:	4a7b      	ldr	r2, [pc, #492]	; (80049a0 <glcd_fill_screen+0x248>)
 80047b2:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 80047b4:	4b79      	ldr	r3, [pc, #484]	; (800499c <glcd_fill_screen+0x244>)
 80047b6:	4a7b      	ldr	r2, [pc, #492]	; (80049a4 <glcd_fill_screen+0x24c>)
 80047b8:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 80047ba:	4a78      	ldr	r2, [pc, #480]	; (800499c <glcd_fill_screen+0x244>)
 80047bc:	4b77      	ldr	r3, [pc, #476]	; (800499c <glcd_fill_screen+0x244>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f043 0310 	orr.w	r3, r3, #16
 80047c4:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 80047c6:	4a75      	ldr	r2, [pc, #468]	; (800499c <glcd_fill_screen+0x244>)
 80047c8:	4b74      	ldr	r3, [pc, #464]	; (800499c <glcd_fill_screen+0x244>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 80047d2:	bf00      	nop
 80047d4:	4b70      	ldr	r3, [pc, #448]	; (8004998 <glcd_fill_screen+0x240>)
 80047d6:	891b      	ldrh	r3, [r3, #8]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f8      	beq.n	80047d4 <glcd_fill_screen+0x7c>
 80047e2:	4b6d      	ldr	r3, [pc, #436]	; (8004998 <glcd_fill_screen+0x240>)
 80047e4:	891b      	ldrh	r3, [r3, #8]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f1      	bne.n	80047d4 <glcd_fill_screen+0x7c>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 80047f0:	4a68      	ldr	r2, [pc, #416]	; (8004994 <glcd_fill_screen+0x23c>)
 80047f2:	4b68      	ldr	r3, [pc, #416]	; (8004994 <glcd_fill_screen+0x23c>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	6153      	str	r3, [r2, #20]





	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 80047fc:	4a65      	ldr	r2, [pc, #404]	; (8004994 <glcd_fill_screen+0x23c>)
 80047fe:	4b65      	ldr	r3, [pc, #404]	; (8004994 <glcd_fill_screen+0x23c>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8004808:	4a62      	ldr	r2, [pc, #392]	; (8004994 <glcd_fill_screen+0x23c>)
 800480a:	4b62      	ldr	r3, [pc, #392]	; (8004994 <glcd_fill_screen+0x23c>)
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6153      	str	r3, [r2, #20]

	DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 8004814:	4a61      	ldr	r2, [pc, #388]	; (800499c <glcd_fill_screen+0x244>)
 8004816:	4b61      	ldr	r3, [pc, #388]	; (800499c <glcd_fill_screen+0x244>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	6013      	str	r3, [r2, #0]

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8004820:	4a5d      	ldr	r2, [pc, #372]	; (8004998 <glcd_fill_screen+0x240>)
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <glcd_fill_screen+0x240>)
 8004824:	889b      	ldrh	r3, [r3, #4]
 8004826:	b29b      	uxth	r3, r3
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	b29b      	uxth	r3, r3
 800482e:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 8004830:	4b5a      	ldr	r3, [pc, #360]	; (800499c <glcd_fill_screen+0x244>)
 8004832:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8004836:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8004838:	4b58      	ldr	r3, [pc, #352]	; (800499c <glcd_fill_screen+0x244>)
 800483a:	4a59      	ldr	r2, [pc, #356]	; (80049a0 <glcd_fill_screen+0x248>)
 800483c:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 800483e:	4b57      	ldr	r3, [pc, #348]	; (800499c <glcd_fill_screen+0x244>)
 8004840:	4a58      	ldr	r2, [pc, #352]	; (80049a4 <glcd_fill_screen+0x24c>)
 8004842:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8004844:	4a55      	ldr	r2, [pc, #340]	; (800499c <glcd_fill_screen+0x244>)
 8004846:	4b55      	ldr	r3, [pc, #340]	; (800499c <glcd_fill_screen+0x244>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f043 0310 	orr.w	r3, r3, #16
 800484e:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8004850:	4a52      	ldr	r2, [pc, #328]	; (800499c <glcd_fill_screen+0x244>)
 8004852:	4b52      	ldr	r3, [pc, #328]	; (800499c <glcd_fill_screen+0x244>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 800485c:	bf00      	nop
 800485e:	4b4e      	ldr	r3, [pc, #312]	; (8004998 <glcd_fill_screen+0x240>)
 8004860:	891b      	ldrh	r3, [r3, #8]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f8      	beq.n	800485e <glcd_fill_screen+0x106>
 800486c:	4b4a      	ldr	r3, [pc, #296]	; (8004998 <glcd_fill_screen+0x240>)
 800486e:	891b      	ldrh	r3, [r3, #8]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f1      	bne.n	800485e <glcd_fill_screen+0x106>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 800487a:	4a46      	ldr	r2, [pc, #280]	; (8004994 <glcd_fill_screen+0x23c>)
 800487c:	4b45      	ldr	r3, [pc, #276]	; (8004994 <glcd_fill_screen+0x23c>)
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6153      	str	r3, [r2, #20]

	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8004886:	4a43      	ldr	r2, [pc, #268]	; (8004994 <glcd_fill_screen+0x23c>)
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <glcd_fill_screen+0x23c>)
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	f023 0301 	bic.w	r3, r3, #1
 8004890:	6153      	str	r3, [r2, #20]
		RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8004892:	4a40      	ldr	r2, [pc, #256]	; (8004994 <glcd_fill_screen+0x23c>)
 8004894:	4b3f      	ldr	r3, [pc, #252]	; (8004994 <glcd_fill_screen+0x23c>)
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6153      	str	r3, [r2, #20]

		DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 800489e:	4a3f      	ldr	r2, [pc, #252]	; (800499c <glcd_fill_screen+0x244>)
 80048a0:	4b3e      	ldr	r3, [pc, #248]	; (800499c <glcd_fill_screen+0x244>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	6013      	str	r3, [r2, #0]

	//	SPI2->CR2 |= SPI_CR1_DFF;
		SPI2->CR2 |= SPI_CR2_TXDMAEN;
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <glcd_fill_screen+0x240>)
 80048ac:	4b3a      	ldr	r3, [pc, #232]	; (8004998 <glcd_fill_screen+0x240>)
 80048ae:	889b      	ldrh	r3, [r3, #4]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f043 0302 	orr.w	r3, r3, #2
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8093      	strh	r3, [r2, #4]


		DMA1_Channel5->CNDTR = 65530;
 80048ba:	4b38      	ldr	r3, [pc, #224]	; (800499c <glcd_fill_screen+0x244>)
 80048bc:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 80048c0:	605a      	str	r2, [r3, #4]
		DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 80048c2:	4b36      	ldr	r3, [pc, #216]	; (800499c <glcd_fill_screen+0x244>)
 80048c4:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <glcd_fill_screen+0x248>)
 80048c6:	609a      	str	r2, [r3, #8]
		DMA1_Channel5->CMAR = (uint32_t) &color_static;
 80048c8:	4b34      	ldr	r3, [pc, #208]	; (800499c <glcd_fill_screen+0x244>)
 80048ca:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <glcd_fill_screen+0x24c>)
 80048cc:	60da      	str	r2, [r3, #12]
	//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
	//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



		DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 80048ce:	4a33      	ldr	r2, [pc, #204]	; (800499c <glcd_fill_screen+0x244>)
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <glcd_fill_screen+0x244>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f043 0310 	orr.w	r3, r3, #16
 80048d8:	6013      	str	r3, [r2, #0]
		DMA1_Channel5->CCR |= DMA_CCR1_EN;
 80048da:	4a30      	ldr	r2, [pc, #192]	; (800499c <glcd_fill_screen+0x244>)
 80048dc:	4b2f      	ldr	r3, [pc, #188]	; (800499c <glcd_fill_screen+0x244>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6013      	str	r3, [r2, #0]


		while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 80048e6:	bf00      	nop
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <glcd_fill_screen+0x240>)
 80048ea:	891b      	ldrh	r3, [r3, #8]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f8      	beq.n	80048e8 <glcd_fill_screen+0x190>
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <glcd_fill_screen+0x240>)
 80048f8:	891b      	ldrh	r3, [r3, #8]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f1      	bne.n	80048e8 <glcd_fill_screen+0x190>
		RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <glcd_fill_screen+0x23c>)
 8004906:	4b23      	ldr	r3, [pc, #140]	; (8004994 <glcd_fill_screen+0x23c>)
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6153      	str	r3, [r2, #20]




	ILI9341_CS_SET;
 8004910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004914:	481e      	ldr	r0, [pc, #120]	; (8004990 <glcd_fill_screen+0x238>)
 8004916:	f7fb fec5 	bl	80006a4 <GPIO_SetBits>





	RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <glcd_fill_screen+0x23c>)
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <glcd_fill_screen+0x23c>)
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004924:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <glcd_fill_screen+0x23c>)
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <glcd_fill_screen+0x23c>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004930:	6113      	str	r3, [r2, #16]



	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8004932:	4a18      	ldr	r2, [pc, #96]	; (8004994 <glcd_fill_screen+0x23c>)
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <glcd_fill_screen+0x23c>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800493c:	61d3      	str	r3, [r2, #28]
	SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <glcd_fill_screen+0x240>)
 8004940:	4b15      	ldr	r3, [pc, #84]	; (8004998 <glcd_fill_screen+0x240>)
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f043 0318 	orr.w	r3, r3, #24
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;
 800494e:	4a12      	ldr	r2, [pc, #72]	; (8004998 <glcd_fill_screen+0x240>)
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <glcd_fill_screen+0x240>)
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800495a:	b29b      	uxth	r3, r3
 800495c:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <glcd_fill_screen+0x240>)
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <glcd_fill_screen+0x240>)
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496a:	b29b      	uxth	r3, r3
 800496c:	8013      	strh	r3, [r2, #0]
	SPI2->CRCPR = 7;
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <glcd_fill_screen+0x240>)
 8004970:	2207      	movs	r2, #7
 8004972:	821a      	strh	r2, [r3, #16]
	SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 8004974:	4a08      	ldr	r2, [pc, #32]	; (8004998 <glcd_fill_screen+0x240>)
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <glcd_fill_screen+0x240>)
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004980:	b29b      	uxth	r3, r3
 8004982:	8013      	strh	r3, [r2, #0]




}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40010800 	.word	0x40010800
 8004990:	40010c00 	.word	0x40010c00
 8004994:	40021000 	.word	0x40021000
 8004998:	40003800 	.word	0x40003800
 800499c:	40020058 	.word	0x40020058
 80049a0:	4000380c 	.word	0x4000380c
 80049a4:	20000432 	.word	0x20000432

080049a8 <TM_ILI9341_INT_Fill>:
//			glcd_sendData16(color);
//	}
}
//
//
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	4604      	mov	r4, r0
 80049b0:	4608      	mov	r0, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	4623      	mov	r3, r4
 80049b8:	80fb      	strh	r3, [r7, #6]
 80049ba:	4603      	mov	r3, r0
 80049bc:	80bb      	strh	r3, [r7, #4]
 80049be:	460b      	mov	r3, r1
 80049c0:	807b      	strh	r3, [r7, #2]
 80049c2:	4613      	mov	r3, r2
 80049c4:	803b      	strh	r3, [r7, #0]
	uint8_t length;
	length = x1-x0;
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	73bb      	strb	r3, [r7, #14]

	uint8_t v_lines_nb;
	v_lines_nb = y1-y0;
 80049d2:	883b      	ldrh	r3, [r7, #0]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	88bb      	ldrh	r3, [r7, #4]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	737b      	strb	r3, [r7, #13]

	uint8_t i;
	for(i=0;i<v_lines_nb;i++){
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e013      	b.n	8004a0c <TM_ILI9341_INT_Fill+0x64>
			TM_ILI9341_DrawLine(x0, y0+i, x1, y0+i, color);
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	88bb      	ldrh	r3, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	b299      	uxth	r1, r3
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	88bb      	ldrh	r3, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	b29c      	uxth	r4, r3
 80049f8:	8c3b      	ldrh	r3, [r7, #32]
 80049fa:	887a      	ldrh	r2, [r7, #2]
 80049fc:	88f8      	ldrh	r0, [r7, #6]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4623      	mov	r3, r4
 8004a02:	f000 f81b 	bl	8004a3c <TM_ILI9341_DrawLine>
	for(i=0;i<v_lines_nb;i++){
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	7bfa      	ldrb	r2, [r7, #15]
 8004a0e:	7b7b      	ldrb	r3, [r7, #13]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3e7      	bcc.n	80049e4 <TM_ILI9341_INT_Fill+0x3c>

	}
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd90      	pop	{r4, r7, pc}

08004a1c <TM_ILI9341_Delay>:
//
//	/* Go back to 8-bit SPI mode */
//	TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);
//}

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 8004a24:	e002      	b.n	8004a2c <TM_ILI9341_Delay+0x10>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f9      	bne.n	8004a26 <TM_ILI9341_Delay+0xa>
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <TM_ILI9341_DrawLine>:
//	/* Set new pointer */
//	ILI9341_x += font->FontWidth;
//}
//

void TM_ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4604      	mov	r4, r0
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	80fb      	strh	r3, [r7, #6]
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80bb      	strh	r3, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	807b      	strh	r3, [r7, #2]
 8004a56:	4613      	mov	r3, r2
 8004a58:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2; 	
	uint16_t tmp;
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d303      	bcc.n	8004a6c <TM_ILI9341_DrawLine+0x30>
		x0 = ILI9341_Opts.width - 1;
 8004a64:	4b4c      	ldr	r3, [pc, #304]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 8004a6c:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	887a      	ldrh	r2, [r7, #2]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d303      	bcc.n	8004a7e <TM_ILI9341_DrawLine+0x42>
		x1 = ILI9341_Opts.width - 1;
 8004a76:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 8004a7e:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a80:	885b      	ldrh	r3, [r3, #2]
 8004a82:	88ba      	ldrh	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d303      	bcc.n	8004a90 <TM_ILI9341_DrawLine+0x54>
		y0 = ILI9341_Opts.height - 1;
 8004a88:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a8a:	885b      	ldrh	r3, [r3, #2]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 8004a90:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a92:	885b      	ldrh	r3, [r3, #2]
 8004a94:	883a      	ldrh	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d303      	bcc.n	8004aa2 <TM_ILI9341_DrawLine+0x66>
		y1 = ILI9341_Opts.height - 1;
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <TM_ILI9341_DrawLine+0x15c>)
 8004a9c:	885b      	ldrh	r3, [r3, #2]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Check correction */
	if (x0 > x1) {
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d905      	bls.n	8004ab6 <TM_ILI9341_DrawLine+0x7a>
		tmp = x0;
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	82bb      	strh	r3, [r7, #20]
		x0 = x1;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 8004ab2:	8abb      	ldrh	r3, [r7, #20]
 8004ab4:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8004ab6:	88ba      	ldrh	r2, [r7, #4]
 8004ab8:	883b      	ldrh	r3, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d905      	bls.n	8004aca <TM_ILI9341_DrawLine+0x8e>
		tmp = y0;
 8004abe:	88bb      	ldrh	r3, [r7, #4]
 8004ac0:	82bb      	strh	r3, [r7, #20]
		y0 = y1;
 8004ac2:	883b      	ldrh	r3, [r7, #0]
 8004ac4:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 8004ac6:	8abb      	ldrh	r3, [r7, #20]
 8004ac8:	803b      	strh	r3, [r7, #0]
	}
	
	dx = x1 - x0;
 8004aca:	887a      	ldrh	r2, [r7, #2]
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	827b      	strh	r3, [r7, #18]
	dy = y1 - y0;
 8004ad4:	883a      	ldrh	r2, [r7, #0]
 8004ad6:	88bb      	ldrh	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	823b      	strh	r3, [r7, #16]
//	if (dx == 0 || dy == 0) {
//		TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
//		return;
//	}
	
	sx = (x0 < x1) ? 1 : -1; 
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d201      	bcs.n	8004aea <TM_ILI9341_DrawLine+0xae>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e001      	b.n	8004aee <TM_ILI9341_DrawLine+0xb2>
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004aee:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8004af0:	88ba      	ldrh	r2, [r7, #4]
 8004af2:	883b      	ldrh	r3, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d201      	bcs.n	8004afc <TM_ILI9341_DrawLine+0xc0>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e001      	b.n	8004b00 <TM_ILI9341_DrawLine+0xc4>
 8004afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b00:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8004b02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004b06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	dd06      	ble.n	8004b1c <TM_ILI9341_DrawLine+0xe0>
 8004b0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b12:	0fda      	lsrs	r2, r3, #31
 8004b14:	4413      	add	r3, r2
 8004b16:	105b      	asrs	r3, r3, #1
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	e006      	b.n	8004b2a <TM_ILI9341_DrawLine+0xee>
 8004b1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b20:	425b      	negs	r3, r3
 8004b22:	0fda      	lsrs	r2, r3, #31
 8004b24:	4413      	add	r3, r2
 8004b26:	105b      	asrs	r3, r3, #1
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	82fb      	strh	r3, [r7, #22]

	while (1) {
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8004b2c:	88b9      	ldrh	r1, [r7, #4]
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fda6 	bl	8004684 <TM_ILI9341_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d103      	bne.n	8004b48 <TM_ILI9341_DrawLine+0x10c>
 8004b40:	88ba      	ldrh	r2, [r7, #4]
 8004b42:	883b      	ldrh	r3, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d021      	beq.n	8004b8c <TM_ILI9341_DrawLine+0x150>
			break;
		}
		e2 = err; 
 8004b48:	8afb      	ldrh	r3, [r7, #22]
 8004b4a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8004b4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b54:	425b      	negs	r3, r3
 8004b56:	429a      	cmp	r2, r3
 8004b58:	dd08      	ble.n	8004b6c <TM_ILI9341_DrawLine+0x130>
			err -= dy;
 8004b5a:	8afa      	ldrh	r2, [r7, #22]
 8004b5c:	8a3b      	ldrh	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8004b64:	89fa      	ldrh	r2, [r7, #14]
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	4413      	add	r3, r2
 8004b6a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8004b6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	dad9      	bge.n	8004b2c <TM_ILI9341_DrawLine+0xf0>
			err += dx;
 8004b78:	8afa      	ldrh	r2, [r7, #22]
 8004b7a:	8a7b      	ldrh	r3, [r7, #18]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8004b82:	89ba      	ldrh	r2, [r7, #12]
 8004b84:	88bb      	ldrh	r3, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	80bb      	strh	r3, [r7, #4]
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8004b8a:	e7cf      	b.n	8004b2c <TM_ILI9341_DrawLine+0xf0>
			break;
 8004b8c:	bf00      	nop
		} 
	}
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	bf00      	nop
 8004b98:	200004e4 	.word	0x200004e4

08004b9c <TM_ILI9341_Puts>:
}




void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	60ba      	str	r2, [r7, #8]
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	81fb      	strh	r3, [r7, #14]
 8004baa:	460b      	mov	r3, r1
 8004bac:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	82fb      	strh	r3, [r7, #22]

	/* Set X and Y coordinates */
	ILI9341_x = x;
 8004bb2:	4a24      	ldr	r2, [pc, #144]	; (8004c44 <TM_ILI9341_Puts+0xa8>)
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8004bb8:	4a23      	ldr	r2, [pc, #140]	; (8004c48 <TM_ILI9341_Puts+0xac>)
 8004bba:	89bb      	ldrh	r3, [r7, #12]
 8004bbc:	8013      	strh	r3, [r2, #0]

	while (*str) {
 8004bbe:	e038      	b.n	8004c32 <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b0a      	cmp	r3, #10
 8004bc6:	d11d      	bne.n	8004c04 <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	785b      	ldrb	r3, [r3, #1]
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <TM_ILI9341_Puts+0xac>)
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	4b1b      	ldr	r3, [pc, #108]	; (8004c48 <TM_ILI9341_Puts+0xac>)
 8004bdc:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3301      	adds	r3, #1
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b0d      	cmp	r3, #13
 8004be6:	d106      	bne.n	8004bf6 <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <TM_ILI9341_Puts+0xa8>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	801a      	strh	r2, [r3, #0]
				str++;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	e002      	b.n	8004bfc <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 8004bf6:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <TM_ILI9341_Puts+0xa8>)
 8004bf8:	8afb      	ldrh	r3, [r7, #22]
 8004bfa:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60bb      	str	r3, [r7, #8]
			continue;
 8004c02:	e016      	b.n	8004c32 <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b0d      	cmp	r3, #13
 8004c0a:	d103      	bne.n	8004c14 <TM_ILI9341_Puts+0x78>
			str++;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60bb      	str	r3, [r7, #8]
			continue;
 8004c12:	e00e      	b.n	8004c32 <TM_ILI9341_Puts+0x96>
		}

		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <TM_ILI9341_Puts+0xa8>)
 8004c16:	8818      	ldrh	r0, [r3, #0]
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <TM_ILI9341_Puts+0xac>)
 8004c1a:	8819      	ldrh	r1, [r3, #0]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	60ba      	str	r2, [r7, #8]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f000 f80d 	bl	8004c4c <TM_ILI9341_Putc>
	while (*str) {
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1c2      	bne.n	8004bc0 <TM_ILI9341_Puts+0x24>
	}
}
 8004c3a:	bf00      	nop
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200004ec 	.word	0x200004ec
 8004c48:	200004ea 	.word	0x200004ea

08004c4c <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b08b      	sub	sp, #44	; 0x2c
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	4603      	mov	r3, r0
 8004c56:	81fb      	strh	r3, [r7, #14]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	81bb      	strh	r3, [r7, #12]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8004c60:	4a40      	ldr	r2, [pc, #256]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004c62:	89fb      	ldrh	r3, [r7, #14]
 8004c64:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8004c66:	4a40      	ldr	r2, [pc, #256]	; (8004d68 <TM_ILI9341_Putc+0x11c>)
 8004c68:	89bb      	ldrh	r3, [r7, #12]
 8004c6a:	8013      	strh	r3, [r2, #0]

	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	4413      	add	r3, r2
 8004c78:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <TM_ILI9341_Putc+0x120>)
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	dd0b      	ble.n	8004c98 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	4b38      	ldr	r3, [pc, #224]	; (8004d68 <TM_ILI9341_Putc+0x11c>)
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <TM_ILI9341_Putc+0x11c>)
 8004c90:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 8004c92:	4b34      	ldr	r3, [pc, #208]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	801a      	strh	r2, [r3, #0]
	}

	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 8004c98:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004c9a:	8818      	ldrh	r0, [r3, #0]
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <TM_ILI9341_Putc+0x11c>)
 8004c9e:	8819      	ldrh	r1, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4413      	add	r3, r2
 8004cac:	b29c      	uxth	r4, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <TM_ILI9341_Putc+0x11c>)
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	f7ff fe6f 	bl	80049a8 <TM_ILI9341_INT_Fill>

//	TM_ILI9341_DrawRectangle(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, ILI9341_COLOR_YELLOW);

	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e035      	b.n	8004d3c <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	7afb      	ldrb	r3, [r7, #11]
 8004cd6:	3b20      	subs	r3, #32
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	7849      	ldrb	r1, [r1, #1]
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	440b      	add	r3, r1
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e01a      	b.n	8004d2a <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00f      	beq.n	8004d24 <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	b298      	uxth	r0, r3
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <TM_ILI9341_Putc+0x11c>)
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	4413      	add	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f7ff fcb0 	bl	8004684 <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d8de      	bhi.n	8004cf4 <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	461a      	mov	r2, r3
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d8c3      	bhi.n	8004cd0 <TM_ILI9341_Putc+0x84>
			}
		}
	}

	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	4413      	add	r3, r2
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <TM_ILI9341_Putc+0x118>)
 8004d58:	801a      	strh	r2, [r3, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	3724      	adds	r7, #36	; 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd90      	pop	{r4, r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200004ec 	.word	0x200004ec
 8004d68:	200004ea 	.word	0x200004ea
 8004d6c:	200004e4 	.word	0x200004e4

08004d70 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8004d7a:	f640 62c4 	movw	r2, #3780	; 0xec4
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 fbb1 	bl	80064e8 <memset>
	broker->net = broker_net;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8004da0:	2301      	movs	r3, #1
 8004da2:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	2208      	movs	r2, #8
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f001 fb9b 	bl	80064e8 <memset>
	const uint8_t max_nb_bytes = 4;
 8004db2:	2304      	movs	r3, #4
 8004db4:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8004db6:	7c3b      	ldrb	r3, [r7, #16]
 8004db8:	461a      	mov	r2, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	7d7a      	ldrb	r2, [r7, #21]
 8004dc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dca:	7df9      	ldrb	r1, [r7, #23]
 8004dcc:	fb01 f202 	mul.w	r2, r1, r2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	01db      	lsls	r3, r3, #7
 8004dd8:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 8004dda:	7c3b      	ldrb	r3, [r7, #16]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8004de2:	7c3b      	ldrb	r3, [r7, #16]
 8004de4:	7dba      	ldrb	r2, [r7, #22]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d004      	beq.n	8004df4 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 8004dea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dbe1      	blt.n	8004db6 <decode_pck_len+0x20>
 8004df2:	e000      	b.n	8004df6 <decode_pck_len+0x60>
			break;
 8004df4:	bf00      	nop
	return rem_length;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f107 030c 	add.w	r3, r7, #12
 8004dfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e02:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <broker_receive>:



bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8004e0e:	b590      	push	{r4, r7, lr}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004e20:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	23f0      	movs	r3, #240	; 0xf0
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	47a0      	blx	r4
}
 8004e34:	bf00      	nop
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd90      	pop	{r4, r7, pc}
	...

08004e40 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	6018      	str	r0, [r3, #0]
 8004e4e:	f107 0308 	add.w	r3, r7, #8
 8004e52:	6019      	str	r1, [r3, #0]
 8004e54:	1d3b      	adds	r3, r7, #4
 8004e56:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 8004e58:	f107 0308 	add.w	r3, r7, #8
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
	switch (pckt_type) {
 8004e66:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	2b0b      	cmp	r3, #11
 8004e6e:	f200 8146 	bhi.w	80050fe <broker_packets_dispatcher+0x2be>
 8004e72:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <broker_packets_dispatcher+0x38>)
 8004e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e78:	08004ea9 	.word	0x08004ea9
 8004e7c:	080050ff 	.word	0x080050ff
 8004e80:	08004f81 	.word	0x08004f81
 8004e84:	080050ff 	.word	0x080050ff
 8004e88:	080050ff 	.word	0x080050ff
 8004e8c:	080050ff 	.word	0x080050ff
 8004e90:	080050ff 	.word	0x080050ff
 8004e94:	08004fe5 	.word	0x08004fe5
 8004e98:	080050ff 	.word	0x080050ff
 8004e9c:	080050a9 	.word	0x080050a9
 8004ea0:	080050ff 	.word	0x080050ff
 8004ea4:	080050e9 	.word	0x080050e9
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 8004ea8:	f107 0214 	add.w	r2, r7, #20
 8004eac:	f107 0308 	add.w	r3, r7, #8
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	f000 fa1d 	bl	80052f2 <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 8004eb8:	f107 0214 	add.w	r2, r7, #20
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	f000 fc00 	bl	80056c8 <broker_validate_conn>
		bool sesion_present = false;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (was_clean_session_requested(&conn_pck)
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fc24 	bl	8005720 <was_clean_session_requested>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d017      	beq.n	8004f0e <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	4611      	mov	r1, r2
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	f000 f966 	bl	80051bc <is_client_exist>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 8004ef6:	f107 0314 	add.w	r3, r7, #20
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	f107 030c 	add.w	r3, r7, #12
 8004f00:	4611      	mov	r1, r2
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	f000 f98d 	bl	8005222 <broker_remove_client>
			sesion_present = true;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 8004f0e:	f107 0214 	add.w	r2, r7, #20
 8004f12:	f107 030c 	add.w	r3, r7, #12
 8004f16:	4611      	mov	r1, r2
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f000 fbd5 	bl	80056c8 <broker_validate_conn>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 8004f24:	1d3b      	adds	r3, r7, #4
 8004f26:	f107 0114 	add.w	r1, r7, #20
 8004f2a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	f000 fb42 	bl	80055b8 <broker_create_new_client>
		add_client(broker, &new_client);
 8004f34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	6818      	ldr	r0, [r3, #0]
 8004f40:	f000 f9b1 	bl	80052a6 <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 8004f44:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 8004f48:	f897 127f 	ldrb.w	r1, [r7, #639]	; 0x27f
 8004f4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fb10 	bl	8005576 <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 8004f56:	f107 030c 	add.w	r3, r7, #12
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004f60:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004f6e:	6818      	ldr	r0, [r3, #0]
 8004f70:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8004f74:	1d39      	adds	r1, r7, #4
 8004f76:	2304      	movs	r3, #4
 8004f78:	6809      	ldr	r1, [r1, #0]
 8004f7a:	47a0      	blx	r4
		break;
 8004f7c:	bf00      	nop
 8004f7e:	e0be      	b.n	80050fe <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 8004f80:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004f84:	f107 0308 	add.w	r3, r7, #8
 8004f88:	4611      	mov	r1, r2
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	f000 fbdc 	bl	8005748 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 8004f90:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4611      	mov	r1, r2
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	f000 fc40 	bl	8005820 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8004fa0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004fa4:	881a      	ldrh	r2, [r3, #0]
 8004fa6:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fc90 	bl	80058d2 <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 8004fb2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f340 809c 	ble.w	80050fc <broker_packets_dispatcher+0x2bc>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 8004fc4:	f107 030c 	add.w	r3, r7, #12
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004fce:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8004fd2:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8004fd6:	1d39      	adds	r1, r7, #4
 8004fd8:	2304      	movs	r3, #4
 8004fda:	6809      	ldr	r1, [r1, #0]
 8004fdc:	2000      	movs	r0, #0
 8004fde:	47a0      	blx	r4
		}
		break;
 8004fe0:	bf00      	nop
 8004fe2:	e08b      	b.n	80050fc <broker_packets_dispatcher+0x2bc>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 8004fe4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	4611      	mov	r1, r2
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	f000 fc8c 	bl	800590c <broker_decode_subscribe>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 8004ffa:	1d3a      	adds	r2, r7, #4
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	f000 f8a4 	bl	8005150 <broker_get_client_by_socket>
 8005008:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		uint8_t sub_result[MAX_SUBS_TOPIC];
		if (subscribing_client){
 800500c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <broker_packets_dispatcher+0x1f0>
			add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 8005014:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8005018:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 800501c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005020:	f103 010c 	add.w	r1, r3, #12
 8005024:	4603      	mov	r3, r0
 8005026:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 800502a:	f000 fdd1 	bl	8005bd0 <add_subscriptions_from_list>
 800502e:	e016      	b.n	800505e <broker_packets_dispatcher+0x21e>
		} else {
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8005030:	2300      	movs	r3, #0
 8005032:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8005036:	e00c      	b.n	8005052 <broker_packets_dispatcher+0x212>
				sub_result[i] = SUB_ACK_FAIL;
 8005038:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800503c:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8005040:	4413      	add	r3, r2
 8005042:	2250      	movs	r2, #80	; 0x50
 8005044:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 8005048:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800504c:	3301      	adds	r3, #1
 800504e:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8005052:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 8005056:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 800505a:	429a      	cmp	r2, r3
 800505c:	d3ec      	bcc.n	8005038 <broker_packets_dispatcher+0x1f8>
			}
		}
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 800505e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	8819      	ldrh	r1, [r3, #0]
 8005066:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800506a:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 800506e:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005072:	f000 fe39 	bl	8005ce8 <encode_subscribe_ack>
		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&sub_ack, (SUB_ACK_ALL_HEAD_LEN + topic_nb));
 8005076:	f107 030c 	add.w	r3, r7, #12
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8005080:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8005094:	b29b      	uxth	r3, r3
 8005096:	3304      	adds	r3, #4
 8005098:	b29b      	uxth	r3, r3
 800509a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800509e:	1d39      	adds	r1, r7, #4
 80050a0:	6809      	ldr	r1, [r1, #0]
 80050a2:	47a0      	blx	r4
		break;
 80050a4:	bf00      	nop
 80050a6:	e02a      	b.n	80050fe <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 80050a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	4611      	mov	r1, r2
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	f000 fe40 	bl	8005d38 <broker_decode_unsubscribe>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 80050be:	1d3a      	adds	r2, r7, #4
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	6811      	ldr	r1, [r2, #0]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	f000 f842 	bl	8005150 <broker_get_client_by_socket>
 80050cc:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 80050d0:	f897 2273 	ldrb.w	r2, [r7, #627]	; 0x273
 80050d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80050d8:	330c      	adds	r3, #12
 80050da:	4619      	mov	r1, r3
 80050dc:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 80050e0:	f000 ff13 	bl	8005f0a <delete_listed_subscriptions>
		break;
 80050e4:	bf00      	nop
 80050e6:	e00a      	b.n	80050fe <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 80050e8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80050ec:	f107 0308 	add.w	r3, r7, #8
 80050f0:	4611      	mov	r1, r2
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	f000 ff2b 	bl	8005f4e <broker_decode_ping_req>
		break;
 80050f8:	bf00      	nop
 80050fa:	e000      	b.n	80050fe <broker_packets_dispatcher+0x2be>
		break;
 80050fc:	bf00      	nop
	}
	}
}
 80050fe:	bf00      	nop
 8005100:	f507 7721 	add.w	r7, r7, #644	; 0x284
 8005104:	46bd      	mov	sp, r7
 8005106:	bd90      	pop	{r4, r7, pc}

08005108 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
 8005116:	e013      	b.n	8005140 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	3310      	adds	r3, #16
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb f810 	bl	8000150 <strcmp>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <broker_get_client_pos_by_id+0x32>
			return i;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
 8005138:	e006      	b.n	8005148 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b07      	cmp	r3, #7
 8005144:	d9e8      	bls.n	8005118 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 8005146:	23ff      	movs	r3, #255	; 0xff
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
 800515e:	e025      	b.n	80051ac <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005168:	fb01 f303 	mul.w	r3, r1, r3
 800516c:	4413      	add	r3, r2
 800516e:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d016      	beq.n	80051a6 <broker_get_client_by_socket+0x56>
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	2210      	movs	r2, #16
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f978 	bl	8006480 <memcmp>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d107      	bne.n	80051a6 <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800519c:	fb02 f303 	mul.w	r3, r2, r3
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	4413      	add	r3, r2
 80051a4:	e006      	b.n	80051b4 <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	3301      	adds	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b07      	cmp	r3, #7
 80051b0:	d9d6      	bls.n	8005160 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff ff9d 	bl	8005108 <broker_get_client_pos_by_id>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2bff      	cmp	r3, #255	; 0xff
 80051d2:	d001      	beq.n	80051d8 <is_client_exist+0x1c>
		return true;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <is_client_exist+0x1e>
	}
	return false;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	e00f      	b.n	8005210 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	3310      	adds	r3, #16
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <can_broker_accept_next_client+0x28>
			return true;
 8005206:	2301      	movs	r3, #1
 8005208:	e006      	b.n	8005218 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	3301      	adds	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b07      	cmp	r3, #7
 8005214:	d9ec      	bls.n	80051f0 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff ff6a 	bl	8005108 <broker_get_client_pos_by_id>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2bff      	cmp	r3, #255	; 0xff
 800523c:	d00e      	beq.n	800525c <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8005244:	fb02 f303 	mul.w	r3, r2, r3
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	4413      	add	r3, r2
 800524c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8005250:	2100      	movs	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f001 f948 	bl	80064e8 <memset>
		return true;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <broker_remove_client+0x3c>
	}
	return false;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
 8005272:	e00f      	b.n	8005294 <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	3310      	adds	r3, #16
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <broker_first_free_pos_for_client+0x28>
			return i;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	e006      	b.n	800529c <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	3301      	adds	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b07      	cmp	r3, #7
 8005298:	d9ec      	bls.n	8005274 <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 800529a:	23ff      	movs	r3, #255	; 0xff
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ffd8 	bl	8005266 <broker_first_free_pos_for_client>
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4413      	add	r3, r2
 80052c8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 f8e5 	bl	800649e <memcpy>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
	return true;
 80052e6:	2301      	movs	r3, #1
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	441a      	add	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	601a      	str	r2, [r3, #0]
	pos ++;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	3301      	adds	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8005310:	7dfb      	ldrb	r3, [r7, #23]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	441a      	add	r2, r3
 8005316:	f107 030c 	add.w	r3, r7, #12
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fd3a 	bl	8004d96 <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8005328:	7c3a      	ldrb	r2, [r7, #16]
 800532a:	7dfb      	ldrb	r3, [r7, #23]
 800532c:	4413      	add	r3, r2
 800532e:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	441a      	add	r2, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	6892      	ldr	r2, [r2, #8]
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	0a12      	lsrs	r2, r2, #8
 8005346:	b292      	uxth	r2, r2
 8005348:	b211      	sxth	r1, r2
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	6892      	ldr	r2, [r2, #8]
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	0212      	lsls	r2, r2, #8
 8005352:	b212      	sxth	r2, r2
 8005354:	430a      	orrs	r2, r1
 8005356:	b212      	sxth	r2, r2
 8005358:	b292      	uxth	r2, r2
 800535a:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	3302      	adds	r3, #2
 8005360:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	441a      	add	r2, r3
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	4413      	add	r3, r2
 8005378:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	441a      	add	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	611a      	str	r2, [r3, #16]
	pos += 1;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	3301      	adds	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	441a      	add	r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	615a      	str	r2, [r3, #20]
	pos += 1;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	3301      	adds	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	441a      	add	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	6992      	ldr	r2, [r2, #24]
 80053ac:	8812      	ldrh	r2, [r2, #0]
 80053ae:	0a12      	lsrs	r2, r2, #8
 80053b0:	b292      	uxth	r2, r2
 80053b2:	b211      	sxth	r1, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	6992      	ldr	r2, [r2, #24]
 80053b8:	8812      	ldrh	r2, [r2, #0]
 80053ba:	0212      	lsls	r2, r2, #8
 80053bc:	b212      	sxth	r2, r2
 80053be:	430a      	orrs	r2, r1
 80053c0:	b212      	sxth	r2, r2
 80053c2:	b292      	uxth	r2, r2
 80053c4:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	3302      	adds	r3, #2
 80053ca:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	441a      	add	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	69d2      	ldr	r2, [r2, #28]
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	0a12      	lsrs	r2, r2, #8
 80053e2:	b292      	uxth	r2, r2
 80053e4:	b211      	sxth	r1, r2
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	69d2      	ldr	r2, [r2, #28]
 80053ea:	8812      	ldrh	r2, [r2, #0]
 80053ec:	0212      	lsls	r2, r2, #8
 80053ee:	b212      	sxth	r2, r2
 80053f0:	430a      	orrs	r2, r1
 80053f2:	b212      	sxth	r2, r2
 80053f4:	b292      	uxth	r2, r2
 80053f6:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	3302      	adds	r3, #2
 80053fc:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	441a      	add	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	4413      	add	r3, r2
 8005414:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d049      	beq.n	80054ba <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8005426:	7dfb      	ldrb	r3, [r7, #23]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	441a      	add	r2, r3
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005438:	8812      	ldrh	r2, [r2, #0]
 800543a:	0a12      	lsrs	r2, r2, #8
 800543c:	b292      	uxth	r2, r2
 800543e:	b211      	sxth	r1, r2
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005444:	8812      	ldrh	r2, [r2, #0]
 8005446:	0212      	lsls	r2, r2, #8
 8005448:	b212      	sxth	r2, r2
 800544a:	430a      	orrs	r2, r1
 800544c:	b212      	sxth	r2, r2
 800544e:	b292      	uxth	r2, r2
 8005450:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8005452:	7dfb      	ldrb	r3, [r7, #23]
 8005454:	3302      	adds	r3, #2
 8005456:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	441a      	add	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	4413      	add	r3, r2
 800546e:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	441a      	add	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005482:	8812      	ldrh	r2, [r2, #0]
 8005484:	0a12      	lsrs	r2, r2, #8
 8005486:	b292      	uxth	r2, r2
 8005488:	b211      	sxth	r1, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800548e:	8812      	ldrh	r2, [r2, #0]
 8005490:	0212      	lsls	r2, r2, #8
 8005492:	b212      	sxth	r2, r2
 8005494:	430a      	orrs	r2, r1
 8005496:	b212      	sxth	r2, r2
 8005498:	b292      	uxth	r2, r2
 800549a:	801a      	strh	r2, [r3, #0]
		pos += 2;
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	3302      	adds	r3, #2
 80054a0:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	441a      	add	r2, r3
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	4413      	add	r3, r2
 80054b8:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d024      	beq.n	8005514 <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	441a      	add	r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054dc:	8812      	ldrh	r2, [r2, #0]
 80054de:	0a12      	lsrs	r2, r2, #8
 80054e0:	b292      	uxth	r2, r2
 80054e2:	b211      	sxth	r1, r2
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	0212      	lsls	r2, r2, #8
 80054ec:	b212      	sxth	r2, r2
 80054ee:	430a      	orrs	r2, r1
 80054f0:	b212      	sxth	r2, r2
 80054f2:	b292      	uxth	r2, r2
 80054f4:	801a      	strh	r2, [r3, #0]
		pos += 2;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	3302      	adds	r3, #2
 80054fa:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	441a      	add	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	4413      	add	r3, r2
 8005512:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d024      	beq.n	800556e <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	441a      	add	r2, r3
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005536:	8812      	ldrh	r2, [r2, #0]
 8005538:	0a12      	lsrs	r2, r2, #8
 800553a:	b292      	uxth	r2, r2
 800553c:	b211      	sxth	r1, r2
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005542:	8812      	ldrh	r2, [r2, #0]
 8005544:	0212      	lsls	r2, r2, #8
 8005546:	b212      	sxth	r2, r2
 8005548:	430a      	orrs	r2, r1
 800554a:	b212      	sxth	r2, r2
 800554c:	b292      	uxth	r2, r2
 800554e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	3302      	adds	r3, #2
 8005554:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	441a      	add	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	7dfb      	ldrb	r3, [r7, #23]
 800556a:	4413      	add	r3, r2
 800556c:	75fb      	strb	r3, [r7, #23]
	}
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	460b      	mov	r3, r1
 8005580:	70fb      	strb	r3, [r7, #3]
 8005582:	4613      	mov	r3, r2
 8005584:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8005586:	2204      	movs	r2, #4
 8005588:	2100      	movs	r1, #0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 ffac 	bl	80064e8 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	7893      	ldrb	r3, [r2, #2]
 80055a0:	78f9      	ldrb	r1, [r7, #3]
 80055a2:	f361 0300 	bfi	r3, r1, #0, #1
 80055a6:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	78ba      	ldrb	r2, [r7, #2]
 80055ac:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 80055ae:	687b      	ldr	r3, [r7, #4]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 80055c4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80055c8:	2100      	movs	r1, #0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 ff8c 	bl	80064e8 <memset>
	memcpy(&new_client->sockaddr, sockaddr, sizeof (sockaddr_t));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2210      	movs	r2, #16
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 ff61 	bl	800649e <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f103 0010 	add.w	r0, r3, #16
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6a19      	ldr	r1, [r3, #32]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	f001 f8c7 	bl	8006780 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	881a      	ldrh	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d023      	beq.n	800566c <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	f001 f89f 	bl	8006780 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f001 f894 	bl	8006780 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	f001 f877 	bl	8006780 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f103 0052 	add.w	r0, r3, #82	; 0x52
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f001 f864 	bl	8006780 <strncpy>
	}

	new_client->connected = true;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d001      	beq.n	80056e0 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 80056dc:	2301      	movs	r3, #1
 80056de:	e01b      	b.n	8005718 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fd7e 	bl	80051e2 <can_broker_accept_next_client>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f083 0301 	eor.w	r3, r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e010      	b.n	8005718 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f7ff fdeb 	bl	80052dc <is_client_authorised>
 8005706:	4603      	mov	r3, r0
 8005708:	f083 0301 	eor.w	r3, r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8005712:	2305      	movs	r3, #5
 8005714:	e000      	b.n	8005718 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 8005716:	2300      	movs	r3, #0
	}
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
	pos ++;
 800575c:	7dfb      	ldrb	r3, [r7, #23]
 800575e:	3301      	adds	r3, #1
 8005760:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	441a      	add	r2, r3
 8005768:	f107 030c 	add.w	r3, r7, #12
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fb11 	bl	8004d96 <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800577a:	7c3a      	ldrb	r2, [r7, #16]
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	4413      	add	r3, r2
 8005780:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	441a      	add	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	6892      	ldr	r2, [r2, #8]
 8005794:	8812      	ldrh	r2, [r2, #0]
 8005796:	0a12      	lsrs	r2, r2, #8
 8005798:	b292      	uxth	r2, r2
 800579a:	b211      	sxth	r1, r2
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	6892      	ldr	r2, [r2, #8]
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	0212      	lsls	r2, r2, #8
 80057a4:	b212      	sxth	r2, r2
 80057a6:	430a      	orrs	r2, r1
 80057a8:	b212      	sxth	r2, r2
 80057aa:	b292      	uxth	r2, r2
 80057ac:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	3302      	adds	r3, #2
 80057b2:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	441a      	add	r2, r3
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
 80057c8:	4413      	add	r3, r2
 80057ca:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	dd18      	ble.n	800580e <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	441a      	add	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	6912      	ldr	r2, [r2, #16]
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	0a12      	lsrs	r2, r2, #8
 80057f2:	b292      	uxth	r2, r2
 80057f4:	b211      	sxth	r1, r2
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	6912      	ldr	r2, [r2, #16]
 80057fa:	8812      	ldrh	r2, [r2, #0]
 80057fc:	0212      	lsls	r2, r2, #8
 80057fe:	b212      	sxth	r2, r2
 8005800:	430a      	orrs	r2, r1
 8005802:	b212      	sxth	r2, r2
 8005804:	b292      	uxth	r2, r2
 8005806:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	3302      	adds	r3, #2
 800580c:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	441a      	add	r2, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	615a      	str	r2, [r3, #20]
}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 800582a:	2300      	movs	r3, #0
 800582c:	73fb      	strb	r3, [r7, #15]
 800582e:	e049      	b.n	80058c4 <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d03a      	beq.n	80058be <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8005848:	2300      	movs	r3, #0
 800584a:	73bb      	strb	r3, [r7, #14]
 800584c:	e034      	b.n	80058b8 <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 800585c:	7bf9      	ldrb	r1, [r7, #15]
 800585e:	7bba      	ldrb	r2, [r7, #14]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800586c:	fb02 f201 	mul.w	r2, r2, r1
 8005870:	4413      	add	r3, r2
 8005872:	33b0      	adds	r3, #176	; 0xb0
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	3308      	adds	r3, #8
 800587a:	89ba      	ldrh	r2, [r7, #12]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 ff6c 	bl	800675c <strncmp>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d013      	beq.n	80058b2 <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8005890:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	18d1      	adds	r1, r2, r3
 80058aa:	463a      	mov	r2, r7
 80058ac:	2318      	movs	r3, #24
 80058ae:	47a0      	blx	r4
					break;
 80058b0:	e005      	b.n	80058be <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	3301      	adds	r3, #1
 80058b6:	73bb      	strb	r3, [r7, #14]
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	2b07      	cmp	r3, #7
 80058bc:	d9c7      	bls.n	800584e <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	3301      	adds	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	d9b2      	bls.n	8005830 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd90      	pop	{r4, r7, pc}

080058d2 <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2240      	movs	r2, #64	; 0x40
 80058e2:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = X_HTONS(pckt_id);
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	b21a      	sxth	r2, r3
 80058f2:	887b      	ldrh	r3, [r7, #2]
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	b21b      	sxth	r3, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b21b      	sxth	r3, r3
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	805a      	strh	r2, [r3, #2]
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
	pos++;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	3301      	adds	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	441a      	add	r2, r3
 800592c:	f107 030c 	add.w	r3, r7, #12
 8005930:	4611      	mov	r1, r2
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fa2f 	bl	8004d96 <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800593e:	7c3a      	ldrb	r2, [r7, #16]
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	4413      	add	r3, r2
 8005944:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	441a      	add	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	6892      	ldr	r2, [r2, #8]
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	0a12      	lsrs	r2, r2, #8
 800595c:	b292      	uxth	r2, r2
 800595e:	b211      	sxth	r1, r2
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	6892      	ldr	r2, [r2, #8]
 8005964:	8812      	ldrh	r2, [r2, #0]
 8005966:	0212      	lsls	r2, r2, #8
 8005968:	b212      	sxth	r2, r2
 800596a:	430a      	orrs	r2, r1
 800596c:	b212      	sxth	r2, r2
 800596e:	b292      	uxth	r2, r2
 8005970:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	3302      	adds	r3, #2
 8005976:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8005978:	2302      	movs	r3, #2
 800597a:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 800597c:	2300      	movs	r3, #0
 800597e:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8005980:	e060      	b.n	8005a44 <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8005982:	7dba      	ldrb	r2, [r7, #22]
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4419      	add	r1, r3
 800598a:	6838      	ldr	r0, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4403      	add	r3, r0
 8005996:	330c      	adds	r3, #12
 8005998:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 800599a:	7dba      	ldrb	r2, [r7, #22]
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	4613      	mov	r3, r2
 80059a0:	005b      	lsls	r3, r3, #1
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	330c      	adds	r3, #12
 80059aa:	6819      	ldr	r1, [r3, #0]
 80059ac:	7dba      	ldrb	r2, [r7, #22]
 80059ae:	6838      	ldr	r0, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4403      	add	r3, r0
 80059ba:	330c      	adds	r3, #12
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	b218      	sxth	r0, r3
 80059c6:	7dba      	ldrb	r2, [r7, #22]
 80059c8:	683c      	ldr	r4, [r7, #0]
 80059ca:	4613      	mov	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4423      	add	r3, r4
 80059d4:	330c      	adds	r3, #12
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	b21b      	sxth	r3, r3
 80059de:	4303      	orrs	r3, r0
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	800b      	strh	r3, [r1, #0]
		pos += 2;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	3302      	adds	r3, #2
 80059ea:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80059ec:	7dba      	ldrb	r2, [r7, #22]
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4419      	add	r1, r3
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4403      	add	r3, r0
 8005a00:	3310      	adds	r3, #16
 8005a02:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 8005a04:	7dba      	ldrb	r2, [r7, #22]
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	330c      	adds	r3, #12
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8005a20:	7dba      	ldrb	r2, [r7, #22]
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4419      	add	r1, r3
 8005a28:	6838      	ldr	r0, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4403      	add	r3, r0
 8005a34:	3314      	adds	r3, #20
 8005a36:	6019      	str	r1, [r3, #0]
		pos += 1;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8005a3e:	7dbb      	ldrb	r3, [r7, #22]
 8005a40:	3301      	adds	r3, #1
 8005a42:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8005a44:	7dfa      	ldrb	r2, [r7, #23]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
 8005a4a:	7d7b      	ldrb	r3, [r7, #21]
 8005a4c:	440b      	add	r3, r1
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d397      	bcc.n	8005982 <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 8005a52:	7dbb      	ldrb	r3, [r7, #22]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	371c      	adds	r7, #28
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}

08005a5c <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 8005a6a:	79fb      	ldrb	r3, [r7, #7]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fd05 	bl	8006480 <memcmp>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <is_the_same_topic+0x24>
		return true;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <is_the_same_topic+0x26>
	}
	return false;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8005a98:	2300      	movs	r3, #0
 8005a9a:	75fb      	strb	r3, [r7, #23]
 8005a9c:	e020      	b.n	8005ae0 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8005a9e:	7dfa      	ldrb	r2, [r7, #23]
 8005aa0:	68f9      	ldr	r1, [r7, #12]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	33b8      	adds	r3, #184	; 0xb8
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 8005ab4:	7dfa      	ldrb	r2, [r7, #23]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	33b0      	adds	r3, #176	; 0xb0
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3308      	adds	r3, #8
 8005ac6:	79fa      	ldrb	r2, [r7, #7]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff ffc6 	bl	8005a5c <is_the_same_topic>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <get_subscribed_topic_pos+0x50>
			return i;
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	e006      	b.n	8005ae8 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	3301      	adds	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	d9db      	bls.n	8005a9e <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 8005ae6:	23ff      	movs	r3, #255	; 0xff
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
 8005b1a:	e00f      	b.n	8005b3c <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8005b1c:	7bfa      	ldrb	r2, [r7, #15]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	33b8      	adds	r3, #184	; 0xb8
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	e006      	b.n	8005b44 <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	2b07      	cmp	r3, #7
 8005b40:	d9ec      	bls.n	8005b1c <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 8005b42:	23ff      	movs	r3, #255	; 0xff
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff ffd8 	bl	8005b0e <find_first_free_slot_for_subs_topic>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	2bff      	cmp	r3, #255	; 0xff
 8005b66:	d02e      	beq.n	8005bc6 <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	33b0      	adds	r3, #176	; 0xb0
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	f103 0008 	add.w	r0, r3, #8
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fc89 	bl	800649e <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8005b8c:	7bfa      	ldrb	r2, [r7, #15]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	33b0      	adds	r3, #176	; 0xb0
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3306      	adds	r3, #6
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	8812      	ldrh	r2, [r2, #0]
 8005ba4:	b292      	uxth	r2, r2
 8005ba6:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 8005ba8:	7bfa      	ldrb	r2, [r7, #15]
 8005baa:	4613      	mov	r3, r2
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	33d0      	adds	r3, #208	; 0xd0
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3308      	adds	r3, #8
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	6892      	ldr	r2, [r2, #8]
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	701a      	strb	r2, [r3, #0]
		return true;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <add_new_subscription_to_client+0x7a>
	}
	return false;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8005be4:	e077      	b.n	8005cd6 <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 8005be6:	7dfa      	ldrb	r2, [r7, #23]
 8005be8:	4613      	mov	r3, r2
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	7dfa      	ldrb	r2, [r7, #23]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4413      	add	r3, r2
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff ff3a 	bl	8005a8a <get_subscribed_topic_pos>
 8005c16:	4603      	mov	r3, r0
 8005c18:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){ //reverse if & else
 8005c1a:	7d7b      	ldrb	r3, [r7, #21]
 8005c1c:	2bff      	cmp	r3, #255	; 0xff
 8005c1e:	d024      	beq.n	8005c6a <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 8005c20:	7d7a      	ldrb	r2, [r7, #21]
 8005c22:	4613      	mov	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	33b0      	adds	r3, #176	; 0xb0
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	1d98      	adds	r0, r3, #6
 8005c32:	7dfa      	ldrb	r2, [r7, #23]
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7ff ff52 	bl	8005af0 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos; //refactor, extract doubled code
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	18d1      	adds	r1, r2, r3
 8005c52:	7dfa      	ldrb	r2, [r7, #23]
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4413      	add	r3, r2
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	700b      	strb	r3, [r1, #0]
 8005c68:	e032      	b.n	8005cd0 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 8005c6a:	7dfa      	ldrb	r2, [r7, #23]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	461a      	mov	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff ff66 	bl	8005b4e <add_new_subscription_to_client>
 8005c82:	4603      	mov	r3, r0
 8005c84:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	18d1      	adds	r1, r2, r3
 8005c8c:	7dfa      	ldrb	r2, [r7, #23]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	461a      	mov	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	700b      	strb	r3, [r1, #0]
			if (!res){
 8005ca2:	7d3b      	ldrb	r3, [r7, #20]
 8005ca4:	f083 0301 	eor.w	r3, r3, #1
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d010      	beq.n	8005cd0 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	75bb      	strb	r3, [r7, #22]
 8005cb2:	e007      	b.n	8005cc4 <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 8005cb4:	7dbb      	ldrb	r3, [r7, #22]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	2250      	movs	r2, #80	; 0x50
 8005cbc:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8005cbe:	7dbb      	ldrb	r3, [r7, #22]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	75bb      	strb	r3, [r7, #22]
 8005cc4:	7dba      	ldrb	r2, [r7, #22]
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d3f3      	bcc.n	8005cb4 <add_subscriptions_from_list+0xe4>
				}
			return false;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e007      	b.n	8005ce0 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8005cd6:	7dfa      	ldrb	r2, [r7, #23]
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d383      	bcc.n	8005be6 <add_subscriptions_from_list+0x16>
	}
	return true;
 8005cde:	2301      	movs	r3, #1
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	817b      	strh	r3, [r7, #10]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2290      	movs	r2, #144	; 0x90
 8005cfe:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_VAR_HEAD_LEN + topic_nb;  //(?)
 8005d00:	7a7b      	ldrb	r3, [r7, #9]
 8005d02:	3302      	adds	r3, #2
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = X_HTONS(pckt_id);
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b21a      	sxth	r2, r3
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	b21b      	sxth	r3, r3
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	b21b      	sxth	r3, r3
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3304      	adds	r3, #4
 8005d26:	7a7a      	ldrb	r2, [r7, #9]
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fbb7 	bl	800649e <memcpy>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	601a      	str	r2, [r3, #0]
	pos++;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	441a      	add	r2, r3
 8005d58:	f107 030c 	add.w	r3, r7, #12
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff f819 	bl	8004d96 <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8005d6a:	7c3a      	ldrb	r2, [r7, #16]
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	4413      	add	r3, r2
 8005d70:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	441a      	add	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	6892      	ldr	r2, [r2, #8]
 8005d84:	8812      	ldrh	r2, [r2, #0]
 8005d86:	0a12      	lsrs	r2, r2, #8
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	b211      	sxth	r1, r2
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	6892      	ldr	r2, [r2, #8]
 8005d90:	8812      	ldrh	r2, [r2, #0]
 8005d92:	0212      	lsls	r2, r2, #8
 8005d94:	b212      	sxth	r2, r2
 8005d96:	430a      	orrs	r2, r1
 8005d98:	b212      	sxth	r2, r2
 8005d9a:	b292      	uxth	r2, r2
 8005d9c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	3302      	adds	r3, #2
 8005da2:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8005da4:	2302      	movs	r3, #2
 8005da6:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8005dac:	e060      	b.n	8005e70 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8005dae:	7dba      	ldrb	r2, [r7, #22]
 8005db0:	7dfb      	ldrb	r3, [r7, #23]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4419      	add	r1, r3
 8005db6:	6838      	ldr	r0, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4403      	add	r3, r0
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 8005dc6:	7dba      	ldrb	r2, [r7, #22]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	7dba      	ldrb	r2, [r7, #22]
 8005dda:	6838      	ldr	r0, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4403      	add	r3, r0
 8005de6:	330c      	adds	r3, #12
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	b218      	sxth	r0, r3
 8005df2:	7dba      	ldrb	r2, [r7, #22]
 8005df4:	683c      	ldr	r4, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4423      	add	r3, r4
 8005e00:	330c      	adds	r3, #12
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	b21b      	sxth	r3, r3
 8005e0a:	4303      	orrs	r3, r0
 8005e0c:	b21b      	sxth	r3, r3
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	3302      	adds	r3, #2
 8005e16:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8005e18:	7dba      	ldrb	r2, [r7, #22]
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4419      	add	r1, r3
 8005e20:	6838      	ldr	r0, [r7, #0]
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4403      	add	r3, r0
 8005e2c:	3310      	adds	r3, #16
 8005e2e:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 8005e30:	7dba      	ldrb	r2, [r7, #22]
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	330c      	adds	r3, #12
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	4413      	add	r3, r2
 8005e4a:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8005e4c:	7dba      	ldrb	r2, [r7, #22]
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4419      	add	r1, r3
 8005e54:	6838      	ldr	r0, [r7, #0]
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4403      	add	r3, r0
 8005e60:	3314      	adds	r3, #20
 8005e62:	6019      	str	r1, [r3, #0]
		pos += 1;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	3301      	adds	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8005e6a:	7dbb      	ldrb	r3, [r7, #22]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8005e70:	7dfa      	ldrb	r2, [r7, #23]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	7d7b      	ldrb	r3, [r7, #21]
 8005e78:	440b      	add	r3, r1
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d397      	bcc.n	8005dae <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 8005e7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd90      	pop	{r4, r7, pc}

08005e88 <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	e031      	b.n	8005efc <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	33b8      	adds	r3, #184	; 0xb8
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d023      	beq.n	8005ef6 <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 8005eae:	7bfa      	ldrb	r2, [r7, #15]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	33b0      	adds	r3, #176	; 0xb0
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f103 0008 	add.w	r0, r3, #8
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f7ff fdc4 	bl	8005a5c <is_the_same_topic>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00d      	beq.n	8005ef6 <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 8005eda:	7bfa      	ldrb	r2, [r7, #15]
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	33b0      	adds	r3, #176	; 0xb0
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4413      	add	r3, r2
 8005eea:	3306      	adds	r3, #6
 8005eec:	2224      	movs	r2, #36	; 0x24
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 faf9 	bl	80064e8 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b07      	cmp	r3, #7
 8005f00:	d9ca      	bls.n	8005e98 <delete_subscribed_topic+0x10>
		}
	}
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	4613      	mov	r3, r2
 8005f16:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8005f1c:	e00e      	b.n	8005f3c <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 8005f1e:	7dfa      	ldrb	r2, [r7, #23]
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	461a      	mov	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f7ff ffa9 	bl	8005e88 <delete_subscribed_topic>
		i++;
 8005f36:	7dfb      	ldrb	r3, [r7, #23]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8005f3c:	7dfa      	ldrb	r2, [r7, #23]
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3ec      	bcc.n	8005f1e <delete_listed_subscriptions+0x14>
	}
	return true;
 8005f44:	2301      	movs	r3, #1
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	441a      	add	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	601a      	str	r2, [r3, #0]
	pos++;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	441a      	add	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	605a      	str	r2, [r3, #4]
}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <_ZNSaIcEC1Ev>:
 8005f80:	4770      	bx	lr

08005f82 <_ZNSaIcED1Ev>:
 8005f82:	4770      	bx	lr

08005f84 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005f84:	b10a      	cbz	r2, 8005f8a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005f86:	f000 ba8a 	b.w	800649e <memcpy>
 8005f8a:	4770      	bx	lr

08005f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005f8c:	b508      	push	{r3, lr}
 8005f8e:	680b      	ldr	r3, [r1, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da02      	bge.n	8005f9a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005f94:	4809      	ldr	r0, [pc, #36]	; (8005fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005f96:	f000 f8c2 	bl	800611e <_ZSt20__throw_length_errorPKc>
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d908      	bls.n	8005fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005f9e:	0052      	lsls	r2, r2, #1
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d205      	bcs.n	8005fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	bfb6      	itet	lt
 8005fa8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8005fac:	600a      	strge	r2, [r1, #0]
 8005fae:	600b      	strlt	r3, [r1, #0]
 8005fb0:	6808      	ldr	r0, [r1, #0]
 8005fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f000 b8b6 	b.w	8006128 <_Znwj>
 8005fbc:	080082ce 	.word	0x080082ce

08005fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f853 0b08 	ldr.w	r0, [r3], #8
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	d001      	beq.n	8005fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8005fca:	f000 b8ab 	b.w	8006124 <_ZdlPv>
 8005fce:	4770      	bx	lr

08005fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005fd0:	2a01      	cmp	r2, #1
 8005fd2:	b510      	push	{r4, lr}
 8005fd4:	d102      	bne.n	8005fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005fd6:	780a      	ldrb	r2, [r1, #0]
 8005fd8:	7002      	strb	r2, [r0, #0]
 8005fda:	bd10      	pop	{r4, pc}
 8005fdc:	f7ff ffd2 	bl	8005f84 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005fe0:	bd10      	pop	{r4, pc}

08005fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005fe2:	b508      	push	{r3, lr}
 8005fe4:	1a52      	subs	r2, r2, r1
 8005fe6:	f7ff fff3 	bl	8005fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005fea:	bd08      	pop	{r3, pc}

08005fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8005fec:	4288      	cmp	r0, r1
 8005fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460e      	mov	r6, r1
 8005ff4:	d020      	beq.n	8006038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 8005ff6:	6802      	ldr	r2, [r0, #0]
 8005ff8:	f100 0308 	add.w	r3, r0, #8
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	bf08      	it	eq
 8006000:	220f      	moveq	r2, #15
 8006002:	684d      	ldr	r5, [r1, #4]
 8006004:	bf18      	it	ne
 8006006:	6882      	ldrne	r2, [r0, #8]
 8006008:	42aa      	cmp	r2, r5
 800600a:	d20b      	bcs.n	8006024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 800600c:	a902      	add	r1, sp, #8
 800600e:	f841 5d04 	str.w	r5, [r1, #-4]!
 8006012:	f7ff ffbb 	bl	8005f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006016:	4607      	mov	r7, r0
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff ffd1 	bl	8005fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800601e:	9b01      	ldr	r3, [sp, #4]
 8006020:	6027      	str	r7, [r4, #0]
 8006022:	60a3      	str	r3, [r4, #8]
 8006024:	b125      	cbz	r5, 8006030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 8006026:	462a      	mov	r2, r5
 8006028:	6831      	ldr	r1, [r6, #0]
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	f7ff ffd0 	bl	8005fd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006030:	2200      	movs	r2, #0
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6065      	str	r5, [r4, #4]
 8006036:	555a      	strb	r2, [r3, r5]
 8006038:	b003      	add	sp, #12
 800603a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800603c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800603c:	f100 0208 	add.w	r2, r0, #8
 8006040:	6002      	str	r2, [r0, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	6042      	str	r2, [r0, #4]
 8006046:	7202      	strb	r2, [r0, #8]
 8006048:	4770      	bx	lr

0800604a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800604a:	b510      	push	{r4, lr}
 800604c:	4604      	mov	r4, r0
 800604e:	f7ff ffb7 	bl	8005fc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006052:	4620      	mov	r0, r4
 8006054:	bd10      	pop	{r4, pc}

08006056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8006056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006058:	460b      	mov	r3, r1
 800605a:	4606      	mov	r6, r0
 800605c:	f853 7b08 	ldr.w	r7, [r3], #8
 8006060:	4605      	mov	r5, r0
 8006062:	42bb      	cmp	r3, r7
 8006064:	460c      	mov	r4, r1
 8006066:	f856 2b08 	ldr.w	r2, [r6], #8
 800606a:	d016      	beq.n	800609a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800606c:	4296      	cmp	r6, r2
 800606e:	bf08      	it	eq
 8006070:	2200      	moveq	r2, #0
 8006072:	6849      	ldr	r1, [r1, #4]
 8006074:	6007      	str	r7, [r0, #0]
 8006076:	6041      	str	r1, [r0, #4]
 8006078:	68a1      	ldr	r1, [r4, #8]
 800607a:	bf18      	it	ne
 800607c:	f8d0 e008 	ldrne.w	lr, [r0, #8]
 8006080:	6081      	str	r1, [r0, #8]
 8006082:	b142      	cbz	r2, 8006096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8006084:	6022      	str	r2, [r4, #0]
 8006086:	f8c4 e008 	str.w	lr, [r4, #8]
 800608a:	2300      	movs	r3, #0
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	6063      	str	r3, [r4, #4]
 8006090:	7013      	strb	r3, [r2, #0]
 8006092:	4628      	mov	r0, r5
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e7f7      	b.n	800608a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800609a:	f7ff ffa7 	bl	8005fec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800609e:	e7f4      	b.n	800608a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

080060a0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 80060a0:	6800      	ldr	r0, [r0, #0]
 80060a2:	4770      	bx	lr

080060a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80060a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060a6:	4604      	mov	r4, r0
 80060a8:	4616      	mov	r6, r2
 80060aa:	460d      	mov	r5, r1
 80060ac:	b901      	cbnz	r1, 80060b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 80060ae:	b9ba      	cbnz	r2, 80060e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 80060b0:	1b73      	subs	r3, r6, r5
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	d907      	bls.n	80060c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 80060b8:	2200      	movs	r2, #0
 80060ba:	a901      	add	r1, sp, #4
 80060bc:	4620      	mov	r0, r4
 80060be:	f7ff ff65 	bl	8005f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	6020      	str	r0, [r4, #0]
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	4632      	mov	r2, r6
 80060ca:	4629      	mov	r1, r5
 80060cc:	6820      	ldr	r0, [r4, #0]
 80060ce:	f7ff ff88 	bl	8005fe2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80060d2:	2100      	movs	r1, #0
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	54d1      	strb	r1, [r2, r3]
 80060dc:	b002      	add	sp, #8
 80060de:	bd70      	pop	{r4, r5, r6, pc}
 80060e0:	4801      	ldr	r0, [pc, #4]	; (80060e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80060e2:	f000 f819 	bl	8006118 <_ZSt19__throw_logic_errorPKc>
 80060e6:	bf00      	nop
 80060e8:	080082a4 	.word	0x080082a4

080060ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	f100 0308 	add.w	r3, r0, #8
 80060f2:	4604      	mov	r4, r0
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	460d      	mov	r5, r1
 80060f8:	b159      	cbz	r1, 8006112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80060fa:	4608      	mov	r0, r1
 80060fc:	f7fa f832 	bl	8000164 <strlen>
 8006100:	182a      	adds	r2, r5, r0
 8006102:	4620      	mov	r0, r4
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	4629      	mov	r1, r5
 800610a:	f7ff ffcb 	bl	80060a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800610e:	4620      	mov	r0, r4
 8006110:	bd38      	pop	{r3, r4, r5, pc}
 8006112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006116:	e7f4      	b.n	8006102 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08006118 <_ZSt19__throw_logic_errorPKc>:
 8006118:	b508      	push	{r3, lr}
 800611a:	f000 f967 	bl	80063ec <abort>

0800611e <_ZSt20__throw_length_errorPKc>:
 800611e:	b508      	push	{r3, lr}
 8006120:	f000 f964 	bl	80063ec <abort>

08006124 <_ZdlPv>:
 8006124:	f000 b996 	b.w	8006454 <free>

08006128 <_Znwj>:
 8006128:	b510      	push	{r4, lr}
 800612a:	2800      	cmp	r0, #0
 800612c:	bf14      	ite	ne
 800612e:	4604      	movne	r4, r0
 8006130:	2401      	moveq	r4, #1
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f986 	bl	8006444 <malloc>
 8006138:	b930      	cbnz	r0, 8006148 <_Znwj+0x20>
 800613a:	f000 f807 	bl	800614c <_ZSt15get_new_handlerv>
 800613e:	b908      	cbnz	r0, 8006144 <_Znwj+0x1c>
 8006140:	f000 f954 	bl	80063ec <abort>
 8006144:	4780      	blx	r0
 8006146:	e7f4      	b.n	8006132 <_Znwj+0xa>
 8006148:	bd10      	pop	{r4, pc}
	...

0800614c <_ZSt15get_new_handlerv>:
 800614c:	4b02      	ldr	r3, [pc, #8]	; (8006158 <_ZSt15get_new_handlerv+0xc>)
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	f3bf 8f5b 	dmb	ish
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000434 	.word	0x20000434

0800615c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 800615c:	4b24      	ldr	r3, [pc, #144]	; (80061f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	07d0      	lsls	r0, r2, #31
 8006162:	bf5c      	itt	pl
 8006164:	2201      	movpl	r2, #1
 8006166:	601a      	strpl	r2, [r3, #0]
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	07d1      	lsls	r1, r2, #31
 800616e:	bf5c      	itt	pl
 8006170:	2201      	movpl	r2, #1
 8006172:	601a      	strpl	r2, [r3, #0]
 8006174:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	07d2      	lsls	r2, r2, #31
 800617a:	bf5c      	itt	pl
 800617c:	2201      	movpl	r2, #1
 800617e:	601a      	strpl	r2, [r3, #0]
 8006180:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	07d0      	lsls	r0, r2, #31
 8006186:	bf5c      	itt	pl
 8006188:	2201      	movpl	r2, #1
 800618a:	601a      	strpl	r2, [r3, #0]
 800618c:	4b1c      	ldr	r3, [pc, #112]	; (8006200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	07d1      	lsls	r1, r2, #31
 8006192:	bf5c      	itt	pl
 8006194:	2201      	movpl	r2, #1
 8006196:	601a      	strpl	r2, [r3, #0]
 8006198:	4b1a      	ldr	r3, [pc, #104]	; (8006204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	07d2      	lsls	r2, r2, #31
 800619e:	bf5c      	itt	pl
 80061a0:	2201      	movpl	r2, #1
 80061a2:	601a      	strpl	r2, [r3, #0]
 80061a4:	4b18      	ldr	r3, [pc, #96]	; (8006208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	07d0      	lsls	r0, r2, #31
 80061aa:	bf5c      	itt	pl
 80061ac:	2201      	movpl	r2, #1
 80061ae:	601a      	strpl	r2, [r3, #0]
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	07d1      	lsls	r1, r2, #31
 80061b6:	bf5c      	itt	pl
 80061b8:	2201      	movpl	r2, #1
 80061ba:	601a      	strpl	r2, [r3, #0]
 80061bc:	4b14      	ldr	r3, [pc, #80]	; (8006210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	07d2      	lsls	r2, r2, #31
 80061c2:	bf5c      	itt	pl
 80061c4:	2201      	movpl	r2, #1
 80061c6:	601a      	strpl	r2, [r3, #0]
 80061c8:	4b12      	ldr	r3, [pc, #72]	; (8006214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	07d0      	lsls	r0, r2, #31
 80061ce:	bf5c      	itt	pl
 80061d0:	2201      	movpl	r2, #1
 80061d2:	601a      	strpl	r2, [r3, #0]
 80061d4:	4b10      	ldr	r3, [pc, #64]	; (8006218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	07d1      	lsls	r1, r2, #31
 80061da:	bf5c      	itt	pl
 80061dc:	2201      	movpl	r2, #1
 80061de:	601a      	strpl	r2, [r3, #0]
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	07d2      	lsls	r2, r2, #31
 80061e6:	bf5c      	itt	pl
 80061e8:	2201      	movpl	r2, #1
 80061ea:	601a      	strpl	r2, [r3, #0]
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000464 	.word	0x20000464
 80061f4:	20000460 	.word	0x20000460
 80061f8:	2000045c 	.word	0x2000045c
 80061fc:	20000458 	.word	0x20000458
 8006200:	20000454 	.word	0x20000454
 8006204:	20000450 	.word	0x20000450
 8006208:	2000044c 	.word	0x2000044c
 800620c:	20000448 	.word	0x20000448
 8006210:	20000444 	.word	0x20000444
 8006214:	20000440 	.word	0x20000440
 8006218:	2000043c 	.word	0x2000043c
 800621c:	20000438 	.word	0x20000438

08006220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8006220:	4b18      	ldr	r3, [pc, #96]	; (8006284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	07d1      	lsls	r1, r2, #31
 8006226:	bf5c      	itt	pl
 8006228:	2201      	movpl	r2, #1
 800622a:	601a      	strpl	r2, [r3, #0]
 800622c:	4b16      	ldr	r3, [pc, #88]	; (8006288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	07d2      	lsls	r2, r2, #31
 8006232:	bf5c      	itt	pl
 8006234:	2201      	movpl	r2, #1
 8006236:	601a      	strpl	r2, [r3, #0]
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	07d0      	lsls	r0, r2, #31
 800623e:	bf5c      	itt	pl
 8006240:	2201      	movpl	r2, #1
 8006242:	601a      	strpl	r2, [r3, #0]
 8006244:	4b12      	ldr	r3, [pc, #72]	; (8006290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	07d1      	lsls	r1, r2, #31
 800624a:	bf5c      	itt	pl
 800624c:	2201      	movpl	r2, #1
 800624e:	601a      	strpl	r2, [r3, #0]
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	07d2      	lsls	r2, r2, #31
 8006256:	bf5c      	itt	pl
 8006258:	2201      	movpl	r2, #1
 800625a:	601a      	strpl	r2, [r3, #0]
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	07d0      	lsls	r0, r2, #31
 8006262:	bf5c      	itt	pl
 8006264:	2201      	movpl	r2, #1
 8006266:	601a      	strpl	r2, [r3, #0]
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	07d1      	lsls	r1, r2, #31
 800626e:	bf5c      	itt	pl
 8006270:	2201      	movpl	r2, #1
 8006272:	601a      	strpl	r2, [r3, #0]
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	07d2      	lsls	r2, r2, #31
 800627a:	bf5c      	itt	pl
 800627c:	2201      	movpl	r2, #1
 800627e:	601a      	strpl	r2, [r3, #0]
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000484 	.word	0x20000484
 8006288:	20000480 	.word	0x20000480
 800628c:	2000047c 	.word	0x2000047c
 8006290:	20000478 	.word	0x20000478
 8006294:	20000474 	.word	0x20000474
 8006298:	20000470 	.word	0x20000470
 800629c:	2000046c 	.word	0x2000046c
 80062a0:	20000468 	.word	0x20000468

080062a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80062a4:	4b24      	ldr	r3, [pc, #144]	; (8006338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	07d0      	lsls	r0, r2, #31
 80062aa:	bf5c      	itt	pl
 80062ac:	2201      	movpl	r2, #1
 80062ae:	601a      	strpl	r2, [r3, #0]
 80062b0:	4b22      	ldr	r3, [pc, #136]	; (800633c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	07d1      	lsls	r1, r2, #31
 80062b6:	bf5c      	itt	pl
 80062b8:	2201      	movpl	r2, #1
 80062ba:	601a      	strpl	r2, [r3, #0]
 80062bc:	4b20      	ldr	r3, [pc, #128]	; (8006340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	07d2      	lsls	r2, r2, #31
 80062c2:	bf5c      	itt	pl
 80062c4:	2201      	movpl	r2, #1
 80062c6:	601a      	strpl	r2, [r3, #0]
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	07d0      	lsls	r0, r2, #31
 80062ce:	bf5c      	itt	pl
 80062d0:	2201      	movpl	r2, #1
 80062d2:	601a      	strpl	r2, [r3, #0]
 80062d4:	4b1c      	ldr	r3, [pc, #112]	; (8006348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	07d1      	lsls	r1, r2, #31
 80062da:	bf5c      	itt	pl
 80062dc:	2201      	movpl	r2, #1
 80062de:	601a      	strpl	r2, [r3, #0]
 80062e0:	4b1a      	ldr	r3, [pc, #104]	; (800634c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	07d2      	lsls	r2, r2, #31
 80062e6:	bf5c      	itt	pl
 80062e8:	2201      	movpl	r2, #1
 80062ea:	601a      	strpl	r2, [r3, #0]
 80062ec:	4b18      	ldr	r3, [pc, #96]	; (8006350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	07d0      	lsls	r0, r2, #31
 80062f2:	bf5c      	itt	pl
 80062f4:	2201      	movpl	r2, #1
 80062f6:	601a      	strpl	r2, [r3, #0]
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	07d1      	lsls	r1, r2, #31
 80062fe:	bf5c      	itt	pl
 8006300:	2201      	movpl	r2, #1
 8006302:	601a      	strpl	r2, [r3, #0]
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	bf5c      	itt	pl
 800630c:	2201      	movpl	r2, #1
 800630e:	601a      	strpl	r2, [r3, #0]
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	07d0      	lsls	r0, r2, #31
 8006316:	bf5c      	itt	pl
 8006318:	2201      	movpl	r2, #1
 800631a:	601a      	strpl	r2, [r3, #0]
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	07d1      	lsls	r1, r2, #31
 8006322:	bf5c      	itt	pl
 8006324:	2201      	movpl	r2, #1
 8006326:	601a      	strpl	r2, [r3, #0]
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	07d2      	lsls	r2, r2, #31
 800632e:	bf5c      	itt	pl
 8006330:	2201      	movpl	r2, #1
 8006332:	601a      	strpl	r2, [r3, #0]
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	200004b4 	.word	0x200004b4
 800633c:	200004b0 	.word	0x200004b0
 8006340:	200004ac 	.word	0x200004ac
 8006344:	200004a8 	.word	0x200004a8
 8006348:	200004a4 	.word	0x200004a4
 800634c:	200004a0 	.word	0x200004a0
 8006350:	2000049c 	.word	0x2000049c
 8006354:	20000498 	.word	0x20000498
 8006358:	20000494 	.word	0x20000494
 800635c:	20000490 	.word	0x20000490
 8006360:	2000048c 	.word	0x2000048c
 8006364:	20000488 	.word	0x20000488

08006368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	07d1      	lsls	r1, r2, #31
 800636e:	bf5c      	itt	pl
 8006370:	2201      	movpl	r2, #1
 8006372:	601a      	strpl	r2, [r3, #0]
 8006374:	4b16      	ldr	r3, [pc, #88]	; (80063d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	07d2      	lsls	r2, r2, #31
 800637a:	bf5c      	itt	pl
 800637c:	2201      	movpl	r2, #1
 800637e:	601a      	strpl	r2, [r3, #0]
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	07d0      	lsls	r0, r2, #31
 8006386:	bf5c      	itt	pl
 8006388:	2201      	movpl	r2, #1
 800638a:	601a      	strpl	r2, [r3, #0]
 800638c:	4b12      	ldr	r3, [pc, #72]	; (80063d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	07d1      	lsls	r1, r2, #31
 8006392:	bf5c      	itt	pl
 8006394:	2201      	movpl	r2, #1
 8006396:	601a      	strpl	r2, [r3, #0]
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	07d2      	lsls	r2, r2, #31
 800639e:	bf5c      	itt	pl
 80063a0:	2201      	movpl	r2, #1
 80063a2:	601a      	strpl	r2, [r3, #0]
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	07d0      	lsls	r0, r2, #31
 80063aa:	bf5c      	itt	pl
 80063ac:	2201      	movpl	r2, #1
 80063ae:	601a      	strpl	r2, [r3, #0]
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	07d1      	lsls	r1, r2, #31
 80063b6:	bf5c      	itt	pl
 80063b8:	2201      	movpl	r2, #1
 80063ba:	601a      	strpl	r2, [r3, #0]
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	07d2      	lsls	r2, r2, #31
 80063c2:	bf5c      	itt	pl
 80063c4:	2201      	movpl	r2, #1
 80063c6:	601a      	strpl	r2, [r3, #0]
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	200004d4 	.word	0x200004d4
 80063d0:	200004d0 	.word	0x200004d0
 80063d4:	200004cc 	.word	0x200004cc
 80063d8:	200004c8 	.word	0x200004c8
 80063dc:	200004c4 	.word	0x200004c4
 80063e0:	200004c0 	.word	0x200004c0
 80063e4:	200004bc 	.word	0x200004bc
 80063e8:	200004b8 	.word	0x200004b8

080063ec <abort>:
 80063ec:	b508      	push	{r3, lr}
 80063ee:	2006      	movs	r0, #6
 80063f0:	f000 f964 	bl	80066bc <raise>
 80063f4:	2001      	movs	r0, #1
 80063f6:	f000 fd0f 	bl	8006e18 <_exit>
	...

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	2500      	movs	r5, #0
 8006400:	4e0c      	ldr	r6, [pc, #48]	; (8006434 <__libc_init_array+0x38>)
 8006402:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006404:	1ba4      	subs	r4, r4, r6
 8006406:	10a4      	asrs	r4, r4, #2
 8006408:	42a5      	cmp	r5, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	f000 fd06 	bl	8006e1c <_init>
 8006410:	2500      	movs	r5, #0
 8006412:	4e0a      	ldr	r6, [pc, #40]	; (800643c <__libc_init_array+0x40>)
 8006414:	4c0a      	ldr	r4, [pc, #40]	; (8006440 <__libc_init_array+0x44>)
 8006416:	1ba4      	subs	r4, r4, r6
 8006418:	10a4      	asrs	r4, r4, #2
 800641a:	42a5      	cmp	r5, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006424:	4798      	blx	r3
 8006426:	3501      	adds	r5, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800642e:	4798      	blx	r3
 8006430:	3501      	adds	r5, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	0800837c 	.word	0x0800837c
 8006438:	0800837c 	.word	0x0800837c
 800643c:	0800837c 	.word	0x0800837c
 8006440:	08008390 	.word	0x08008390

08006444 <malloc>:
 8006444:	4b02      	ldr	r3, [pc, #8]	; (8006450 <malloc+0xc>)
 8006446:	4601      	mov	r1, r0
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f000 b8a1 	b.w	8006590 <_malloc_r>
 800644e:	bf00      	nop
 8006450:	2000000c 	.word	0x2000000c

08006454 <free>:
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <free+0xc>)
 8006456:	4601      	mov	r1, r0
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	f000 b84d 	b.w	80064f8 <_free_r>
 800645e:	bf00      	nop
 8006460:	2000000c 	.word	0x2000000c

08006464 <memchr>:
 8006464:	b510      	push	{r4, lr}
 8006466:	b2c9      	uxtb	r1, r1
 8006468:	4402      	add	r2, r0
 800646a:	4290      	cmp	r0, r2
 800646c:	4603      	mov	r3, r0
 800646e:	d101      	bne.n	8006474 <memchr+0x10>
 8006470:	2000      	movs	r0, #0
 8006472:	bd10      	pop	{r4, pc}
 8006474:	781c      	ldrb	r4, [r3, #0]
 8006476:	3001      	adds	r0, #1
 8006478:	428c      	cmp	r4, r1
 800647a:	d1f6      	bne.n	800646a <memchr+0x6>
 800647c:	4618      	mov	r0, r3
 800647e:	bd10      	pop	{r4, pc}

08006480 <memcmp>:
 8006480:	b510      	push	{r4, lr}
 8006482:	3901      	subs	r1, #1
 8006484:	4402      	add	r2, r0
 8006486:	4290      	cmp	r0, r2
 8006488:	d101      	bne.n	800648e <memcmp+0xe>
 800648a:	2000      	movs	r0, #0
 800648c:	bd10      	pop	{r4, pc}
 800648e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006492:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006496:	42a3      	cmp	r3, r4
 8006498:	d0f5      	beq.n	8006486 <memcmp+0x6>
 800649a:	1b18      	subs	r0, r3, r4
 800649c:	bd10      	pop	{r4, pc}

0800649e <memcpy>:
 800649e:	b510      	push	{r4, lr}
 80064a0:	1e43      	subs	r3, r0, #1
 80064a2:	440a      	add	r2, r1
 80064a4:	4291      	cmp	r1, r2
 80064a6:	d100      	bne.n	80064aa <memcpy+0xc>
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b2:	e7f7      	b.n	80064a4 <memcpy+0x6>

080064b4 <memmove>:
 80064b4:	4288      	cmp	r0, r1
 80064b6:	b510      	push	{r4, lr}
 80064b8:	eb01 0302 	add.w	r3, r1, r2
 80064bc:	d803      	bhi.n	80064c6 <memmove+0x12>
 80064be:	1e42      	subs	r2, r0, #1
 80064c0:	4299      	cmp	r1, r3
 80064c2:	d10c      	bne.n	80064de <memmove+0x2a>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	4298      	cmp	r0, r3
 80064c8:	d2f9      	bcs.n	80064be <memmove+0xa>
 80064ca:	1881      	adds	r1, r0, r2
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	42d3      	cmn	r3, r2
 80064d0:	d100      	bne.n	80064d4 <memmove+0x20>
 80064d2:	bd10      	pop	{r4, pc}
 80064d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80064dc:	e7f7      	b.n	80064ce <memmove+0x1a>
 80064de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80064e6:	e7eb      	b.n	80064c0 <memmove+0xc>

080064e8 <memset>:
 80064e8:	4603      	mov	r3, r0
 80064ea:	4402      	add	r2, r0
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d100      	bne.n	80064f2 <memset+0xa>
 80064f0:	4770      	bx	lr
 80064f2:	f803 1b01 	strb.w	r1, [r3], #1
 80064f6:	e7f9      	b.n	80064ec <memset+0x4>

080064f8 <_free_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4605      	mov	r5, r0
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d043      	beq.n	8006588 <_free_r+0x90>
 8006500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006504:	1f0c      	subs	r4, r1, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfb8      	it	lt
 800650a:	18e4      	addlt	r4, r4, r3
 800650c:	f000 f94d 	bl	80067aa <__malloc_lock>
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <_free_r+0x94>)
 8006512:	6813      	ldr	r3, [r2, #0]
 8006514:	4610      	mov	r0, r2
 8006516:	b933      	cbnz	r3, 8006526 <_free_r+0x2e>
 8006518:	6063      	str	r3, [r4, #4]
 800651a:	6014      	str	r4, [r2, #0]
 800651c:	4628      	mov	r0, r5
 800651e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006522:	f000 b943 	b.w	80067ac <__malloc_unlock>
 8006526:	42a3      	cmp	r3, r4
 8006528:	d90b      	bls.n	8006542 <_free_r+0x4a>
 800652a:	6821      	ldr	r1, [r4, #0]
 800652c:	1862      	adds	r2, r4, r1
 800652e:	4293      	cmp	r3, r2
 8006530:	bf01      	itttt	eq
 8006532:	681a      	ldreq	r2, [r3, #0]
 8006534:	685b      	ldreq	r3, [r3, #4]
 8006536:	1852      	addeq	r2, r2, r1
 8006538:	6022      	streq	r2, [r4, #0]
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	e7ed      	b.n	800651c <_free_r+0x24>
 8006540:	4613      	mov	r3, r2
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	b10a      	cbz	r2, 800654a <_free_r+0x52>
 8006546:	42a2      	cmp	r2, r4
 8006548:	d9fa      	bls.n	8006540 <_free_r+0x48>
 800654a:	6819      	ldr	r1, [r3, #0]
 800654c:	1858      	adds	r0, r3, r1
 800654e:	42a0      	cmp	r0, r4
 8006550:	d10b      	bne.n	800656a <_free_r+0x72>
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	4401      	add	r1, r0
 8006556:	1858      	adds	r0, r3, r1
 8006558:	4282      	cmp	r2, r0
 800655a:	6019      	str	r1, [r3, #0]
 800655c:	d1de      	bne.n	800651c <_free_r+0x24>
 800655e:	6810      	ldr	r0, [r2, #0]
 8006560:	6852      	ldr	r2, [r2, #4]
 8006562:	4401      	add	r1, r0
 8006564:	6019      	str	r1, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	e7d8      	b.n	800651c <_free_r+0x24>
 800656a:	d902      	bls.n	8006572 <_free_r+0x7a>
 800656c:	230c      	movs	r3, #12
 800656e:	602b      	str	r3, [r5, #0]
 8006570:	e7d4      	b.n	800651c <_free_r+0x24>
 8006572:	6820      	ldr	r0, [r4, #0]
 8006574:	1821      	adds	r1, r4, r0
 8006576:	428a      	cmp	r2, r1
 8006578:	bf01      	itttt	eq
 800657a:	6811      	ldreq	r1, [r2, #0]
 800657c:	6852      	ldreq	r2, [r2, #4]
 800657e:	1809      	addeq	r1, r1, r0
 8006580:	6021      	streq	r1, [r4, #0]
 8006582:	6062      	str	r2, [r4, #4]
 8006584:	605c      	str	r4, [r3, #4]
 8006586:	e7c9      	b.n	800651c <_free_r+0x24>
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	200004d8 	.word	0x200004d8

08006590 <_malloc_r>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	1ccd      	adds	r5, r1, #3
 8006594:	f025 0503 	bic.w	r5, r5, #3
 8006598:	3508      	adds	r5, #8
 800659a:	2d0c      	cmp	r5, #12
 800659c:	bf38      	it	cc
 800659e:	250c      	movcc	r5, #12
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	4606      	mov	r6, r0
 80065a4:	db01      	blt.n	80065aa <_malloc_r+0x1a>
 80065a6:	42a9      	cmp	r1, r5
 80065a8:	d903      	bls.n	80065b2 <_malloc_r+0x22>
 80065aa:	230c      	movs	r3, #12
 80065ac:	6033      	str	r3, [r6, #0]
 80065ae:	2000      	movs	r0, #0
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
 80065b2:	f000 f8fa 	bl	80067aa <__malloc_lock>
 80065b6:	4a23      	ldr	r2, [pc, #140]	; (8006644 <_malloc_r+0xb4>)
 80065b8:	6814      	ldr	r4, [r2, #0]
 80065ba:	4621      	mov	r1, r4
 80065bc:	b991      	cbnz	r1, 80065e4 <_malloc_r+0x54>
 80065be:	4c22      	ldr	r4, [pc, #136]	; (8006648 <_malloc_r+0xb8>)
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	b91b      	cbnz	r3, 80065cc <_malloc_r+0x3c>
 80065c4:	4630      	mov	r0, r6
 80065c6:	f000 f841 	bl	800664c <_sbrk_r>
 80065ca:	6020      	str	r0, [r4, #0]
 80065cc:	4629      	mov	r1, r5
 80065ce:	4630      	mov	r0, r6
 80065d0:	f000 f83c 	bl	800664c <_sbrk_r>
 80065d4:	1c43      	adds	r3, r0, #1
 80065d6:	d126      	bne.n	8006626 <_malloc_r+0x96>
 80065d8:	230c      	movs	r3, #12
 80065da:	4630      	mov	r0, r6
 80065dc:	6033      	str	r3, [r6, #0]
 80065de:	f000 f8e5 	bl	80067ac <__malloc_unlock>
 80065e2:	e7e4      	b.n	80065ae <_malloc_r+0x1e>
 80065e4:	680b      	ldr	r3, [r1, #0]
 80065e6:	1b5b      	subs	r3, r3, r5
 80065e8:	d41a      	bmi.n	8006620 <_malloc_r+0x90>
 80065ea:	2b0b      	cmp	r3, #11
 80065ec:	d90f      	bls.n	800660e <_malloc_r+0x7e>
 80065ee:	600b      	str	r3, [r1, #0]
 80065f0:	18cc      	adds	r4, r1, r3
 80065f2:	50cd      	str	r5, [r1, r3]
 80065f4:	4630      	mov	r0, r6
 80065f6:	f000 f8d9 	bl	80067ac <__malloc_unlock>
 80065fa:	f104 000b 	add.w	r0, r4, #11
 80065fe:	1d23      	adds	r3, r4, #4
 8006600:	f020 0007 	bic.w	r0, r0, #7
 8006604:	1ac3      	subs	r3, r0, r3
 8006606:	d01b      	beq.n	8006640 <_malloc_r+0xb0>
 8006608:	425a      	negs	r2, r3
 800660a:	50e2      	str	r2, [r4, r3]
 800660c:	bd70      	pop	{r4, r5, r6, pc}
 800660e:	428c      	cmp	r4, r1
 8006610:	bf0b      	itete	eq
 8006612:	6863      	ldreq	r3, [r4, #4]
 8006614:	684b      	ldrne	r3, [r1, #4]
 8006616:	6013      	streq	r3, [r2, #0]
 8006618:	6063      	strne	r3, [r4, #4]
 800661a:	bf18      	it	ne
 800661c:	460c      	movne	r4, r1
 800661e:	e7e9      	b.n	80065f4 <_malloc_r+0x64>
 8006620:	460c      	mov	r4, r1
 8006622:	6849      	ldr	r1, [r1, #4]
 8006624:	e7ca      	b.n	80065bc <_malloc_r+0x2c>
 8006626:	1cc4      	adds	r4, r0, #3
 8006628:	f024 0403 	bic.w	r4, r4, #3
 800662c:	42a0      	cmp	r0, r4
 800662e:	d005      	beq.n	800663c <_malloc_r+0xac>
 8006630:	1a21      	subs	r1, r4, r0
 8006632:	4630      	mov	r0, r6
 8006634:	f000 f80a 	bl	800664c <_sbrk_r>
 8006638:	3001      	adds	r0, #1
 800663a:	d0cd      	beq.n	80065d8 <_malloc_r+0x48>
 800663c:	6025      	str	r5, [r4, #0]
 800663e:	e7d9      	b.n	80065f4 <_malloc_r+0x64>
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	bf00      	nop
 8006644:	200004d8 	.word	0x200004d8
 8006648:	200004dc 	.word	0x200004dc

0800664c <_sbrk_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	2300      	movs	r3, #0
 8006650:	4c05      	ldr	r4, [pc, #20]	; (8006668 <_sbrk_r+0x1c>)
 8006652:	4605      	mov	r5, r0
 8006654:	4608      	mov	r0, r1
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	f000 fbd0 	bl	8006dfc <_sbrk>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_sbrk_r+0x1a>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	b103      	cbz	r3, 8006666 <_sbrk_r+0x1a>
 8006664:	602b      	str	r3, [r5, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200004f0 	.word	0x200004f0

0800666c <_raise_r>:
 800666c:	291f      	cmp	r1, #31
 800666e:	b538      	push	{r3, r4, r5, lr}
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	d904      	bls.n	8006680 <_raise_r+0x14>
 8006676:	2316      	movs	r3, #22
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006682:	b112      	cbz	r2, 800668a <_raise_r+0x1e>
 8006684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006688:	b94b      	cbnz	r3, 800669e <_raise_r+0x32>
 800668a:	4620      	mov	r0, r4
 800668c:	f000 f830 	bl	80066f0 <_getpid_r>
 8006690:	462a      	mov	r2, r5
 8006692:	4601      	mov	r1, r0
 8006694:	4620      	mov	r0, r4
 8006696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800669a:	f000 b817 	b.w	80066cc <_kill_r>
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d00a      	beq.n	80066b8 <_raise_r+0x4c>
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	d103      	bne.n	80066ae <_raise_r+0x42>
 80066a6:	2316      	movs	r3, #22
 80066a8:	6003      	str	r3, [r0, #0]
 80066aa:	2001      	movs	r0, #1
 80066ac:	bd38      	pop	{r3, r4, r5, pc}
 80066ae:	2400      	movs	r4, #0
 80066b0:	4628      	mov	r0, r5
 80066b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80066b6:	4798      	blx	r3
 80066b8:	2000      	movs	r0, #0
 80066ba:	bd38      	pop	{r3, r4, r5, pc}

080066bc <raise>:
 80066bc:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <raise+0xc>)
 80066be:	4601      	mov	r1, r0
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	f7ff bfd3 	b.w	800666c <_raise_r>
 80066c6:	bf00      	nop
 80066c8:	2000000c 	.word	0x2000000c

080066cc <_kill_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	2300      	movs	r3, #0
 80066d0:	4c06      	ldr	r4, [pc, #24]	; (80066ec <_kill_r+0x20>)
 80066d2:	4605      	mov	r5, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	f000 fb87 	bl	8006dec <_kill>
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	d102      	bne.n	80066e8 <_kill_r+0x1c>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	b103      	cbz	r3, 80066e8 <_kill_r+0x1c>
 80066e6:	602b      	str	r3, [r5, #0]
 80066e8:	bd38      	pop	{r3, r4, r5, pc}
 80066ea:	bf00      	nop
 80066ec:	200004f0 	.word	0x200004f0

080066f0 <_getpid_r>:
 80066f0:	f000 bb74 	b.w	8006ddc <_getpid>

080066f4 <sniprintf>:
 80066f4:	b40c      	push	{r2, r3}
 80066f6:	b530      	push	{r4, r5, lr}
 80066f8:	4b17      	ldr	r3, [pc, #92]	; (8006758 <sniprintf+0x64>)
 80066fa:	1e0c      	subs	r4, r1, #0
 80066fc:	b09d      	sub	sp, #116	; 0x74
 80066fe:	681d      	ldr	r5, [r3, #0]
 8006700:	da08      	bge.n	8006714 <sniprintf+0x20>
 8006702:	238b      	movs	r3, #139	; 0x8b
 8006704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	b01d      	add	sp, #116	; 0x74
 800670c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006710:	b002      	add	sp, #8
 8006712:	4770      	bx	lr
 8006714:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006718:	f8ad 3014 	strh.w	r3, [sp, #20]
 800671c:	bf0c      	ite	eq
 800671e:	4623      	moveq	r3, r4
 8006720:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	9307      	str	r3, [sp, #28]
 8006728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800672c:	9002      	str	r0, [sp, #8]
 800672e:	9006      	str	r0, [sp, #24]
 8006730:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006736:	ab21      	add	r3, sp, #132	; 0x84
 8006738:	a902      	add	r1, sp, #8
 800673a:	4628      	mov	r0, r5
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	f000 f891 	bl	8006864 <_svfiprintf_r>
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	bfbc      	itt	lt
 8006746:	238b      	movlt	r3, #139	; 0x8b
 8006748:	602b      	strlt	r3, [r5, #0]
 800674a:	2c00      	cmp	r4, #0
 800674c:	d0dd      	beq.n	800670a <sniprintf+0x16>
 800674e:	2200      	movs	r2, #0
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e7d9      	b.n	800670a <sniprintf+0x16>
 8006756:	bf00      	nop
 8006758:	2000000c 	.word	0x2000000c

0800675c <strncmp>:
 800675c:	b510      	push	{r4, lr}
 800675e:	b16a      	cbz	r2, 800677c <strncmp+0x20>
 8006760:	3901      	subs	r1, #1
 8006762:	1884      	adds	r4, r0, r2
 8006764:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006768:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800676c:	4293      	cmp	r3, r2
 800676e:	d103      	bne.n	8006778 <strncmp+0x1c>
 8006770:	42a0      	cmp	r0, r4
 8006772:	d001      	beq.n	8006778 <strncmp+0x1c>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f5      	bne.n	8006764 <strncmp+0x8>
 8006778:	1a98      	subs	r0, r3, r2
 800677a:	bd10      	pop	{r4, pc}
 800677c:	4610      	mov	r0, r2
 800677e:	bd10      	pop	{r4, pc}

08006780 <strncpy>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4604      	mov	r4, r0
 8006784:	b902      	cbnz	r2, 8006788 <strncpy+0x8>
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	4623      	mov	r3, r4
 800678a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800678e:	1e56      	subs	r6, r2, #1
 8006790:	f803 5b01 	strb.w	r5, [r3], #1
 8006794:	b91d      	cbnz	r5, 800679e <strncpy+0x1e>
 8006796:	4414      	add	r4, r2
 8006798:	42a3      	cmp	r3, r4
 800679a:	d103      	bne.n	80067a4 <strncpy+0x24>
 800679c:	bd70      	pop	{r4, r5, r6, pc}
 800679e:	461c      	mov	r4, r3
 80067a0:	4632      	mov	r2, r6
 80067a2:	e7ef      	b.n	8006784 <strncpy+0x4>
 80067a4:	f803 5b01 	strb.w	r5, [r3], #1
 80067a8:	e7f6      	b.n	8006798 <strncpy+0x18>

080067aa <__malloc_lock>:
 80067aa:	4770      	bx	lr

080067ac <__malloc_unlock>:
 80067ac:	4770      	bx	lr

080067ae <__ssputs_r>:
 80067ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b2:	688e      	ldr	r6, [r1, #8]
 80067b4:	4682      	mov	sl, r0
 80067b6:	429e      	cmp	r6, r3
 80067b8:	460c      	mov	r4, r1
 80067ba:	4691      	mov	r9, r2
 80067bc:	4698      	mov	r8, r3
 80067be:	d835      	bhi.n	800682c <__ssputs_r+0x7e>
 80067c0:	898a      	ldrh	r2, [r1, #12]
 80067c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067c6:	d031      	beq.n	800682c <__ssputs_r+0x7e>
 80067c8:	2302      	movs	r3, #2
 80067ca:	6825      	ldr	r5, [r4, #0]
 80067cc:	6909      	ldr	r1, [r1, #16]
 80067ce:	1a6f      	subs	r7, r5, r1
 80067d0:	6965      	ldr	r5, [r4, #20]
 80067d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067d6:	fb95 f5f3 	sdiv	r5, r5, r3
 80067da:	f108 0301 	add.w	r3, r8, #1
 80067de:	443b      	add	r3, r7
 80067e0:	429d      	cmp	r5, r3
 80067e2:	bf38      	it	cc
 80067e4:	461d      	movcc	r5, r3
 80067e6:	0553      	lsls	r3, r2, #21
 80067e8:	d531      	bpl.n	800684e <__ssputs_r+0xa0>
 80067ea:	4629      	mov	r1, r5
 80067ec:	f7ff fed0 	bl	8006590 <_malloc_r>
 80067f0:	4606      	mov	r6, r0
 80067f2:	b950      	cbnz	r0, 800680a <__ssputs_r+0x5c>
 80067f4:	230c      	movs	r3, #12
 80067f6:	f8ca 3000 	str.w	r3, [sl]
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	463a      	mov	r2, r7
 800680c:	6921      	ldr	r1, [r4, #16]
 800680e:	f7ff fe46 	bl	800649e <memcpy>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	6126      	str	r6, [r4, #16]
 8006820:	443e      	add	r6, r7
 8006822:	6026      	str	r6, [r4, #0]
 8006824:	4646      	mov	r6, r8
 8006826:	6165      	str	r5, [r4, #20]
 8006828:	1bed      	subs	r5, r5, r7
 800682a:	60a5      	str	r5, [r4, #8]
 800682c:	4546      	cmp	r6, r8
 800682e:	bf28      	it	cs
 8006830:	4646      	movcs	r6, r8
 8006832:	4649      	mov	r1, r9
 8006834:	4632      	mov	r2, r6
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	f7ff fe3c 	bl	80064b4 <memmove>
 800683c:	68a3      	ldr	r3, [r4, #8]
 800683e:	2000      	movs	r0, #0
 8006840:	1b9b      	subs	r3, r3, r6
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	441e      	add	r6, r3
 8006848:	6026      	str	r6, [r4, #0]
 800684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684e:	462a      	mov	r2, r5
 8006850:	f000 fa94 	bl	8006d7c <_realloc_r>
 8006854:	4606      	mov	r6, r0
 8006856:	2800      	cmp	r0, #0
 8006858:	d1e1      	bne.n	800681e <__ssputs_r+0x70>
 800685a:	6921      	ldr	r1, [r4, #16]
 800685c:	4650      	mov	r0, sl
 800685e:	f7ff fe4b 	bl	80064f8 <_free_r>
 8006862:	e7c7      	b.n	80067f4 <__ssputs_r+0x46>

08006864 <_svfiprintf_r>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	b09d      	sub	sp, #116	; 0x74
 800686a:	9303      	str	r3, [sp, #12]
 800686c:	898b      	ldrh	r3, [r1, #12]
 800686e:	4680      	mov	r8, r0
 8006870:	061c      	lsls	r4, r3, #24
 8006872:	460d      	mov	r5, r1
 8006874:	4616      	mov	r6, r2
 8006876:	d50f      	bpl.n	8006898 <_svfiprintf_r+0x34>
 8006878:	690b      	ldr	r3, [r1, #16]
 800687a:	b96b      	cbnz	r3, 8006898 <_svfiprintf_r+0x34>
 800687c:	2140      	movs	r1, #64	; 0x40
 800687e:	f7ff fe87 	bl	8006590 <_malloc_r>
 8006882:	6028      	str	r0, [r5, #0]
 8006884:	6128      	str	r0, [r5, #16]
 8006886:	b928      	cbnz	r0, 8006894 <_svfiprintf_r+0x30>
 8006888:	230c      	movs	r3, #12
 800688a:	f8c8 3000 	str.w	r3, [r8]
 800688e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006892:	e0c4      	b.n	8006a1e <_svfiprintf_r+0x1ba>
 8006894:	2340      	movs	r3, #64	; 0x40
 8006896:	616b      	str	r3, [r5, #20]
 8006898:	2300      	movs	r3, #0
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	2320      	movs	r3, #32
 800689e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068a2:	2330      	movs	r3, #48	; 0x30
 80068a4:	f04f 0b01 	mov.w	fp, #1
 80068a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ac:	4637      	mov	r7, r6
 80068ae:	463c      	mov	r4, r7
 80068b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d13c      	bne.n	8006932 <_svfiprintf_r+0xce>
 80068b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80068bc:	d00b      	beq.n	80068d6 <_svfiprintf_r+0x72>
 80068be:	4653      	mov	r3, sl
 80068c0:	4632      	mov	r2, r6
 80068c2:	4629      	mov	r1, r5
 80068c4:	4640      	mov	r0, r8
 80068c6:	f7ff ff72 	bl	80067ae <__ssputs_r>
 80068ca:	3001      	adds	r0, #1
 80068cc:	f000 80a2 	beq.w	8006a14 <_svfiprintf_r+0x1b0>
 80068d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d2:	4453      	add	r3, sl
 80068d4:	9309      	str	r3, [sp, #36]	; 0x24
 80068d6:	783b      	ldrb	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 809b 	beq.w	8006a14 <_svfiprintf_r+0x1b0>
 80068de:	2300      	movs	r3, #0
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	9307      	str	r3, [sp, #28]
 80068e8:	9205      	str	r2, [sp, #20]
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f0:	931a      	str	r3, [sp, #104]	; 0x68
 80068f2:	2205      	movs	r2, #5
 80068f4:	7821      	ldrb	r1, [r4, #0]
 80068f6:	4850      	ldr	r0, [pc, #320]	; (8006a38 <_svfiprintf_r+0x1d4>)
 80068f8:	f7ff fdb4 	bl	8006464 <memchr>
 80068fc:	1c67      	adds	r7, r4, #1
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xd6>
 8006902:	06d9      	lsls	r1, r3, #27
 8006904:	bf44      	itt	mi
 8006906:	2220      	movmi	r2, #32
 8006908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800690c:	071a      	lsls	r2, r3, #28
 800690e:	bf44      	itt	mi
 8006910:	222b      	movmi	r2, #43	; 0x2b
 8006912:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006916:	7822      	ldrb	r2, [r4, #0]
 8006918:	2a2a      	cmp	r2, #42	; 0x2a
 800691a:	d016      	beq.n	800694a <_svfiprintf_r+0xe6>
 800691c:	2100      	movs	r1, #0
 800691e:	200a      	movs	r0, #10
 8006920:	9a07      	ldr	r2, [sp, #28]
 8006922:	4627      	mov	r7, r4
 8006924:	783b      	ldrb	r3, [r7, #0]
 8006926:	3401      	adds	r4, #1
 8006928:	3b30      	subs	r3, #48	; 0x30
 800692a:	2b09      	cmp	r3, #9
 800692c:	d950      	bls.n	80069d0 <_svfiprintf_r+0x16c>
 800692e:	b1c9      	cbz	r1, 8006964 <_svfiprintf_r+0x100>
 8006930:	e011      	b.n	8006956 <_svfiprintf_r+0xf2>
 8006932:	2b25      	cmp	r3, #37	; 0x25
 8006934:	d0c0      	beq.n	80068b8 <_svfiprintf_r+0x54>
 8006936:	4627      	mov	r7, r4
 8006938:	e7b9      	b.n	80068ae <_svfiprintf_r+0x4a>
 800693a:	4a3f      	ldr	r2, [pc, #252]	; (8006a38 <_svfiprintf_r+0x1d4>)
 800693c:	463c      	mov	r4, r7
 800693e:	1a80      	subs	r0, r0, r2
 8006940:	fa0b f000 	lsl.w	r0, fp, r0
 8006944:	4318      	orrs	r0, r3
 8006946:	9004      	str	r0, [sp, #16]
 8006948:	e7d3      	b.n	80068f2 <_svfiprintf_r+0x8e>
 800694a:	9a03      	ldr	r2, [sp, #12]
 800694c:	1d11      	adds	r1, r2, #4
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2a00      	cmp	r2, #0
 8006954:	db01      	blt.n	800695a <_svfiprintf_r+0xf6>
 8006956:	9207      	str	r2, [sp, #28]
 8006958:	e004      	b.n	8006964 <_svfiprintf_r+0x100>
 800695a:	4252      	negs	r2, r2
 800695c:	f043 0302 	orr.w	r3, r3, #2
 8006960:	9207      	str	r2, [sp, #28]
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	783b      	ldrb	r3, [r7, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10d      	bne.n	8006986 <_svfiprintf_r+0x122>
 800696a:	787b      	ldrb	r3, [r7, #1]
 800696c:	1c79      	adds	r1, r7, #1
 800696e:	2b2a      	cmp	r3, #42	; 0x2a
 8006970:	d132      	bne.n	80069d8 <_svfiprintf_r+0x174>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	3702      	adds	r7, #2
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	9203      	str	r2, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfb8      	it	lt
 8006980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006984:	9305      	str	r3, [sp, #20]
 8006986:	4c2d      	ldr	r4, [pc, #180]	; (8006a3c <_svfiprintf_r+0x1d8>)
 8006988:	2203      	movs	r2, #3
 800698a:	7839      	ldrb	r1, [r7, #0]
 800698c:	4620      	mov	r0, r4
 800698e:	f7ff fd69 	bl	8006464 <memchr>
 8006992:	b138      	cbz	r0, 80069a4 <_svfiprintf_r+0x140>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	1b00      	subs	r0, r0, r4
 8006998:	fa03 f000 	lsl.w	r0, r3, r0
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	3701      	adds	r7, #1
 80069a0:	4303      	orrs	r3, r0
 80069a2:	9304      	str	r3, [sp, #16]
 80069a4:	7839      	ldrb	r1, [r7, #0]
 80069a6:	2206      	movs	r2, #6
 80069a8:	4825      	ldr	r0, [pc, #148]	; (8006a40 <_svfiprintf_r+0x1dc>)
 80069aa:	1c7e      	adds	r6, r7, #1
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	f7ff fd58 	bl	8006464 <memchr>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d035      	beq.n	8006a24 <_svfiprintf_r+0x1c0>
 80069b8:	4b22      	ldr	r3, [pc, #136]	; (8006a44 <_svfiprintf_r+0x1e0>)
 80069ba:	b9fb      	cbnz	r3, 80069fc <_svfiprintf_r+0x198>
 80069bc:	9b03      	ldr	r3, [sp, #12]
 80069be:	3307      	adds	r3, #7
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	3308      	adds	r3, #8
 80069c6:	9303      	str	r3, [sp, #12]
 80069c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ca:	444b      	add	r3, r9
 80069cc:	9309      	str	r3, [sp, #36]	; 0x24
 80069ce:	e76d      	b.n	80068ac <_svfiprintf_r+0x48>
 80069d0:	fb00 3202 	mla	r2, r0, r2, r3
 80069d4:	2101      	movs	r1, #1
 80069d6:	e7a4      	b.n	8006922 <_svfiprintf_r+0xbe>
 80069d8:	2300      	movs	r3, #0
 80069da:	240a      	movs	r4, #10
 80069dc:	4618      	mov	r0, r3
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	460f      	mov	r7, r1
 80069e2:	783a      	ldrb	r2, [r7, #0]
 80069e4:	3101      	adds	r1, #1
 80069e6:	3a30      	subs	r2, #48	; 0x30
 80069e8:	2a09      	cmp	r2, #9
 80069ea:	d903      	bls.n	80069f4 <_svfiprintf_r+0x190>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ca      	beq.n	8006986 <_svfiprintf_r+0x122>
 80069f0:	9005      	str	r0, [sp, #20]
 80069f2:	e7c8      	b.n	8006986 <_svfiprintf_r+0x122>
 80069f4:	fb04 2000 	mla	r0, r4, r0, r2
 80069f8:	2301      	movs	r3, #1
 80069fa:	e7f1      	b.n	80069e0 <_svfiprintf_r+0x17c>
 80069fc:	ab03      	add	r3, sp, #12
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	462a      	mov	r2, r5
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <_svfiprintf_r+0x1e4>)
 8006a04:	a904      	add	r1, sp, #16
 8006a06:	4640      	mov	r0, r8
 8006a08:	f3af 8000 	nop.w
 8006a0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006a10:	4681      	mov	r9, r0
 8006a12:	d1d9      	bne.n	80069c8 <_svfiprintf_r+0x164>
 8006a14:	89ab      	ldrh	r3, [r5, #12]
 8006a16:	065b      	lsls	r3, r3, #25
 8006a18:	f53f af39 	bmi.w	800688e <_svfiprintf_r+0x2a>
 8006a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a1e:	b01d      	add	sp, #116	; 0x74
 8006a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a24:	ab03      	add	r3, sp, #12
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <_svfiprintf_r+0x1e4>)
 8006a2c:	a904      	add	r1, sp, #16
 8006a2e:	4640      	mov	r0, r8
 8006a30:	f000 f884 	bl	8006b3c <_printf_i>
 8006a34:	e7ea      	b.n	8006a0c <_svfiprintf_r+0x1a8>
 8006a36:	bf00      	nop
 8006a38:	08008348 	.word	0x08008348
 8006a3c:	0800834e 	.word	0x0800834e
 8006a40:	08008352 	.word	0x08008352
 8006a44:	00000000 	.word	0x00000000
 8006a48:	080067af 	.word	0x080067af

08006a4c <_printf_common>:
 8006a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	4691      	mov	r9, r2
 8006a52:	461f      	mov	r7, r3
 8006a54:	688a      	ldr	r2, [r1, #8]
 8006a56:	690b      	ldr	r3, [r1, #16]
 8006a58:	4606      	mov	r6, r0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfb8      	it	lt
 8006a5e:	4613      	movlt	r3, r2
 8006a60:	f8c9 3000 	str.w	r3, [r9]
 8006a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a68:	460c      	mov	r4, r1
 8006a6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a6e:	b112      	cbz	r2, 8006a76 <_printf_common+0x2a>
 8006a70:	3301      	adds	r3, #1
 8006a72:	f8c9 3000 	str.w	r3, [r9]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a80:	3302      	addmi	r3, #2
 8006a82:	f8c9 3000 	strmi.w	r3, [r9]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	f015 0506 	ands.w	r5, r5, #6
 8006a8c:	d107      	bne.n	8006a9e <_printf_common+0x52>
 8006a8e:	f104 0a19 	add.w	sl, r4, #25
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	f8d9 2000 	ldr.w	r2, [r9]
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	429d      	cmp	r5, r3
 8006a9c:	db2a      	blt.n	8006af4 <_printf_common+0xa8>
 8006a9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	3300      	adds	r3, #0
 8006aa6:	bf18      	it	ne
 8006aa8:	2301      	movne	r3, #1
 8006aaa:	0692      	lsls	r2, r2, #26
 8006aac:	d42f      	bmi.n	8006b0e <_printf_common+0xc2>
 8006aae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	47c0      	blx	r8
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d022      	beq.n	8006b02 <_printf_common+0xb6>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	68e5      	ldr	r5, [r4, #12]
 8006ac0:	f003 0306 	and.w	r3, r3, #6
 8006ac4:	2b04      	cmp	r3, #4
 8006ac6:	bf18      	it	ne
 8006ac8:	2500      	movne	r5, #0
 8006aca:	f8d9 2000 	ldr.w	r2, [r9]
 8006ace:	f04f 0900 	mov.w	r9, #0
 8006ad2:	bf08      	it	eq
 8006ad4:	1aad      	subeq	r5, r5, r2
 8006ad6:	68a3      	ldr	r3, [r4, #8]
 8006ad8:	6922      	ldr	r2, [r4, #16]
 8006ada:	bf08      	it	eq
 8006adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bfc4      	itt	gt
 8006ae4:	1a9b      	subgt	r3, r3, r2
 8006ae6:	18ed      	addgt	r5, r5, r3
 8006ae8:	341a      	adds	r4, #26
 8006aea:	454d      	cmp	r5, r9
 8006aec:	d11b      	bne.n	8006b26 <_printf_common+0xda>
 8006aee:	2000      	movs	r0, #0
 8006af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af4:	2301      	movs	r3, #1
 8006af6:	4652      	mov	r2, sl
 8006af8:	4639      	mov	r1, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	47c0      	blx	r8
 8006afe:	3001      	adds	r0, #1
 8006b00:	d103      	bne.n	8006b0a <_printf_common+0xbe>
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0a:	3501      	adds	r5, #1
 8006b0c:	e7c1      	b.n	8006a92 <_printf_common+0x46>
 8006b0e:	2030      	movs	r0, #48	; 0x30
 8006b10:	18e1      	adds	r1, r4, r3
 8006b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b1c:	4422      	add	r2, r4
 8006b1e:	3302      	adds	r3, #2
 8006b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b24:	e7c3      	b.n	8006aae <_printf_common+0x62>
 8006b26:	2301      	movs	r3, #1
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	47c0      	blx	r8
 8006b30:	3001      	adds	r0, #1
 8006b32:	d0e6      	beq.n	8006b02 <_printf_common+0xb6>
 8006b34:	f109 0901 	add.w	r9, r9, #1
 8006b38:	e7d7      	b.n	8006aea <_printf_common+0x9e>
	...

08006b3c <_printf_i>:
 8006b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b40:	4617      	mov	r7, r2
 8006b42:	7e0a      	ldrb	r2, [r1, #24]
 8006b44:	b085      	sub	sp, #20
 8006b46:	2a6e      	cmp	r2, #110	; 0x6e
 8006b48:	4698      	mov	r8, r3
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b50:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006b54:	f000 80bc 	beq.w	8006cd0 <_printf_i+0x194>
 8006b58:	d81a      	bhi.n	8006b90 <_printf_i+0x54>
 8006b5a:	2a63      	cmp	r2, #99	; 0x63
 8006b5c:	d02e      	beq.n	8006bbc <_printf_i+0x80>
 8006b5e:	d80a      	bhi.n	8006b76 <_printf_i+0x3a>
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	f000 80c8 	beq.w	8006cf6 <_printf_i+0x1ba>
 8006b66:	2a58      	cmp	r2, #88	; 0x58
 8006b68:	f000 808a 	beq.w	8006c80 <_printf_i+0x144>
 8006b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006b74:	e02a      	b.n	8006bcc <_printf_i+0x90>
 8006b76:	2a64      	cmp	r2, #100	; 0x64
 8006b78:	d001      	beq.n	8006b7e <_printf_i+0x42>
 8006b7a:	2a69      	cmp	r2, #105	; 0x69
 8006b7c:	d1f6      	bne.n	8006b6c <_printf_i+0x30>
 8006b7e:	6821      	ldr	r1, [r4, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006b86:	d023      	beq.n	8006bd0 <_printf_i+0x94>
 8006b88:	1d11      	adds	r1, r2, #4
 8006b8a:	6019      	str	r1, [r3, #0]
 8006b8c:	6813      	ldr	r3, [r2, #0]
 8006b8e:	e027      	b.n	8006be0 <_printf_i+0xa4>
 8006b90:	2a73      	cmp	r2, #115	; 0x73
 8006b92:	f000 80b4 	beq.w	8006cfe <_printf_i+0x1c2>
 8006b96:	d808      	bhi.n	8006baa <_printf_i+0x6e>
 8006b98:	2a6f      	cmp	r2, #111	; 0x6f
 8006b9a:	d02a      	beq.n	8006bf2 <_printf_i+0xb6>
 8006b9c:	2a70      	cmp	r2, #112	; 0x70
 8006b9e:	d1e5      	bne.n	8006b6c <_printf_i+0x30>
 8006ba0:	680a      	ldr	r2, [r1, #0]
 8006ba2:	f042 0220 	orr.w	r2, r2, #32
 8006ba6:	600a      	str	r2, [r1, #0]
 8006ba8:	e003      	b.n	8006bb2 <_printf_i+0x76>
 8006baa:	2a75      	cmp	r2, #117	; 0x75
 8006bac:	d021      	beq.n	8006bf2 <_printf_i+0xb6>
 8006bae:	2a78      	cmp	r2, #120	; 0x78
 8006bb0:	d1dc      	bne.n	8006b6c <_printf_i+0x30>
 8006bb2:	2278      	movs	r2, #120	; 0x78
 8006bb4:	496f      	ldr	r1, [pc, #444]	; (8006d74 <_printf_i+0x238>)
 8006bb6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006bba:	e064      	b.n	8006c86 <_printf_i+0x14a>
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006bc2:	1d11      	adds	r1, r2, #4
 8006bc4:	6019      	str	r1, [r3, #0]
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e0a3      	b.n	8006d18 <_printf_i+0x1dc>
 8006bd0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006bd4:	f102 0104 	add.w	r1, r2, #4
 8006bd8:	6019      	str	r1, [r3, #0]
 8006bda:	d0d7      	beq.n	8006b8c <_printf_i+0x50>
 8006bdc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da03      	bge.n	8006bec <_printf_i+0xb0>
 8006be4:	222d      	movs	r2, #45	; 0x2d
 8006be6:	425b      	negs	r3, r3
 8006be8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006bec:	4962      	ldr	r1, [pc, #392]	; (8006d78 <_printf_i+0x23c>)
 8006bee:	220a      	movs	r2, #10
 8006bf0:	e017      	b.n	8006c22 <_printf_i+0xe6>
 8006bf2:	6820      	ldr	r0, [r4, #0]
 8006bf4:	6819      	ldr	r1, [r3, #0]
 8006bf6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006bfa:	d003      	beq.n	8006c04 <_printf_i+0xc8>
 8006bfc:	1d08      	adds	r0, r1, #4
 8006bfe:	6018      	str	r0, [r3, #0]
 8006c00:	680b      	ldr	r3, [r1, #0]
 8006c02:	e006      	b.n	8006c12 <_printf_i+0xd6>
 8006c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c08:	f101 0004 	add.w	r0, r1, #4
 8006c0c:	6018      	str	r0, [r3, #0]
 8006c0e:	d0f7      	beq.n	8006c00 <_printf_i+0xc4>
 8006c10:	880b      	ldrh	r3, [r1, #0]
 8006c12:	2a6f      	cmp	r2, #111	; 0x6f
 8006c14:	bf14      	ite	ne
 8006c16:	220a      	movne	r2, #10
 8006c18:	2208      	moveq	r2, #8
 8006c1a:	4957      	ldr	r1, [pc, #348]	; (8006d78 <_printf_i+0x23c>)
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8006c22:	6865      	ldr	r5, [r4, #4]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	60a5      	str	r5, [r4, #8]
 8006c28:	f2c0 809c 	blt.w	8006d64 <_printf_i+0x228>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	f020 0004 	bic.w	r0, r0, #4
 8006c32:	6020      	str	r0, [r4, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d13f      	bne.n	8006cb8 <_printf_i+0x17c>
 8006c38:	2d00      	cmp	r5, #0
 8006c3a:	f040 8095 	bne.w	8006d68 <_printf_i+0x22c>
 8006c3e:	4675      	mov	r5, lr
 8006c40:	2a08      	cmp	r2, #8
 8006c42:	d10b      	bne.n	8006c5c <_printf_i+0x120>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	07da      	lsls	r2, r3, #31
 8006c48:	d508      	bpl.n	8006c5c <_printf_i+0x120>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6862      	ldr	r2, [r4, #4]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	bfde      	ittt	le
 8006c52:	2330      	movle	r3, #48	; 0x30
 8006c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c5c:	ebae 0305 	sub.w	r3, lr, r5
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	f8cd 8000 	str.w	r8, [sp]
 8006c66:	463b      	mov	r3, r7
 8006c68:	aa03      	add	r2, sp, #12
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff feed 	bl	8006a4c <_printf_common>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d155      	bne.n	8006d22 <_printf_i+0x1e6>
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c7a:	b005      	add	sp, #20
 8006c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c80:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006c84:	493c      	ldr	r1, [pc, #240]	; (8006d78 <_printf_i+0x23c>)
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006c8e:	f100 0504 	add.w	r5, r0, #4
 8006c92:	601d      	str	r5, [r3, #0]
 8006c94:	d001      	beq.n	8006c9a <_printf_i+0x15e>
 8006c96:	6803      	ldr	r3, [r0, #0]
 8006c98:	e002      	b.n	8006ca0 <_printf_i+0x164>
 8006c9a:	0655      	lsls	r5, r2, #25
 8006c9c:	d5fb      	bpl.n	8006c96 <_printf_i+0x15a>
 8006c9e:	8803      	ldrh	r3, [r0, #0]
 8006ca0:	07d0      	lsls	r0, r2, #31
 8006ca2:	bf44      	itt	mi
 8006ca4:	f042 0220 	orrmi.w	r2, r2, #32
 8006ca8:	6022      	strmi	r2, [r4, #0]
 8006caa:	b91b      	cbnz	r3, 8006cb4 <_printf_i+0x178>
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	f022 0220 	bic.w	r2, r2, #32
 8006cb2:	6022      	str	r2, [r4, #0]
 8006cb4:	2210      	movs	r2, #16
 8006cb6:	e7b1      	b.n	8006c1c <_printf_i+0xe0>
 8006cb8:	4675      	mov	r5, lr
 8006cba:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cbe:	fb02 3310 	mls	r3, r2, r0, r3
 8006cc2:	5ccb      	ldrb	r3, [r1, r3]
 8006cc4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d1f5      	bne.n	8006cba <_printf_i+0x17e>
 8006cce:	e7b7      	b.n	8006c40 <_printf_i+0x104>
 8006cd0:	6808      	ldr	r0, [r1, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006cd8:	6949      	ldr	r1, [r1, #20]
 8006cda:	d004      	beq.n	8006ce6 <_printf_i+0x1aa>
 8006cdc:	1d10      	adds	r0, r2, #4
 8006cde:	6018      	str	r0, [r3, #0]
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	6019      	str	r1, [r3, #0]
 8006ce4:	e007      	b.n	8006cf6 <_printf_i+0x1ba>
 8006ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cea:	f102 0004 	add.w	r0, r2, #4
 8006cee:	6018      	str	r0, [r3, #0]
 8006cf0:	6813      	ldr	r3, [r2, #0]
 8006cf2:	d0f6      	beq.n	8006ce2 <_printf_i+0x1a6>
 8006cf4:	8019      	strh	r1, [r3, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4675      	mov	r5, lr
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	e7b1      	b.n	8006c62 <_printf_i+0x126>
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	1d11      	adds	r1, r2, #4
 8006d02:	6019      	str	r1, [r3, #0]
 8006d04:	6815      	ldr	r5, [r2, #0]
 8006d06:	2100      	movs	r1, #0
 8006d08:	6862      	ldr	r2, [r4, #4]
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f7ff fbaa 	bl	8006464 <memchr>
 8006d10:	b108      	cbz	r0, 8006d16 <_printf_i+0x1da>
 8006d12:	1b40      	subs	r0, r0, r5
 8006d14:	6060      	str	r0, [r4, #4]
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	6123      	str	r3, [r4, #16]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d20:	e79f      	b.n	8006c62 <_printf_i+0x126>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	462a      	mov	r2, r5
 8006d26:	4639      	mov	r1, r7
 8006d28:	4630      	mov	r0, r6
 8006d2a:	47c0      	blx	r8
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d0a2      	beq.n	8006c76 <_printf_i+0x13a>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	079b      	lsls	r3, r3, #30
 8006d34:	d507      	bpl.n	8006d46 <_printf_i+0x20a>
 8006d36:	2500      	movs	r5, #0
 8006d38:	f104 0919 	add.w	r9, r4, #25
 8006d3c:	68e3      	ldr	r3, [r4, #12]
 8006d3e:	9a03      	ldr	r2, [sp, #12]
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	429d      	cmp	r5, r3
 8006d44:	db05      	blt.n	8006d52 <_printf_i+0x216>
 8006d46:	68e0      	ldr	r0, [r4, #12]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	4298      	cmp	r0, r3
 8006d4c:	bfb8      	it	lt
 8006d4e:	4618      	movlt	r0, r3
 8006d50:	e793      	b.n	8006c7a <_printf_i+0x13e>
 8006d52:	2301      	movs	r3, #1
 8006d54:	464a      	mov	r2, r9
 8006d56:	4639      	mov	r1, r7
 8006d58:	4630      	mov	r0, r6
 8006d5a:	47c0      	blx	r8
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d08a      	beq.n	8006c76 <_printf_i+0x13a>
 8006d60:	3501      	adds	r5, #1
 8006d62:	e7eb      	b.n	8006d3c <_printf_i+0x200>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1a7      	bne.n	8006cb8 <_printf_i+0x17c>
 8006d68:	780b      	ldrb	r3, [r1, #0]
 8006d6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d72:	e765      	b.n	8006c40 <_printf_i+0x104>
 8006d74:	0800836a 	.word	0x0800836a
 8006d78:	08008359 	.word	0x08008359

08006d7c <_realloc_r>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	4607      	mov	r7, r0
 8006d80:	4614      	mov	r4, r2
 8006d82:	460e      	mov	r6, r1
 8006d84:	b921      	cbnz	r1, 8006d90 <_realloc_r+0x14>
 8006d86:	4611      	mov	r1, r2
 8006d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d8c:	f7ff bc00 	b.w	8006590 <_malloc_r>
 8006d90:	b922      	cbnz	r2, 8006d9c <_realloc_r+0x20>
 8006d92:	f7ff fbb1 	bl	80064f8 <_free_r>
 8006d96:	4625      	mov	r5, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9c:	f000 f814 	bl	8006dc8 <_malloc_usable_size_r>
 8006da0:	4284      	cmp	r4, r0
 8006da2:	d90f      	bls.n	8006dc4 <_realloc_r+0x48>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7ff fbf2 	bl	8006590 <_malloc_r>
 8006dac:	4605      	mov	r5, r0
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0f2      	beq.n	8006d98 <_realloc_r+0x1c>
 8006db2:	4631      	mov	r1, r6
 8006db4:	4622      	mov	r2, r4
 8006db6:	f7ff fb72 	bl	800649e <memcpy>
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7ff fb9b 	bl	80064f8 <_free_r>
 8006dc2:	e7e9      	b.n	8006d98 <_realloc_r+0x1c>
 8006dc4:	4635      	mov	r5, r6
 8006dc6:	e7e7      	b.n	8006d98 <_realloc_r+0x1c>

08006dc8 <_malloc_usable_size_r>:
 8006dc8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	f1a0 0004 	sub.w	r0, r0, #4
 8006dd2:	bfbc      	itt	lt
 8006dd4:	580b      	ldrlt	r3, [r1, r0]
 8006dd6:	18c0      	addlt	r0, r0, r3
 8006dd8:	4770      	bx	lr
	...

08006ddc <_getpid>:
 8006ddc:	2258      	movs	r2, #88	; 0x58
 8006dde:	4b02      	ldr	r3, [pc, #8]	; (8006de8 <_getpid+0xc>)
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	4770      	bx	lr
 8006de8:	200004f0 	.word	0x200004f0

08006dec <_kill>:
 8006dec:	2258      	movs	r2, #88	; 0x58
 8006dee:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <_kill+0xc>)
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	4770      	bx	lr
 8006df8:	200004f0 	.word	0x200004f0

08006dfc <_sbrk>:
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <_sbrk+0x14>)
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6819      	ldr	r1, [r3, #0]
 8006e02:	b909      	cbnz	r1, 8006e08 <_sbrk+0xc>
 8006e04:	4903      	ldr	r1, [pc, #12]	; (8006e14 <_sbrk+0x18>)
 8006e06:	6019      	str	r1, [r3, #0]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	4402      	add	r2, r0
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	4770      	bx	lr
 8006e10:	200004e0 	.word	0x200004e0
 8006e14:	200004f4 	.word	0x200004f4

08006e18 <_exit>:
 8006e18:	e7fe      	b.n	8006e18 <_exit>
	...

08006e1c <_init>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr

08006e28 <_fini>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr
