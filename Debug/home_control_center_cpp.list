
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027d4  080027d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00012800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003b4  20000000  08002800  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200003b4  08002800  000203b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00012800  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a6f9  00000000  00000000  00012829  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d89  00000000  00000000  0001cf22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000918  00000000  00000000  0001ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000838  00000000  00000000  0001f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003b3c  00000000  00000000  0001fe00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000359e  00000000  00000000  0002393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00026eda  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000024e4  00000000  00000000  00026f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002943c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	080027bc 	.word	0x080027bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	080027bc 	.word	0x080027bc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000164:	b480      	push	{r7}
 8000166:	b085      	sub	sp, #20
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
 800016c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	685b      	ldr	r3, [r3, #4]
 8000172:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	689a      	ldr	r2, [r3, #8]
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	689b      	ldr	r3, [r3, #8]
 8000186:	683a      	ldr	r2, [r7, #0]
 8000188:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	683a      	ldr	r2, [r7, #0]
 800018e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	687a      	ldr	r2, [r7, #4]
 8000194:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	1c5a      	adds	r2, r3, #1
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001aa:	b480      	push	{r7}
 80001ac:	b085      	sub	sp, #20
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	691b      	ldr	r3, [r3, #16]
 80001b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	687a      	ldr	r2, [r7, #4]
 80001be:	6892      	ldr	r2, [r2, #8]
 80001c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	689b      	ldr	r3, [r3, #8]
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	6852      	ldr	r2, [r2, #4]
 80001ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	685a      	ldr	r2, [r3, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d103      	bne.n	80001de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689a      	ldr	r2, [r3, #8]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	1e5a      	subs	r2, r3, #1
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	681b      	ldr	r3, [r3, #0]
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	0000      	movs	r0, r0
	...

08000200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <pxCurrentTCBConst2>)
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	6808      	ldr	r0, [r1, #0]
 8000206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800020a:	f380 8809 	msr	PSP, r0
 800020e:	f3bf 8f6f 	isb	sy
 8000212:	f04f 0000 	mov.w	r0, #0
 8000216:	f380 8811 	msr	BASEPRI, r0
 800021a:	f04e 0e0d 	orr.w	lr, lr, #13
 800021e:	4770      	bx	lr

08000220 <pxCurrentTCBConst2>:
 8000220:	2000001c 	.word	0x2000001c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000224:	bf00      	nop
 8000226:	bf00      	nop
	...

08000230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000230:	f3ef 8009 	mrs	r0, PSP
 8000234:	f3bf 8f6f 	isb	sy
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <pxCurrentTCBConst>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000240:	6010      	str	r0, [r2, #0]
 8000242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000246:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800024a:	f380 8811 	msr	BASEPRI, r0
 800024e:	f000 f8df 	bl	8000410 <vTaskSwitchContext>
 8000252:	f04f 0000 	mov.w	r0, #0
 8000256:	f380 8811 	msr	BASEPRI, r0
 800025a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025e:	6819      	ldr	r1, [r3, #0]
 8000260:	6808      	ldr	r0, [r1, #0]
 8000262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000266:	f380 8809 	msr	PSP, r0
 800026a:	f3bf 8f6f 	isb	sy
 800026e:	4770      	bx	lr

08000270 <pxCurrentTCBConst>:
 8000270:	2000001c 	.word	0x2000001c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop

08000278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800027e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000282:	f383 8811 	msr	BASEPRI, r3
 8000286:	f3bf 8f6f 	isb	sy
 800028a:	f3bf 8f4f 	dsb	sy
 800028e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000290:	f000 f812 	bl	80002b8 <xTaskIncrementTick>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <SysTick_Handler+0x3c>)
 800029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	2300      	movs	r3, #0
 80002a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	e000ed04 	.word	0xe000ed04

080002b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002c2:	4b48      	ldr	r3, [pc, #288]	; (80003e4 <xTaskIncrementTick+0x12c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d17c      	bne.n	80003c4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002ca:	4b47      	ldr	r3, [pc, #284]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002d2:	4a45      	ldr	r2, [pc, #276]	; (80003e8 <xTaskIncrementTick+0x130>)
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d110      	bne.n	8000300 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002de:	4b43      	ldr	r3, [pc, #268]	; (80003ec <xTaskIncrementTick+0x134>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <xTaskIncrementTick+0x134>)
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	4a40      	ldr	r2, [pc, #256]	; (80003f0 <xTaskIncrementTick+0x138>)
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	6013      	str	r3, [r2, #0]
 80002f2:	4b40      	ldr	r3, [pc, #256]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	3301      	adds	r3, #1
 80002f8:	4a3e      	ldr	r2, [pc, #248]	; (80003f4 <xTaskIncrementTick+0x13c>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	f000 f8ce 	bl	800049c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	693a      	ldr	r2, [r7, #16]
 8000306:	429a      	cmp	r2, r3
 8000308:	d34d      	bcc.n	80003a6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <xTaskIncrementTick+0x134>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d101      	bne.n	8000318 <xTaskIncrementTick+0x60>
 8000314:	2301      	movs	r3, #1
 8000316:	e000      	b.n	800031a <xTaskIncrementTick+0x62>
 8000318:	2300      	movs	r3, #0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d004      	beq.n	8000328 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800031e:	4b36      	ldr	r3, [pc, #216]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000324:	601a      	str	r2, [r3, #0]
					break;
 8000326:	e03e      	b.n	80003a6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <xTaskIncrementTick+0x134>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	d203      	bcs.n	8000348 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000340:	4a2d      	ldr	r2, [pc, #180]	; (80003f8 <xTaskIncrementTick+0x140>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6013      	str	r3, [r2, #0]
						break;
 8000346:	e02e      	b.n	80003a6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	3304      	adds	r3, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff2c 	bl	80001aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000356:	2b00      	cmp	r3, #0
 8000358:	d004      	beq.n	8000364 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3318      	adds	r3, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff23 	bl	80001aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	2201      	movs	r2, #1
 800036a:	409a      	lsls	r2, r3
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <xTaskIncrementTick+0x144>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4313      	orrs	r3, r2
 8000372:	4a22      	ldr	r2, [pc, #136]	; (80003fc <xTaskIncrementTick+0x144>)
 8000374:	6013      	str	r3, [r2, #0]
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4a1f      	ldr	r2, [pc, #124]	; (8000400 <xTaskIncrementTick+0x148>)
 8000384:	441a      	add	r2, r3
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	3304      	adds	r3, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4610      	mov	r0, r2
 800038e:	f7ff fee9 	bl	8000164 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <xTaskIncrementTick+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039c:	429a      	cmp	r2, r3
 800039e:	d3b4      	bcc.n	800030a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003a0:	2301      	movs	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003a4:	e7b1      	b.n	800030a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ac:	4914      	ldr	r1, [pc, #80]	; (8000400 <xTaskIncrementTick+0x148>)
 80003ae:	4613      	mov	r3, r2
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	4413      	add	r3, r2
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	440b      	add	r3, r1
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d907      	bls.n	80003ce <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e004      	b.n	80003ce <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <xTaskIncrementTick+0x150>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <xTaskIncrementTick+0x150>)
 80003cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <xTaskIncrementTick+0x154>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003da:	697b      	ldr	r3, [r7, #20]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200000a4 	.word	0x200000a4
 80003e8:	2000008c 	.word	0x2000008c
 80003ec:	20000084 	.word	0x20000084
 80003f0:	20000088 	.word	0x20000088
 80003f4:	2000009c 	.word	0x2000009c
 80003f8:	200000a0 	.word	0x200000a0
 80003fc:	20000090 	.word	0x20000090
 8000400:	20000020 	.word	0x20000020
 8000404:	2000001c 	.word	0x2000001c
 8000408:	20000094 	.word	0x20000094
 800040c:	20000098 	.word	0x20000098

08000410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000416:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <vTaskSwitchContext+0x78>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <vTaskSwitchContext+0x7c>)
 8000420:	2201      	movs	r2, #1
 8000422:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000424:	e02a      	b.n	800047c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <vTaskSwitchContext+0x7c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <vTaskSwitchContext+0x80>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	fab3 f383 	clz	r3, r3
 8000438:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800043a:	78fb      	ldrb	r3, [r7, #3]
 800043c:	f1c3 031f 	rsb	r3, r3, #31
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	4613      	mov	r3, r2
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	4413      	add	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <vTaskSwitchContext+0x84>)
 800044e:	4413      	add	r3, r2
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3308      	adds	r3, #8
 8000464:	429a      	cmp	r2, r3
 8000466:	d104      	bne.n	8000472 <vTaskSwitchContext+0x62>
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	685a      	ldr	r2, [r3, #4]
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <vTaskSwitchContext+0x88>)
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200000a4 	.word	0x200000a4
 800048c:	20000098 	.word	0x20000098
 8000490:	20000090 	.word	0x20000090
 8000494:	20000020 	.word	0x20000020
 8000498:	2000001c 	.word	0x2000001c

0800049c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <prvResetNextTaskUnblockTime+0x14>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <prvResetNextTaskUnblockTime+0x16>
 80004b0:	2300      	movs	r3, #0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004be:	e008      	b.n	80004d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <prvResetNextTaskUnblockTime+0x40>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <prvResetNextTaskUnblockTime+0x44>)
 80004d0:	6013      	str	r3, [r2, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000084 	.word	0x20000084
 80004e0:	200000a0 	.word	0x200000a0

080004e4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004ec:	4a03      	ldr	r2, [pc, #12]	; (80004fc <EXTI_ClearITPendingBit+0x18>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6153      	str	r3, [r2, #20]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40010400 	.word	0x40010400

08000500 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000500:	b480      	push	{r7}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800050a:	2300      	movs	r3, #0
 800050c:	61fb      	str	r3, [r7, #28]
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	f003 030f 	and.w	r3, r3, #15
 800052a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	78db      	ldrb	r3, [r3, #3]
 8000530:	f003 0310 	and.w	r3, r3, #16
 8000534:	2b00      	cmp	r3, #0
 8000536:	d005      	beq.n	8000544 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	789b      	ldrb	r3, [r3, #2]
 800053c:	461a      	mov	r2, r3
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	4313      	orrs	r3, r2
 8000542:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d044      	beq.n	80005d8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	e038      	b.n	80005cc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800055a:	2201      	movs	r2, #1
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4013      	ands	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	429a      	cmp	r2, r3
 8000576:	d126      	bne.n	80005c6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800057e:	220f      	movs	r2, #15
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	43db      	mvns	r3, r3
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	4013      	ands	r3, r2
 8000590:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000592:	69fa      	ldr	r2, [r7, #28]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	697a      	ldr	r2, [r7, #20]
 800059c:	4313      	orrs	r3, r2
 800059e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	78db      	ldrb	r3, [r3, #3]
 80005a4:	2b28      	cmp	r3, #40	; 0x28
 80005a6:	d105      	bne.n	80005b4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005a8:	2201      	movs	r2, #1
 80005aa:	69bb      	ldr	r3, [r7, #24]
 80005ac:	409a      	lsls	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	e008      	b.n	80005c6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	78db      	ldrb	r3, [r3, #3]
 80005b8:	2b48      	cmp	r3, #72	; 0x48
 80005ba:	d104      	bne.n	80005c6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005bc:	2201      	movs	r2, #1
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	409a      	lsls	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	3301      	adds	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	2b07      	cmp	r3, #7
 80005d0:	d9c3      	bls.n	800055a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d946      	bls.n	800066e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
 80005ea:	e03a      	b.n	8000662 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	3308      	adds	r3, #8
 80005f0:	2201      	movs	r2, #1
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4013      	ands	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000604:	693a      	ldr	r2, [r7, #16]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d127      	bne.n	800065c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000612:	220f      	movs	r2, #15
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	43db      	mvns	r3, r3
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	4013      	ands	r3, r2
 8000624:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	fa02 f303 	lsl.w	r3, r2, r3
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	4313      	orrs	r3, r2
 8000632:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	78db      	ldrb	r3, [r3, #3]
 8000638:	2b28      	cmp	r3, #40	; 0x28
 800063a:	d105      	bne.n	8000648 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	3308      	adds	r3, #8
 8000640:	2201      	movs	r2, #1
 8000642:	409a      	lsls	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	78db      	ldrb	r3, [r3, #3]
 800064c:	2b48      	cmp	r3, #72	; 0x48
 800064e:	d105      	bne.n	800065c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	3308      	adds	r3, #8
 8000654:	2201      	movs	r2, #1
 8000656:	409a      	lsls	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	3301      	adds	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	2b07      	cmp	r3, #7
 8000666:	d9c1      	bls.n	80005ec <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	697a      	ldr	r2, [r7, #20]
 800066c:	605a      	str	r2, [r3, #4]
  }
}
 800066e:	bf00      	nop
 8000670:	3724      	adds	r7, #36	; 0x24
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000684:	887a      	ldrh	r2, [r7, #2]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	611a      	str	r2, [r3, #16]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006a0:	887a      	ldrh	r2, [r7, #2]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006c2:	4909      	ldr	r1, [pc, #36]	; (80006e8 <RCC_APB2PeriphClockCmd+0x38>)
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <RCC_APB2PeriphClockCmd+0x38>)
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006ce:	e006      	b.n	80006de <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006d0:	4905      	ldr	r1, [pc, #20]	; (80006e8 <RCC_APB2PeriphClockCmd+0x38>)
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <RCC_APB2PeriphClockCmd+0x38>)
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	43db      	mvns	r3, r3
 80006da:	4013      	ands	r3, r2
 80006dc:	618b      	str	r3, [r1, #24]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000

080006ec <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000706:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	881a      	ldrh	r2, [r3, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	885b      	ldrh	r3, [r3, #2]
 8000710:	4313      	orrs	r3, r2
 8000712:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000718:	4313      	orrs	r3, r2
 800071a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000720:	4313      	orrs	r3, r2
 8000722:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000728:	4313      	orrs	r3, r2
 800072a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000730:	4313      	orrs	r3, r2
 8000732:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000738:	4313      	orrs	r3, r2
 800073a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000740:	4313      	orrs	r3, r2
 8000742:	b29a      	uxth	r2, r3
 8000744:	89fb      	ldrh	r3, [r7, #14]
 8000746:	4313      	orrs	r3, r2
 8000748:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	89fa      	ldrh	r2, [r7, #14]
 800074e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	8b9b      	ldrh	r3, [r3, #28]
 8000754:	b29b      	uxth	r3, r3
 8000756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800075a:	b29a      	uxth	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	8a1a      	ldrh	r2, [r3, #16]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	821a      	strh	r2, [r3, #16]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	460b      	mov	r3, r1
 800077c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d008      	beq.n	8000796 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078e:	b29a      	uxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000794:	e007      	b.n	80007a6 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b29b      	uxth	r3, r3
 800079c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	801a      	strh	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	887a      	ldrh	r2, [r7, #2]
 80007c0:	819a      	strh	r2, [r3, #12]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	b29b      	uxth	r3, r3
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d008      	beq.n	8000808 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	889b      	ldrh	r3, [r3, #4]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000806:	e007      	b.n	8000818 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	889b      	ldrh	r3, [r3, #4]
 800080c:	b29b      	uxth	r3, r3
 800080e:	f023 0304 	bic.w	r3, r3, #4
 8000812:	b29a      	uxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	809a      	strh	r2, [r3, #4]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000822:	b480      	push	{r7}
 8000824:	b085      	sub	sp, #20
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	460b      	mov	r3, r1
 800082c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	891b      	ldrh	r3, [r3, #8]
 8000836:	b29a      	uxth	r2, r3
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	4013      	ands	r3, r2
 800083c:	b29b      	uxth	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e001      	b.n	800084c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 800085c:	f000 f9c6 	bl	8000bec <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fa2f 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8000866:	f248 00e7 	movw	r0, #32999	; 0x80e7
 800086a:	f000 fa2b 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 800086e:	f248 2008 	movw	r0, #33288	; 0x8208
 8000872:	f000 fa27 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8000876:	f24a 6040 	movw	r0, #42560	; 0xa640
 800087a:	f000 fa23 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 800087e:	f24c 6048 	movw	r0, #50760	; 0xc648
 8000882:	f000 fa1f 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8000886:	f249 40a0 	movw	r0, #38048	; 0x94a0
 800088a:	f000 fa1b 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 800088e:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8000892:	f000 fa17 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8000896:	f64c 2081 	movw	r0, #51841	; 0xca81
 800089a:	f000 fa13 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 800089e:	f64c 60d4 	movw	r0, #52948	; 0xced4
 80008a2:	f000 fa0f 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 80008a6:	f24c 4083 	movw	r0, #50307	; 0xc483
 80008aa:	f000 fa0b 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 80008ae:	f649 0050 	movw	r0, #38992	; 0x9850
 80008b2:	f000 fa07 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 80008b6:	f64c 4017 	movw	r0, #52247	; 0xcc17
 80008ba:	f000 fa03 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 80008be:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80008c2:	f000 f9ff 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 80008c6:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 80008ca:	f000 f9fb 	bl	8000cc4 <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 80008ce:	f24c 0040 	movw	r0, #49216	; 0xc040
 80008d2:	f000 f9f7 	bl	8000cc4 <Rfm12bWriteCmd>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}

080008da <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	460b      	mov	r3, r1
 80008e4:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 80008e6:	f240 320a 	movw	r2, #778	; 0x30a
 80008ea:	2100      	movs	r1, #0
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f001 ff35 	bl	800275c <memset>
	rfm12bObj->module_addr = module_addr;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	78fa      	ldrb	r2, [r7, #3]
 80008f6:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
	rfm12bObj->state = receive;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <rfSend>:




static void rfSend(uint8_t data)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
	uint16_t temp=0xB800;
 8000914:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8000918:	81fb      	strh	r3, [r7, #14]
	uint16_t status=0x0000;
 800091a:	2300      	movs	r3, #0
 800091c:	81bb      	strh	r3, [r7, #12]
	temp|=data;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	b29a      	uxth	r2, r3
 8000922:	89fb      	ldrh	r3, [r7, #14]
 8000924:	4313      	orrs	r3, r2
 8000926:	81fb      	strh	r3, [r7, #14]

	if (  !status )
 8000928:	89bb      	ldrh	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d10a      	bne.n	8000944 <rfSend+0x3a>
	{
		//status = RFM12B_RDSTATUS();
		status = Rfm12bWriteCmd(0x0000);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f9c8 	bl	8000cc4 <Rfm12bWriteCmd>
 8000934:	4603      	mov	r3, r0
 8000936:	81bb      	strh	r3, [r7, #12]
		status = status & 0x8000;
 8000938:	89bb      	ldrh	r3, [r7, #12]
 800093a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800093e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000942:	81bb      	strh	r3, [r7, #12]
	}

	Rfm12bWriteCmd(temp);
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f9bc 	bl	8000cc4 <Rfm12bWriteCmd>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <Rfm12bStartSending>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	460b      	mov	r3, r1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	4613      	mov	r3, r2
 8000968:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	22aa      	movs	r2, #170	; 0xaa
 800096e:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.data[1] = 0x2D;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	222d      	movs	r2, #45	; 0x2d
 8000974:	705a      	strb	r2, [r3, #1]
	rfm12b->txBuff.data[2] = 0xD4;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	22d4      	movs	r2, #212	; 0xd4
 800097a:	709a      	strb	r2, [r3, #2]
	rfm12b->txBuff.data[3] = dataNb;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	70da      	strb	r2, [r3, #3]
	rfm12b->txBuff.data[4] = toAddr;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	79ba      	ldrb	r2, [r7, #6]
 8000986:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[5] = rfm12b->module_addr;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f893 3308 	ldrb.w	r3, [r3, #776]	; 0x308
 800098e:	b2da      	uxtb	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	715a      	strb	r2, [r3, #5]
	memcpy((void*)&rfm12b->txBuff.data[HEADER_SIZE], data, dataNb);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3306      	adds	r3, #6
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fed2 	bl	8002746 <memcpy>
	rfm12b->txBuff.pos =0;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rfm12b->txBuff.dataNb = dataNb + RFM12_PREMBLE_LEN;
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	3305      	adds	r3, #5
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
    rfm12bSwitchTx();
 80009b6:	f000 f911 	bl	8000bdc <rfm12bSwitchTx>
    rfm12b->state = transmit;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
	rfSend(0xAA);
 80009c2:	20aa      	movs	r0, #170	; 0xaa
 80009c4:	f7ff ffa1 	bl	800090a <rfSend>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <Rfm12bTranssmitSeqByte>:



static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 80009d8:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 80009dc:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	b2d1      	uxtb	r1, r2
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	5c9b      	ldrb	r3, [r3, r2]
 80009f6:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 80009f8:	7b7b      	ldrb	r3, [r7, #13]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f95e 	bl	8000cc4 <Rfm12bWriteCmd>
}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <Rfm12bMantainSending>:

void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos < rfm12b->txBuff.dataNb){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d204      	bcs.n	8000a36 <Rfm12bMantainSending+0x26>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ffce 	bl	80009d0 <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 8000a34:	e005      	b.n	8000a42 <Rfm12bMantainSending+0x32>
		 rfm12b->state = receive;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
		 rfm12bSwitchRx();
 8000a3e:	f000 f8c5 	bl	8000bcc <rfm12bSwitchRx>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000a58:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fe7c 	bl	800275c <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[HEADER_SIZE], rfm12b->rxBuff.dataNb);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f503 7001 	add.w	r0, r3, #516	; 0x204
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f503 7184 	add.w	r1, r3, #264	; 0x108
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	f001 fe64 	bl	8002746 <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305
	rfm12b->rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS];
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
	rfm12b->rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f503 7381 	add.w	r3, r3, #258	; 0x102
 8000aae:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fe51 	bl	800275c <memset>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	rfm12bFifoReset();
 8000ad2:	f000 f861 	bl	8000b98 <rfm12bFifoReset>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 8000ae8:	f000 f862 	bl	8000bb0 <rfm12bReadFifo>
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	b2d1      	uxtb	r1, r2
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	f882 1202 	strb.w	r1, [r2, #514]	; 0x202
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	7bfa      	ldrb	r2, [r7, #15]
 8000b10:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
		if (rfm12b->rxBuff.pos == rfm12b->rxBuff.dataNb){
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d10b      	bne.n	8000b4e <Rfm12bMantainreceiving+0x6e>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff87 	bl	8000a4a <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ffc0 	bl	8000ac2 <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <Rfm12bMantainreceiving+0x78>)
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <Rfm12bMantainreceiving+0x78>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000b4c:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40011000 	.word	0x40011000

08000b5c <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 f8ad 	bl	8000cc4 <Rfm12bWriteCmd>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 8000b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da0c      	bge.n	8000b90 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3309 	ldrb.w	r3, [r3, #777]	; 0x309
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d103      	bne.n	8000b8a <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff44 	bl	8000a10 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8000b88:	e002      	b.n	8000b90 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa8 	bl	8000ae0 <Rfm12bMantainreceiving>
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8000b9c:	f64c 2081 	movw	r0, #51841	; 0xca81
 8000ba0:	f000 f890 	bl	8000cc4 <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 8000ba4:	f64c 2083 	movw	r0, #51843	; 0xca83
 8000ba8:	f000 f88c 	bl	8000cc4 <Rfm12bWriteCmd>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 8000bb6:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8000bba:	f000 f883 	bl	8000cc4 <Rfm12bWriteCmd>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 8000bd0:	f248 2099 	movw	r0, #33433	; 0x8299
 8000bd4:	f000 f876 	bl	8000cc4 <Rfm12bWriteCmd>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 8000be0:	f248 2039 	movw	r0, #33337	; 0x8239
 8000be4:	f000 f86e 	bl	8000cc4 <Rfm12bWriteCmd>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bf8:	f7ff fd5a 	bl	80006b0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f7ff fd56 	bl	80006b0 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000c04:	2101      	movs	r1, #1
 8000c06:	2008      	movs	r0, #8
 8000c08:	f7ff fd52 	bl	80006b0 <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000c0c:	23e0      	movs	r3, #224	; 0xe0
 8000c0e:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000c10:	2318      	movs	r3, #24
 8000c12:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000c14:	2301      	movs	r3, #1
 8000c16:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4825      	ldr	r0, [pc, #148]	; (8000cb4 <Rfm12bSpiInit+0xc8>)
 8000c20:	f7ff fc6e 	bl	8000500 <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4619      	mov	r1, r3
 8000c36:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <Rfm12bSpiInit+0xcc>)
 8000c38:	f7ff fc62 	bl	8000500 <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8000c40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c44:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 8000c46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c4a:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8000c50:	2300      	movs	r3, #0
 8000c52:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8000c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c58:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 8000c5a:	2330      	movs	r3, #48	; 0x30
 8000c5c:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 8000c66:	2101      	movs	r1, #1
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <Rfm12bSpiInit+0xd0>)
 8000c6a:	f7ff fdbb 	bl	80007e4 <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <Rfm12bSpiInit+0xd0>)
 8000c76:	f7ff fd39 	bl	80006ec <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <Rfm12bSpiInit+0xd0>)
 8000c7e:	f7ff fd78 	bl	8000772 <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <Rfm12bSpiInit+0xd4>)
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <Rfm12bSpiInit+0xd4>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8000c92:	2302      	movs	r3, #2
 8000c94:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8000c96:	2302      	movs	r3, #2
 8000c98:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <Rfm12bSpiInit+0xcc>)
 8000ca0:	f7ff fc2e 	bl	8000500 <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <Rfm12bSpiInit+0xcc>)
 8000ca8:	f7ff fce6 	bl	8000678 <GPIO_SetBits>
}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 8000cce:	2102      	movs	r1, #2
 8000cd0:	4812      	ldr	r0, [pc, #72]	; (8000d1c <Rfm12bWriteCmd+0x58>)
 8000cd2:	f7ff fcdf 	bl	8000694 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8000cd6:	bf00      	nop
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4811      	ldr	r0, [pc, #68]	; (8000d20 <Rfm12bWriteCmd+0x5c>)
 8000cdc:	f7ff fda1 	bl	8000822 <SPI_I2S_GetFlagStatus>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f8      	beq.n	8000cd8 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <Rfm12bWriteCmd+0x5c>)
 8000cec:	f7ff fd60 	bl	80007b0 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8000cf0:	bf00      	nop
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <Rfm12bWriteCmd+0x5c>)
 8000cf6:	f7ff fd94 	bl	8000822 <SPI_I2S_GetFlagStatus>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f8      	beq.n	8000cf2 <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <Rfm12bWriteCmd+0x5c>)
 8000d02:	f7ff fd63 	bl	80007cc <SPI_I2S_ReceiveData>
 8000d06:	4603      	mov	r3, r0
 8000d08:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <Rfm12bWriteCmd+0x58>)
 8000d0e:	f7ff fcb3 	bl	8000678 <GPIO_SetBits>

	return recData;
 8000d12:	89fb      	ldrh	r3, [r7, #14]

}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010c00 	.word	0x40010c00
 8000d20:	40013000 	.word	0x40013000

08000d24 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <NVIC_EnableIRQ+0x2c>)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	095b      	lsrs	r3, r3, #5
 8000d36:	79fa      	ldrb	r2, [r7, #7]
 8000d38:	f002 021f 	and.w	r2, r2, #31
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <EnableGpioClk+0x68>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d106      	bne.n	8000d72 <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8000d70:	e01f      	b.n	8000db2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <EnableGpioClk+0x70>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d106      	bne.n	8000d88 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6193      	str	r3, [r2, #24]
	 		 }
 8000d86:	e014      	b.n	8000db2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <EnableGpioClk+0x74>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d106      	bne.n	8000d9e <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6193      	str	r3, [r2, #24]
	 		 }
 8000d9c:	e009      	b.n	8000db2 <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <EnableGpioClk+0x78>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d105      	bne.n	8000db2 <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <EnableGpioClk+0x6c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6193      	str	r3, [r2, #24]
	 		 }
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40010800 	.word	0x40010800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010c00 	.word	0x40010c00
 8000dc8:	40011000 	.word	0x40011000
 8000dcc:	40011400 	.word	0x40011400

08000dd0 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b07      	cmp	r3, #7
 8000de0:	d81d      	bhi.n	8000e1e <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	2103      	movs	r1, #3
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	43d2      	mvns	r2, r2
 8000df0:	401a      	ands	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	78fa      	ldrb	r2, [r7, #3]
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	43d2      	mvns	r2, r2
 8000e04:	401a      	ands	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	2101      	movs	r1, #1
 8000e12:	fa01 f202 	lsl.w	r2, r1, r2
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8000e1c:	e023      	b.n	8000e66 <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	3a08      	subs	r2, #8
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	2103      	movs	r1, #3
 8000e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2e:	43d2      	mvns	r2, r2
 8000e30:	401a      	ands	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	3a08      	subs	r2, #8
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	2103      	movs	r1, #3
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	43d2      	mvns	r2, r2
 8000e48:	401a      	ands	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	3a08      	subs	r2, #8
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	3202      	adds	r2, #2
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	605a      	str	r2, [r3, #4]
	 		 }
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b07      	cmp	r3, #7
 8000e80:	d82b      	bhi.n	8000eda <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e90:	43d2      	mvns	r2, r2
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	78fa      	ldrb	r2, [r7, #3]
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	3202      	adds	r2, #2
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	43d2      	mvns	r2, r2
 8000eaa:	401a      	ands	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	78fa      	ldrb	r2, [r7, #3]
 8000eb6:	0092      	lsls	r2, r2, #2
 8000eb8:	3202      	adds	r2, #2
 8000eba:	2102      	movs	r1, #2
 8000ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec0:	431a      	orrs	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	78fa      	ldrb	r2, [r7, #3]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 8000ed8:	e02d      	b.n	8000f36 <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	3a08      	subs	r2, #8
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	43d2      	mvns	r2, r2
 8000eec:	401a      	ands	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	3a08      	subs	r2, #8
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	3202      	adds	r2, #2
 8000efe:	2103      	movs	r1, #3
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	43d2      	mvns	r2, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	78fa      	ldrb	r2, [r7, #3]
 8000f12:	3a08      	subs	r2, #8
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	3202      	adds	r2, #2
 8000f18:	2102      	movs	r1, #2
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	78fa      	ldrb	r2, [r7, #3]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60da      	str	r2, [r3, #12]
	 		 }
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d92f      	bls.n	8000fb2 <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	3a08      	subs	r2, #8
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	43d2      	mvns	r2, r2
 8000f64:	401a      	ands	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	3a08      	subs	r2, #8
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	3202      	adds	r2, #2
 8000f76:	2103      	movs	r1, #3
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	3a08      	subs	r2, #8
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	3a08      	subs	r2, #8
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	3202      	adds	r2, #2
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	70fb      	strb	r3, [r7, #3]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70bb      	strb	r3, [r7, #2]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000fd6:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <EnableExti+0x84>)
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <EnableExti+0x84>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8000fe2:	4a18      	ldr	r2, [pc, #96]	; (8001044 <EnableExti+0x88>)
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <EnableExti+0x88>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 8000fee:	4916      	ldr	r1, [pc, #88]	; (8001048 <EnableExti+0x8c>)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <EnableExti+0x8c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8001000:	78bb      	ldrb	r3, [r7, #2]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 8001006:	4910      	ldr	r1, [pc, #64]	; (8001048 <EnableExti+0x8c>)
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <EnableExti+0x8c>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	2001      	movs	r0, #1
 8001010:	fa00 f202 	lsl.w	r2, r0, r2
 8001014:	4313      	orrs	r3, r2
 8001016:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d008      	beq.n	8001030 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 800101e:	490a      	ldr	r1, [pc, #40]	; (8001048 <EnableExti+0x8c>)
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <EnableExti+0x8c>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	2001      	movs	r0, #1
 8001028:	fa00 f202 	lsl.w	r2, r0, r2
 800102c:	4313      	orrs	r3, r2
 800102e:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001030:	2017      	movs	r0, #23
 8001032:	f7ff fe77 	bl	8000d24 <NVIC_EnableIRQ>


	 		 }
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	40010400 	.word	0x40010400

0800104c <_delay_ms>:




	 		 void _delay_ms(int n) {
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	 		 	int i, j;
	 		 	j= n*1000;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	60bb      	str	r3, [r7, #8]
	 		 	while(j--) {
 8001060:	e007      	b.n	8001072 <_delay_ms+0x26>
	 		 		i=2;
 8001062:	2302      	movs	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
	 		 		while(i--);
 8001066:	bf00      	nop
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	1e5a      	subs	r2, r3, #1
 800106c:	60fa      	str	r2, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1fa      	bne.n	8001068 <_delay_ms+0x1c>
	 		 	while(j--) {
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1e5a      	subs	r2, r3, #1
 8001076:	60ba      	str	r2, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f2      	bne.n	8001062 <_delay_ms+0x16>
	 		 	}
	 		 }
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
	...

08001088 <NVIC_EnableIRQ>:
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <NVIC_EnableIRQ+0x2c>)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	f002 021f 	and.w	r2, r2, #31
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 80010bc:	2020      	movs	r0, #32
 80010be:	f7ff fa11 	bl	80004e4 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <EXTI9_5_IRQHandler+0x14>)
 80010c4:	f7ff fd4a 	bl	8000b5c <Rfm12bIrqCallback>

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000a8 	.word	0x200000a8

080010d0 <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	return 1;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	6978      	ldr	r0, [r7, #20]
 8001106:	f7ff fc25 	bl	8000954 <Rfm12bStartSending>
	return buffLen;
 800110a:	887b      	ldrh	r3, [r7, #2]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 800112c:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b00      	cmp	r3, #0
 8001132:	dd0d      	ble.n	8001150 <_Z10broker_recPvP11sockaddr_inPht+0x3c>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	4293      	cmp	r3, r2
 800113a:	bfa8      	it	ge
 800113c:	4613      	movge	r3, r2
 800113e:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001146:	7dfa      	ldrb	r2, [r7, #23]
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 fafb 	bl	8002746 <memcpy>
	}
	obj->completedRxBuff.dataNb = 0;
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305
	return byteNb;
 8001158:	7dfb      	ldrb	r3, [r7, #23]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
	return 1;
 800116c:	2301      	movs	r3, #1
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <main>:




int main(){
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	f5ad 5d88 	sub.w	sp, sp, #4352	; 0x1100
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0


 	EnableGpioClk(LOG_UART_PORT);
 8001182:	485a      	ldr	r0, [pc, #360]	; (80012ec <main+0x174>)
 8001184:	f7ff fde6 	bl	8000d54 <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8001188:	2109      	movs	r1, #9
 800118a:	4858      	ldr	r0, [pc, #352]	; (80012ec <main+0x174>)
 800118c:	f7ff fed8 	bl	8000f40 <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 8001190:	210a      	movs	r1, #10
 8001192:	4856      	ldr	r0, [pc, #344]	; (80012ec <main+0x174>)
 8001194:	f7ff fe1c 	bl	8000dd0 <SetGpioAsInFloating>
 	EnableUart(USART1);
 8001198:	4855      	ldr	r0, [pc, #340]	; (80012f0 <main+0x178>)
 800119a:	f000 f8bb 	bl	8001314 <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800119e:	2101      	movs	r1, #1
 80011a0:	2010      	movs	r0, #16
 80011a2:	f7ff fa85 	bl	80006b0 <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 80011a6:	2310      	movs	r3, #16
 80011a8:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011ac:	f102 0203 	add.w	r2, r2, #3
 80011b0:	7013      	strb	r3, [r2, #0]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011b8:	f102 0202 	add.w	r2, r2, #2
 80011bc:	7013      	strb	r3, [r2, #0]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011c6:	8013      	strh	r3, [r2, #0]
 	GPIO_Init(GPIOC, &PORT);
 80011c8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80011cc:	4619      	mov	r1, r3
 80011ce:	4849      	ldr	r0, [pc, #292]	; (80012f4 <main+0x17c>)
 80011d0:	f7ff f996 	bl	8000500 <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 80011d4:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <main+0x17c>)
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <main+0x17c>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011de:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 80011e0:	f7ff fb3a 	bl	8000858 <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 80011e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011e8:	f7ff ff30 	bl	800104c <_delay_ms>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fd69 	bl	8000cc4 <Rfm12bWriteCmd>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011f8:	f102 0207 	add.w	r2, r2, #7
 80011fc:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80011fe:	2101      	movs	r1, #1
 8001200:	2008      	movs	r0, #8
 8001202:	f7ff fa55 	bl	80006b0 <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 8001206:	2301      	movs	r3, #1
 8001208:	2200      	movs	r2, #0
 800120a:	2105      	movs	r1, #5
 800120c:	483a      	ldr	r0, [pc, #232]	; (80012f8 <main+0x180>)
 800120e:	f7ff fed5 	bl	8000fbc <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 8001212:	2105      	movs	r1, #5
 8001214:	4838      	ldr	r0, [pc, #224]	; (80012f8 <main+0x180>)
 8001216:	f7ff fe2b 	bl	8000e70 <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 800121a:	210b      	movs	r1, #11
 800121c:	4836      	ldr	r0, [pc, #216]	; (80012f8 <main+0x180>)
 800121e:	f7ff fe27 	bl	8000e70 <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 8001222:	f7ff fcb9 	bl	8000b98 <rfm12bFifoReset>
 	rfm12bSwitchRx();
 8001226:	f7ff fcd1 	bl	8000bcc <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 800122a:	2017      	movs	r0, #23
 800122c:	f7ff ff2c 	bl	8001088 <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 8001230:	2101      	movs	r1, #1
 8001232:	4832      	ldr	r0, [pc, #200]	; (80012fc <main+0x184>)
 8001234:	f7ff fb51 	bl	80008da <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 8001238:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800123c:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <main+0x184>)
 800123e:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 8001240:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001244:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <main+0x188>)
 8001246:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 800124a:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 800124e:	4a2d      	ldr	r2, [pc, #180]	; (8001304 <main+0x18c>)
 8001250:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 8001254:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <main+0x190>)
 800125a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 800125e:	f607 73e8 	addw	r3, r7, #4072	; 0xfe8
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <main+0x194>)
 8001264:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 8001268:	f607 72e8 	addw	r2, r7, #4072	; 0xfe8
 800126c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f978 	bl	8001568 <broker_init_by_given_net>
	uint8_t frameBuff[MAX_FRAME_SIZE];



	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8001278:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	3b04      	subs	r3, #4
 8001282:	f507 7092 	add.w	r0, r7, #292	; 0x124
 8001286:	4619      	mov	r1, r3
 8001288:	f000 f9bd 	bl	8001606 <broker_receive>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <main+0x12e>
	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 8001292:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129a:	3b04      	subs	r3, #4
 800129c:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80012a0:	4619      	mov	r1, r3
 80012a2:	f000 f9c9 	bl	8001638 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 80012a6:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <main+0x180>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0dd      	beq.n	8001278 <main+0x100>
	 			  uint8_t buff[] = "helloWorld1helloWorld2helloWorld3";
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	3b08      	subs	r3, #8
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <main+0x198>)
 80012c4:	461c      	mov	r4, r3
 80012c6:	4615      	mov	r5, r2
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	8023      	strh	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 80012d4:	f107 0108 	add.w	r1, r7, #8
 80012d8:	3908      	subs	r1, #8
 80012da:	2302      	movs	r3, #2
 80012dc:	221e      	movs	r2, #30
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <main+0x184>)
 80012e0:	f7ff fb38 	bl	8000954 <Rfm12bStartSending>
	 			 _delay_ms(250);
 80012e4:	20fa      	movs	r0, #250	; 0xfa
 80012e6:	f7ff feb1 	bl	800104c <_delay_ms>


	 		  }


	 	}
 80012ea:	e7c5      	b.n	8001278 <main+0x100>
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	200000a8 	.word	0x200000a8
 8001300:	080010d1 	.word	0x080010d1
 8001304:	080010e7 	.word	0x080010e7
 8001308:	08001115 	.word	0x08001115
 800130c:	08001163 	.word	0x08001163
 8001310:	080027d4 	.word	0x080027d4

08001314 <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800131c:	4a13      	ldr	r2, [pc, #76]	; (800136c <EnableUart+0x58>)
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <EnableUart+0x58>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800132e:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	899b      	ldrh	r3, [r3, #12]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	899b      	ldrh	r3, [r3, #12]
 8001344:	b29b      	uxth	r3, r3
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	899b      	ldrh	r3, [r3, #12]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	819a      	strh	r2, [r3, #12]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001374:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001376:	e003      	b.n	8001380 <LoopCopyDataInit>

08001378 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800137a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800137c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800137e:	3104      	adds	r1, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001384:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001386:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001388:	d3f6      	bcc.n	8001378 <CopyDataInit>
	ldr	r2, =_sbss
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800138c:	e002      	b.n	8001394 <LoopFillZerobss>

0800138e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800138e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001390:	f842 3b04 	str.w	r3, [r2], #4

08001394 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001396:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001398:	d3f9      	bcc.n	800138e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139a:	f000 f82b 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139e:	f001 f99f 	bl	80026e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a2:	f7ff fee9 	bl	8001178 <main>
	bx	lr
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013a8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80013ac:	08002800 	.word	0x08002800
	ldr	r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013b4:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80013b8:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80013bc:	200003b4 	.word	0x200003b4

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>

080013c2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
	...

080013f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <SystemInit+0x5c>)
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <SystemInit+0x5c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001404:	4912      	ldr	r1, [pc, #72]	; (8001450 <SystemInit+0x5c>)
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <SystemInit+0x5c>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <SystemInit+0x60>)
 800140c:	4013      	ands	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <SystemInit+0x5c>)
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <SystemInit+0x5c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <SystemInit+0x5c>)
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <SystemInit+0x5c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800142c:	4a08      	ldr	r2, [pc, #32]	; (8001450 <SystemInit+0x5c>)
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <SystemInit+0x5c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001436:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SystemInit+0x5c>)
 800143a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800143e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001440:	f000 f80c 	bl	800145c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SystemInit+0x64>)
 8001446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144a:	609a      	str	r2, [r3, #8]
#endif 
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000
 8001454:	f8ff0000 	.word	0xf8ff0000
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001460:	f000 f802 	bl	8001468 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001476:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <SetSysClockTo72+0xf8>)
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <SetSysClockTo72+0xf8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <SetSysClockTo72+0xf8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3301      	adds	r3, #1
 8001490:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <SetSysClockTo72+0x38>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800149e:	d1f0      	bne.n	8001482 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <SetSysClockTo72+0xf8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80014ac:	2301      	movs	r3, #1
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	e001      	b.n	80014b6 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d14b      	bne.n	8001554 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <SetSysClockTo72+0xfc>)
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <SetSysClockTo72+0xfc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <SetSysClockTo72+0xfc>)
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <SetSysClockTo72+0xfc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80014d4:	4a23      	ldr	r2, [pc, #140]	; (8001564 <SetSysClockTo72+0xfc>)
 80014d6:	4b23      	ldr	r3, [pc, #140]	; (8001564 <SetSysClockTo72+0xfc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80014e0:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <SetSysClockTo72+0xf8>)
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <SetSysClockTo72+0xf8>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <SetSysClockTo72+0xf8>)
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <SetSysClockTo72+0xf8>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <SetSysClockTo72+0xf8>)
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <SetSysClockTo72+0xf8>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fa:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80014fc:	4a18      	ldr	r2, [pc, #96]	; (8001560 <SetSysClockTo72+0xf8>)
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <SetSysClockTo72+0xf8>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001506:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001508:	4a15      	ldr	r2, [pc, #84]	; (8001560 <SetSysClockTo72+0xf8>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <SetSysClockTo72+0xf8>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001512:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001514:	4a12      	ldr	r2, [pc, #72]	; (8001560 <SetSysClockTo72+0xf8>)
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <SetSysClockTo72+0xf8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001520:	bf00      	nop
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <SetSysClockTo72+0xf8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f9      	beq.n	8001522 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <SetSysClockTo72+0xf8>)
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <SetSysClockTo72+0xf8>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 0303 	bic.w	r3, r3, #3
 8001538:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <SetSysClockTo72+0xf8>)
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <SetSysClockTo72+0xf8>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001546:	bf00      	nop
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SetSysClockTo72+0xf8>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d1f9      	bne.n	8001548 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	40022000 	.word	0x40022000

08001568 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 8001572:	f640 62c4 	movw	r2, #3780	; 0xec4
 8001576:	2100      	movs	r1, #0
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f001 f8ef 	bl	800275c <memset>
	broker->net = broker_net;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2208      	movs	r2, #8
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 f8d9 	bl	800275c <memset>
	const uint8_t max_nb_bytes = 4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 80015ae:	7c3b      	ldrb	r3, [r7, #16]
 80015b0:	461a      	mov	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	7d7a      	ldrb	r2, [r7, #21]
 80015be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015c2:	7df9      	ldrb	r1, [r7, #23]
 80015c4:	fb01 f202 	mul.w	r2, r1, r2
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 80015d2:	7c3b      	ldrb	r3, [r7, #16]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 80015da:	7c3b      	ldrb	r3, [r7, #16]
 80015dc:	7dba      	ldrb	r2, [r7, #22]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d004      	beq.n	80015ec <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 80015e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dbe1      	blt.n	80015ae <decode_pck_len+0x20>
 80015ea:	e000      	b.n	80015ee <decode_pck_len+0x60>
			break;
 80015ec:	bf00      	nop
	return rem_length;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <broker_receive>:


bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8001606:	b590      	push	{r4, r7, lr}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001618:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	23f0      	movs	r3, #240	; 0xf0
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	47a0      	blx	r4
}
 800162c:	bf00      	nop
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
	...

08001638 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 800163e:	af00      	add	r7, sp, #0
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	6018      	str	r0, [r3, #0]
 8001646:	f107 0308 	add.w	r3, r7, #8
 800164a:	6019      	str	r1, [r3, #0]
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f887 3276 	strb.w	r3, [r7, #630]	; 0x276
	switch (pckt_type) {
 800165e:	f897 3276 	ldrb.w	r3, [r7, #630]	; 0x276
 8001662:	3b01      	subs	r3, #1
 8001664:	2b0b      	cmp	r3, #11
 8001666:	f200 8112 	bhi.w	800188e <broker_packets_dispatcher+0x256>
 800166a:	a201      	add	r2, pc, #4	; (adr r2, 8001670 <broker_packets_dispatcher+0x38>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	080016a1 	.word	0x080016a1
 8001674:	0800188f 	.word	0x0800188f
 8001678:	08001779 	.word	0x08001779
 800167c:	0800188f 	.word	0x0800188f
 8001680:	0800188f 	.word	0x0800188f
 8001684:	0800188f 	.word	0x0800188f
 8001688:	0800188f 	.word	0x0800188f
 800168c:	080017db 	.word	0x080017db
 8001690:	0800188f 	.word	0x0800188f
 8001694:	08001839 	.word	0x08001839
 8001698:	0800188f 	.word	0x0800188f
 800169c:	08001879 	.word	0x08001879
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 80016a0:	f107 0210 	add.w	r2, r7, #16
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	4611      	mov	r1, r2
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f000 f9e9 	bl	8001a82 <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 80016b0:	f107 0210 	add.w	r2, r7, #16
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4611      	mov	r1, r2
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f000 fbc8 	bl	8001e50 <broker_validate_conn>
		bool sesion_present = false;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
		if (was_clean_session_requested(&conn_pck)
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fbec 	bl	8001ea8 <was_clean_session_requested>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d017      	beq.n	8001706 <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	6a1a      	ldr	r2, [r3, #32]
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4611      	mov	r1, r2
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	f000 f932 	bl	800194c <is_client_exist>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	f000 f959 	bl	80019b2 <broker_remove_client>
			sesion_present = true;
 8001700:	2301      	movs	r3, #1
 8001702:	f887 3277 	strb.w	r3, [r7, #631]	; 0x277
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 8001706:	f107 0210 	add.w	r2, r7, #16
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4611      	mov	r1, r2
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	f000 fb9d 	bl	8001e50 <broker_validate_conn>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 3275 	strb.w	r3, [r7, #629]	; 0x275
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	f107 0110 	add.w	r1, r7, #16
 8001722:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f000 fb0e 	bl	8001d48 <broker_create_new_client>
		add_client(broker, &new_client);
 800172c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4611      	mov	r1, r2
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f000 f97d 	bl	8001a36 <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 800173c:	f897 2275 	ldrb.w	r2, [r7, #629]	; 0x275
 8001740:	f897 1277 	ldrb.w	r1, [r7, #631]	; 0x277
 8001744:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fadc 	bl	8001d06 <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001758:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800176c:	1d39      	adds	r1, r7, #4
 800176e:	2304      	movs	r3, #4
 8001770:	6809      	ldr	r1, [r1, #0]
 8001772:	47a0      	blx	r4
		break;
 8001774:	bf00      	nop
 8001776:	e08a      	b.n	800188e <broker_packets_dispatcher+0x256>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 8001778:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4611      	mov	r1, r2
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	f000 fba4 	bl	8001ed0 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 8001788:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4611      	mov	r1, r2
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	f000 fc08 	bl	8001fa8 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8001798:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fc58 	bl	800205a <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 80017aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	dd68      	ble.n	800188c <broker_packets_dispatcher+0x254>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80017c4:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 80017c8:	f507 7212 	add.w	r2, r7, #584	; 0x248
 80017cc:	1d39      	adds	r1, r7, #4
 80017ce:	2304      	movs	r3, #4
 80017d0:	6809      	ldr	r1, [r1, #0]
 80017d2:	2000      	movs	r0, #0
 80017d4:	47a0      	blx	r4
		}
		break;
 80017d6:	bf00      	nop
 80017d8:	e058      	b.n	800188c <broker_packets_dispatcher+0x254>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 80017da:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4611      	mov	r1, r2
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	f000 fc4c 	bl	8002082 <broker_decode_subscribe>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 3274 	strb.w	r3, [r7, #628]	; 0x274
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 80017f0:	1d3a      	adds	r2, r7, #4
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	6811      	ldr	r1, [r2, #0]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f000 f871 	bl	80018e0 <broker_get_client_by_socket>
 80017fe:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
		uint8_t sub_result[MAX_SUBS_TOPIC];
		add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 8001802:	f507 7010 	add.w	r0, r7, #576	; 0x240
 8001806:	f897 2274 	ldrb.w	r2, [r7, #628]	; 0x274
 800180a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800180e:	f103 010c 	add.w	r1, r3, #12
 8001812:	4603      	mov	r3, r0
 8001814:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8001818:	f000 fd95 	bl	8002346 <add_subscriptions_from_list>
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 800181c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	8819      	ldrh	r1, [r3, #0]
 8001824:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001828:	f897 2274 	ldrb.w	r2, [r7, #628]	; 0x274
 800182c:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8001830:	f000 fe15 	bl	800245e <encode_subscribe_ack>
		break;
 8001834:	bf00      	nop
 8001836:	e02a      	b.n	800188e <broker_packets_dispatcher+0x256>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 8001838:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4611      	mov	r1, r2
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	f000 fe28 	bl	8002498 <broker_decode_unsubscribe>
 8001848:	4603      	mov	r3, r0
 800184a:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 800184e:	1d3a      	adds	r2, r7, #4
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	f000 f842 	bl	80018e0 <broker_get_client_by_socket>
 800185c:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 8001860:	f897 226f 	ldrb.w	r2, [r7, #623]	; 0x26f
 8001864:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001868:	330c      	adds	r3, #12
 800186a:	4619      	mov	r1, r3
 800186c:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8001870:	f000 fefb 	bl	800266a <delete_listed_subscriptions>
		break;
 8001874:	bf00      	nop
 8001876:	e00a      	b.n	800188e <broker_packets_dispatcher+0x256>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 8001878:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4611      	mov	r1, r2
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f000 ff13 	bl	80026ae <broker_decode_ping_req>
		break;
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <broker_packets_dispatcher+0x256>
		break;
 800188c:	bf00      	nop
	}
	}
}
 800188e:	bf00      	nop
 8001890:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}

08001898 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e013      	b.n	80018d0 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	3310      	adds	r3, #16
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fc48 	bl	8000150 <strcmp>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <broker_get_client_pos_by_id+0x32>
			return i;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	e006      	b.n	80018d8 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	3301      	adds	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b07      	cmp	r3, #7
 80018d4:	d9e8      	bls.n	80018a8 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 80018d6:	23ff      	movs	r3, #255	; 0xff
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e025      	b.n	800193c <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d016      	beq.n	8001936 <broker_get_client_by_socket+0x56>
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	2210      	movs	r2, #16
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 ff04 	bl	8002728 <memcmp>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d107      	bne.n	8001936 <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	e006      	b.n	8001944 <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9d6      	bls.n	80018f0 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff9d 	bl	8001898 <broker_get_client_pos_by_id>
 800195e:	4603      	mov	r3, r0
 8001960:	2bff      	cmp	r3, #255	; 0xff
 8001962:	d001      	beq.n	8001968 <is_client_exist+0x1c>
		return true;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <is_client_exist+0x1e>
	}
	return false;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e00f      	b.n	80019a0 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3310      	adds	r3, #16
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <can_broker_accept_next_client+0x28>
			return true;
 8001996:	2301      	movs	r3, #1
 8001998:	e006      	b.n	80019a8 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3301      	adds	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	d9ec      	bls.n	8001980 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 80019bc:	6839      	ldr	r1, [r7, #0]
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff6a 	bl	8001898 <broker_get_client_pos_by_id>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d00e      	beq.n	80019ec <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 feba 	bl	800275c <memset>
		return true;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <broker_remove_client+0x3c>
	}
	return false;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e00f      	b.n	8001a24 <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	3310      	adds	r3, #16
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <broker_first_free_pos_for_client+0x28>
			return i;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	e006      	b.n	8001a2c <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	3301      	adds	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	2b07      	cmp	r3, #7
 8001a28:	d9ec      	bls.n	8001a04 <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 8001a2a:	23ff      	movs	r3, #255	; 0xff
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffd8 	bl	80019f6 <broker_first_free_pos_for_client>
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fe71 	bl	8002746 <memcpy>
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	return true;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 8001a90:	7dfb      	ldrb	r3, [r7, #23]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	441a      	add	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	601a      	str	r2, [r3, #0]
	pos ++;
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	441a      	add	r2, r3
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fd6e 	bl	800158e <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001ab8:	7c3a      	ldrb	r2, [r7, #16]
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	4413      	add	r3, r2
 8001abe:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	441a      	add	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	6892      	ldr	r2, [r2, #8]
 8001ad2:	8812      	ldrh	r2, [r2, #0]
 8001ad4:	0a12      	lsrs	r2, r2, #8
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	b211      	sxth	r1, r2
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	6892      	ldr	r2, [r2, #8]
 8001ade:	8812      	ldrh	r2, [r2, #0]
 8001ae0:	0212      	lsls	r2, r2, #8
 8001ae2:	b212      	sxth	r2, r2
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	b212      	sxth	r2, r2
 8001ae8:	b292      	uxth	r2, r2
 8001aea:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	3302      	adds	r3, #2
 8001af0:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	441a      	add	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	4413      	add	r3, r2
 8001b08:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	441a      	add	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	611a      	str	r2, [r3, #16]
	pos += 1;
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	3301      	adds	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	441a      	add	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	615a      	str	r2, [r3, #20]
	pos += 1;
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	3301      	adds	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	441a      	add	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	6992      	ldr	r2, [r2, #24]
 8001b3c:	8812      	ldrh	r2, [r2, #0]
 8001b3e:	0a12      	lsrs	r2, r2, #8
 8001b40:	b292      	uxth	r2, r2
 8001b42:	b211      	sxth	r1, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	6992      	ldr	r2, [r2, #24]
 8001b48:	8812      	ldrh	r2, [r2, #0]
 8001b4a:	0212      	lsls	r2, r2, #8
 8001b4c:	b212      	sxth	r2, r2
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	b212      	sxth	r2, r2
 8001b52:	b292      	uxth	r2, r2
 8001b54:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	441a      	add	r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	69d2      	ldr	r2, [r2, #28]
 8001b6e:	8812      	ldrh	r2, [r2, #0]
 8001b70:	0a12      	lsrs	r2, r2, #8
 8001b72:	b292      	uxth	r2, r2
 8001b74:	b211      	sxth	r1, r2
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	69d2      	ldr	r2, [r2, #28]
 8001b7a:	8812      	ldrh	r2, [r2, #0]
 8001b7c:	0212      	lsls	r2, r2, #8
 8001b7e:	b212      	sxth	r2, r2
 8001b80:	430a      	orrs	r2, r1
 8001b82:	b212      	sxth	r2, r2
 8001b84:	b292      	uxth	r2, r2
 8001b86:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	441a      	add	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d049      	beq.n	8001c4a <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	441a      	add	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc8:	8812      	ldrh	r2, [r2, #0]
 8001bca:	0a12      	lsrs	r2, r2, #8
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	b211      	sxth	r1, r2
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd4:	8812      	ldrh	r2, [r2, #0]
 8001bd6:	0212      	lsls	r2, r2, #8
 8001bd8:	b212      	sxth	r2, r2
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	b212      	sxth	r2, r2
 8001bde:	b292      	uxth	r2, r2
 8001be0:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	3302      	adds	r3, #2
 8001be6:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	441a      	add	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8001c00:	7dfb      	ldrb	r3, [r7, #23]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	441a      	add	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c12:	8812      	ldrh	r2, [r2, #0]
 8001c14:	0a12      	lsrs	r2, r2, #8
 8001c16:	b292      	uxth	r2, r2
 8001c18:	b211      	sxth	r1, r2
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c1e:	8812      	ldrh	r2, [r2, #0]
 8001c20:	0212      	lsls	r2, r2, #8
 8001c22:	b212      	sxth	r2, r2
 8001c24:	430a      	orrs	r2, r1
 8001c26:	b212      	sxth	r2, r2
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	441a      	add	r2, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	4413      	add	r3, r2
 8001c48:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d024      	beq.n	8001ca4 <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	441a      	add	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6c:	8812      	ldrh	r2, [r2, #0]
 8001c6e:	0a12      	lsrs	r2, r2, #8
 8001c70:	b292      	uxth	r2, r2
 8001c72:	b211      	sxth	r1, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c78:	8812      	ldrh	r2, [r2, #0]
 8001c7a:	0212      	lsls	r2, r2, #8
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	b212      	sxth	r2, r2
 8001c82:	b292      	uxth	r2, r2
 8001c84:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	3302      	adds	r3, #2
 8001c8a:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	441a      	add	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d024      	beq.n	8001cfe <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	441a      	add	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cc6:	8812      	ldrh	r2, [r2, #0]
 8001cc8:	0a12      	lsrs	r2, r2, #8
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	b211      	sxth	r1, r2
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	0212      	lsls	r2, r2, #8
 8001cd6:	b212      	sxth	r2, r2
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	b212      	sxth	r2, r2
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001ce0:	7dfb      	ldrb	r3, [r7, #23]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	441a      	add	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	75fb      	strb	r3, [r7, #23]
	}
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
 8001d12:	4613      	mov	r3, r2
 8001d14:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8001d16:	2204      	movs	r2, #4
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fd1e 	bl	800275c <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	7893      	ldrb	r3, [r2, #2]
 8001d30:	78f9      	ldrb	r1, [r7, #3]
 8001d32:	f361 0300 	bfi	r3, r1, #0, #1
 8001d36:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	78ba      	ldrb	r2, [r7, #2]
 8001d3c:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 8001d54:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001d58:	2100      	movs	r1, #0
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fcfe 	bl	800275c <memset>
	memcpy(&new_client->sockaddr, &sockaddr, sizeof (sockaddr_t));
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1d39      	adds	r1, r7, #4
 8001d64:	2210      	movs	r2, #16
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fced 	bl	8002746 <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f103 0010 	add.w	r0, r3, #16
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6a19      	ldr	r1, [r3, #32]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f000 fd07 	bl	8002790 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d023      	beq.n	8001dfc <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f000 fcdf 	bl	8002790 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f000 fcd4 	bl	8002790 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f000 fcb7 	bl	8002790 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f103 0052 	add.w	r0, r3, #82	; 0x52
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f000 fca4 	bl	8002790 <strncpy>
	}
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d001      	beq.n	8001e68 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e01b      	b.n	8001ea0 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fd82 	bl	8001972 <can_broker_accept_next_client>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f083 0301 	eor.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e010      	b.n	8001ea0 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7ff fdef 	bl	8001a6c <is_client_authorised>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e000      	b.n	8001ea0 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 8001e9e:	2300      	movs	r3, #0
	}
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
	pos ++;
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	441a      	add	r2, r3
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb49 	bl	800158e <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8001f02:	7c3a      	ldrb	r2, [r7, #16]
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	4413      	add	r3, r2
 8001f08:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	441a      	add	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	6892      	ldr	r2, [r2, #8]
 8001f1c:	8812      	ldrh	r2, [r2, #0]
 8001f1e:	0a12      	lsrs	r2, r2, #8
 8001f20:	b292      	uxth	r2, r2
 8001f22:	b211      	sxth	r1, r2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	6892      	ldr	r2, [r2, #8]
 8001f28:	8812      	ldrh	r2, [r2, #0]
 8001f2a:	0212      	lsls	r2, r2, #8
 8001f2c:	b212      	sxth	r2, r2
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	b212      	sxth	r2, r2
 8001f32:	b292      	uxth	r2, r2
 8001f34:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	441a      	add	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	4413      	add	r3, r2
 8001f52:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	dd18      	ble.n	8001f96 <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	441a      	add	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	6912      	ldr	r2, [r2, #16]
 8001f76:	8812      	ldrh	r2, [r2, #0]
 8001f78:	0a12      	lsrs	r2, r2, #8
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	b211      	sxth	r1, r2
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	6912      	ldr	r2, [r2, #16]
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	0212      	lsls	r2, r2, #8
 8001f86:	b212      	sxth	r2, r2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	b212      	sxth	r2, r2
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	3302      	adds	r3, #2
 8001f94:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	615a      	str	r2, [r3, #20]
}
 8001fa0:	bf00      	nop
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e049      	b.n	800204c <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d03a      	beq.n	8002046 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73bb      	strb	r3, [r7, #14]
 8001fd4:	e034      	b.n	8002040 <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 8001fe4:	7bf9      	ldrb	r1, [r7, #15]
 8001fe6:	7bba      	ldrb	r2, [r7, #14]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001ff4:	fb02 f201 	mul.w	r2, r2, r1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	33b0      	adds	r3, #176	; 0xb0
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3308      	adds	r3, #8
 8002002:	89ba      	ldrh	r2, [r7, #12]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fbb0 	bl	800276c <strncmp>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d013      	beq.n	800203a <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002018:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	18d1      	adds	r1, r2, r3
 8002032:	463a      	mov	r2, r7
 8002034:	2318      	movs	r3, #24
 8002036:	47a0      	blx	r4
					break;
 8002038:	e005      	b.n	8002046 <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	3301      	adds	r3, #1
 800203e:	73bb      	strb	r3, [r7, #14]
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	2b07      	cmp	r3, #7
 8002044:	d9c7      	bls.n	8001fd6 <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	3301      	adds	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b07      	cmp	r3, #7
 8002050:	d9b2      	bls.n	8001fb8 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bd90      	pop	{r4, r7, pc}

0800205a <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = pckt_id;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	805a      	strh	r2, [r3, #2]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8002082:	b590      	push	{r4, r7, lr}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
	pos++;
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	3301      	adds	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	441a      	add	r2, r3
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fa70 	bl	800158e <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80020b4:	7c3a      	ldrb	r2, [r7, #16]
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	4413      	add	r3, r2
 80020ba:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	441a      	add	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	0a12      	lsrs	r2, r2, #8
 80020d2:	b292      	uxth	r2, r2
 80020d4:	b211      	sxth	r1, r2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	6892      	ldr	r2, [r2, #8]
 80020da:	8812      	ldrh	r2, [r2, #0]
 80020dc:	0212      	lsls	r2, r2, #8
 80020de:	b212      	sxth	r2, r2
 80020e0:	430a      	orrs	r2, r1
 80020e2:	b212      	sxth	r2, r2
 80020e4:	b292      	uxth	r2, r2
 80020e6:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	3302      	adds	r3, #2
 80020ec:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 80020ee:	2302      	movs	r3, #2
 80020f0:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80020f6:	e060      	b.n	80021ba <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 80020f8:	7dba      	ldrb	r2, [r7, #22]
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4419      	add	r1, r3
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4403      	add	r3, r0
 800210c:	330c      	adds	r3, #12
 800210e:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 8002110:	7dba      	ldrb	r2, [r7, #22]
 8002112:	6839      	ldr	r1, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	330c      	adds	r3, #12
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	7dba      	ldrb	r2, [r7, #22]
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4403      	add	r3, r0
 8002130:	330c      	adds	r3, #12
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b218      	sxth	r0, r3
 800213c:	7dba      	ldrb	r2, [r7, #22]
 800213e:	683c      	ldr	r4, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4423      	add	r3, r4
 800214a:	330c      	adds	r3, #12
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b21b      	sxth	r3, r3
 8002154:	4303      	orrs	r3, r0
 8002156:	b21b      	sxth	r3, r3
 8002158:	b29b      	uxth	r3, r3
 800215a:	800b      	strh	r3, [r1, #0]
		pos += 2;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	3302      	adds	r3, #2
 8002160:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8002162:	7dba      	ldrb	r2, [r7, #22]
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4419      	add	r1, r3
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4403      	add	r3, r0
 8002176:	3310      	adds	r3, #16
 8002178:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 800217a:	7dba      	ldrb	r2, [r7, #22]
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	330c      	adds	r3, #12
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	4413      	add	r3, r2
 8002194:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8002196:	7dba      	ldrb	r2, [r7, #22]
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4419      	add	r1, r3
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4403      	add	r3, r0
 80021aa:	3314      	adds	r3, #20
 80021ac:	6019      	str	r1, [r3, #0]
		pos += 1;
 80021ae:	7dfb      	ldrb	r3, [r7, #23]
 80021b0:	3301      	adds	r3, #1
 80021b2:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 80021b4:	7dbb      	ldrb	r3, [r7, #22]
 80021b6:	3301      	adds	r3, #1
 80021b8:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 80021ba:	7dfa      	ldrb	r2, [r7, #23]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	7d7b      	ldrb	r3, [r7, #21]
 80021c2:	440b      	add	r3, r1
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d397      	bcc.n	80020f8 <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 80021c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd90      	pop	{r4, r7, pc}

080021d2 <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	4613      	mov	r3, r2
 80021de:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fa9e 	bl	8002728 <memcmp>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <is_the_same_topic+0x24>
		return true;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <is_the_same_topic+0x26>
	}
	return false;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800220e:	2300      	movs	r3, #0
 8002210:	75fb      	strb	r3, [r7, #23]
 8002212:	e020      	b.n	8002256 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 8002214:	7dfa      	ldrb	r2, [r7, #23]
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	33b8      	adds	r3, #184	; 0xb8
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 800222a:	7dfa      	ldrb	r2, [r7, #23]
 800222c:	4613      	mov	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	33b0      	adds	r3, #176	; 0xb0
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	3308      	adds	r3, #8
 800223c:	79fa      	ldrb	r2, [r7, #7]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ffc6 	bl	80021d2 <is_the_same_topic>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <get_subscribed_topic_pos+0x50>
			return i;
 800224c:	7dfb      	ldrb	r3, [r7, #23]
 800224e:	e006      	b.n	800225e <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	3301      	adds	r3, #1
 8002254:	75fb      	strb	r3, [r7, #23]
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b07      	cmp	r3, #7
 800225a:	d9db      	bls.n	8002214 <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 800225c:	23ff      	movs	r3, #255	; 0xff
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	e00f      	b.n	80022b2 <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	440b      	add	r3, r1
 80022a0:	33b8      	adds	r3, #184	; 0xb8
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	e006      	b.n	80022ba <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	3301      	adds	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	2b07      	cmp	r3, #7
 80022b6:	d9ec      	bls.n	8002292 <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 80022b8:	23ff      	movs	r3, #255	; 0xff
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffd8 	bl	8002284 <find_first_free_slot_for_subs_topic>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d02e      	beq.n	800233c <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	33b0      	adds	r3, #176	; 0xb0
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	f103 0008 	add.w	r0, r3, #8
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f000 fa22 	bl	8002746 <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	33b0      	adds	r3, #176	; 0xb0
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	3306      	adds	r3, #6
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	b292      	uxth	r2, r2
 800231c:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	4613      	mov	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	33d0      	adds	r3, #208	; 0xd0
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	3308      	adds	r3, #8
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	6892      	ldr	r2, [r2, #8]
 8002334:	7812      	ldrb	r2, [r2, #0]
 8002336:	701a      	strb	r2, [r3, #0]
		return true;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <add_new_subscription_to_client+0x7a>
	}
	return false;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800235a:	e077      	b.n	800244c <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 800235c:	7dfa      	ldrb	r2, [r7, #23]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4413      	add	r3, r2
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	7dfa      	ldrb	r2, [r7, #23]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff ff3a 	bl	8002200 <get_subscribed_topic_pos>
 800238c:	4603      	mov	r3, r0
 800238e:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){
 8002390:	7d7b      	ldrb	r3, [r7, #21]
 8002392:	2bff      	cmp	r3, #255	; 0xff
 8002394:	d024      	beq.n	80023e0 <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 8002396:	7d7a      	ldrb	r2, [r7, #21]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	33b0      	adds	r3, #176	; 0xb0
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4413      	add	r3, r2
 80023a6:	1d98      	adds	r0, r3, #6
 80023a8:	7dfa      	ldrb	r2, [r7, #23]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f7ff ff52 	bl	8002266 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos;
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	18d1      	adds	r1, r2, r3
 80023c8:	7dfa      	ldrb	r2, [r7, #23]
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4413      	add	r3, r2
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	700b      	strb	r3, [r1, #0]
 80023de:	e032      	b.n	8002446 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 80023e0:	7dfa      	ldrb	r2, [r7, #23]
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	461a      	mov	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4413      	add	r3, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff ff66 	bl	80022c4 <add_new_subscription_to_client>
 80023f8:	4603      	mov	r3, r0
 80023fa:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	18d1      	adds	r1, r2, r3
 8002402:	7dfa      	ldrb	r2, [r7, #23]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4413      	add	r3, r2
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	700b      	strb	r3, [r1, #0]
			if (!res){
 8002418:	7d3b      	ldrb	r3, [r7, #20]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d010      	beq.n	8002446 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	75bb      	strb	r3, [r7, #22]
 8002428:	e007      	b.n	800243a <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 800242a:	7dbb      	ldrb	r3, [r7, #22]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	2250      	movs	r2, #80	; 0x50
 8002432:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 8002434:	7dbb      	ldrb	r3, [r7, #22]
 8002436:	3301      	adds	r3, #1
 8002438:	75bb      	strb	r3, [r7, #22]
 800243a:	7dba      	ldrb	r2, [r7, #22]
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3f3      	bcc.n	800242a <add_subscriptions_from_list+0xe4>
				}
			return false;
 8002442:	2300      	movs	r3, #0
 8002444:	e007      	b.n	8002456 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	3301      	adds	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800244c:	7dfa      	ldrb	r2, [r7, #23]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	429a      	cmp	r2, r3
 8002452:	d383      	bcc.n	800235c <add_subscriptions_from_list+0x16>
	}
	return true;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	817b      	strh	r3, [r7, #10]
 800246c:	4613      	mov	r3, r2
 800246e:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2290      	movs	r2, #144	; 0x90
 8002474:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_LEN;  //(?)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2203      	movs	r2, #3
 800247a:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = pckt_id;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	897a      	ldrh	r2, [r7, #10]
 8002480:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3304      	adds	r3, #4
 8002486:	7a7a      	ldrb	r2, [r7, #9]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f95b 	bl	8002746 <memcpy>
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	601a      	str	r2, [r3, #0]
	pos++;
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	3301      	adds	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	441a      	add	r2, r3
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f865 	bl	800158e <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80024ca:	7c3a      	ldrb	r2, [r7, #16]
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	4413      	add	r3, r2
 80024d0:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	441a      	add	r2, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	8812      	ldrh	r2, [r2, #0]
 80024e6:	0a12      	lsrs	r2, r2, #8
 80024e8:	b292      	uxth	r2, r2
 80024ea:	b211      	sxth	r1, r2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	0212      	lsls	r2, r2, #8
 80024f4:	b212      	sxth	r2, r2
 80024f6:	430a      	orrs	r2, r1
 80024f8:	b212      	sxth	r2, r2
 80024fa:	b292      	uxth	r2, r2
 80024fc:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	3302      	adds	r3, #2
 8002502:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8002504:	2302      	movs	r3, #2
 8002506:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8002508:	2300      	movs	r3, #0
 800250a:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 800250c:	e060      	b.n	80025d0 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 800250e:	7dba      	ldrb	r2, [r7, #22]
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4419      	add	r1, r3
 8002516:	6838      	ldr	r0, [r7, #0]
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4403      	add	r3, r0
 8002522:	330c      	adds	r3, #12
 8002524:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 8002526:	7dba      	ldrb	r2, [r7, #22]
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	330c      	adds	r3, #12
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	7dba      	ldrb	r2, [r7, #22]
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4403      	add	r3, r0
 8002546:	330c      	adds	r3, #12
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	b218      	sxth	r0, r3
 8002552:	7dba      	ldrb	r2, [r7, #22]
 8002554:	683c      	ldr	r4, [r7, #0]
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4423      	add	r3, r4
 8002560:	330c      	adds	r3, #12
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	b21b      	sxth	r3, r3
 800256a:	4303      	orrs	r3, r0
 800256c:	b21b      	sxth	r3, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	3302      	adds	r3, #2
 8002576:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8002578:	7dba      	ldrb	r2, [r7, #22]
 800257a:	7dfb      	ldrb	r3, [r7, #23]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4419      	add	r1, r3
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4403      	add	r3, r0
 800258c:	3310      	adds	r3, #16
 800258e:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 8002590:	7dba      	ldrb	r2, [r7, #22]
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	330c      	adds	r3, #12
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	4413      	add	r3, r2
 80025aa:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 80025ac:	7dba      	ldrb	r2, [r7, #22]
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4419      	add	r1, r3
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	3314      	adds	r3, #20
 80025c2:	6019      	str	r1, [r3, #0]
		pos += 1;
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	3301      	adds	r3, #1
 80025c8:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 80025ca:	7dbb      	ldrb	r3, [r7, #22]
 80025cc:	3301      	adds	r3, #1
 80025ce:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 80025d0:	7dfa      	ldrb	r2, [r7, #23]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	7d7b      	ldrb	r3, [r7, #21]
 80025d8:	440b      	add	r3, r1
 80025da:	429a      	cmp	r2, r3
 80025dc:	d397      	bcc.n	800250e <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 80025de:	7dbb      	ldrb	r3, [r7, #22]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}

080025e8 <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e031      	b.n	800265c <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	33b8      	adds	r3, #184	; 0xb8
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d023      	beq.n	8002656 <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	33b0      	adds	r3, #176	; 0xb0
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f103 0008 	add.w	r0, r3, #8
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff fdcf 	bl	80021d2 <is_the_same_topic>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	33b0      	adds	r3, #176	; 0xb0
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	3306      	adds	r3, #6
 800264c:	2224      	movs	r2, #36	; 0x24
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f000 f883 	bl	800275c <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	3301      	adds	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b07      	cmp	r3, #7
 8002660:	d9ca      	bls.n	80025f8 <delete_subscribed_topic+0x10>
		}
	}
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	4613      	mov	r3, r2
 8002676:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800267c:	e00e      	b.n	800269c <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 800267e:	7dfa      	ldrb	r2, [r7, #23]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4413      	add	r3, r2
 800268e:	4619      	mov	r1, r3
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ffa9 	bl	80025e8 <delete_subscribed_topic>
		i++;
 8002696:	7dfb      	ldrb	r3, [r7, #23]
 8002698:	3301      	adds	r3, #1
 800269a:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 800269c:	7dfa      	ldrb	r2, [r7, #23]
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3ec      	bcc.n	800267e <delete_listed_subscriptions+0x14>
	}
	return true;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	441a      	add	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	601a      	str	r2, [r3, #0]
	pos++;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	3301      	adds	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	441a      	add	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	605a      	str	r2, [r3, #4]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <__libc_init_array>:
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	2500      	movs	r5, #0
 80026e4:	4e0c      	ldr	r6, [pc, #48]	; (8002718 <__libc_init_array+0x38>)
 80026e6:	4c0d      	ldr	r4, [pc, #52]	; (800271c <__libc_init_array+0x3c>)
 80026e8:	1ba4      	subs	r4, r4, r6
 80026ea:	10a4      	asrs	r4, r4, #2
 80026ec:	42a5      	cmp	r5, r4
 80026ee:	d109      	bne.n	8002704 <__libc_init_array+0x24>
 80026f0:	f000 f864 	bl	80027bc <_init>
 80026f4:	2500      	movs	r5, #0
 80026f6:	4e0a      	ldr	r6, [pc, #40]	; (8002720 <__libc_init_array+0x40>)
 80026f8:	4c0a      	ldr	r4, [pc, #40]	; (8002724 <__libc_init_array+0x44>)
 80026fa:	1ba4      	subs	r4, r4, r6
 80026fc:	10a4      	asrs	r4, r4, #2
 80026fe:	42a5      	cmp	r5, r4
 8002700:	d105      	bne.n	800270e <__libc_init_array+0x2e>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002708:	4798      	blx	r3
 800270a:	3501      	adds	r5, #1
 800270c:	e7ee      	b.n	80026ec <__libc_init_array+0xc>
 800270e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002712:	4798      	blx	r3
 8002714:	3501      	adds	r5, #1
 8002716:	e7f2      	b.n	80026fe <__libc_init_array+0x1e>
 8002718:	080027f8 	.word	0x080027f8
 800271c:	080027f8 	.word	0x080027f8
 8002720:	080027f8 	.word	0x080027f8
 8002724:	080027fc 	.word	0x080027fc

08002728 <memcmp>:
 8002728:	b510      	push	{r4, lr}
 800272a:	3901      	subs	r1, #1
 800272c:	4402      	add	r2, r0
 800272e:	4290      	cmp	r0, r2
 8002730:	d101      	bne.n	8002736 <memcmp+0xe>
 8002732:	2000      	movs	r0, #0
 8002734:	bd10      	pop	{r4, pc}
 8002736:	f810 3b01 	ldrb.w	r3, [r0], #1
 800273a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800273e:	42a3      	cmp	r3, r4
 8002740:	d0f5      	beq.n	800272e <memcmp+0x6>
 8002742:	1b18      	subs	r0, r3, r4
 8002744:	bd10      	pop	{r4, pc}

08002746 <memcpy>:
 8002746:	b510      	push	{r4, lr}
 8002748:	1e43      	subs	r3, r0, #1
 800274a:	440a      	add	r2, r1
 800274c:	4291      	cmp	r1, r2
 800274e:	d100      	bne.n	8002752 <memcpy+0xc>
 8002750:	bd10      	pop	{r4, pc}
 8002752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800275a:	e7f7      	b.n	800274c <memcpy+0x6>

0800275c <memset>:
 800275c:	4603      	mov	r3, r0
 800275e:	4402      	add	r2, r0
 8002760:	4293      	cmp	r3, r2
 8002762:	d100      	bne.n	8002766 <memset+0xa>
 8002764:	4770      	bx	lr
 8002766:	f803 1b01 	strb.w	r1, [r3], #1
 800276a:	e7f9      	b.n	8002760 <memset+0x4>

0800276c <strncmp>:
 800276c:	b510      	push	{r4, lr}
 800276e:	b16a      	cbz	r2, 800278c <strncmp+0x20>
 8002770:	3901      	subs	r1, #1
 8002772:	1884      	adds	r4, r0, r2
 8002774:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002778:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800277c:	4293      	cmp	r3, r2
 800277e:	d103      	bne.n	8002788 <strncmp+0x1c>
 8002780:	42a0      	cmp	r0, r4
 8002782:	d001      	beq.n	8002788 <strncmp+0x1c>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f5      	bne.n	8002774 <strncmp+0x8>
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	bd10      	pop	{r4, pc}
 800278c:	4610      	mov	r0, r2
 800278e:	bd10      	pop	{r4, pc}

08002790 <strncpy>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	4604      	mov	r4, r0
 8002794:	b902      	cbnz	r2, 8002798 <strncpy+0x8>
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	4623      	mov	r3, r4
 800279a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800279e:	1e56      	subs	r6, r2, #1
 80027a0:	f803 5b01 	strb.w	r5, [r3], #1
 80027a4:	b91d      	cbnz	r5, 80027ae <strncpy+0x1e>
 80027a6:	4414      	add	r4, r2
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	d103      	bne.n	80027b4 <strncpy+0x24>
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
 80027ae:	461c      	mov	r4, r3
 80027b0:	4632      	mov	r2, r6
 80027b2:	e7ef      	b.n	8002794 <strncpy+0x4>
 80027b4:	f803 5b01 	strb.w	r5, [r3], #1
 80027b8:	e7f6      	b.n	80027a8 <strncpy+0x18>
	...

080027bc <_init>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	bf00      	nop
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr

080027c8 <_fini>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	bf00      	nop
 80027cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ce:	bc08      	pop	{r3}
 80027d0:	469e      	mov	lr, r3
 80027d2:	4770      	bx	lr
