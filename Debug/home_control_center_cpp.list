
home_control_center_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001528  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08007924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000484  20000070  08007994  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  200004f4  08007994  000204f4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014fab  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ccf  00000000  00000000  00035044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c90  00000000  00000000  00037d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b60  00000000  00000000  000389a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005ba3  00000000  00000000  00039508  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000d261  00000000  00000000  0003f0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004c30c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000b604  00000000  00000000  0004c388  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000030  00000000  00000000  00057b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000001ed  00000000  00000000  0005798c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080063cc 	.word	0x080063cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080063cc 	.word	0x080063cc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000174:	b480      	push	{r7}
 8000176:	b085      	sub	sp, #20
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	685b      	ldr	r3, [r3, #4]
 8000182:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	689a      	ldr	r2, [r3, #8]
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	683a      	ldr	r2, [r7, #0]
 8000198:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	683a      	ldr	r2, [r7, #0]
 800019e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	687a      	ldr	r2, [r7, #4]
 80001a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	1c5a      	adds	r2, r3, #1
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	601a      	str	r2, [r3, #0]
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80001ba:	b480      	push	{r7}
 80001bc:	b085      	sub	sp, #20
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
 80001c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	687a      	ldr	r2, [r7, #4]
 80001ce:	6892      	ldr	r2, [r2, #8]
 80001d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	689b      	ldr	r3, [r3, #8]
 80001d6:	687a      	ldr	r2, [r7, #4]
 80001d8:	6852      	ldr	r2, [r2, #4]
 80001da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	685a      	ldr	r2, [r3, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d103      	bne.n	80001ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2200      	movs	r2, #0
 80001f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	681b      	ldr	r3, [r3, #0]
}
 8000202:	4618      	mov	r0, r3
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	0000      	movs	r0, r0
	...

08000210 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <pxCurrentTCBConst2>)
 8000212:	6819      	ldr	r1, [r3, #0]
 8000214:	6808      	ldr	r0, [r1, #0]
 8000216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800021a:	f380 8809 	msr	PSP, r0
 800021e:	f3bf 8f6f 	isb	sy
 8000222:	f04f 0000 	mov.w	r0, #0
 8000226:	f380 8811 	msr	BASEPRI, r0
 800022a:	f04e 0e0d 	orr.w	lr, lr, #13
 800022e:	4770      	bx	lr

08000230 <pxCurrentTCBConst2>:
 8000230:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
	...

08000240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000240:	f3ef 8009 	mrs	r0, PSP
 8000244:	f3bf 8f6f 	isb	sy
 8000248:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <pxCurrentTCBConst>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000250:	6010      	str	r0, [r2, #0]
 8000252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000256:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800025a:	f380 8811 	msr	BASEPRI, r0
 800025e:	f000 f8df 	bl	8000420 <vTaskSwitchContext>
 8000262:	f04f 0000 	mov.w	r0, #0
 8000266:	f380 8811 	msr	BASEPRI, r0
 800026a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800026e:	6819      	ldr	r1, [r3, #0]
 8000270:	6808      	ldr	r0, [r1, #0]
 8000272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000276:	f380 8809 	msr	PSP, r0
 800027a:	f3bf 8f6f 	isb	sy
 800027e:	4770      	bx	lr

08000280 <pxCurrentTCBConst>:
 8000280:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop

08000288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800028e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000292:	f383 8811 	msr	BASEPRI, r3
 8000296:	f3bf 8f6f 	isb	sy
 800029a:	f3bf 8f4f 	dsb	sy
 800029e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80002a0:	f000 f812 	bl	80002c8 <xTaskIncrementTick>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d003      	beq.n	80002b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <SysTick_Handler+0x3c>)
 80002ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80002bc:	bf00      	nop
 80002be:	3708      	adds	r7, #8
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	e000ed04 	.word	0xe000ed04

080002c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002d2:	4b48      	ldr	r3, [pc, #288]	; (80003f4 <xTaskIncrementTick+0x12c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d17c      	bne.n	80003d4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80002da:	4b47      	ldr	r3, [pc, #284]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	3301      	adds	r3, #1
 80002e0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80002e2:	4a45      	ldr	r2, [pc, #276]	; (80003f8 <xTaskIncrementTick+0x130>)
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d110      	bne.n	8000310 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80002ee:	4b43      	ldr	r3, [pc, #268]	; (80003fc <xTaskIncrementTick+0x134>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]
 80002f4:	4b42      	ldr	r3, [pc, #264]	; (8000400 <xTaskIncrementTick+0x138>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a40      	ldr	r2, [pc, #256]	; (80003fc <xTaskIncrementTick+0x134>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	4a40      	ldr	r2, [pc, #256]	; (8000400 <xTaskIncrementTick+0x138>)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b40      	ldr	r3, [pc, #256]	; (8000404 <xTaskIncrementTick+0x13c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a3e      	ldr	r2, [pc, #248]	; (8000404 <xTaskIncrementTick+0x13c>)
 800030a:	6013      	str	r3, [r2, #0]
 800030c:	f000 f8ce 	bl	80004ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000310:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <xTaskIncrementTick+0x140>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	429a      	cmp	r2, r3
 8000318:	d34d      	bcc.n	80003b6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <xTaskIncrementTick+0x134>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <xTaskIncrementTick+0x60>
 8000324:	2301      	movs	r3, #1
 8000326:	e000      	b.n	800032a <xTaskIncrementTick+0x62>
 8000328:	2300      	movs	r3, #0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800032e:	4b36      	ldr	r3, [pc, #216]	; (8000408 <xTaskIncrementTick+0x140>)
 8000330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000334:	601a      	str	r2, [r3, #0]
					break;
 8000336:	e03e      	b.n	80003b6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <xTaskIncrementTick+0x134>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000348:	693a      	ldr	r2, [r7, #16]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d203      	bcs.n	8000358 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000350:	4a2d      	ldr	r2, [pc, #180]	; (8000408 <xTaskIncrementTick+0x140>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	6013      	str	r3, [r2, #0]
						break;
 8000356:	e02e      	b.n	80003b6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	3304      	adds	r3, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff2c 	bl	80001ba <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000366:	2b00      	cmp	r3, #0
 8000368:	d004      	beq.n	8000374 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3318      	adds	r3, #24
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff23 	bl	80001ba <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000378:	2201      	movs	r2, #1
 800037a:	409a      	lsls	r2, r3
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <xTaskIncrementTick+0x144>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	4a22      	ldr	r2, [pc, #136]	; (800040c <xTaskIncrementTick+0x144>)
 8000384:	6013      	str	r3, [r2, #0]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4a1f      	ldr	r2, [pc, #124]	; (8000410 <xTaskIncrementTick+0x148>)
 8000394:	441a      	add	r2, r3
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	3304      	adds	r3, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4610      	mov	r0, r2
 800039e:	f7ff fee9 	bl	8000174 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d3b4      	bcc.n	800031a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003b4:	e7b1      	b.n	800031a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <xTaskIncrementTick+0x14c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003bc:	4914      	ldr	r1, [pc, #80]	; (8000410 <xTaskIncrementTick+0x148>)
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d907      	bls.n	80003de <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	e004      	b.n	80003de <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <xTaskIncrementTick+0x150>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <xTaskIncrementTick+0x150>)
 80003dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <xTaskIncrementTick+0x154>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80003ea:	697b      	ldr	r3, [r7, #20]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000114 	.word	0x20000114
 80003f8:	200000fc 	.word	0x200000fc
 80003fc:	200000f4 	.word	0x200000f4
 8000400:	200000f8 	.word	0x200000f8
 8000404:	2000010c 	.word	0x2000010c
 8000408:	20000110 	.word	0x20000110
 800040c:	20000100 	.word	0x20000100
 8000410:	20000090 	.word	0x20000090
 8000414:	2000008c 	.word	0x2000008c
 8000418:	20000104 	.word	0x20000104
 800041c:	20000108 	.word	0x20000108

08000420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <vTaskSwitchContext+0x78>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d003      	beq.n	8000436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800042e:	4b1b      	ldr	r3, [pc, #108]	; (800049c <vTaskSwitchContext+0x7c>)
 8000430:	2201      	movs	r2, #1
 8000432:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000434:	e02a      	b.n	800048c <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <vTaskSwitchContext+0x7c>)
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <vTaskSwitchContext+0x80>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	fab3 f383 	clz	r3, r3
 8000448:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800044a:	78fb      	ldrb	r3, [r7, #3]
 800044c:	f1c3 031f 	rsb	r3, r3, #31
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <vTaskSwitchContext+0x84>)
 800045e:	4413      	add	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	685a      	ldr	r2, [r3, #4]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	3308      	adds	r3, #8
 8000474:	429a      	cmp	r2, r3
 8000476:	d104      	bne.n	8000482 <vTaskSwitchContext+0x62>
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	685a      	ldr	r2, [r3, #4]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <vTaskSwitchContext+0x88>)
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	20000114 	.word	0x20000114
 800049c:	20000108 	.word	0x20000108
 80004a0:	20000100 	.word	0x20000100
 80004a4:	20000090 	.word	0x20000090
 80004a8:	2000008c 	.word	0x2000008c

080004ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d101      	bne.n	80004c0 <prvResetNextTaskUnblockTime+0x14>
 80004bc:	2301      	movs	r3, #1
 80004be:	e000      	b.n	80004c2 <prvResetNextTaskUnblockTime+0x16>
 80004c0:	2300      	movs	r3, #0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d004      	beq.n	80004d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80004ce:	e008      	b.n	80004e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <prvResetNextTaskUnblockTime+0x40>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <prvResetNextTaskUnblockTime+0x44>)
 80004e0:	6013      	str	r3, [r2, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	200000f4 	.word	0x200000f4
 80004f0:	20000110 	.word	0x20000110

080004f4 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004fc:	4a03      	ldr	r2, [pc, #12]	; (800050c <EXTI_ClearFlag+0x18>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6153      	str	r3, [r2, #20]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40010400 	.word	0x40010400

08000510 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <EXTI_ClearITPendingBit+0x18>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6153      	str	r3, [r2, #20]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40010400 	.word	0x40010400

0800052c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800052c:	b480      	push	{r7}
 800052e:	b089      	sub	sp, #36	; 0x24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	78db      	ldrb	r3, [r3, #3]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	78db      	ldrb	r3, [r3, #3]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	461a      	mov	r2, r3
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	4313      	orrs	r3, r2
 800056e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d044      	beq.n	8000604 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	e038      	b.n	80005f8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000586:	2201      	movs	r2, #1
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d126      	bne.n	80005f2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005a4:	69bb      	ldr	r3, [r7, #24]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005aa:	220f      	movs	r2, #15
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	43db      	mvns	r3, r3
 80005b8:	697a      	ldr	r2, [r7, #20]
 80005ba:	4013      	ands	r3, r2
 80005bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005be:	69fa      	ldr	r2, [r7, #28]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	2b28      	cmp	r3, #40	; 0x28
 80005d2:	d105      	bne.n	80005e0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80005d4:	2201      	movs	r2, #1
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	409a      	lsls	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	615a      	str	r2, [r3, #20]
 80005de:	e008      	b.n	80005f2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	2b48      	cmp	r3, #72	; 0x48
 80005e6:	d104      	bne.n	80005f2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80005e8:	2201      	movs	r2, #1
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	409a      	lsls	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	3301      	adds	r3, #1
 80005f6:	61bb      	str	r3, [r7, #24]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d946      	bls.n	800069a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	e03a      	b.n	800068e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	3308      	adds	r3, #8
 800061c:	2201      	movs	r2, #1
 800061e:	fa02 f303 	lsl.w	r3, r2, r3
 8000622:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4013      	ands	r3, r2
 800062e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	429a      	cmp	r2, r3
 8000636:	d127      	bne.n	8000688 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800063e:	220f      	movs	r2, #15
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	43db      	mvns	r3, r3
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	4013      	ands	r3, r2
 8000650:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000652:	69fa      	ldr	r2, [r7, #28]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	697a      	ldr	r2, [r7, #20]
 800065c:	4313      	orrs	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	78db      	ldrb	r3, [r3, #3]
 8000664:	2b28      	cmp	r3, #40	; 0x28
 8000666:	d105      	bne.n	8000674 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	3308      	adds	r3, #8
 800066c:	2201      	movs	r2, #1
 800066e:	409a      	lsls	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	2b48      	cmp	r3, #72	; 0x48
 800067a:	d105      	bne.n	8000688 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	3308      	adds	r3, #8
 8000680:	2201      	movs	r2, #1
 8000682:	409a      	lsls	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	3301      	adds	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	2b07      	cmp	r3, #7
 8000692:	d9c1      	bls.n	8000618 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	605a      	str	r2, [r3, #4]
  }
}
 800069a:	bf00      	nop
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	611a      	str	r2, [r3, #16]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	460b      	mov	r3, r1
 80006ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	615a      	str	r2, [r3, #20]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006ee:	4909      	ldr	r1, [pc, #36]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006f2:	699a      	ldr	r2, [r3, #24]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006fa:	e006      	b.n	800070a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006fc:	4905      	ldr	r1, [pc, #20]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <RCC_APB2PeriphClockCmd+0x38>)
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	43db      	mvns	r3, r3
 8000706:	4013      	ands	r3, r2
 8000708:	618b      	str	r3, [r1, #24]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000

08000718 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d006      	beq.n	8000738 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800072a:	4909      	ldr	r1, [pc, #36]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800072e:	69da      	ldr	r2, [r3, #28]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4313      	orrs	r3, r2
 8000734:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000736:	e006      	b.n	8000746 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000738:	4905      	ldr	r1, [pc, #20]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <RCC_APB1PeriphClockCmd+0x38>)
 800073c:	69da      	ldr	r2, [r3, #28]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	43db      	mvns	r3, r3
 8000742:	4013      	ands	r3, r2
 8000744:	61cb      	str	r3, [r1, #28]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000768:	89fb      	ldrh	r3, [r7, #14]
 800076a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800076e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	885b      	ldrh	r3, [r3, #2]
 8000778:	4313      	orrs	r3, r2
 800077a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000780:	4313      	orrs	r3, r2
 8000782:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000788:	4313      	orrs	r3, r2
 800078a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	89fa      	ldrh	r2, [r7, #14]
 80007b6:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	8b9b      	ldrh	r3, [r3, #28]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	8a1a      	ldrh	r2, [r3, #16]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	821a      	strh	r2, [r3, #16]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	460b      	mov	r3, r1
 80007e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d008      	beq.n	80007fe <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80007fc:	e007      	b.n	800080e <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000808:	b29a      	uxth	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	801a      	strh	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	887a      	ldrh	r2, [r7, #2]
 8000828:	819a      	strh	r2, [r3, #12]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	b29b      	uxth	r3, r3
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d008      	beq.n	8000870 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	889b      	ldrh	r3, [r3, #4]
 8000862:	b29b      	uxth	r3, r3
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	b29a      	uxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 800086e:	e007      	b.n	8000880 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	b29b      	uxth	r3, r3
 8000876:	f023 0304 	bic.w	r3, r3, #4
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	809a      	strh	r2, [r3, #4]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	460b      	mov	r3, r1
 8000894:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	891b      	ldrh	r3, [r3, #8]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	4013      	ands	r3, r2
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80008aa:	2301      	movs	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	e001      	b.n	80008b4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
 80008d4:	e007      	b.n	80008e6 <mem_cpy+0x26>
		*d++ = *s++;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	1c5a      	adds	r2, r3, #1
 80008da:	617a      	str	r2, [r7, #20]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	1c51      	adds	r1, r2, #1
 80008e0:	6139      	str	r1, [r7, #16]
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f2      	bne.n	80008d6 <mem_cpy+0x16>
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80008fa:	b480      	push	{r7}
 80008fc:	b087      	sub	sp, #28
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800090a:	e005      	b.n	8000918 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	1c5a      	adds	r2, r3, #1
 8000910:	617a      	str	r2, [r7, #20]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1f4      	bne.n	800090c <mem_set+0x12>
}
 8000922:	bf00      	nop
 8000924:	371c      	adds	r7, #28
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8000944:	bf00      	nop
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d00d      	beq.n	800096c <mem_cmp+0x40>
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	61fa      	str	r2, [r7, #28]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	61ba      	str	r2, [r7, #24]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	1acb      	subs	r3, r1, r3
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0ec      	beq.n	8000946 <mem_cmp+0x1a>
	return r;
 800096c:	697b      	ldr	r3, [r7, #20]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8000982:	e002      	b.n	800098a <chk_chr+0x12>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <chk_chr+0x26>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	429a      	cmp	r2, r3
 800099c:	d1f2      	bne.n	8000984 <chk_chr+0xc>
	return *str;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	781b      	ldrb	r3, [r3, #0]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ba:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d048      	beq.n	8000a56 <move_window+0xaa>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d030      	beq.n	8000a2e <move_window+0x82>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7858      	ldrb	r0, [r3, #1]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80009d6:	2301      	movs	r3, #1
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	f001 fd95 	bl	8002508 <disk_write>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <move_window+0x3c>
				return FR_DISK_ERR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e037      	b.n	8000a58 <move_window+0xac>
			fs->wflag = 0;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a1a      	ldr	r2, [r3, #32]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	441a      	add	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d917      	bls.n	8000a2e <move_window+0x82>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	78db      	ldrb	r3, [r3, #3]
 8000a02:	72fb      	strb	r3, [r7, #11]
 8000a04:	e010      	b.n	8000a28 <move_window+0x7c>
					wsect += fs->fsize;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7858      	ldrb	r0, [r3, #1]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	f001 fd73 	bl	8002508 <disk_write>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 8000a22:	7afb      	ldrb	r3, [r7, #11]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	72fb      	strb	r3, [r7, #11]
 8000a28:	7afb      	ldrb	r3, [r7, #11]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d8eb      	bhi.n	8000a06 <move_window+0x5a>
				}
			}
		}
#endif
		if (sector) {
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d010      	beq.n	8000a56 <move_window+0xaa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7858      	ldrb	r0, [r3, #1]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8000a3e:	2301      	movs	r3, #1
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	f001 fcf1 	bl	8002428 <disk_read>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <move_window+0xa4>
				return FR_DISK_ERR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e003      	b.n	8000a58 <move_window+0xac>
			fs->winsect = sector;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	3b02      	subs	r3, #2
 8000a6e:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	1e9a      	subs	r2, r3, #2
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d801      	bhi.n	8000a80 <clust2sect+0x20>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e008      	b.n	8000a92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	789b      	ldrb	r3, [r3, #2]
 8000a84:	461a      	mov	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	fb03 f202 	mul.w	r2, r3, r2
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	4413      	add	r3, r2
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d904      	bls.n	8000ab6 <get_fat+0x1a>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	699a      	ldr	r2, [r3, #24]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d801      	bhi.n	8000aba <get_fat+0x1e>
		return 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e09b      	b.n	8000bf2 <get_fat+0x156>

	switch (fs->fs_type) {
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d046      	beq.n	8000b50 <get_fat+0xb4>
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d064      	beq.n	8000b90 <get_fat+0xf4>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	f040 8091 	bne.w	8000bee <get_fat+0x152>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	085b      	lsrs	r3, r3, #1
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	0a5b      	lsrs	r3, r3, #9
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff60 	bl	80009ac <move_window>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d176      	bne.n	8000be0 <get_fat+0x144>
		wc = fs->win[bc % SS(fs)]; bc++;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a1a      	ldr	r2, [r3, #32]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	0a5b      	lsrs	r3, r3, #9
 8000b10:	4413      	add	r3, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff49 	bl	80009ac <move_window>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d161      	bne.n	8000be4 <get_fat+0x148>
		wc |= fs->win[bc % SS(fs)] << 8;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	461a      	mov	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <get_fat+0xac>
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	e054      	b.n	8000bf2 <get_fat+0x156>
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b4e:	e050      	b.n	8000bf2 <get_fat+0x156>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a1a      	ldr	r2, [r3, #32]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	0a1b      	lsrs	r3, r3, #8
 8000b58:	4413      	add	r3, r2
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff25 	bl	80009ac <move_window>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d13f      	bne.n	8000be8 <get_fat+0x14c>
		p = &fs->win[clst * 2 % SS(fs)];
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000b70:	3330      	adds	r3, #48	; 0x30
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	e030      	b.n	8000bf2 <get_fat+0x156>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a1a      	ldr	r2, [r3, #32]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	09db      	lsrs	r3, r3, #7
 8000b98:	4413      	add	r3, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff05 	bl	80009ac <move_window>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d121      	bne.n	8000bec <get_fat+0x150>
		p = &fs->win[clst * 4 % SS(fs)];
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000bb0:	3330      	adds	r3, #48	; 0x30
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3303      	adds	r3, #3
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	061a      	lsls	r2, r3, #24
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	041b      	lsls	r3, r3, #16
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	3201      	adds	r2, #1
 8000bce:	7812      	ldrb	r2, [r2, #0]
 8000bd0:	0212      	lsls	r2, r2, #8
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000bde:	e008      	b.n	8000bf2 <get_fat+0x156>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000be0:	bf00      	nop
 8000be2:	e004      	b.n	8000bee <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 8000be4:	bf00      	nop
 8000be6:	e002      	b.n	8000bee <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 8000be8:	bf00      	nop
 8000bea:	e000      	b.n	8000bee <get_fat+0x152>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 8000bec:	bf00      	nop
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b088      	sub	sp, #32
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d904      	bls.n	8000c16 <put_fat+0x1c>
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	699a      	ldr	r2, [r3, #24]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d802      	bhi.n	8000c1c <put_fat+0x22>
		res = FR_INT_ERR;
 8000c16:	2302      	movs	r3, #2
 8000c18:	77fb      	strb	r3, [r7, #31]
 8000c1a:	e0e9      	b.n	8000df0 <put_fat+0x1f6>

	} else {
		switch (fs->fs_type) {
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d070      	beq.n	8000d06 <put_fat+0x10c>
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	f000 8091 	beq.w	8000d4c <put_fat+0x152>
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	f040 80d3 	bne.w	8000dd6 <put_fat+0x1dc>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6a1a      	ldr	r2, [r3, #32]
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	0a5b      	lsrs	r3, r3, #9
 8000c46:	4413      	add	r3, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff feae 	bl	80009ac <move_window>
 8000c50:	4603      	mov	r3, r0
 8000c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 80c0 	bne.w	8000ddc <put_fat+0x1e2>
			p = &fs->win[bc % SS(fs)];
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c62:	3330      	adds	r3, #48	; 0x30
 8000c64:	68fa      	ldr	r2, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00d      	beq.n	8000c90 <put_fat+0x96>
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	b25a      	sxtb	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	e001      	b.n	8000c94 <put_fat+0x9a>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	7013      	strb	r3, [r2, #0]
			bc++;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6a1a      	ldr	r2, [r3, #32]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	0a5b      	lsrs	r3, r3, #9
 8000cac:	4413      	add	r3, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fe7b 	bl	80009ac <move_window>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000cba:	7ffb      	ldrb	r3, [r7, #31]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <put_fat+0x1e6>
			p = &fs->win[bc % SS(fs)];
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cc8:	3330      	adds	r3, #48	; 0x30
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <put_fat+0xe8>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	e00e      	b.n	8000d00 <put_fat+0x106>
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	f023 030f 	bic.w	r3, r3, #15
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	7013      	strb	r3, [r2, #0]
			break;
 8000d04:	e071      	b.n	8000dea <put_fat+0x1f0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6a1a      	ldr	r2, [r3, #32]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	4413      	add	r3, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f7ff fe4a 	bl	80009ac <move_window>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d160      	bne.n	8000de4 <put_fat+0x1ea>
			p = &fs->win[clst * 2 % SS(fs)];
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8000d2a:	3330      	adds	r3, #48	; 0x30
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b292      	uxth	r2, r2
 8000d42:	0a12      	lsrs	r2, r2, #8
 8000d44:	b292      	uxth	r2, r2
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	701a      	strb	r2, [r3, #0]
			break;
 8000d4a:	e04e      	b.n	8000dea <put_fat+0x1f0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a1a      	ldr	r2, [r3, #32]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	09db      	lsrs	r3, r3, #7
 8000d54:	4413      	add	r3, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff fe27 	bl	80009ac <move_window>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000d62:	7ffb      	ldrb	r3, [r7, #31]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d13f      	bne.n	8000de8 <put_fat+0x1ee>
			p = &fs->win[clst * 4 % SS(fs)];
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8000d70:	3330      	adds	r3, #48	; 0x30
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	4413      	add	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3303      	adds	r3, #3
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	061a      	lsls	r2, r3, #24
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3302      	adds	r3, #2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	3201      	adds	r2, #1
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	0212      	lsls	r2, r2, #8
 8000d92:	4313      	orrs	r3, r2
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	b292      	uxth	r2, r2
 8000db4:	0a12      	lsrs	r2, r2, #8
 8000db6:	b292      	uxth	r2, r2
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	0c12      	lsrs	r2, r2, #16
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3303      	adds	r3, #3
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	0e12      	lsrs	r2, r2, #24
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	701a      	strb	r2, [r3, #0]
			break;
 8000dd4:	e009      	b.n	8000dea <put_fat+0x1f0>

		default :
			res = FR_INT_ERR;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	77fb      	strb	r3, [r7, #31]
 8000dda:	e006      	b.n	8000dea <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000ddc:	bf00      	nop
 8000dde:	e004      	b.n	8000dea <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <put_fat+0x1f0>
			if (res != FR_OK) break;
 8000de8:	bf00      	nop
		}
		fs->wflag = 1;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2201      	movs	r2, #1
 8000dee:	711a      	strb	r2, [r3, #4]
	}

	return res;
 8000df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d904      	bls.n	8000e14 <remove_chain+0x1a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d802      	bhi.n	8000e1a <remove_chain+0x20>
		res = FR_INT_ERR;
 8000e14:	2302      	movs	r3, #2
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e039      	b.n	8000e8e <remove_chain+0x94>

	} else {
		res = FR_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8000e1e:	e02d      	b.n	8000e7c <remove_chain+0x82>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fe3a 	bl	8000a9c <get_fat>
 8000e28:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d02b      	beq.n	8000e88 <remove_chain+0x8e>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d102      	bne.n	8000e3c <remove_chain+0x42>
 8000e36:	2302      	movs	r3, #2
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e028      	b.n	8000e8e <remove_chain+0x94>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e42:	d102      	bne.n	8000e4a <remove_chain+0x50>
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e021      	b.n	8000e8e <remove_chain+0x94>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6839      	ldr	r1, [r7, #0]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fed3 	bl	8000bfa <put_fat>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d116      	bne.n	8000e8c <remove_chain+0x92>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e66:	d007      	beq.n	8000e78 <remove_chain+0x7e>
				fs->free_clust++;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d8cc      	bhi.n	8000e20 <remove_chain+0x26>
 8000e86:	e002      	b.n	8000e8e <remove_chain+0x94>
			if (nxt == 0) break;				/* Empty cluster? */
 8000e88:	bf00      	nop
 8000e8a:	e000      	b.n	8000e8e <remove_chain+0x94>
			if (res != FR_OK) break;
 8000e8c:	bf00      	nop
		}
	}

	return res;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10d      	bne.n	8000ec4 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <create_chain+0x26>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d815      	bhi.n	8000eea <create_chain+0x52>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	e012      	b.n	8000eea <create_chain+0x52>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8000ec4:	6839      	ldr	r1, [r7, #0]
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fde8 	bl	8000a9c <get_fat>
 8000ecc:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d801      	bhi.n	8000ed8 <create_chain+0x40>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e064      	b.n	8000fa2 <create_chain+0x10a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699a      	ldr	r2, [r3, #24]
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d901      	bls.n	8000ee6 <create_chain+0x4e>
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	e05d      	b.n	8000fa2 <create_chain+0x10a>
		scl = clst;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d807      	bhi.n	8000f0e <create_chain+0x76>
			ncl = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d901      	bls.n	8000f0e <create_chain+0x76>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e049      	b.n	8000fa2 <create_chain+0x10a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8000f0e:	6979      	ldr	r1, [r7, #20]
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fdc3 	bl	8000a9c <get_fat>
 8000f16:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00e      	beq.n	8000f3c <create_chain+0xa4>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f24:	d002      	beq.n	8000f2c <create_chain+0x94>
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <create_chain+0x98>
			return cs;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	e038      	b.n	8000fa2 <create_chain+0x10a>
		if (ncl == scl) return 0;		/* No free cluster */
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d1da      	bne.n	8000eee <create_chain+0x56>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e032      	b.n	8000fa2 <create_chain+0x10a>
		if (cs == 0) break;				/* Found a free cluster */
 8000f3c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8000f3e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8000f42:	6979      	ldr	r1, [r7, #20]
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff fe58 	bl	8000bfa <put_fat>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d109      	bne.n	8000f68 <create_chain+0xd0>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <create_chain+0xd0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	6839      	ldr	r1, [r7, #0]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fe4b 	bl	8000bfa <put_fat>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d110      	bne.n	8000f90 <create_chain+0xf8>
		fs->last_clust = ncl;			/* Update FSINFO */
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f7c:	d010      	beq.n	8000fa0 <create_chain+0x108>
			fs->free_clust--;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	715a      	strb	r2, [r3, #5]
 8000f8e:	e007      	b.n	8000fa0 <create_chain+0x108>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d102      	bne.n	8000f9c <create_chain+0x104>
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f9a:	e000      	b.n	8000f9e <create_chain+0x106>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8000fa0:	697b      	ldr	r3, [r7, #20]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	807b      	strh	r3, [r7, #2]
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	887a      	ldrh	r2, [r7, #2]
 8000fba:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <dir_sdi+0x2a>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	699a      	ldr	r2, [r3, #24]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d801      	bhi.n	8000fd8 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e066      	b.n	80010a6 <dir_sdi+0xfc>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d108      	bne.n	8000ff0 <dir_sdi+0x46>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d103      	bne.n	8000ff0 <dir_sdi+0x46>
		clst = dj->fs->dirbase;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d114      	bne.n	8001020 <dir_sdi+0x76>
		dj->clust = clst;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	891b      	ldrh	r3, [r3, #8]
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	429a      	cmp	r2, r3
 8001006:	d301      	bcc.n	800100c <dir_sdi+0x62>
			return FR_INT_ERR;
 8001008:	2302      	movs	r3, #2
 800100a:	e04c      	b.n	80010a6 <dir_sdi+0xfc>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	0912      	lsrs	r2, r2, #4
 8001016:	b292      	uxth	r2, r2
 8001018:	441a      	add	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	e036      	b.n	800108e <dir_sdi+0xe4>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	789b      	ldrb	r3, [r3, #2]
 8001026:	b29b      	uxth	r3, r3
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	817b      	strh	r3, [r7, #10]
		while (idx >= ic) {	/* Follow cluster chain */
 800102c:	e01b      	b.n	8001066 <dir_sdi+0xbc>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fd31 	bl	8000a9c <get_fat>
 800103a:	60f8      	str	r0, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001042:	d101      	bne.n	8001048 <dir_sdi+0x9e>
 8001044:	2301      	movs	r3, #1
 8001046:	e02e      	b.n	80010a6 <dir_sdi+0xfc>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d905      	bls.n	800105a <dir_sdi+0xb0>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	699a      	ldr	r2, [r3, #24]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	429a      	cmp	r2, r3
 8001058:	d801      	bhi.n	800105e <dir_sdi+0xb4>
				return FR_INT_ERR;
 800105a:	2302      	movs	r3, #2
 800105c:	e023      	b.n	80010a6 <dir_sdi+0xfc>
			idx -= ic;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	807b      	strh	r3, [r7, #2]
		while (idx >= ic) {	/* Follow cluster chain */
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	897b      	ldrh	r3, [r7, #10]
 800106a:	429a      	cmp	r2, r3
 800106c:	d2df      	bcs.n	800102e <dir_sdi+0x84>
		}
		dj->clust = clst;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fcf0 	bl	8000a60 <clust2sect>
 8001080:	4602      	mov	r2, r0
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	b29b      	uxth	r3, r3
 8001088:	441a      	add	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	441a      	add	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80010ae:	b590      	push	{r4, r7, lr}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	88db      	ldrh	r3, [r3, #6]
 80010bc:	3301      	adds	r3, #1
 80010be:	813b      	strh	r3, [r7, #8]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 80010c0:	893b      	ldrh	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <dir_next+0x20>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <dir_next+0x24>
		return FR_NO_FILE;
 80010ce:	2304      	movs	r3, #4
 80010d0:	e0bd      	b.n	800124e <dir_next+0x1a0>

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 80010d2:	893b      	ldrh	r3, [r7, #8]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	b29b      	uxth	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 80a8 	bne.w	8001230 <dir_next+0x182>
		dj->sect++;					/* Next sector */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d108      	bne.n	8001104 <dir_next+0x56>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	891b      	ldrh	r3, [r3, #8]
 80010f8:	893a      	ldrh	r2, [r7, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	f0c0 8098 	bcc.w	8001230 <dir_next+0x182>
				return FR_NO_FILE;
 8001100:	2304      	movs	r3, #4
 8001102:	e0a4      	b.n	800124e <dir_next+0x1a0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	b29b      	uxth	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	789b      	ldrb	r3, [r3, #2]
 8001112:	3b01      	subs	r3, #1
 8001114:	4013      	ands	r3, r2
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 808a 	bne.w	8001230 <dir_next+0x182>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f7ff fcb8 	bl	8000a9c <get_fat>
 800112c:	60f8      	str	r0, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d801      	bhi.n	8001138 <dir_next+0x8a>
 8001134:	2302      	movs	r3, #2
 8001136:	e08a      	b.n	800124e <dir_next+0x1a0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113e:	d101      	bne.n	8001144 <dir_next+0x96>
 8001140:	2301      	movs	r3, #1
 8001142:	e084      	b.n	800124e <dir_next+0x1a0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d863      	bhi.n	8001218 <dir_next+0x16a>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <dir_next+0xac>
 8001156:	2304      	movs	r3, #4
 8001158:	e079      	b.n	800124e <dir_next+0x1a0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	4619      	mov	r1, r3
 8001164:	4610      	mov	r0, r2
 8001166:	f7ff fe97 	bl	8000e98 <create_chain>
 800116a:	60f8      	str	r0, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <dir_next+0xc8>
 8001172:	2307      	movs	r3, #7
 8001174:	e06b      	b.n	800124e <dir_next+0x1a0>
					if (clst == 1) return FR_INT_ERR;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <dir_next+0xd2>
 800117c:	2302      	movs	r3, #2
 800117e:	e066      	b.n	800124e <dir_next+0x1a0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001186:	d101      	bne.n	800118c <dir_next+0xde>
 8001188:	2301      	movs	r3, #1
 800118a:	e060      	b.n	800124e <dir_next+0x1a0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fc0a 	bl	80009ac <move_window>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <dir_next+0xf4>
 800119e:	2301      	movs	r3, #1
 80011a0:	e055      	b.n	800124e <dir_next+0x1a0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3330      	adds	r3, #48	; 0x30
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fba3 	bl	80008fa <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681c      	ldr	r4, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fc4e 	bl	8000a60 <clust2sect>
 80011c4:	4603      	mov	r3, r0
 80011c6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80011c8:	2300      	movs	r3, #0
 80011ca:	72fb      	strb	r3, [r7, #11]
 80011cc:	e016      	b.n	80011fc <dir_next+0x14e>
						dj->fs->wflag = 1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fbe5 	bl	80009ac <move_window>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <dir_next+0x13e>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e030      	b.n	800124e <dir_next+0x1a0>
						dj->fs->winsect++;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f2:	3201      	adds	r2, #1
 80011f4:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	3301      	adds	r3, #1
 80011fa:	72fb      	strb	r3, [r7, #11]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	7afa      	ldrb	r2, [r7, #11]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3e2      	bcc.n	80011ce <dir_next+0x120>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001212:	7afa      	ldrb	r2, [r7, #11]
 8001214:	1a8a      	subs	r2, r1, r2
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68f9      	ldr	r1, [r7, #12]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fc1b 	bl	8000a60 <clust2sect>
 800122a:	4602      	mov	r2, r0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	893a      	ldrh	r2, [r7, #8]
 8001234:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800123e:	893b      	ldrh	r3, [r7, #8]
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	015b      	lsls	r3, r3, #5
 8001246:	441a      	add	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	615a      	str	r2, [r3, #20]

	return FR_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}

08001256 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fea2 	bl	8000faa <dir_sdi>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <dir_find+0x1e>
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	e037      	b.n	80012e4 <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f7ff fb94 	bl	80009ac <move_window>
 8001284:	4603      	mov	r3, r0
 8001286:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d126      	bne.n	80012dc <dir_find+0x86>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <dir_find+0x50>
 80012a0:	2304      	movs	r3, #4
 80012a2:	75fb      	strb	r3, [r7, #23]
 80012a4:	e01d      	b.n	80012e2 <dir_find+0x8c>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	330b      	adds	r3, #11
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <dir_find+0x72>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	220b      	movs	r2, #11
 80012ba:	4619      	mov	r1, r3
 80012bc:	6938      	ldr	r0, [r7, #16]
 80012be:	f7ff fb35 	bl	800092c <mem_cmp>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <dir_find+0x8a>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
 80012c8:	2100      	movs	r1, #0
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff feef 	bl	80010ae <dir_next>
 80012d0:	4603      	mov	r3, r0
 80012d2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0cc      	beq.n	8001274 <dir_find+0x1e>
 80012da:	e002      	b.n	80012e2 <dir_find+0x8c>
		if (res != FR_OK) break;
 80012dc:	bf00      	nop
 80012de:	e000      	b.n	80012e2 <dir_find+0x8c>
			break;
 80012e0:	bf00      	nop

	return res;
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
 80012f4:	2100      	movs	r1, #0
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fe57 	bl	8000faa <dir_sdi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d121      	bne.n	800134a <dir_register+0x5e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f7ff fb4b 	bl	80009ac <move_window>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d113      	bne.n	8001348 <dir_register+0x5c>
			c = *dj->dir;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	73bb      	strb	r3, [r7, #14]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	2be5      	cmp	r3, #229	; 0xe5
 800132c:	d00d      	beq.n	800134a <dir_register+0x5e>
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00a      	beq.n	800134a <dir_register+0x5e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
 8001334:	2101      	movs	r1, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff feb9 	bl	80010ae <dir_next>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0df      	beq.n	8001306 <dir_register+0x1a>
 8001346:	e000      	b.n	800134a <dir_register+0x5e>
			if (res != FR_OK) break;
 8001348:	bf00      	nop
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11f      	bne.n	8001390 <dir_register+0xa4>
		res = move_window(dj->fs, dj->sect);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff fb26 	bl	80009ac <move_window>
 8001360:	4603      	mov	r3, r0
 8001362:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d112      	bne.n	8001390 <dir_register+0xa4>
			dir = dj->dir;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8001370:	2220      	movs	r2, #32
 8001372:	2100      	movs	r1, #0
 8001374:	68b8      	ldr	r0, [r7, #8]
 8001376:	f7ff fac0 	bl	80008fa <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	220b      	movs	r2, #11
 8001380:	4619      	mov	r1, r3
 8001382:	68b8      	ldr	r0, [r7, #8]
 8001384:	f7ff fa9c 	bl	80008c0 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	60fb      	str	r3, [r7, #12]
	mem_set(sfn, ' ', 11);
 80013ac:	220b      	movs	r2, #11
 80013ae:	2120      	movs	r1, #32
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff faa2 	bl	80008fa <mem_set>
	si = i = b = 0; ni = 8;
 80013b6:	2300      	movs	r3, #0
 80013b8:	77fb      	strb	r3, [r7, #31]
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	2308      	movs	r3, #8
 80013c4:	61bb      	str	r3, [r7, #24]
	p = *path;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60bb      	str	r3, [r7, #8]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	617a      	str	r2, [r7, #20]
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80013da:	7fbb      	ldrb	r3, [r7, #30]
 80013dc:	2b20      	cmp	r3, #32
 80013de:	d953      	bls.n	8001488 <create_name+0xec>
 80013e0:	7fbb      	ldrb	r3, [r7, #30]
 80013e2:	2b2f      	cmp	r3, #47	; 0x2f
 80013e4:	d050      	beq.n	8001488 <create_name+0xec>
 80013e6:	7fbb      	ldrb	r3, [r7, #30]
 80013e8:	2b5c      	cmp	r3, #92	; 0x5c
 80013ea:	d04d      	beq.n	8001488 <create_name+0xec>
		if (c == '.' || i >= ni) {
 80013ec:	7fbb      	ldrb	r3, [r7, #30]
 80013ee:	2b2e      	cmp	r3, #46	; 0x2e
 80013f0:	d003      	beq.n	80013fa <create_name+0x5e>
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d30f      	bcc.n	800141a <create_name+0x7e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d102      	bne.n	8001406 <create_name+0x6a>
 8001400:	7fbb      	ldrb	r3, [r7, #30]
 8001402:	2b2e      	cmp	r3, #46	; 0x2e
 8001404:	d001      	beq.n	800140a <create_name+0x6e>
 8001406:	2306      	movs	r3, #6
 8001408:	e073      	b.n	80014f2 <create_name+0x156>
			i = 8; ni = 11;
 800140a:	2308      	movs	r3, #8
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	230b      	movs	r3, #11
 8001410:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	77fb      	strb	r3, [r7, #31]
 8001418:	e035      	b.n	8001486 <create_name+0xea>
		}
		if (c >= 0x80) {				/* Extended char? */
 800141a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800141e:	2b00      	cmp	r3, #0
 8001420:	da08      	bge.n	8001434 <create_name+0x98>
			b |= 3;						/* Eliminate NT flag */
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	f043 0303 	orr.w	r3, r3, #3
 8001428:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 800142a:	7fbb      	ldrb	r3, [r7, #30]
 800142c:	3b80      	subs	r3, #128	; 0x80
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <create_name+0x160>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8001434:	7fbb      	ldrb	r3, [r7, #30]
 8001436:	4619      	mov	r1, r3
 8001438:	4831      	ldr	r0, [pc, #196]	; (8001500 <create_name+0x164>)
 800143a:	f7ff fa9d 	bl	8000978 <chk_chr>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <create_name+0xac>
				return FR_INVALID_NAME;
 8001444:	2306      	movs	r3, #6
 8001446:	e054      	b.n	80014f2 <create_name+0x156>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8001448:	7fbb      	ldrb	r3, [r7, #30]
 800144a:	2b40      	cmp	r3, #64	; 0x40
 800144c:	d907      	bls.n	800145e <create_name+0xc2>
 800144e:	7fbb      	ldrb	r3, [r7, #30]
 8001450:	2b5a      	cmp	r3, #90	; 0x5a
 8001452:	d804      	bhi.n	800145e <create_name+0xc2>
				b |= 2;
 8001454:	7ffb      	ldrb	r3, [r7, #31]
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	77fb      	strb	r3, [r7, #31]
 800145c:	e00c      	b.n	8001478 <create_name+0xdc>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	2b60      	cmp	r3, #96	; 0x60
 8001462:	d909      	bls.n	8001478 <create_name+0xdc>
 8001464:	7fbb      	ldrb	r3, [r7, #30]
 8001466:	2b7a      	cmp	r3, #122	; 0x7a
 8001468:	d806      	bhi.n	8001478 <create_name+0xdc>
					b |= 1; c -= 0x20;
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	77fb      	strb	r3, [r7, #31]
 8001472:	7fbb      	ldrb	r3, [r7, #30]
 8001474:	3b20      	subs	r3, #32
 8001476:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	613a      	str	r2, [r7, #16]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	7fba      	ldrb	r2, [r7, #30]
 8001484:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001486:	e7a1      	b.n	80013cc <create_name+0x30>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	441a      	add	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8001492:	7fbb      	ldrb	r3, [r7, #30]
 8001494:	2b20      	cmp	r3, #32
 8001496:	d801      	bhi.n	800149c <create_name+0x100>
 8001498:	2304      	movs	r3, #4
 800149a:	e000      	b.n	800149e <create_name+0x102>
 800149c:	2300      	movs	r3, #0
 800149e:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <create_name+0x10e>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e023      	b.n	80014f2 <create_name+0x156>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2be5      	cmp	r3, #229	; 0xe5
 80014b0:	d102      	bne.n	80014b8 <create_name+0x11c>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2205      	movs	r2, #5
 80014b6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d102      	bne.n	80014c4 <create_name+0x128>
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80014c4:	7ffb      	ldrb	r3, [r7, #31]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d103      	bne.n	80014d6 <create_name+0x13a>
 80014ce:	7fbb      	ldrb	r3, [r7, #30]
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d103      	bne.n	80014e8 <create_name+0x14c>
 80014e0:	7fbb      	ldrb	r3, [r7, #30]
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	77bb      	strb	r3, [r7, #30]

	sfn[NS] = c;		/* Store NT flag, File name is created */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	330b      	adds	r3, #11
 80014ec:	7fba      	ldrb	r2, [r7, #30]
 80014ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80014f0:	2300      	movs	r3, #0
#endif
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08006468 	.word	0x08006468
 8001500:	080063e4 	.word	0x080063e4

08001504 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b2f      	cmp	r3, #47	; 0x2f
 8001514:	d003      	beq.n	800151e <follow_path+0x1a>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b5c      	cmp	r3, #92	; 0x5c
 800151c:	d102      	bne.n	8001524 <follow_path+0x20>
		path++;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b1f      	cmp	r3, #31
 8001530:	d809      	bhi.n	8001546 <follow_path+0x42>
		res = dir_sdi(dj, 0);
 8001532:	2100      	movs	r1, #0
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fd38 	bl	8000faa <dir_sdi>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
		dj->dir = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
 8001544:	e056      	b.n	80015f4 <follow_path+0xf0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
 8001546:	463b      	mov	r3, r7
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff26 	bl	800139c <create_name>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d145      	bne.n	80015e6 <follow_path+0xe2>
			res = dir_find(dj);				/* Find it */
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fe7b 	bl	8001256 <dir_find>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
			ns = *(dj->fn+NS);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	7adb      	ldrb	r3, [r3, #11]
 800156a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <follow_path+0x84>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d138      	bne.n	80015ea <follow_path+0xe6>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d135      	bne.n	80015ee <follow_path+0xea>
 8001582:	2305      	movs	r3, #5
 8001584:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001586:	e032      	b.n	80015ee <follow_path+0xea>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b00      	cmp	r3, #0
 8001590:	d12f      	bne.n	80015f2 <follow_path+0xee>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	330b      	adds	r3, #11
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <follow_path+0xa8>
				res = FR_NO_PATH; break;
 80015a6:	2305      	movs	r3, #5
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e023      	b.n	80015f4 <follow_path+0xf0>
			}
			dj->sclust = LD_CLUST(dir);
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3315      	adds	r3, #21
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3314      	adds	r3, #20
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	321b      	adds	r2, #27
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	0212      	lsls	r2, r2, #8
 80015ce:	b211      	sxth	r1, r2
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	321a      	adds	r2, #26
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	b212      	sxth	r2, r2
 80015d8:	430a      	orrs	r2, r1
 80015da:	b212      	sxth	r2, r2
 80015dc:	b292      	uxth	r2, r2
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
 80015e4:	e7af      	b.n	8001546 <follow_path+0x42>
			if (res != FR_OK) break;
 80015e6:	bf00      	nop
 80015e8:	e004      	b.n	80015f4 <follow_path+0xf0>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 80015ea:	bf00      	nop
 80015ec:	e002      	b.n	80015f4 <follow_path+0xf0>
				break;
 80015ee:	bf00      	nop
 80015f0:	e000      	b.n	80015f4 <follow_path+0xf0>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 80015f2:	bf00      	nop
		}
	}

	return res;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7858      	ldrb	r0, [r3, #1]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001614:	2301      	movs	r3, #1
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	f000 ff06 	bl	8002428 <disk_read>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <check_fs+0x26>
		return 3;
 8001622:	2303      	movs	r3, #3
 8001624:	e04a      	b.n	80016bc <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f203 232e 	addw	r3, r3, #558	; 0x22e
 800162c:	3301      	adds	r3, #1
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21b      	sxth	r3, r3
 8001640:	4a20      	ldr	r2, [pc, #128]	; (80016c4 <check_fs+0xc4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d001      	beq.n	800164a <check_fs+0x4a>
		return 2;
 8001646:	2302      	movs	r3, #2
 8001648:	e038      	b.n	80016bc <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3366      	adds	r3, #102	; 0x66
 800164e:	3303      	adds	r3, #3
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	061a      	lsls	r2, r3, #24
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3366      	adds	r3, #102	; 0x66
 8001658:	3302      	adds	r3, #2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	4313      	orrs	r3, r2
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	3266      	adds	r2, #102	; 0x66
 8001664:	3201      	adds	r2, #1
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	0212      	lsls	r2, r2, #8
 800166a:	4313      	orrs	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8001672:	4313      	orrs	r3, r2
 8001674:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <check_fs+0xc8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <check_fs+0x82>
		return 0;
 800167e:	2300      	movs	r3, #0
 8001680:	e01c      	b.n	80016bc <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3382      	adds	r3, #130	; 0x82
 8001686:	3303      	adds	r3, #3
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	061a      	lsls	r2, r3, #24
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3382      	adds	r3, #130	; 0x82
 8001690:	3302      	adds	r3, #2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	4313      	orrs	r3, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	3282      	adds	r2, #130	; 0x82
 800169c:	3201      	adds	r2, #1
 800169e:	7812      	ldrb	r2, [r2, #0]
 80016a0:	0212      	lsls	r2, r2, #8
 80016a2:	4313      	orrs	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	f892 2082 	ldrb.w	r2, [r2, #130]	; 0x82
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016b0:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <check_fs+0xc8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <check_fs+0xba>
		return 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <check_fs+0xbc>

	return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	ffffaa55 	.word	0xffffaa55
 80016c8:	00544146 	.word	0x00544146

080016cc <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b092      	sub	sp, #72	; 0x48
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	71fb      	strb	r3, [r7, #7]
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3b30      	subs	r3, #48	; 0x30
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 80016e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ea:	2b09      	cmp	r3, #9
 80016ec:	d80b      	bhi.n	8001706 <chk_mounted+0x3a>
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	3301      	adds	r3, #1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b3a      	cmp	r3, #58	; 0x3a
 80016f6:	d106      	bne.n	8001706 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	3302      	adds	r3, #2
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e001      	b.n	800170a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
 8001706:	2300      	movs	r3, #0
 8001708:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 800170a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
 8001710:	230b      	movs	r3, #11
 8001712:	e25f      	b.n	8001bd4 <chk_mounted+0x508>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 8001714:	4aa6      	ldr	r2, [pc, #664]	; (80019b0 <chk_mounted+0x2e4>)
 8001716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001722:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <chk_mounted+0x62>
 800172a:	230c      	movs	r3, #12
 800172c:	e252      	b.n	8001bd4 <chk_mounted+0x508>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01a      	beq.n	800176c <chk_mounted+0xa0>
		stat = disk_status(fs->drv);
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	785b      	ldrb	r3, [r3, #1]
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fe60 	bl	8002400 <disk_status>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
 8001746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10c      	bne.n	800176c <chk_mounted+0xa0>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <chk_mounted+0x9c>
 8001758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <chk_mounted+0x9c>
				return FR_WRITE_PROTECTED;
 8001764:	230a      	movs	r3, #10
 8001766:	e235      	b.n	8001bd4 <chk_mounted+0x508>
#endif
			return FR_OK;				/* The file system object is valid */
 8001768:	2300      	movs	r3, #0
 800176a:	e233      	b.n	8001bd4 <chk_mounted+0x508>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 8001772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001774:	b2da      	uxtb	r2, r3
 8001776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001778:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 800177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fd54 	bl	800222c <disk_initialize>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800178a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <chk_mounted+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 8001796:	2303      	movs	r3, #3
 8001798:	e21c      	b.n	8001bd4 <chk_mounted+0x508>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <chk_mounted+0xe4>
 80017a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <chk_mounted+0xe4>
		return FR_WRITE_PROTECTED;
 80017ac:	230a      	movs	r3, #10
 80017ae:	e211      	b.n	8001bd4 <chk_mounted+0x508>
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 80017b0:	2300      	movs	r3, #0
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017b8:	f7ff ff22 	bl	8001600 <check_fs>
 80017bc:	4603      	mov	r3, r0
 80017be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 80017c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d122      	bne.n	8001810 <chk_mounted+0x144>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	f503 73f7 	add.w	r3, r3, #494	; 0x1ee
 80017d0:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {									/* Is the partition existing? */
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	3304      	adds	r3, #4
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d019      	beq.n	8001810 <chk_mounted+0x144>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	330b      	adds	r3, #11
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	061a      	lsls	r2, r3, #24
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	330a      	adds	r3, #10
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	041b      	lsls	r3, r3, #16
 80017ec:	4313      	orrs	r3, r2
 80017ee:	6a3a      	ldr	r2, [r7, #32]
 80017f0:	3209      	adds	r2, #9
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	0212      	lsls	r2, r2, #8
 80017f6:	4313      	orrs	r3, r2
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	3208      	adds	r2, #8
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);					/* Check the partition */
 8001802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001806:	f7ff fefb 	bl	8001600 <check_fs>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8001810:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001814:	2b03      	cmp	r3, #3
 8001816:	d101      	bne.n	800181c <chk_mounted+0x150>
 8001818:	2301      	movs	r3, #1
 800181a:	e1db      	b.n	8001bd4 <chk_mounted+0x508>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 800181c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <chk_mounted+0x15c>
 8001824:	230d      	movs	r3, #13
 8001826:	e1d5      	b.n	8001bd4 <chk_mounted+0x508>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001842:	d001      	beq.n	8001848 <chk_mounted+0x17c>
		return FR_NO_FILESYSTEM;
 8001844:	230d      	movs	r3, #13
 8001846:	e1c5      	b.n	8001bd4 <chk_mounted+0x508>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	b29b      	uxth	r3, r3
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 8001862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001864:	2b00      	cmp	r3, #0
 8001866:	d112      	bne.n	800188e <chk_mounted+0x1c2>
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800186e:	061a      	lsls	r2, r3, #24
 8001870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001872:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	4313      	orrs	r3, r2
 800187a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187c:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001880:	0212      	lsls	r2, r2, #8
 8001882:	4313      	orrs	r3, r2
 8001884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001886:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800188a:	4313      	orrs	r3, r2
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
 800188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001892:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189a:	77fb      	strb	r3, [r7, #31]
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	7ffa      	ldrb	r2, [r7, #31]
 80018a0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 80018a2:	7ffb      	ldrb	r3, [r7, #31]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d004      	beq.n	80018b2 <chk_mounted+0x1e6>
 80018a8:	7ffb      	ldrb	r3, [r7, #31]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d001      	beq.n	80018b2 <chk_mounted+0x1e6>
 80018ae:	230d      	movs	r3, #13
 80018b0:	e190      	b.n	8001bd4 <chk_mounted+0x508>
	fasize *= b;										/* Number of sectors for FAT area */
 80018b2:	7ffa      	ldrb	r2, [r7, #31]
 80018b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c2:	77fb      	strb	r3, [r7, #31]
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	7ffa      	ldrb	r2, [r7, #31]
 80018c8:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <chk_mounted+0x210>
 80018d0:	7ffa      	ldrb	r2, [r7, #31]
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <chk_mounted+0x214>
 80018dc:	230d      	movs	r3, #13
 80018de:	e179      	b.n	8001bd4 <chk_mounted+0x508>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 80018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	891b      	ldrh	r3, [r3, #8]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <chk_mounted+0x242>
 800190a:	230d      	movs	r3, #13
 800190c:	e162      	b.n	8001bd4 <chk_mounted+0x508>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b21a      	sxth	r2, r3
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800191e:	b21b      	sxth	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b21b      	sxth	r3, r3
 8001924:	b29b      	uxth	r3, r3
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8001928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192a:	2b00      	cmp	r3, #0
 800192c:	d112      	bne.n	8001954 <chk_mounted+0x288>
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001934:	061a      	lsls	r2, r3, #24
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800193c:	041b      	lsls	r3, r3, #16
 800193e:	4313      	orrs	r3, r2
 8001940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001942:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 8001946:	0212      	lsls	r2, r2, #8
 8001948:	4313      	orrs	r3, r2
 800194a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800194c:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8001950:	4313      	orrs	r3, r2
 8001952:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b21a      	sxth	r2, r3
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001964:	b21b      	sxth	r3, r3
 8001966:	4313      	orrs	r3, r2
 8001968:	b21b      	sxth	r3, r3
 800196a:	83bb      	strh	r3, [r7, #28]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 800196c:	8bbb      	ldrh	r3, [r7, #28]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <chk_mounted+0x2aa>
 8001972:	230d      	movs	r3, #13
 8001974:	e12e      	b.n	8001bd4 <chk_mounted+0x508>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
 8001976:	8bba      	ldrh	r2, [r7, #28]
 8001978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197a:	4413      	add	r3, r2
 800197c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800197e:	8912      	ldrh	r2, [r2, #8]
 8001980:	0912      	lsrs	r2, r2, #4
 8001982:	b292      	uxth	r2, r2
 8001984:	4413      	add	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	429a      	cmp	r2, r3
 800198e:	d201      	bcs.n	8001994 <chk_mounted+0x2c8>
 8001990:	230d      	movs	r3, #13
 8001992:	e11f      	b.n	8001bd4 <chk_mounted+0x508>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8001994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800199c:	7892      	ldrb	r2, [r2, #2]
 800199e:	fbb3 f3f2 	udiv	r3, r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d104      	bne.n	80019b4 <chk_mounted+0x2e8>
 80019aa:	230d      	movs	r3, #13
 80019ac:	e112      	b.n	8001bd4 <chk_mounted+0x508>
 80019ae:	bf00      	nop
 80019b0:	20000118 	.word	0x20000118
	fmt = FS_FAT12;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d902      	bls.n	80019ca <chk_mounted+0x2fe>
 80019c4:	2302      	movs	r3, #2
 80019c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d902      	bls.n	80019da <chk_mounted+0x30e>
 80019d4:	2303      	movs	r3, #3
 80019d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1c9a      	adds	r2, r3, #2
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
 80019e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	441a      	add	r2, r3
 80019e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80019ec:	8bba      	ldrh	r2, [r7, #28]
 80019ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f0:	441a      	add	r2, r3
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
 80019f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d11e      	bne.n	8001a3c <chk_mounted+0x370>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	891b      	ldrh	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <chk_mounted+0x33e>
 8001a06:	230d      	movs	r3, #13
 8001a08:	e0e4      	b.n	8001bd4 <chk_mounted+0x508>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001a10:	061a      	lsls	r2, r3, #24
 8001a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a14:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1e:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
 8001a22:	0212      	lsls	r2, r2, #8
 8001a24:	4313      	orrs	r3, r2
 8001a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a28:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
 8001a3a:	e01f      	b.n	8001a7c <chk_mounted+0x3b0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	891b      	ldrh	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <chk_mounted+0x37c>
 8001a44:	230d      	movs	r3, #13
 8001a46:	e0c5      	b.n	8001bd4 <chk_mounted+0x508>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	6a1a      	ldr	r2, [r3, #32]
 8001a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a4e:	441a      	add	r2, r3
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001a54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d103      	bne.n	8001a64 <chk_mounted+0x398>
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	e00a      	b.n	8001a7a <chk_mounted+0x3ae>
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	085a      	lsrs	r2, r3, #1
 8001a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a86:	0a5b      	lsrs	r3, r3, #9
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d201      	bcs.n	8001a90 <chk_mounted+0x3c4>
		return FR_NO_FILESYSTEM;
 8001a8c:	230d      	movs	r3, #13
 8001a8e:	e0a1      	b.n	8001bd4 <chk_mounted+0x508>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a96:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
 8001a9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	f040 8081 	bne.w	8001baa <chk_mounted+0x4de>
	 	fs->fsi_flag = 0;
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	2200      	movs	r2, #0
 8001aac:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21a      	sxth	r2, r3
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	441a      	add	r2, r3
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	7858      	ldrb	r0, [r3, #1]
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f000 fca2 	bl	8002428 <disk_read>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d15f      	bne.n	8001baa <chk_mounted+0x4de>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	f893 322f 	ldrb.w	r3, [r3, #559]	; 0x22f
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 8001b00:	4a36      	ldr	r2, [pc, #216]	; (8001bdc <chk_mounted+0x510>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d151      	bne.n	8001baa <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b08:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001b0c:	061a      	lsls	r2, r3, #24
 8001b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b10:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	4313      	orrs	r3, r2
 8001b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b1a:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8001b1e:	0212      	lsls	r2, r2, #8
 8001b20:	4313      	orrs	r3, r2
 8001b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b24:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001b28:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <chk_mounted+0x514>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d13c      	bne.n	8001baa <chk_mounted+0x4de>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 8001b36:	061a      	lsls	r2, r3, #24
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	4313      	orrs	r3, r2
 8001b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b44:	f892 2215 	ldrb.w	r2, [r2, #533]	; 0x215
 8001b48:	0212      	lsls	r2, r2, #8
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4e:	f892 2214 	ldrb.w	r2, [r2, #532]	; 0x214
 8001b52:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <chk_mounted+0x518>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d127      	bne.n	8001baa <chk_mounted+0x4de>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8001b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5c:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8001b60:	061a      	lsls	r2, r3, #24
 8001b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b64:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6e:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 8001b72:	0212      	lsls	r2, r2, #8
 8001b74:	4313      	orrs	r3, r2
 8001b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b78:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b80:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8001b88:	061a      	lsls	r2, r3, #24
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8c:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	4313      	orrs	r3, r2
 8001b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b96:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 8001b9a:	0212      	lsls	r2, r2, #8
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ba0:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8001baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bac:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001bb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <chk_mounted+0x51c>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <chk_mounted+0x51c>)
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <chk_mounted+0x51c>)
 8001bc0:	881a      	ldrh	r2, [r3, #0]
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
 8001bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3748      	adds	r7, #72	; 0x48
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	ffffaa55 	.word	0xffffaa55
 8001be0:	41615252 	.word	0x41615252
 8001be4:	61417272 	.word	0x61417272
 8001be8:	2000011c 	.word	0x2000011c

08001bec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <f_mount+0x16>
		return FR_INVALID_DRIVE;
 8001bfe:	230b      	movs	r3, #11
 8001c00:	e016      	b.n	8001c30 <f_mount+0x44>
	rfs = FatFs[vol];				/* Get current fs object */
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <f_mount+0x50>)
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	60fb      	str	r3, [r7, #12]

	if (rfs) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <f_mount+0x2c>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <f_mount+0x38>
		fs->fs_type = 0;			/* Clear new fs object */
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4905      	ldr	r1, [pc, #20]	; (8001c3c <f_mount+0x50>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return FR_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000118 	.word	0x20000118

08001c40 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b092      	sub	sp, #72	; 0x48
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	71fb      	strb	r3, [r7, #7]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	71fb      	strb	r3, [r7, #7]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	f107 011c 	add.w	r1, r7, #28
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fd2d 	bl	80016cc <chk_mounted>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
	if (res == FR_OK)
 8001c7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <f_open+0x5a>
		res = follow_path(&dj, path);	/* Follow the file path */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc38 	bl	8001504 <follow_path>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	dir = dj.dir;
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
 8001c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <f_open+0x72>
		if (!dir)	/* Current dir itself */
 8001ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <f_open+0x72>
			res = FR_INVALID_NAME;
 8001cac:	2306      	movs	r3, #6
 8001cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 031c 	and.w	r3, r3, #28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80b2 	beq.w	8001e22 <f_open+0x1e2>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
 8001cbe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <f_open+0xac>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8001cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d107      	bne.n	8001cde <f_open+0x9e>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fb0a 	bl	80012ec <dir_register>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	71fb      	strb	r3, [r7, #7]
			dir = dj.dir;					/* New entry */
 8001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8001cea:	e012      	b.n	8001d12 <f_open+0xd2>
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <f_open+0xbe>
				res = FR_EXIST;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001cfc:	e009      	b.n	8001d12 <f_open+0xd2>
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
 8001cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d00:	330b      	adds	r3, #11
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f003 0311 	and.w	r3, r3, #17
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <f_open+0xd2>
					res = FR_DENIED;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8001d12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 80a1 	bne.w	8001e5e <f_open+0x21e>
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 809b 	beq.w	8001e5e <f_open+0x21e>
			dw = get_fattime();					/* Created time */
 8001d28:	f000 fc7c 	bl	8002624 <get_fattime>
 8001d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
 8001d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d30:	330e      	adds	r3, #14
 8001d32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3a:	330f      	adds	r3, #15
 8001d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	0a12      	lsrs	r2, r2, #8
 8001d42:	b292      	uxth	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d4a:	3310      	adds	r3, #16
 8001d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d4e:	0c12      	lsrs	r2, r2, #16
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d56:	3311      	adds	r3, #17
 8001d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d5a:	0e12      	lsrs	r2, r2, #24
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8001d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d62:	330b      	adds	r3, #11
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 8001d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6a:	331c      	adds	r3, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d72:	331d      	adds	r3, #29
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7a:	331e      	adds	r3, #30
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d82:	331f      	adds	r3, #31
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
 8001d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8a:	3315      	adds	r3, #21
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	021b      	lsls	r3, r3, #8
 8001d90:	b21a      	sxth	r2, r3
 8001d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d94:	3314      	adds	r3, #20
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001da4:	321b      	adds	r2, #27
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	0212      	lsls	r2, r2, #8
 8001daa:	b211      	sxth	r1, r2
 8001dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001dae:	321a      	adds	r2, #26
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	b212      	sxth	r2, r2
 8001db4:	430a      	orrs	r2, r1
 8001db6:	b212      	sxth	r2, r2
 8001db8:	b292      	uxth	r2, r2
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
 8001dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc0:	331a      	adds	r3, #26
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dc8:	331b      	adds	r3, #27
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd0:	3314      	adds	r3, #20
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd8:	3315      	adds	r3, #21
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	2201      	movs	r2, #1
 8001de2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
 8001de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d039      	beq.n	8001e5e <f_open+0x21e>
				dw = dj.fs->winsect;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f800 	bl	8000dfa <remove_chain>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if (res == FR_OK) {
 8001e00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d12a      	bne.n	8001e5e <f_open+0x21e>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e0c:	3a01      	subs	r2, #1
 8001e0e:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fdc9 	bl	80009ac <move_window>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e20:	e01d      	b.n	8001e5e <f_open+0x21e>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
 8001e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d119      	bne.n	8001e5e <f_open+0x21e>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 8001e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2c:	330b      	adds	r3, #11
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <f_open+0x200>
				res = FR_NO_FILE;
 8001e38:	2304      	movs	r3, #4
 8001e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e3e:	e00e      	b.n	8001e5e <f_open+0x21e>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <f_open+0x21e>
 8001e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4c:	330b      	adds	r3, #11
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <f_open+0x21e>
					res = FR_DENIED;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}
	}
	if (res == FR_OK) {
 8001e5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <f_open+0x246>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <f_open+0x238>
			mode |= FA__WRITTEN;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f043 0320 	orr.w	r3, r3, #32
 8001e76:	71fb      	strb	r3, [r7, #7]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001e84:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
 8001e86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d13f      	bne.n	8001f0e <f_open+0x2ce>
		fp->flag = mode;					/* File access mode */
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	719a      	strb	r2, [r3, #6]
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
 8001e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e96:	3315      	adds	r3, #21
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea0:	3314      	adds	r3, #20
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001eb0:	321b      	adds	r2, #27
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	b211      	sxth	r1, r2
 8001eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001eba:	321a      	adds	r2, #26
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	b212      	sxth	r2, r2
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	b212      	sxth	r2, r2
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ece:	331f      	adds	r3, #31
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	061a      	lsls	r2, r3, #24
 8001ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed6:	331e      	adds	r3, #30
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	4313      	orrs	r3, r2
 8001ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ee0:	321d      	adds	r2, #29
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	0212      	lsls	r2, r2, #8
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001eea:	321c      	adds	r2, #28
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	88da      	ldrh	r2, [r3, #6]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
 8001f0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3748      	adds	r7, #72	; 0x48
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <SELECT>:
static
BYTE PowerFlag = 0;     /* indicates if "power" is on */

static
void SELECT (void) 		// CS w stan niski
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	GPIO_ResetBits(SD_PORT_SS, SD_BIT_SS);
 8001f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <SELECT+0x14>)
 8001f26:	f7fe fbcb 	bl	80006c0 <GPIO_ResetBits>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <DESELECT>:

static
void DESELECT (void) 	// CS w stan wysoki
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	GPIO_SetBits(SD_PORT_SS, SD_BIT_SS);
 8001f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <DESELECT+0x14>)
 8001f3e:	f7fe fbb1 	bl	80006a4 <GPIO_SetBits>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40010c00 	.word	0x40010c00

08001f4c <SpiTransmitSD>:



uint8_t SpiTransmitSD( uint8_t cmd )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8001f56:	bf00      	nop
 8001f58:	2102      	movs	r1, #2
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <SpiTransmitSD+0x4c>)
 8001f5c:	f7fe fc95 	bl	800088a <SPI_I2S_GetFlagStatus>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f8      	beq.n	8001f58 <SpiTransmitSD+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	480a      	ldr	r0, [pc, #40]	; (8001f98 <SpiTransmitSD+0x4c>)
 8001f6e:	f7fe fc53 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 8001f72:	bf00      	nop
 8001f74:	2101      	movs	r1, #1
 8001f76:	4808      	ldr	r0, [pc, #32]	; (8001f98 <SpiTransmitSD+0x4c>)
 8001f78:	f7fe fc87 	bl	800088a <SPI_I2S_GetFlagStatus>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f8      	beq.n	8001f74 <SpiTransmitSD+0x28>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <SpiTransmitSD+0x4c>)
 8001f84:	f7fe fc56 	bl	8000834 <SPI_I2S_ReceiveData>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	81fb      	strh	r3, [r7, #14]

	return recData;
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	b2db      	uxtb	r3, r3

}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40003800 	.word	0x40003800

08001f9c <xmit_spi>:



static
void xmit_spi (BYTE Data)  // Wyslanie bajtu do SD
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
	SpiTransmitSD(Data);
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ffcf 	bl	8001f4c <SpiTransmitSD>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <rcvr_spi>:

static
BYTE rcvr_spi (void) 		// Odebranie bajtu z SD
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
	 u8 Data = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	71fb      	strb	r3, [r7, #7]

	 Data = SpiTransmitSD(0xFF);
 8001fc0:	20ff      	movs	r0, #255	; 0xff
 8001fc2:	f7ff ffc3 	bl	8001f4c <SpiTransmitSD>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
//
//  // Odebranie bajtu
//  while (SPI_I2S_GetFlagStatus(SD_SPI, SPI_I2S_FLAG_RXNE) == RESET);
//  Data = SPI_I2S_ReceiveData(SD_SPI);

  return Data;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <rcvr_spi_m>:


static
void rcvr_spi_m (BYTE *dst)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    *dst = rcvr_spi();
 8001fdc:	f7ff ffeb 	bl	8001fb6 <rcvr_spi>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	701a      	strb	r2, [r3, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
    BYTE res;

    Timer2 = 50;    /* Wait for ready in timeout of 500ms */
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <wait_ready+0x34>)
 8001ff8:	2232      	movs	r2, #50	; 0x32
 8001ffa:	701a      	strb	r2, [r3, #0]
    rcvr_spi();
 8001ffc:	f7ff ffdb 	bl	8001fb6 <rcvr_spi>
    do
        res = rcvr_spi();
 8002000:	f7ff ffd9 	bl	8001fb6 <rcvr_spi>
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
    while ((res != 0xFF) && Timer2);
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2bff      	cmp	r3, #255	; 0xff
 800200c:	d004      	beq.n	8002018 <wait_ready+0x28>
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <wait_ready+0x34>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f3      	bne.n	8002000 <wait_ready+0x10>

    return res;
 8002018:	79fb      	ldrb	r3, [r7, #7]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000011f 	.word	0x2000011f

08002028 <power_on>:
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	u8 i;
 
  DESELECT();      // CS = 1
 800202e:	f7ff ff81 	bl	8001f34 <DESELECT>

  //Wyslanie 10 razy 0xFF co daje ponad 80 (>74) cykle zegara 
  //wymagane przez specyfikacje SD
  for (i = 0; i < 10; i++)
 8002032:	2300      	movs	r3, #0
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	e005      	b.n	8002044 <power_on+0x1c>
    xmit_spi(0xFF);
 8002038:	20ff      	movs	r0, #255	; 0xff
 800203a:	f7ff ffaf 	bl	8001f9c <xmit_spi>
  for (i = 0; i < 10; i++)
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	3301      	adds	r3, #1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	2b09      	cmp	r3, #9
 8002048:	d9f6      	bls.n	8002038 <power_on+0x10>

  PowerFlag = 1;
 800204a:	4b03      	ldr	r3, [pc, #12]	; (8002058 <power_on+0x30>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000121 	.word	0x20000121

0800205c <power_off>:


static
void power_off (void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <power_off+0x14>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000121 	.word	0x20000121

08002074 <rcvr_datablock>:
static
bool rcvr_datablock (
    BYTE *buff,            /* Data buffer to store received data */
    UINT btr            /* Byte count (must be even number) */
)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    BYTE token;

    Timer1 = 10;
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <rcvr_datablock+0x68>)
 8002080:	220a      	movs	r2, #10
 8002082:	701a      	strb	r2, [r3, #0]
    do {                            /* Wait for data packet in timeout of 100ms */
        token = rcvr_spi();
 8002084:	f7ff ff97 	bl	8001fb6 <rcvr_spi>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
    } while ((token == 0xFF) && Timer1);
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2bff      	cmp	r3, #255	; 0xff
 8002090:	d104      	bne.n	800209c <rcvr_datablock+0x28>
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <rcvr_datablock+0x68>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f3      	bne.n	8002084 <rcvr_datablock+0x10>
    if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2bfe      	cmp	r3, #254	; 0xfe
 80020a0:	d001      	beq.n	80020a6 <rcvr_datablock+0x32>
 80020a2:	2300      	movs	r3, #0
 80020a4:	e016      	b.n	80020d4 <rcvr_datablock+0x60>

    do {                            /* Receive the data block into buffer */
        rcvr_spi_m(buff++);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff91 	bl	8001fd4 <rcvr_spi_m>
        rcvr_spi_m(buff++);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff8b 	bl	8001fd4 <rcvr_spi_m>
    } while (btr -= 2);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3b02      	subs	r3, #2
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ed      	bne.n	80020a6 <rcvr_datablock+0x32>
    rcvr_spi();                        /* Discard CRC */
 80020ca:	f7ff ff74 	bl	8001fb6 <rcvr_spi>
    rcvr_spi();
 80020ce:	f7ff ff72 	bl	8001fb6 <rcvr_spi>

    return TRUE;                    /* Return with success */
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000011e 	.word	0x2000011e

080020e0 <xmit_datablock>:
static
bool xmit_datablock (
    const BYTE *buff,    /* 512 byte data block to be transmitted */
    BYTE token            /* Data/Stop token */
)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
  BYTE resp, wc;
	u32 i = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]

    if (wait_ready() != 0xFF) return FALSE;
 80020f0:	f7ff ff7e 	bl	8001ff0 <wait_ready>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2bff      	cmp	r3, #255	; 0xff
 80020f8:	d001      	beq.n	80020fe <xmit_datablock+0x1e>
 80020fa:	2300      	movs	r3, #0
 80020fc:	e040      	b.n	8002180 <xmit_datablock+0xa0>

    xmit_spi(token);                    /* Xmit data token */
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff4b 	bl	8001f9c <xmit_spi>
    if (token != 0xFD) 
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	2bfd      	cmp	r3, #253	; 0xfd
 800210a:	d031      	beq.n	8002170 <xmit_datablock+0x90>
	{    /* Is data token */
        wc = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	73bb      	strb	r3, [r7, #14]
        do 
		{                            /* Xmit the 512 byte data block to MMC */
            xmit_spi(*buff++);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff3f 	bl	8001f9c <xmit_spi>
            xmit_spi(*buff++);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff38 	bl	8001f9c <xmit_spi>
        } while (--wc);
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	3b01      	subs	r3, #1
 8002130:	73bb      	strb	r3, [r7, #14]
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1eb      	bne.n	8002110 <xmit_datablock+0x30>

 		rcvr_spi();
 8002138:	f7ff ff3d 	bl	8001fb6 <rcvr_spi>
		rcvr_spi();
 800213c:	f7ff ff3b 	bl	8001fb6 <rcvr_spi>

		while (i <= 64)
 8002140:	e00b      	b.n	800215a <xmit_datablock+0x7a>
		{
        	resp = rcvr_spi();                /* Reveive data response */
 8002142:	f7ff ff38 	bl	8001fb6 <rcvr_spi>
 8002146:	4603      	mov	r3, r0
 8002148:	73fb      	strb	r3, [r7, #15]
        	if ((resp & 0x1F) == 0x05)        /* If not accepted, return with error */
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b05      	cmp	r3, #5
 8002152:	d006      	beq.n	8002162 <xmit_datablock+0x82>
            	break;
			i++;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
		while (i <= 64)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d9f0      	bls.n	8002142 <xmit_datablock+0x62>
 8002160:	e000      	b.n	8002164 <xmit_datablock+0x84>
            	break;
 8002162:	bf00      	nop
    	}
		while (rcvr_spi() == 0);
 8002164:	bf00      	nop
 8002166:	f7ff ff26 	bl	8001fb6 <rcvr_spi>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0fa      	beq.n	8002166 <xmit_datablock+0x86>
	}
	if ((resp & 0x1F) == 0x05)  
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b05      	cmp	r3, #5
 8002178:	d101      	bne.n	800217e <xmit_datablock+0x9e>
		return TRUE;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <xmit_datablock+0xa0>
	else 
		return FALSE;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <send_cmd>:
static
BYTE send_cmd (
    BYTE cmd,        /* Command byte */
    DWORD arg        /* Argument */
)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;

    if (wait_ready() != 0xFF) return 0xFF;
 8002194:	f7ff ff2c 	bl	8001ff0 <wait_ready>
 8002198:	4603      	mov	r3, r0
 800219a:	2bff      	cmp	r3, #255	; 0xff
 800219c:	d001      	beq.n	80021a2 <send_cmd+0x1a>
 800219e:	23ff      	movs	r3, #255	; 0xff
 80021a0:	e040      	b.n	8002224 <send_cmd+0x9c>

    /* Send command packet */
    xmit_spi(cmd);                        /* Command */
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fef9 	bl	8001f9c <xmit_spi>
    xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	0e1b      	lsrs	r3, r3, #24
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fef3 	bl	8001f9c <xmit_spi>
    xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff feed 	bl	8001f9c <xmit_spi>
    xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fee7 	bl	8001f9c <xmit_spi>
    xmit_spi((BYTE)arg);                /* Argument[7..0] */
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fee2 	bl	8001f9c <xmit_spi>
    n = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d101      	bne.n	80021e6 <send_cmd+0x5e>
 80021e2:	2395      	movs	r3, #149	; 0x95
 80021e4:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b48      	cmp	r3, #72	; 0x48
 80021ea:	d101      	bne.n	80021f0 <send_cmd+0x68>
 80021ec:	2387      	movs	r3, #135	; 0x87
 80021ee:	73fb      	strb	r3, [r7, #15]
    xmit_spi(n);
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fed2 	bl	8001f9c <xmit_spi>

    /* Receive command response */
    if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b4c      	cmp	r3, #76	; 0x4c
 80021fc:	d101      	bne.n	8002202 <send_cmd+0x7a>
 80021fe:	f7ff feda 	bl	8001fb6 <rcvr_spi>
    n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
 8002202:	230a      	movs	r3, #10
 8002204:	73fb      	strb	r3, [r7, #15]
    do
        res = rcvr_spi();
 8002206:	f7ff fed6 	bl	8001fb6 <rcvr_spi>
 800220a:	4603      	mov	r3, r0
 800220c:	73bb      	strb	r3, [r7, #14]
    while ((res & 0x80) && --n);
 800220e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da05      	bge.n	8002222 <send_cmd+0x9a>
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	3b01      	subs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f1      	bne.n	8002206 <send_cmd+0x7e>

    return res;            /* Return with the response value */
 8002222:	7bbb      	ldrb	r3, [r7, #14]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
    BYTE n, ty, ocr[4];


    if (drv) return STA_NOINIT;            /* Supports only single drive */
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <disk_initialize+0x14>
 800223c:	2301      	movs	r3, #1
 800223e:	e0d5      	b.n	80023ec <disk_initialize+0x1c0>
    if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
 8002240:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <disk_initialize+0x1c8>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <disk_initialize+0x2a>
 800224e:	4b69      	ldr	r3, [pc, #420]	; (80023f4 <disk_initialize+0x1c8>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	e0ca      	b.n	80023ec <disk_initialize+0x1c0>

    power_on();                            /* Force socket power on */
 8002256:	f7ff fee7 	bl	8002028 <power_on>
    //send_initial_clock_train();

    SELECT();                /* CS = L */
 800225a:	f7ff fe5f 	bl	8001f1c <SELECT>
    ty = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	73bb      	strb	r3, [r7, #14]
    if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
 8002262:	2100      	movs	r1, #0
 8002264:	2040      	movs	r0, #64	; 0x40
 8002266:	f7ff ff8f 	bl	8002188 <send_cmd>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 80a5 	bne.w	80023bc <disk_initialize+0x190>
        Timer1 = 100;                        /* Initialization timeout of 1000 msec */
 8002272:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <disk_initialize+0x1cc>)
 8002274:	2264      	movs	r2, #100	; 0x64
 8002276:	701a      	strb	r2, [r3, #0]
        if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
 8002278:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800227c:	2048      	movs	r0, #72	; 0x48
 800227e:	f7ff ff83 	bl	8002188 <send_cmd>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d158      	bne.n	800233a <disk_initialize+0x10e>
            for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
 800228c:	e00c      	b.n	80022a8 <disk_initialize+0x7c>
 800228e:	7bfc      	ldrb	r4, [r7, #15]
 8002290:	f7ff fe91 	bl	8001fb6 <rcvr_spi>
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	4423      	add	r3, r4
 800229e:	f803 2c08 	strb.w	r2, [r3, #-8]
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	3301      	adds	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d9ef      	bls.n	800228e <disk_initialize+0x62>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
 80022ae:	7abb      	ldrb	r3, [r7, #10]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f040 8083 	bne.w	80023bc <disk_initialize+0x190>
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	2baa      	cmp	r3, #170	; 0xaa
 80022ba:	d17f      	bne.n	80023bc <disk_initialize+0x190>
                do {
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 80022bc:	2100      	movs	r1, #0
 80022be:	2077      	movs	r0, #119	; 0x77
 80022c0:	f7ff ff62 	bl	8002188 <send_cmd>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d807      	bhi.n	80022da <disk_initialize+0xae>
 80022ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80022ce:	2069      	movs	r0, #105	; 0x69
 80022d0:	f7ff ff5a 	bl	8002188 <send_cmd>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <disk_initialize+0xba>
                } while (Timer1);
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <disk_initialize+0x1cc>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1eb      	bne.n	80022bc <disk_initialize+0x90>
 80022e4:	e000      	b.n	80022e8 <disk_initialize+0xbc>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
 80022e6:	bf00      	nop
                if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
 80022e8:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <disk_initialize+0x1cc>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d064      	beq.n	80023bc <disk_initialize+0x190>
 80022f2:	2100      	movs	r1, #0
 80022f4:	207a      	movs	r0, #122	; 0x7a
 80022f6:	f7ff ff47 	bl	8002188 <send_cmd>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d15d      	bne.n	80023bc <disk_initialize+0x190>
                    for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e00c      	b.n	8002320 <disk_initialize+0xf4>
 8002306:	7bfc      	ldrb	r4, [r7, #15]
 8002308:	f7ff fe55 	bl	8001fb6 <rcvr_spi>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	4423      	add	r3, r4
 8002316:	f803 2c08 	strb.w	r2, [r3, #-8]
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	3301      	adds	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d9ef      	bls.n	8002306 <disk_initialize+0xda>
                    ty = (ocr[0] & 0x40) ? 6 : 2;
 8002326:	7a3b      	ldrb	r3, [r7, #8]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <disk_initialize+0x108>
 8002330:	2306      	movs	r3, #6
 8002332:	e000      	b.n	8002336 <disk_initialize+0x10a>
 8002334:	2302      	movs	r3, #2
 8002336:	73bb      	strb	r3, [r7, #14]
 8002338:	e040      	b.n	80023bc <disk_initialize+0x190>
                }
            }
        } else {                            /* SDC Ver1 or MMC */
            ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
 800233a:	2100      	movs	r1, #0
 800233c:	2077      	movs	r0, #119	; 0x77
 800233e:	f7ff ff23 	bl	8002188 <send_cmd>
 8002342:	4603      	mov	r3, r0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d808      	bhi.n	800235a <disk_initialize+0x12e>
 8002348:	2100      	movs	r1, #0
 800234a:	2069      	movs	r0, #105	; 0x69
 800234c:	f7ff ff1c 	bl	8002188 <send_cmd>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d801      	bhi.n	800235a <disk_initialize+0x12e>
 8002356:	2302      	movs	r3, #2
 8002358:	e000      	b.n	800235c <disk_initialize+0x130>
 800235a:	2301      	movs	r3, #1
 800235c:	73bb      	strb	r3, [r7, #14]
            do {
                if (ty == 2) {
 800235e:	7bbb      	ldrb	r3, [r7, #14]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d10e      	bne.n	8002382 <disk_initialize+0x156>
                    if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
 8002364:	2100      	movs	r1, #0
 8002366:	2077      	movs	r0, #119	; 0x77
 8002368:	f7ff ff0e 	bl	8002188 <send_cmd>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d80e      	bhi.n	8002390 <disk_initialize+0x164>
 8002372:	2100      	movs	r1, #0
 8002374:	2069      	movs	r0, #105	; 0x69
 8002376:	f7ff ff07 	bl	8002188 <send_cmd>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <disk_initialize+0x164>
 8002380:	e00d      	b.n	800239e <disk_initialize+0x172>
                } else {
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 8002382:	2100      	movs	r1, #0
 8002384:	2041      	movs	r0, #65	; 0x41
 8002386:	f7ff feff 	bl	8002188 <send_cmd>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <disk_initialize+0x170>
                }
            } while (Timer1);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <disk_initialize+0x1cc>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e1      	bne.n	800235e <disk_initialize+0x132>
 800239a:	e000      	b.n	800239e <disk_initialize+0x172>
                    if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
 800239c:	bf00      	nop
            if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <disk_initialize+0x1cc>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <disk_initialize+0x18c>
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	2050      	movs	r0, #80	; 0x50
 80023ae:	f7ff feeb 	bl	8002188 <send_cmd>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <disk_initialize+0x190>
                ty = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	73bb      	strb	r3, [r7, #14]
        }
    }
    CardType = ty;
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <disk_initialize+0x1d0>)
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	7013      	strb	r3, [r2, #0]
    DESELECT();            /* CS = H */
 80023c2:	f7ff fdb7 	bl	8001f34 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 80023c6:	f7ff fdf6 	bl	8001fb6 <rcvr_spi>

    if (ty)           /* Initialization succeded */
 80023ca:	7bbb      	ldrb	r3, [r7, #14]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <disk_initialize+0x1b6>
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <disk_initialize+0x1c8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <disk_initialize+0x1c8>)
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e001      	b.n	80023e6 <disk_initialize+0x1ba>
	else          /* Initialization failed */
        power_off();
 80023e2:	f7ff fe3b 	bl	800205c <power_off>

    return Stat;
 80023e6:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <disk_initialize+0x1c8>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	20000000 	.word	0x20000000
 80023f8:	2000011e 	.word	0x2000011e
 80023fc:	20000120 	.word	0x20000120

08002400 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
    BYTE drv        /* Physical drive nmuber (0) */
)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;        /* Supports only single drive */
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <disk_status+0x14>
 8002410:	2301      	movs	r3, #1
 8002412:	e002      	b.n	800241a <disk_status+0x1a>
    return Stat;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <disk_status+0x24>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	20000000 	.word	0x20000000

08002428 <disk_read>:
    BYTE drv,            /* Physical drive nmuber (0) */
    BYTE *buff,            /* Pointer to the data buffer to store read data */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	4613      	mov	r3, r2
 800243a:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <disk_read+0x20>
 8002442:	7bbb      	ldrb	r3, [r7, #14]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <disk_read+0x24>
 8002448:	2304      	movs	r3, #4
 800244a:	e054      	b.n	80024f6 <disk_read+0xce>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800244c:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <disk_read+0xd8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <disk_read+0x36>
 800245a:	2303      	movs	r3, #3
 800245c:	e04b      	b.n	80024f6 <disk_read+0xce>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <disk_read+0xdc>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <disk_read+0x48>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8002470:	f7ff fd54 	bl	8001f1c <SELECT>

    if (count == 1) {    /* Single block read */
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d111      	bne.n	800249e <disk_read+0x76>
        if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	2051      	movs	r0, #81	; 0x51
 800247e:	f7ff fe83 	bl	8002188 <send_cmd>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d12c      	bne.n	80024e2 <disk_read+0xba>
            && rcvr_datablock(buff, 512))
 8002488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800248c:	68b8      	ldr	r0, [r7, #8]
 800248e:	f7ff fdf1 	bl	8002074 <rcvr_datablock>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d024      	beq.n	80024e2 <disk_read+0xba>
            count = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	73bb      	strb	r3, [r7, #14]
 800249c:	e021      	b.n	80024e2 <disk_read+0xba>
    }
    else {                /* Multiple block read */
        if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	2052      	movs	r0, #82	; 0x52
 80024a2:	f7ff fe71 	bl	8002188 <send_cmd>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11a      	bne.n	80024e2 <disk_read+0xba>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 80024ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	f7ff fddf 	bl	8002074 <rcvr_datablock>
 80024b6:	4603      	mov	r3, r0
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10a      	bne.n	80024d8 <disk_read+0xb0>
                buff += 512;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80024c8:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	73bb      	strb	r3, [r7, #14]
 80024d0:	7bbb      	ldrb	r3, [r7, #14]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1ea      	bne.n	80024ac <disk_read+0x84>
 80024d6:	e000      	b.n	80024da <disk_read+0xb2>
                if (!rcvr_datablock(buff, 512)) break;
 80024d8:	bf00      	nop
            send_cmd(CMD12, 0);                /* STOP_TRANSMISSION */
 80024da:	2100      	movs	r1, #0
 80024dc:	204c      	movs	r0, #76	; 0x4c
 80024de:	f7ff fe53 	bl	8002188 <send_cmd>
        }
    }

    DESELECT();            /* CS = H */
 80024e2:	f7ff fd27 	bl	8001f34 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 80024e6:	f7ff fd66 	bl	8001fb6 <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 80024ea:	7bbb      	ldrb	r3, [r7, #14]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000
 8002504:	20000120 	.word	0x20000120

08002508 <disk_write>:
    BYTE drv,            /* Physical drive nmuber (0) */
    const BYTE *buff,    /* Pointer to the data to be written */
    DWORD sector,        /* Start sector number (LBA) */
    BYTE count            /* Sector count (1..255) */
)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	4613      	mov	r3, r2
 800251a:	73bb      	strb	r3, [r7, #14]
    if (drv || !count) return RES_PARERR;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <disk_write+0x20>
 8002522:	7bbb      	ldrb	r3, [r7, #14]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <disk_write+0x24>
 8002528:	2304      	movs	r3, #4
 800252a:	e072      	b.n	8002612 <disk_write+0x10a>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800252c:	4b3b      	ldr	r3, [pc, #236]	; (800261c <disk_write+0x114>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <disk_write+0x36>
 800253a:	2303      	movs	r3, #3
 800253c:	e069      	b.n	8002612 <disk_write+0x10a>
    if (Stat & STA_PROTECT) return RES_WRPRT;
 800253e:	4b37      	ldr	r3, [pc, #220]	; (800261c <disk_write+0x114>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <disk_write+0x48>
 800254c:	2302      	movs	r3, #2
 800254e:	e060      	b.n	8002612 <disk_write+0x10a>

    if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <disk_write+0x118>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <disk_write+0x5a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	607b      	str	r3, [r7, #4]

    SELECT();            /* CS = L */
 8002562:	f7ff fcdb 	bl	8001f1c <SELECT>

    if (count == 1) {    /* Single block write */
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d110      	bne.n	800258e <disk_write+0x86>
        if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	2058      	movs	r0, #88	; 0x58
 8002570:	f7ff fe0a 	bl	8002188 <send_cmd>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d141      	bne.n	80025fe <disk_write+0xf6>
            && xmit_datablock(buff, 0xFE))
 800257a:	21fe      	movs	r1, #254	; 0xfe
 800257c:	68b8      	ldr	r0, [r7, #8]
 800257e:	f7ff fdaf 	bl	80020e0 <xmit_datablock>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d03a      	beq.n	80025fe <disk_write+0xf6>
            count = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	73bb      	strb	r3, [r7, #14]
 800258c:	e037      	b.n	80025fe <disk_write+0xf6>
    }
    else {                /* Multiple block write */
        if (CardType & 2) {
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <disk_write+0x118>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <disk_write+0xa4>
            send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
 800259a:	2100      	movs	r1, #0
 800259c:	2077      	movs	r0, #119	; 0x77
 800259e:	f7ff fdf3 	bl	8002188 <send_cmd>
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	4619      	mov	r1, r3
 80025a6:	2057      	movs	r0, #87	; 0x57
 80025a8:	f7ff fdee 	bl	8002188 <send_cmd>
        }
        if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	2059      	movs	r0, #89	; 0x59
 80025b0:	f7ff fdea 	bl	8002188 <send_cmd>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d121      	bne.n	80025fe <disk_write+0xf6>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 80025ba:	21fc      	movs	r1, #252	; 0xfc
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f7ff fd8f 	bl	80020e0 <xmit_datablock>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f083 0301 	eor.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <disk_write+0xdc>
                buff += 512;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025d4:	60bb      	str	r3, [r7, #8]
            } while (--count);
 80025d6:	7bbb      	ldrb	r3, [r7, #14]
 80025d8:	3b01      	subs	r3, #1
 80025da:	73bb      	strb	r3, [r7, #14]
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1eb      	bne.n	80025ba <disk_write+0xb2>
 80025e2:	e000      	b.n	80025e6 <disk_write+0xde>
                if (!xmit_datablock(buff, 0xFC)) break;
 80025e4:	bf00      	nop
            if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
 80025e6:	21fd      	movs	r1, #253	; 0xfd
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff fd79 	bl	80020e0 <xmit_datablock>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <disk_write+0xf6>
                count = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73bb      	strb	r3, [r7, #14]
        }
    }

    DESELECT();            /* CS = H */
 80025fe:	f7ff fc99 	bl	8001f34 <DESELECT>
    rcvr_spi();            /* Idle (Release DO) */
 8002602:	f7ff fcd8 	bl	8001fb6 <rcvr_spi>

    return count ? RES_ERROR : RES_OK;
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000000 	.word	0x20000000
 8002620:	20000120 	.word	0x20000120

08002624 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime (void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

    return  ((2011UL-1980) << 25)    // Year = 2011
 8002628:	4b02      	ldr	r3, [pc, #8]	; (8002634 <get_fattime+0x10>)
            | (12U << 11)            // Hour = 12
            | (0U << 5)              // Min = 00
            | (0U >> 1)              // Sec = 00
            ;

}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	3e216000 	.word	0x3e216000

08002638 <Rfm12bInit>:
/* SPI CS LOW and High should be declared in platform layer file
#define NSEL_RFM12_LOW
#define NSEL_RFM12_HIGH
*/

void Rfm12bInit() {
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  Rfm12bSpiInit();
 800263c:	f000 f9a2 	bl	8002984 <Rfm12bSpiInit>
  Rfm12bWriteCmd(0x0000);
 8002640:	2000      	movs	r0, #0
 8002642:	f000 fa0b 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x80E7); //EL,EF,868band,12.0pF
 8002646:	f248 00e7 	movw	r0, #32999	; 0x80e7
 800264a:	f000 fa07 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x8208); //no tx/rx
 800264e:	f248 2008 	movw	r0, #33288	; 0x8208
 8002652:	f000 fa03 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xA640); //frequency select
 8002656:	f24a 6040 	movw	r0, #42560	; 0xa640
 800265a:	f000 f9ff 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC648); //4,8kbps
 800265e:	f24c 6048 	movw	r0, #50760	; 0xc648
 8002662:	f000 f9fb 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x94A0); //VDI,FAST,134kHz,0dBm,-103dBm
 8002666:	f249 40a0 	movw	r0, #38048	; 0x94a0
 800266a:	f000 f9f7 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC2AC); //AL,!ml,DIG,DQD4
 800266e:	f24c 20ac 	movw	r0, #49836	; 0xc2ac
 8002672:	f000 f9f3 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCA81); //FIFO8,SYNC,!ff,DR
 8002676:	f64c 2081 	movw	r0, #51841	; 0xca81
 800267a:	f000 f9ef 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCED4); //SYNC=2DD4G
 800267e:	f64c 60d4 	movw	r0, #52948	; 0xced4
 8002682:	f000 f9eb 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC483); //@PWR,NO RSTRIC,!st,!fi,OE,EN
 8002686:	f24c 4083 	movw	r0, #50307	; 0xc483
 800268a:	f000 f9e7 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0x9850); //!mp,90kHz,MAX OUT
 800268e:	f649 0050 	movw	r0, #38992	; 0x9850
 8002692:	f000 f9e3 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xCC17); //OB1COB0, LPX,IddyCDDITCBW0
 8002696:	f64c 4017 	movw	r0, #52247	; 0xcc17
 800269a:	f000 f9df 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xE000); //NOT USE
 800269e:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80026a2:	f000 f9db 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC800); //NOT USE
 80026a6:	f44f 4048 	mov.w	r0, #51200	; 0xc800
 80026aa:	f000 f9d7 	bl	8002a5c <Rfm12bWriteCmd>
  Rfm12bWriteCmd(0xC040); //1.66MHz,2.2V
 80026ae:	f24c 0040 	movw	r0, #49216	; 0xc040
 80026b2:	f000 f9d3 	bl	8002a5c <Rfm12bWriteCmd>
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}

080026ba <Rrm12bObjInit>:

void Rrm12bObjInit (volatile rfm12bObj_t * rfm12bObj, uint8_t module_addr){
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
	memset(rfm12bObj, 0, sizeof(rfm12bObj_t));
 80026c6:	f240 320e 	movw	r2, #782	; 0x30e
 80026ca:	2100      	movs	r1, #0
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f003 f9e3 	bl	8005a98 <memset>
	rfm12bObj->module_addr = module_addr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	rfm12bObj->state = receive;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <Rfm12bTranssmitSeqByte>:

//void Rfm12bClearBuff (rfm12bBuff_t * rfm12bBuff){
//	memset(rfm12bBuff, 0, sizeof (rfm12bBuff_t));
//}

static void Rfm12bTranssmitSeqByte(volatile rfm12bBuff_t * txBuff){
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
	uint16_t cmd = 0xB800;
 80026f2:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 80026f6:	81fb      	strh	r3, [r7, #14]
	uint8_t data = txBuff->data[txBuff->pos++];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	b2d1      	uxtb	r1, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	7011      	strb	r1, [r2, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	791b      	ldrb	r3, [r3, #4]
 800270e:	737b      	strb	r3, [r7, #13]
	Rfm12bWriteCmd(cmd | data);
 8002710:	7b7b      	ldrb	r3, [r7, #13]
 8002712:	b29a      	uxth	r2, r3
 8002714:	89fb      	ldrh	r3, [r7, #14]
 8002716:	4313      	orrs	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	f000 f99e 	bl	8002a5c <Rfm12bWriteCmd>
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <Rfm12bStartSending>:


void Rfm12bStartSending (volatile rfm12bObj_t * rfm12b, uint8_t *data, uint8_t dataNb, uint8_t toAddr){
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	460b      	mov	r3, r1
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	4613      	mov	r3, r2
 800273c:	71bb      	strb	r3, [r7, #6]

	rfm12b->txBuff.data[0] = 0xAA;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	22aa      	movs	r2, #170	; 0xaa
 8002742:	711a      	strb	r2, [r3, #4]
	rfm12b->txBuff.data[1] = 0xAA;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	22aa      	movs	r2, #170	; 0xaa
 8002748:	715a      	strb	r2, [r3, #5]
	rfm12b->txBuff.data[2] = 0x2D;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	222d      	movs	r2, #45	; 0x2d
 800274e:	719a      	strb	r2, [r3, #6]
	rfm12b->txBuff.data[3] = 0xD4;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	22d4      	movs	r2, #212	; 0xd4
 8002754:	71da      	strb	r2, [r3, #7]
	rfm12b->txBuff.data[4] = dataNb;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	721a      	strb	r2, [r3, #8]
	rfm12b->txBuff.data[5] = toAddr;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	79ba      	ldrb	r2, [r7, #6]
 8002760:	725a      	strb	r2, [r3, #9]
	rfm12b->txBuff.data[6] = rfm12b->module_addr;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 330c 	ldrb.w	r3, [r3, #780]	; 0x30c
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	729a      	strb	r2, [r3, #10]
	memcpy((void*)&rfm12b->txBuff.data[ALL_HEADER_SIZE], data, dataNb);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	330b      	adds	r3, #11
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 f969 	bl	8005a4e <memcpy>
	rfm12b->txBuff.pos =0;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
	rfm12b->txBuff.dataNb = dataNb + ALL_HEADER_SIZE;
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	3307      	adds	r3, #7
 8002786:	b2da      	uxtb	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	705a      	strb	r2, [r3, #1]
    rfm12bSwitchTx();
 800278c:	f000 f8f2 	bl	8002974 <rfm12bSwitchTx>
    rfm12b->state = transmit;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ffa5 	bl	80026ea <Rfm12bTranssmitSeqByte>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <Rfm12bMantainSending>:



void Rfm12bMantainSending(volatile rfm12bObj_t * rfm12b){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	 if (rfm12b->txBuff.pos <= rfm12b->txBuff.dataNb){
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	785b      	ldrb	r3, [r3, #1]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	429a      	cmp	r2, r3
 80027be:	d804      	bhi.n	80027ca <Rfm12bMantainSending+0x22>
		 Rfm12bTranssmitSeqByte(&rfm12b->txBuff);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff91 	bl	80026ea <Rfm12bTranssmitSeqByte>
	 } else{
		 rfm12b->state = receive;
		 rfm12bSwitchRx();
	 }
}
 80027c8:	e005      	b.n	80027d6 <Rfm12bMantainSending+0x2e>
		 rfm12b->state = receive;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		 rfm12bSwitchRx();
 80027d2:	f000 f8c7 	bl	8002964 <rfm12bSwitchRx>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <Rfm12bMoveDataToCompletedBuff>:

static void Rfm12bMoveDataToCompletedBuff(volatile rfm12bObj_t * rfm12b){
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
	memset(&rfm12b->completedRxBuff, 0, sizeof (rfm12bBuff_t));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 f950 	bl	8005a98 <memset>
	memcpy(rfm12b->completedRxBuff.data,  &rfm12b->rxBuff.data[L2_HEADER_SIZE], rfm12b->rxBuff.dataNb);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f203 110b 	addw	r1, r3, #267	; 0x10b
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	f003 f91e 	bl	8005a4e <memcpy>
	rfm12b->completedRxBuff.dataNb = rfm12b->rxBuff.dataNb;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 8002818:	b2da      	uxtb	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
	rfm12b->completedRxBuff.rxTOAddr = rfm12b->rxBuff.data[ADDR_TO_POS]; //cast this values as frame to struct
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
	rfm12b->completedRxBuff.rxFromAddr = rfm12b->rxBuff.data[ADDR_FROM_POS];
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002834:	b2da      	uxtb	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
	memset(&rfm12b->rxBuff, 0, sizeof (rfm12bBuff_t));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002842:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f925 	bl	8005a98 <memset>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <Rfm12bresetRx>:

static void Rfm12bresetRx(volatile rfm12bObj_t * rfm12b){
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
	rfm12b->rxBuff.pos = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	rfm12bFifoReset();
 8002866:	f000 f863 	bl	8002930 <rfm12bFifoReset>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <Rfm12bMantainreceiving>:

/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/
/* [BYTE_NUMBER] [ADDR_RECEIVER] [ADDR_SENDER] [DATA] */
/*+++++++++++++++++++++Frame++++++++++++++++++++++++++*/

void Rfm12bMantainreceiving(volatile rfm12bObj_t * rfm12b){
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = rfm12bReadFifo();
 800287c:	f000 f864 	bl	8002948 <rfm12bReadFifo>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
	if (rfm12b->rxBuff.pos < RFM12_MAX_FRAME_SIZE){
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
		rfm12b->rxBuff.data[rfm12b->rxBuff.pos++] = rxByte;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8002890:	b2db      	uxtb	r3, r3
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	b2d1      	uxtb	r1, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
 800289c:	461a      	mov	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		rfm12b->rxBuff.dataNb =  rfm12b->rxBuff.data[BYTE_NB_POS];
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		if (rfm12b->rxBuff.pos == (rfm12b->rxBuff.dataNb + L2_HEADER_SIZE)){
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	3303      	adds	r3, #3
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10b      	bne.n	80028e6 <Rfm12bMantainreceiving+0x72>
			Rfm12bMoveDataToCompletedBuff(rfm12b);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff85 	bl	80027de <Rfm12bMoveDataToCompletedBuff>
			Rfm12bresetRx(rfm12b);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffbe 	bl	8002856 <Rfm12bresetRx>
			GPIOC->ODR ^= GPIO_Pin_13;//
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <Rfm12bMantainreceiving+0x7c>)
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <Rfm12bMantainreceiving+0x7c>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028e4:	60d3      	str	r3, [r2, #12]
		}
	} else {
		Rfm12bresetRx(rfm12b);
	}
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40011000 	.word	0x40011000

080028f4 <Rfm12bIrqCallback>:


void Rfm12bIrqCallback (volatile rfm12bObj_t * rfm12b){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	uint16_t status = Rfm12bWriteCmd(0x0000);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f000 f8ad 	bl	8002a5c <Rfm12bWriteCmd>
 8002902:	4603      	mov	r3, r0
 8002904:	81fb      	strh	r3, [r7, #14]

	if (status & RFM12_STATUS_FFIT ){
 8002906:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0c      	bge.n	8002928 <Rfm12bIrqCallback+0x34>
		if (rfm12b->state == transmit){
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d103      	bne.n	8002922 <Rfm12bIrqCallback+0x2e>
			Rfm12bMantainSending(rfm12b);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff44 	bl	80027a8 <Rfm12bMantainSending>
		}
		else{
			Rfm12bMantainreceiving(rfm12b);
		}
	}
}
 8002920:	e002      	b.n	8002928 <Rfm12bIrqCallback+0x34>
			Rfm12bMantainreceiving(rfm12b);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa6 	bl	8002874 <Rfm12bMantainreceiving>
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <rfm12bFifoReset>:
}




void rfm12bFifoReset() {
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0xCA81);
 8002934:	f64c 2081 	movw	r0, #51841	; 0xca81
 8002938:	f000 f890 	bl	8002a5c <Rfm12bWriteCmd>
	Rfm12bWriteCmd(0xCA83);
 800293c:	f64c 2083 	movw	r0, #51843	; 0xca83
 8002940:	f000 f88c 	bl	8002a5c <Rfm12bWriteCmd>
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}

08002948 <rfm12bReadFifo>:
		}
	}
}


uint8_t rfm12bReadFifo(void){
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	uint8_t rxByte = Rfm12bWriteCmd(0xB000);
 800294e:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002952:	f000 f883 	bl	8002a5c <Rfm12bWriteCmd>
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
	return (rxByte&0x00FF);
 800295a:	79fb      	ldrb	r3, [r7, #7]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <rfm12bSwitchRx>:

void rfm12bSwitchRx(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8299);
 8002968:	f248 2099 	movw	r0, #33433	; 0x8299
 800296c:	f000 f876 	bl	8002a5c <Rfm12bWriteCmd>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <rfm12bSwitchTx>:

void rfm12bSwitchTx(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	Rfm12bWriteCmd(0x8239);
 8002978:	f248 2039 	movw	r0, #33337	; 0x8239
 800297c:	f000 f86e 	bl	8002a5c <Rfm12bWriteCmd>
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <Rfm12bSpiInit>:





void Rfm12bSpiInit(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI1 and GPIOA clocks */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800298a:	2101      	movs	r1, #1
 800298c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002990:	f7fd fea4 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002994:	2101      	movs	r1, #1
 8002996:	2004      	movs	r0, #4
 8002998:	f7fd fea0 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800299c:	2101      	movs	r1, #1
 800299e:	2008      	movs	r0, #8
 80029a0:	f7fd fe9c 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80029a4:	23e0      	movs	r3, #224	; 0xe0
 80029a6:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80029a8:	2318      	movs	r3, #24
 80029aa:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80029ac:	2301      	movs	r3, #1
 80029ae:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80029b0:	f107 0308 	add.w	r3, r7, #8
 80029b4:	4619      	mov	r1, r3
 80029b6:	4825      	ldr	r0, [pc, #148]	; (8002a4c <Rfm12bSpiInit+0xc8>)
 80029b8:	f7fd fdb8 	bl	800052c <GPIO_Init>


	//CS hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 80029bc:	2340      	movs	r3, #64	; 0x40
 80029be:	813b      	strh	r3, [r7, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80029c0:	2310      	movs	r3, #16
 80029c2:	72fb      	strb	r3, [r7, #11]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80029c4:	2301      	movs	r3, #1
 80029c6:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4619      	mov	r1, r3
 80029ce:	4820      	ldr	r0, [pc, #128]	; (8002a50 <Rfm12bSpiInit+0xcc>)
 80029d0:	f7fd fdac 	bl	800052c <GPIO_Init>


	/* SPI1 configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80029d4:	2300      	movs	r3, #0
 80029d6:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80029d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80029dc:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
 80029de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e2:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80029e4:	2300      	movs	r3, #0
 80029e6:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80029e8:	2300      	movs	r3, #0
 80029ea:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80029ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f0:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_128;
 80029f2:	2330      	movs	r3, #48	; 0x30
 80029f4:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80029f6:	2300      	movs	r3, #0
 80029f8:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80029fa:	2307      	movs	r3, #7
 80029fc:	83bb      	strh	r3, [r7, #28]
	SPI_SSOutputCmd(SPI1, ENABLE);
 80029fe:	2101      	movs	r1, #1
 8002a00:	4814      	ldr	r0, [pc, #80]	; (8002a54 <Rfm12bSpiInit+0xd0>)
 8002a02:	f7fd ff23 	bl	800084c <SPI_SSOutputCmd>
	SPI_Init(SPI1, &SPI_InitStructure);
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4811      	ldr	r0, [pc, #68]	; (8002a54 <Rfm12bSpiInit+0xd0>)
 8002a0e:	f7fd fea1 	bl	8000754 <SPI_Init>

	/* Enable SPI1  */
	SPI_Cmd(SPI1, ENABLE);
 8002a12:	2101      	movs	r1, #1
 8002a14:	480f      	ldr	r0, [pc, #60]	; (8002a54 <Rfm12bSpiInit+0xd0>)
 8002a16:	f7fd fee0 	bl	80007da <SPI_Cmd>

	GPIO_InitTypeDef PORT;

	// Enable the nRF24L01 GPIO peripherals
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <Rfm12bSpiInit+0xd4>)
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <Rfm12bSpiInit+0xd4>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6193      	str	r3, [r2, #24]

	// Configure CSN pin
	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8002a26:	2310      	movs	r3, #16
 8002a28:	71fb      	strb	r3, [r7, #7]
	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	71bb      	strb	r3, [r7, #6]
	PORT.GPIO_Pin = GPIO_Pin_1;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(GPIOB, &PORT);
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <Rfm12bSpiInit+0xcc>)
 8002a38:	f7fd fd78 	bl	800052c <GPIO_Init>
	GPIO_SetBits(GPIOB, GPIO_Pin_1);
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4804      	ldr	r0, [pc, #16]	; (8002a50 <Rfm12bSpiInit+0xcc>)
 8002a40:	f7fd fe30 	bl	80006a4 <GPIO_SetBits>
}
 8002a44:	bf00      	nop
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40010800 	.word	0x40010800
 8002a50:	40010c00 	.word	0x40010c00
 8002a54:	40013000 	.word	0x40013000
 8002a58:	40021000 	.word	0x40021000

08002a5c <Rfm12bWriteCmd>:



uint16_t Rfm12bWriteCmd( uint16_t cmd )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
	NSEL_RFM12_LOW;
 8002a66:	2102      	movs	r1, #2
 8002a68:	4812      	ldr	r0, [pc, #72]	; (8002ab4 <Rfm12bWriteCmd+0x58>)
 8002a6a:	f7fd fe29 	bl	80006c0 <GPIO_ResetBits>
	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
 8002a6e:	bf00      	nop
 8002a70:	2102      	movs	r1, #2
 8002a72:	4811      	ldr	r0, [pc, #68]	; (8002ab8 <Rfm12bWriteCmd+0x5c>)
 8002a74:	f7fd ff09 	bl	800088a <SPI_I2S_GetFlagStatus>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f8      	beq.n	8002a70 <Rfm12bWriteCmd+0x14>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI1, cmd);
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4619      	mov	r1, r3
 8002a82:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <Rfm12bWriteCmd+0x5c>)
 8002a84:	f7fd fec8 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
 8002a88:	bf00      	nop
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <Rfm12bWriteCmd+0x5c>)
 8002a8e:	f7fd fefc 	bl	800088a <SPI_I2S_GetFlagStatus>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f8      	beq.n	8002a8a <Rfm12bWriteCmd+0x2e>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI1);
 8002a98:	4807      	ldr	r0, [pc, #28]	; (8002ab8 <Rfm12bWriteCmd+0x5c>)
 8002a9a:	f7fd fecb 	bl	8000834 <SPI_I2S_ReceiveData>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	81fb      	strh	r3, [r7, #14]

	NSEL_RFM12_HIGH;
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <Rfm12bWriteCmd+0x58>)
 8002aa6:	f7fd fdfd 	bl	80006a4 <GPIO_SetBits>

	return recData;
 8002aaa:	89fb      	ldrh	r3, [r7, #14]

}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40010c00 	.word	0x40010c00
 8002ab8:	40013000 	.word	0x40013000

08002abc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <NVIC_EnableIRQ+0x2c>)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	79fa      	ldrb	r2, [r7, #7]
 8002ad0:	f002 021f 	and.w	r2, r2, #31
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <EnableGpioClk>:
	 		 #define PIN_CNF_PUSH_PULL		(0x2)
	 		 #define PIN_MODE_OUT			(0x1)



	 		 void EnableGpioClk (GPIO_TypeDef * gpioPort){
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	 		 	if (gpioPort == GPIOA){
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <EnableGpioClk+0x68>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d106      	bne.n	8002b0a <EnableGpioClk+0x1e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <EnableGpioClk+0x6c>)
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6193      	str	r3, [r2, #24]
	 		 	} else if (gpioPort == GPIOC){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
	 		 	} else if (gpioPort == GPIOD){
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
	 		 	}
	 		 }
 8002b08:	e01f      	b.n	8002b4a <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOB){
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <EnableGpioClk+0x70>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d106      	bne.n	8002b20 <EnableGpioClk+0x34>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	6193      	str	r3, [r2, #24]
	 		 }
 8002b1e:	e014      	b.n	8002b4a <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOC){
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a0f      	ldr	r2, [pc, #60]	; (8002b60 <EnableGpioClk+0x74>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <EnableGpioClk+0x4a>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	6193      	str	r3, [r2, #24]
	 		 }
 8002b34:	e009      	b.n	8002b4a <EnableGpioClk+0x5e>
	 		 	} else if (gpioPort == GPIOD){
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <EnableGpioClk+0x78>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d105      	bne.n	8002b4a <EnableGpioClk+0x5e>
	 		 		RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8002b3e:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <EnableGpioClk+0x6c>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f043 0320 	orr.w	r3, r3, #32
 8002b48:	6193      	str	r3, [r2, #24]
	 		 }
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40010c00 	.word	0x40010c00
 8002b60:	40011000 	.word	0x40011000
 8002b64:	40011400 	.word	0x40011400

08002b68 <SetGpioAsInFloating>:
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 	}
	 		 }


	 		 void SetGpioAsInFloating (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	2b07      	cmp	r3, #7
 8002b78:	d81d      	bhi.n	8002bb6 <SetGpioAsInFloating+0x4e>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<pinNb);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	2103      	movs	r1, #3
 8002b82:	fa01 f202 	lsl.w	r2, r1, r2
 8002b86:	43d2      	mvns	r2, r2
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<pinNb);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	2103      	movs	r1, #3
 8002b96:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9a:	43d2      	mvns	r2, r2
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_FLOAT<<pinNb);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	601a      	str	r2, [r3, #0]
	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
	 		 	}
	 		 }
 8002bb4:	e023      	b.n	8002bfe <SetGpioAsInFloating+0x96>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	3a08      	subs	r2, #8
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc6:	43d2      	mvns	r2, r2
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(pinNb-8)*4);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	3a08      	subs	r2, #8
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	2103      	movs	r1, #3
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	43d2      	mvns	r2, r2
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_FLOAT<<(((pinNb-8)*4)+2));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	3a08      	subs	r2, #8
 8002bee:	0092      	lsls	r2, r2, #2
 8002bf0:	3202      	adds	r2, #2
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	605a      	str	r2, [r3, #4]
	 		 }
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <SetGpioAsInPullUp>:




	 		 void SetGpioAsInPullUp (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d82b      	bhi.n	8002c72 <SetGpioAsInPullUp+0x6a>
	 		 		gpioPort->CRL &= ~(PIN_MODE_MSK<<(pinNb*4));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	2103      	movs	r1, #3
 8002c24:	fa01 f202 	lsl.w	r2, r1, r2
 8002c28:	43d2      	mvns	r2, r2
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL &= ~(PIN_CNF_MSK<<((pinNb*4)+2));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	3202      	adds	r2, #2
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c40:	43d2      	mvns	r2, r2
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->CRL |= (PIN_CNF_PUSH_PULL<<((pinNb*4)+2));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	3202      	adds	r2, #2
 8002c52:	2102      	movs	r1, #2
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601a      	str	r2, [r3, #0]
	 		 		gpioPort->ODR |= (1<<pinNb);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	60da      	str	r2, [r3, #12]
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
	 		 		gpioPort->ODR |=  (1<<pinNb);
	 		 	}
	 		 }
 8002c70:	e02d      	b.n	8002cce <SetGpioAsInPullUp+0xc6>
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<((pinNb-8)*4));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	3a08      	subs	r2, #8
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	2103      	movs	r1, #3
 8002c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c82:	43d2      	mvns	r2, r2
 8002c84:	401a      	ands	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	3a08      	subs	r2, #8
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	3202      	adds	r2, #2
 8002c96:	2103      	movs	r1, #3
 8002c98:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9c:	43d2      	mvns	r2, r2
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	3a08      	subs	r2, #8
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	3202      	adds	r2, #2
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->ODR |=  (1<<pinNb);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60da      	str	r2, [r3, #12]
	 		 }
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <SetGpioAsOutAltPushPUll>:




	 		 void SetGpioAsOutAltPushPUll (GPIO_TypeDef * gpioPort, uint8_t pinNb){
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
	 		 	if (pinNb < 8){
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	d92f      	bls.n	8002d4a <SetGpioAsOutAltPushPUll+0x72>
	 		 //
	 		 //		gpioPort->CRL |= (PIN_MODE_OUT<<pinNb);
	 		 //		gpioPort->CRL &= ~(PIN_CNF_PUSH_PULL<<pinNb);

	 		 	} else {
	 		 		gpioPort->CRH &= ~(PIN_MODE_MSK<<(pinNb-8)*4);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	3a08      	subs	r2, #8
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	43d2      	mvns	r2, r2
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH &= ~(PIN_CNF_MSK<<(((pinNb-8)*4)+2));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	3a08      	subs	r2, #8
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	3202      	adds	r2, #2
 8002d0e:	2103      	movs	r1, #3
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	43d2      	mvns	r2, r2
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]

	 		 		gpioPort->CRH |= (PIN_MODE_OUT<<(pinNb-8)*4);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	3a08      	subs	r2, #8
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]
	 		 		gpioPort->CRH |= (PIN_CNF_PUSH_PULL<<(((pinNb-8)*4)+2));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	3a08      	subs	r2, #8
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	3202      	adds	r2, #2
 8002d3e:	2102      	movs	r1, #2
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	605a      	str	r2, [r3, #4]
	 		 	}
	 		 }
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <EnableExti>:
	 		 	return (gpioPort->IDR & (1<<pinNb));
	 		 }



	 		 void EnableExti(GPIO_TypeDef * gpioPort, uint8_t pinNb, bool rise, bool fall){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	70fb      	strb	r3, [r7, #3]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70bb      	strb	r3, [r7, #2]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	707b      	strb	r3, [r7, #1]
	 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002d6e:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <EnableExti+0x84>)
 8002d70:	4b19      	ldr	r3, [pc, #100]	; (8002dd8 <EnableExti+0x84>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6193      	str	r3, [r2, #24]
	 		 	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI5_PB;
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <EnableExti+0x88>)
 8002d7c:	4b17      	ldr	r3, [pc, #92]	; (8002ddc <EnableExti+0x88>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	60d3      	str	r3, [r2, #12]
	 		 	EXTI->IMR  |= (1<<pinNb);
 8002d86:	4916      	ldr	r1, [pc, #88]	; (8002de0 <EnableExti+0x8c>)
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <EnableExti+0x8c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	2001      	movs	r0, #1
 8002d90:	fa00 f202 	lsl.w	r2, r0, r2
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
	 		 	if (rise){
 8002d98:	78bb      	ldrb	r3, [r7, #2]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <EnableExti+0x5c>
	 		 		EXTI->RTSR |= (1<<pinNb);
 8002d9e:	4910      	ldr	r1, [pc, #64]	; (8002de0 <EnableExti+0x8c>)
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <EnableExti+0x8c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	2001      	movs	r0, #1
 8002da8:	fa00 f202 	lsl.w	r2, r0, r2
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
	 		 	}
	 		 	if (fall){
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d008      	beq.n	8002dc8 <EnableExti+0x74>
	 		 		EXTI->FTSR |= (1<<pinNb);
 8002db6:	490a      	ldr	r1, [pc, #40]	; (8002de0 <EnableExti+0x8c>)
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <EnableExti+0x8c>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
	 		 		//SetGpioAsInPullUp(GPIOB, 5);
	 		 	}
	 		 	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002dc8:	2017      	movs	r0, #23
 8002dca:	f7ff fe77 	bl	8002abc <NVIC_EnableIRQ>
	 		 }
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010400 	.word	0x40010400

08002de4 <EnableExtiGeneral>:




			 	 void EnableExtiGeneral(uint8_t gpioPortNb, uint8_t pinNb, bool rise, bool fall){
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4604      	mov	r4, r0
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	71fb      	strb	r3, [r7, #7]
 8002df6:	4603      	mov	r3, r0
 8002df8:	71bb      	strb	r3, [r7, #6]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	717b      	strb	r3, [r7, #5]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	713b      	strb	r3, [r7, #4]
		 		 	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <EnableExtiGeneral+0xe4>)
 8002e04:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <EnableExtiGeneral+0xe4>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6193      	str	r3, [r2, #24]
		 		 	AFIO->EXTICR[pinNb >> 0x02] |= ((gpioPortNb) << (0x04 * (pinNb & 0x03)));
 8002e0e:	482f      	ldr	r0, [pc, #188]	; (8002ecc <EnableExtiGeneral+0xe8>)
 8002e10:	79bb      	ldrb	r3, [r7, #6]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461c      	mov	r4, r3
 8002e18:	4a2c      	ldr	r2, [pc, #176]	; (8002ecc <EnableExtiGeneral+0xe8>)
 8002e1a:	79bb      	ldrb	r3, [r7, #6]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3302      	adds	r3, #2
 8002e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e26:	79f9      	ldrb	r1, [r7, #7]
 8002e28:	79ba      	ldrb	r2, [r7, #6]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	431a      	orrs	r2, r3
 8002e36:	1ca3      	adds	r3, r4, #2
 8002e38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		 		 	EXTI->IMR  |= (1<<pinNb);
 8002e3c:	4924      	ldr	r1, [pc, #144]	; (8002ed0 <EnableExtiGeneral+0xec>)
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <EnableExtiGeneral+0xec>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	79ba      	ldrb	r2, [r7, #6]
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
		 		 	if (rise){
 8002e4e:	797b      	ldrb	r3, [r7, #5]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <EnableExtiGeneral+0x82>
		 		 		EXTI->RTSR |= (1<<pinNb);
 8002e54:	491e      	ldr	r1, [pc, #120]	; (8002ed0 <EnableExtiGeneral+0xec>)
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <EnableExtiGeneral+0xec>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	79ba      	ldrb	r2, [r7, #6]
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
		 		 	}
		 		 	if (fall){
 8002e66:	793b      	ldrb	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <EnableExtiGeneral+0x9a>
		 		 		EXTI->FTSR |= (1<<pinNb);
 8002e6c:	4918      	ldr	r1, [pc, #96]	; (8002ed0 <EnableExtiGeneral+0xec>)
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <EnableExtiGeneral+0xec>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	79ba      	ldrb	r2, [r7, #6]
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
		 		 	}


		 		 	uint8_t irqNb;

		 		 	if (pinNb >=0  && pinNb <=3){
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d806      	bhi.n	8002e92 <EnableExtiGeneral+0xae>
		 		 		const uint8_t irqOffset = 6;
 8002e84:	2306      	movs	r3, #6
 8002e86:	73bb      	strb	r3, [r7, #14]
		 		 		irqNb = (pinNb +  irqOffset);
 8002e88:	79ba      	ldrb	r2, [r7, #6]
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e010      	b.n	8002eb4 <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=5  && pinNb <9){
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d905      	bls.n	8002ea4 <EnableExtiGeneral+0xc0>
 8002e98:	79bb      	ldrb	r3, [r7, #6]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d802      	bhi.n	8002ea4 <EnableExtiGeneral+0xc0>
		 		 		irqNb = EXTI9_5_IRQn;
 8002e9e:	2317      	movs	r3, #23
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e007      	b.n	8002eb4 <EnableExtiGeneral+0xd0>
		 		 	} else if (pinNb >=10  && pinNb <=15){
 8002ea4:	79bb      	ldrb	r3, [r7, #6]
 8002ea6:	2b09      	cmp	r3, #9
 8002ea8:	d904      	bls.n	8002eb4 <EnableExtiGeneral+0xd0>
 8002eaa:	79bb      	ldrb	r3, [r7, #6]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d801      	bhi.n	8002eb4 <EnableExtiGeneral+0xd0>
		 		 		irqNb = EXTI15_10_IRQn;
 8002eb0:	2328      	movs	r3, #40	; 0x28
 8002eb2:	73fb      	strb	r3, [r7, #15]
		 		 	}


		 		 	NVIC_EnableIRQ(irqNb);
 8002eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fdff 	bl	8002abc <NVIC_EnableIRQ>



		 		 }
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <NVIC_EnableIRQ>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <NVIC_EnableIRQ+0x2c>)
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	f002 021f 	and.w	r2, r2, #31
 8002eec:	2001      	movs	r0, #1
 8002eee:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler (void);
volatile rfm12bObj_t rfm12bObj;


void EXTI9_5_IRQHandler (void){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	EXTI_ClearITPendingBit(EXTI_Line5);
 8002f08:	2020      	movs	r0, #32
 8002f0a:	f7fd fb01 	bl	8000510 <EXTI_ClearITPendingBit>

	Rfm12bIrqCallback (&rfm12bObj);
 8002f0e:	4802      	ldr	r0, [pc, #8]	; (8002f18 <EXTI9_5_IRQHandler+0x14>)
 8002f10:	f7ff fcf0 	bl	80028f4 <Rfm12bIrqCallback>

}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000124 	.word	0x20000124

08002f1c <_Z9ReadTouchv>:




void ReadTouch(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0


	uint16_t TouchXval;
	uint16_t TouchYval;;

	CS_LOW
 8002f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f26:	480e      	ldr	r0, [pc, #56]	; (8002f60 <_Z9ReadTouchv+0x44>)
 8002f28:	f7fd fbca 	bl	80006c0 <GPIO_ResetBits>

	SpiTransmit(0xD2);
 8002f2c:	20d2      	movs	r0, #210	; 0xd2
 8002f2e:	f000 fb0b 	bl	8003548 <SpiTransmit>
	TouchXval = SpiTransmit(0x00);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f000 fb08 	bl	8003548 <SpiTransmit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	80fb      	strh	r3, [r7, #6]

	SpiTransmit(0x92);
 8002f3c:	2092      	movs	r0, #146	; 0x92
 8002f3e:	f000 fb03 	bl	8003548 <SpiTransmit>
	TouchYval = SpiTransmit(0x00);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f000 fb00 	bl	8003548 <SpiTransmit>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	80bb      	strh	r3, [r7, #4]

	CS_HIGH
 8002f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <_Z9ReadTouchv+0x44>)
 8002f52:	f7fd fba7 	bl	80006a4 <GPIO_SetBits>

}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40010800 	.word	0x40010800

08002f64 <EXTI15_10_IRQHandler>:



extern "C" void EXTI15_10_IRQHandler (void);

void EXTI15_10_IRQHandler (void){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	ReadTouch();
 8002f68:	f7ff ffd8 	bl	8002f1c <_Z9ReadTouchv>
	EXTI_ClearFlag(EXTI_Line12);
 8002f6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f70:	f7fd fac0 	bl	80004f4 <EXTI_ClearFlag>
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_Z11broker_connPvP11sockaddr_in>:
	GPIOC->ODR |= GPIO_Pin_13;
}



int broker_conn(void *cntx, sockaddr_t * sockaddr){
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
	return 1;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <_Z11broker_sendPvP11sockaddr_inPKht>:

int broker_send(void *cntx, sockaddr_t * sockaddr, const uint8_t* buff, uint16_t buffLen){
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	617b      	str	r3, [r7, #20]
	Rfm12bStartSending(obj, (uint8_t *)buff, buffLen, (uint8_t)sockaddr->sin_addr.s_addr);
 8002fa0:	887b      	ldrh	r3, [r7, #2]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	6978      	ldr	r0, [r7, #20]
 8002fae:	f7ff fbbb 	bl	8002728 <Rfm12bStartSending>
	return buffLen;
 8002fb2:	887b      	ldrh	r3, [r7, #2]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <_Z10broker_recPvP11sockaddr_inPht>:

int broker_rec(void *cntx, sockaddr_t * sockaddr, uint8_t* buf, uint16_t  buf_len){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	807b      	strh	r3, [r7, #2]
	rfm12bObj_t * obj = (rfm12bObj_t*) cntx;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	613b      	str	r3, [r7, #16]
	uint8_t byteNb = obj->completedRxBuff.dataNb;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8002fd4:	75fb      	strb	r3, [r7, #23]
	if (byteNb > 0){
 8002fd6:	7dfb      	ldrb	r3, [r7, #23]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dd17      	ble.n	800300c <_Z10broker_recPvP11sockaddr_inPht+0x50>
		byteNb = (byteNb < buf_len) ? byteNb : buf_len;
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	bfa8      	it	ge
 8002fe4:	4613      	movge	r3, r2
 8002fe6:	75fb      	strb	r3, [r7, #23]
		memcpy (buf, (const void*) obj->completedRxBuff.data, byteNb);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002fee:	7dfa      	ldrb	r2, [r7, #23]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f002 fd2b 	bl	8005a4e <memcpy>
		obj->completedRxBuff.dataNb = 0;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
		sockaddr->sin_addr.s_addr = obj->completedRxBuff.rxFromAddr;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8003006:	461a      	mov	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	605a      	str	r2, [r3, #4]
	}

	return byteNb;
 800300c:	7dfb      	ldrb	r3, [r7, #23]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_Z13broker_disconPvP11sockaddr_in>:

int broker_discon(void *context, sockaddr_t * sockaddr){
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
	return 1;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <_Z9_delay_msm>:


void _delay_ms(uint32_t x){
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	;
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
	...

08003040 <_Z11intToStringB5cxx11m>:



std::string intToString(uint32_t intVal){
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
	/*due to not available "to_string()" c++11 func*/
	const uint8_t intSize = 8;
 800304a:	2308      	movs	r3, #8
 800304c:	75fb      	strb	r3, [r7, #23]
	char charVal[intSize];
	snprintf(charVal, intSize, "%u", intVal);
 800304e:	f107 000c 	add.w	r0, r7, #12
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	4a0d      	ldr	r2, [pc, #52]	; (800308c <_Z11intToStringB5cxx11m+0x4c>)
 8003056:	2108      	movs	r1, #8
 8003058:	f002 fe24 	bl	8005ca4 <sniprintf>
	std::string strVal(charVal);
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4618      	mov	r0, r3
 8003062:	f002 fa65 	bl	8005530 <_ZNSaIcEC1Ev>
 8003066:	f107 0214 	add.w	r2, r7, #20
 800306a:	f107 030c 	add.w	r3, r7, #12
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f002 fb13 	bl	800569c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fa59 	bl	8005532 <_ZNSaIcED1Ev>
	return strVal;
 8003080:	bf00      	nop
}
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	080063f4 	.word	0x080063f4

08003090 <main>:

}



int main(){
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	f5ad 5dec 	sub.w	sp, sp, #7552	; 0x1d80
 8003096:	b084      	sub	sp, #16
 8003098:	af02      	add	r7, sp, #8

	spiInit();
 800309a:	f000 f9f5 	bl	8003488 <spiInit>


	SetGpioAsInFloating(GPIOA, 12);
 800309e:	210c      	movs	r1, #12
 80030a0:	48d1      	ldr	r0, [pc, #836]	; (80033e8 <main+0x358>)
 80030a2:	f7ff fd61 	bl	8002b68 <SetGpioAsInFloating>
	EnableExtiGeneral(0, 12, false, true);
 80030a6:	2301      	movs	r3, #1
 80030a8:	2200      	movs	r2, #0
 80030aa:	210c      	movs	r1, #12
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7ff fe99 	bl	8002de4 <EnableExtiGeneral>


	uint8_t buffSD[2048];
	memset(buffSD, 0, 2048);
 80030b2:	f507 53ab 	add.w	r3, r7, #5472	; 0x1560
 80030b6:	f103 030c 	add.w	r3, r3, #12
 80030ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f002 fce9 	bl	8005a98 <memset>
	disk_initialize(0);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7ff f8b0 	bl	800222c <disk_initialize>
//	uint8_t inputBuff[128];
//	memset(inputBuff, 'x', 128);
//	disk_write(0,inputBuff,0, 1);
//	disk_read(0,buffSD,0, 1);
	FATFS fatDrive;
	f_mount( 0, &fatDrive);
 80030cc:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80030d0:	f103 031c 	add.w	r3, r3, #28
 80030d4:	4619      	mov	r1, r3
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fe fd88 	bl	8001bec <f_mount>

	FIL fp;
	f_open(&fp, "0:dstfile.dat",FA_CREATE_NEW);
 80030dc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80030e0:	f103 0318 	add.w	r3, r3, #24
 80030e4:	2204      	movs	r2, #4
 80030e6:	49c1      	ldr	r1, [pc, #772]	; (80033ec <main+0x35c>)
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe fda9 	bl	8001c40 <f_open>

	 TM_ILI9341_Init();
 80030ee:	f000 fbbf 	bl	8003870 <TM_ILI9341_Init>


	  TM_ILI9341_DrawPixel(10, 10, ILI9341_COLOR_ORANGE);
 80030f2:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 80030f6:	210a      	movs	r1, #10
 80030f8:	200a      	movs	r0, #10
 80030fa:	f000 fd9b 	bl	8003c34 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(11, 11, ILI9341_COLOR_ORANGE);
 80030fe:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 8003102:	210b      	movs	r1, #11
 8003104:	200b      	movs	r0, #11
 8003106:	f000 fd95 	bl	8003c34 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(12, 12, ILI9341_COLOR_ORANGE);
 800310a:	f64f 32e4 	movw	r2, #64484	; 0xfbe4
 800310e:	210c      	movs	r1, #12
 8003110:	200c      	movs	r0, #12
 8003112:	f000 fd8f 	bl	8003c34 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(20, 20, ILI9341_COLOR_YELLOW);
 8003116:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800311a:	2114      	movs	r1, #20
 800311c:	2014      	movs	r0, #20
 800311e:	f000 fd89 	bl	8003c34 <TM_ILI9341_DrawPixel>
	  TM_ILI9341_DrawPixel(30, 30, ILI9341_COLOR_BLUE);
 8003122:	221f      	movs	r2, #31
 8003124:	211e      	movs	r1, #30
 8003126:	201e      	movs	r0, #30
 8003128:	f000 fd84 	bl	8003c34 <TM_ILI9341_DrawPixel>





	 TM_ILI9341_Puts(0,0, "Temp.  22.46", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	231f      	movs	r3, #31
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	4bae      	ldr	r3, [pc, #696]	; (80033f0 <main+0x360>)
 8003136:	4aaf      	ldr	r2, [pc, #700]	; (80033f4 <main+0x364>)
 8003138:	2100      	movs	r1, #0
 800313a:	2000      	movs	r0, #0
 800313c:	f001 f806 	bl	800414c <TM_ILI9341_Puts>
	// TM_ILI9341_Puts(0,25, "Hum.  57%", &TM_Font_16x26, ILI9341_COLOR_CYAN, ILI9341_COLOR_BLACK);
	 TM_ILI9341_Puts(0,50, "Out1  ON", &TM_Font_16x26, ILI9341_COLOR_GREEN, ILI9341_COLOR_BLACK);
 8003140:	2300      	movs	r3, #0
 8003142:	9301      	str	r3, [sp, #4]
 8003144:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	4ba9      	ldr	r3, [pc, #676]	; (80033f0 <main+0x360>)
 800314c:	4aaa      	ldr	r2, [pc, #680]	; (80033f8 <main+0x368>)
 800314e:	2132      	movs	r1, #50	; 0x32
 8003150:	2000      	movs	r0, #0
 8003152:	f000 fffb 	bl	800414c <TM_ILI9341_Puts>
	 TM_ILI9341_Puts(0,75, "Out2  OFF", &TM_Font_16x26, ILI9341_COLOR_GRAY, ILI9341_COLOR_BLACK);
 8003156:	2300      	movs	r3, #0
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4ba3      	ldr	r3, [pc, #652]	; (80033f0 <main+0x360>)
 8003162:	4aa6      	ldr	r2, [pc, #664]	; (80033fc <main+0x36c>)
 8003164:	214b      	movs	r1, #75	; 0x4b
 8003166:	2000      	movs	r0, #0
 8003168:	f000 fff0 	bl	800414c <TM_ILI9341_Puts>





 	EnableGpioClk(LOG_UART_PORT);
 800316c:	489e      	ldr	r0, [pc, #632]	; (80033e8 <main+0x358>)
 800316e:	f7ff fcbd 	bl	8002aec <EnableGpioClk>
 	SetGpioAsOutAltPushPUll(LOG_UART_PORT, LOG_UART_PIN_TX);
 8003172:	2109      	movs	r1, #9
 8003174:	489c      	ldr	r0, [pc, #624]	; (80033e8 <main+0x358>)
 8003176:	f7ff fdaf 	bl	8002cd8 <SetGpioAsOutAltPushPUll>
 	SetGpioAsInFloating(LOG_UART_PORT, LOG_UART_PIN_RX);
 800317a:	210a      	movs	r1, #10
 800317c:	489a      	ldr	r0, [pc, #616]	; (80033e8 <main+0x358>)
 800317e:	f7ff fcf3 	bl	8002b68 <SetGpioAsInFloating>
 	EnableUart(USART1);
 8003182:	489f      	ldr	r0, [pc, #636]	; (8003400 <main+0x370>)
 8003184:	f000 f952 	bl	800342c <EnableUart>




 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8003188:	2101      	movs	r1, #1
 800318a:	2010      	movs	r0, #16
 800318c:	f7fd faa6 	bl	80006dc <RCC_APB2PeriphClockCmd>
 	GPIO_InitTypeDef PORT;
 	PORT.GPIO_Mode = GPIO_Mode_Out_PP;
 8003190:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8003194:	f103 0314 	add.w	r3, r3, #20
 8003198:	2210      	movs	r2, #16
 800319a:	70da      	strb	r2, [r3, #3]
 	PORT.GPIO_Speed = GPIO_Speed_2MHz;
 800319c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80031a0:	f103 0314 	add.w	r3, r3, #20
 80031a4:	2202      	movs	r2, #2
 80031a6:	709a      	strb	r2, [r3, #2]
 	PORT.GPIO_Pin = GPIO_Pin_13;
 80031a8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80031ac:	f103 0314 	add.w	r3, r3, #20
 80031b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b4:	801a      	strh	r2, [r3, #0]
 	GPIO_Init(GPIOC, &PORT);
 80031b6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80031ba:	f103 0314 	add.w	r3, r3, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	4890      	ldr	r0, [pc, #576]	; (8003404 <main+0x374>)
 80031c2:	f7fd f9b3 	bl	800052c <GPIO_Init>
 	GPIOC->ODR |= GPIO_Pin_13;
 80031c6:	4a8f      	ldr	r2, [pc, #572]	; (8003404 <main+0x374>)
 80031c8:	4b8e      	ldr	r3, [pc, #568]	; (8003404 <main+0x374>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d0:	60d3      	str	r3, [r2, #12]




 	Rfm12bInit();
 80031d2:	f7ff fa31 	bl	8002638 <Rfm12bInit>
 	_delay_ms(1000);	//wymagane opoznienie
 80031d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031da:	f7ff ff27 	bl	800302c <_Z9_delay_msm>
 	uint8_t sst =   Rfm12bWriteCmd(0x0000);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff fc3c 	bl	8002a5c <Rfm12bWriteCmd>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 80031ea:	f102 0205 	add.w	r2, r2, #5
 80031ee:	7013      	strb	r3, [r2, #0]
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80031f0:	2101      	movs	r1, #1
 80031f2:	2008      	movs	r0, #8
 80031f4:	f7fd fa72 	bl	80006dc <RCC_APB2PeriphClockCmd>
 	EnableExti(GPIOB, 5, false, true);
 80031f8:	2301      	movs	r3, #1
 80031fa:	2200      	movs	r2, #0
 80031fc:	2105      	movs	r1, #5
 80031fe:	4882      	ldr	r0, [pc, #520]	; (8003408 <main+0x378>)
 8003200:	f7ff fda8 	bl	8002d54 <EnableExti>
 	SetGpioAsInPullUp(GPIOB, 5);
 8003204:	2105      	movs	r1, #5
 8003206:	4880      	ldr	r0, [pc, #512]	; (8003408 <main+0x378>)
 8003208:	f7ff fcfe 	bl	8002c08 <SetGpioAsInPullUp>
	SetGpioAsInPullUp(GPIOB, 11);
 800320c:	210b      	movs	r1, #11
 800320e:	487e      	ldr	r0, [pc, #504]	; (8003408 <main+0x378>)
 8003210:	f7ff fcfa 	bl	8002c08 <SetGpioAsInPullUp>

 	rfm12bFifoReset();
 8003214:	f7ff fb8c 	bl	8002930 <rfm12bFifoReset>
 	rfm12bSwitchRx();
 8003218:	f7ff fba4 	bl	8002964 <rfm12bSwitchRx>

 	 NVIC_EnableIRQ(EXTI9_5_IRQn);
 800321c:	2017      	movs	r0, #23
 800321e:	f7ff fe59 	bl	8002ed4 <NVIC_EnableIRQ>


 	Rrm12bObjInit (&rfm12bObj, BROKER_ADDR);
 8003222:	2101      	movs	r1, #1
 8003224:	4879      	ldr	r0, [pc, #484]	; (800340c <main+0x37c>)
 8003226:	f7ff fa48 	bl	80026ba <Rrm12bObjInit>



	broker_net_t broker_net;
	broker_net.context = (void*) &rfm12bObj;
 800322a:	f607 73fc 	addw	r3, r7, #4092	; 0xffc
 800322e:	4a77      	ldr	r2, [pc, #476]	; (800340c <main+0x37c>)
 8003230:	601a      	str	r2, [r3, #0]
	broker_net.connect = broker_conn;
 8003232:	f607 73fc 	addw	r3, r7, #4092	; 0xffc
 8003236:	4a76      	ldr	r2, [pc, #472]	; (8003410 <main+0x380>)
 8003238:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	broker_net.send = broker_send;
 800323c:	f607 73fc 	addw	r3, r7, #4092	; 0xffc
 8003240:	4a74      	ldr	r2, [pc, #464]	; (8003414 <main+0x384>)
 8003242:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	broker_net.receive = broker_rec;
 8003246:	f607 73fc 	addw	r3, r7, #4092	; 0xffc
 800324a:	4a73      	ldr	r2, [pc, #460]	; (8003418 <main+0x388>)
 800324c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	broker_net.disconnect = broker_discon;
 8003250:	f607 73fc 	addw	r3, r7, #4092	; 0xffc
 8003254:	4a71      	ldr	r2, [pc, #452]	; (800341c <main+0x38c>)
 8003256:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	broker_t broker;
	broker_init_by_given_net(&broker, &broker_net);
 800325a:	f607 72fc 	addw	r2, r7, #4092	; 0xffc
 800325e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003262:	3b10      	subs	r3, #16
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f001 f85a 	bl	8004320 <broker_init_by_given_net>

	sockaddr_t sockaddr;
	uint8_t frameBuff[MAX_FRAME_SIZE];


uint16_t i =0;
 800326c:	2300      	movs	r3, #0
 800326e:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 8003272:	f102 0206 	add.w	r2, r2, #6
 8003276:	8013      	strh	r3, [r2, #0]
	 	while (1){
	 		if (broker_receive(&broker, frameBuff, &sockaddr)){
 8003278:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800327c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003280:	3910      	subs	r1, #16
 8003282:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003286:	3b10      	subs	r3, #16
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f898 	bl	80043be <broker_receive>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8081 	beq.w	8003398 <main+0x308>
	 			if (frameBuff[42] == 'T'){
 8003296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800329a:	3b10      	subs	r3, #16
 800329c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80032a0:	2b54      	cmp	r3, #84	; 0x54
 80032a2:	d10a      	bne.n	80032ba <main+0x22a>
	 				TM_ILI9341_Puts(0,0, "Temp.  99.88", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 80032a4:	2300      	movs	r3, #0
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	231f      	movs	r3, #31
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4b50      	ldr	r3, [pc, #320]	; (80033f0 <main+0x360>)
 80032ae:	4a5c      	ldr	r2, [pc, #368]	; (8003420 <main+0x390>)
 80032b0:	2100      	movs	r1, #0
 80032b2:	2000      	movs	r0, #0
 80032b4:	f000 ff4a 	bl	800414c <TM_ILI9341_Puts>
 80032b8:	e063      	b.n	8003382 <main+0x2f2>
	 			} else{
	 				TM_ILI9341_Puts(0,25, "cnt: ", &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 80032ba:	2300      	movs	r3, #0
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	231f      	movs	r3, #31
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <main+0x360>)
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <main+0x394>)
 80032c6:	2119      	movs	r1, #25
 80032c8:	2000      	movs	r0, #0
 80032ca:	f000 ff3f 	bl	800414c <TM_ILI9341_Puts>
	 				i++;
 80032ce:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 80032d2:	f103 0306 	add.w	r3, r3, #6
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	f507 52ec 	add.w	r2, r7, #7552	; 0x1d80
 80032de:	f102 0206 	add.w	r2, r2, #6
 80032e2:	8013      	strh	r3, [r2, #0]
	 				std::string cnt;
 80032e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032e8:	3b08      	subs	r3, #8
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 f97e 	bl	80055ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	 				cnt = intToString(i);
 80032f0:	f507 53ec 	add.w	r3, r7, #7552	; 0x1d80
 80032f4:	f103 0306 	add.w	r3, r3, #6
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80032fe:	f103 030c 	add.w	r3, r3, #12
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe9b 	bl	8003040 <_Z11intToStringB5cxx11m>
 800330a:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800330e:	f102 020c 	add.w	r2, r2, #12
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	3b08      	subs	r3, #8
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f002 f973 	bl	8005606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8003320:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8003324:	f103 030c 	add.w	r3, r3, #12
 8003328:	4618      	mov	r0, r3
 800332a:	f002 f966 	bl	80055fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	 				frameBuff[86]=0;
 800332e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003332:	3b10      	subs	r3, #16
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	 				TM_ILI9341_Puts(100,25, (char*) cnt.data(), &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 800333a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800333e:	3b08      	subs	r3, #8
 8003340:	4618      	mov	r0, r3
 8003342:	f002 f985 	bl	8005650 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>
 8003346:	4602      	mov	r2, r0
 8003348:	2300      	movs	r3, #0
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	231f      	movs	r3, #31
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <main+0x360>)
 8003352:	2119      	movs	r1, #25
 8003354:	2064      	movs	r0, #100	; 0x64
 8003356:	f000 fef9 	bl	800414c <TM_ILI9341_Puts>
	 				TM_ILI9341_Puts(100,50, (char*) &frameBuff[16], &TM_Font_16x26, ILI9341_COLOR_BLUE, ILI9341_COLOR_BLACK);
 800335a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800335e:	3b10      	subs	r3, #16
 8003360:	f103 0210 	add.w	r2, r3, #16
 8003364:	2300      	movs	r3, #0
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	231f      	movs	r3, #31
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <main+0x360>)
 800336e:	2132      	movs	r1, #50	; 0x32
 8003370:	2064      	movs	r0, #100	; 0x64
 8003372:	f000 feeb 	bl	800414c <TM_ILI9341_Puts>
	 				std::string cnt;
 8003376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337a:	3b08      	subs	r3, #8
 800337c:	4618      	mov	r0, r3
 800337e:	f002 f93c 	bl	80055fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>





	 			broker_packets_dispatcher(&broker, frameBuff, &sockaddr);
 8003382:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003386:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800338a:	3910      	subs	r1, #16
 800338c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003390:	3b10      	subs	r3, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f001 f82c 	bl	80043f0 <broker_packets_dispatcher>

	 		}

	 		  if (!(GPIOB->IDR & (1<<11))){
 8003398:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <main+0x378>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f43f af64 	beq.w	8003278 <main+0x1e8>
	 			  uint8_t buff[] = "abcdefghijabcdefghijabcdefghij";
 80033b0:	f107 0308 	add.w	r3, r7, #8
 80033b4:	3b08      	subs	r3, #8
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <main+0x398>)
 80033b8:	461c      	mov	r4, r3
 80033ba:	4615      	mov	r5, r2
 80033bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033c4:	c407      	stmia	r4!, {r0, r1, r2}
 80033c6:	8023      	strh	r3, [r4, #0]
 80033c8:	3402      	adds	r4, #2
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	7023      	strb	r3, [r4, #0]
	 			  Rfm12bStartSending(&rfm12bObj, buff, 30, 2);
 80033ce:	f107 0108 	add.w	r1, r7, #8
 80033d2:	3908      	subs	r1, #8
 80033d4:	2302      	movs	r3, #2
 80033d6:	221e      	movs	r2, #30
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <main+0x37c>)
 80033da:	f7ff f9a5 	bl	8002728 <Rfm12bStartSending>
	 			 _delay_ms(250);
 80033de:	20fa      	movs	r0, #250	; 0xfa
 80033e0:	f7ff fe24 	bl	800302c <_Z9_delay_msm>
	 		  }




	 	}
 80033e4:	e748      	b.n	8003278 <main+0x1e8>
 80033e6:	bf00      	nop
 80033e8:	40010800 	.word	0x40010800
 80033ec:	080063f8 	.word	0x080063f8
 80033f0:	20000004 	.word	0x20000004
 80033f4:	08006408 	.word	0x08006408
 80033f8:	08006418 	.word	0x08006418
 80033fc:	08006424 	.word	0x08006424
 8003400:	40013800 	.word	0x40013800
 8003404:	40011000 	.word	0x40011000
 8003408:	40010c00 	.word	0x40010c00
 800340c:	20000124 	.word	0x20000124
 8003410:	08002f79 	.word	0x08002f79
 8003414:	08002f8f 	.word	0x08002f8f
 8003418:	08002fbd 	.word	0x08002fbd
 800341c:	08003017 	.word	0x08003017
 8003420:	08006430 	.word	0x08006430
 8003424:	08006440 	.word	0x08006440
 8003428:	08006448 	.word	0x08006448

0800342c <EnableUart>:
#include "stm32f10x.h"
#include "platform.h"



void EnableUart (USART_TypeDef * usart){
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <EnableUart+0x58>)
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <EnableUart+0x58>)
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343e:	6193      	str	r3, [r2, #24]
	usart->BRR = 72000000/1200;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003446:	811a      	strh	r2, [r3, #8]
	usart->CR1 |= USART_CR1_UE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	899b      	ldrh	r3, [r3, #12]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_TE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	899b      	ldrh	r3, [r3, #12]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f043 0308 	orr.w	r3, r3, #8
 8003462:	b29a      	uxth	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	819a      	strh	r2, [r3, #12]
	usart->CR1 |= USART_CR1_RE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	899b      	ldrh	r3, [r3, #12]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	819a      	strh	r2, [r3, #12]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000

08003488 <spiInit>:

#include "stdint.h"
#include "spi.h"
#include "stm32f10x.h"

void spiInit(void) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800348e:	2101      	movs	r1, #1
 8003490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003494:	f7fd f940 	bl	8000718 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003498:	2101      	movs	r1, #1
 800349a:	2004      	movs	r0, #4
 800349c:	f7fd f91e 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80034a0:	2101      	movs	r1, #1
 80034a2:	2008      	movs	r0, #8
 80034a4:	f7fd f91a 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80034a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80034ac:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80034ae:	2318      	movs	r3, #24
 80034b0:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80034b2:	2301      	movs	r3, #1
 80034b4:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034b6:	463b      	mov	r3, r7
 80034b8:	4619      	mov	r1, r3
 80034ba:	4820      	ldr	r0, [pc, #128]	; (800353c <spiInit+0xb4>)
 80034bc:	f7fd f836 	bl	800052c <GPIO_Init>


	//CS touch hdwr
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 80034c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c4:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80034c6:	2310      	movs	r3, #16
 80034c8:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80034ca:	2301      	movs	r3, #1
 80034cc:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034ce:	463b      	mov	r3, r7
 80034d0:	4619      	mov	r1, r3
 80034d2:	481b      	ldr	r0, [pc, #108]	; (8003540 <spiInit+0xb8>)
 80034d4:	f7fd f82a 	bl	800052c <GPIO_Init>

	//CS sd card
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80034d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034dc:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80034de:	2310      	movs	r3, #16
 80034e0:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80034e2:	2301      	movs	r3, #1
 80034e4:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034e6:	463b      	mov	r3, r7
 80034e8:	4619      	mov	r1, r3
 80034ea:	4814      	ldr	r0, [pc, #80]	; (800353c <spiInit+0xb4>)
 80034ec:	f7fd f81e 	bl	800052c <GPIO_Init>




	/* SPI configuration */
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80034f0:	2300      	movs	r3, #0
 80034f2:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80034f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80034f8:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80034fa:	2300      	movs	r3, #0
 80034fc:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80034fe:	2300      	movs	r3, #0
 8003500:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8003502:	2300      	movs	r3, #0
 8003504:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8003506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350a:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 800350c:	2318      	movs	r3, #24
 800350e:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8003510:	2300      	movs	r3, #0
 8003512:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8003514:	2307      	movs	r3, #7
 8003516:	82bb      	strh	r3, [r7, #20]
	SPI_SSOutputCmd(SPI2, ENABLE);
 8003518:	2101      	movs	r1, #1
 800351a:	480a      	ldr	r0, [pc, #40]	; (8003544 <spiInit+0xbc>)
 800351c:	f7fd f996 	bl	800084c <SPI_SSOutputCmd>
	SPI_Init(SPI2, &SPI_InitStructure);
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4807      	ldr	r0, [pc, #28]	; (8003544 <spiInit+0xbc>)
 8003526:	f7fd f915 	bl	8000754 <SPI_Init>

	/* Enable SPI  */
	SPI_Cmd(SPI2, ENABLE);
 800352a:	2101      	movs	r1, #1
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <spiInit+0xbc>)
 800352e:	f7fd f954 	bl	80007da <SPI_Cmd>

}
 8003532:	bf00      	nop
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40010c00 	.word	0x40010c00
 8003540:	40010800 	.word	0x40010800
 8003544:	40003800 	.word	0x40003800

08003548 <SpiTransmit>:



uint16_t SpiTransmit( uint16_t cmd )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	80fb      	strh	r3, [r7, #6]
//	CS_LOW;

	/* Loop while DR register in not emplty */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
 8003552:	bf00      	nop
 8003554:	2102      	movs	r1, #2
 8003556:	480e      	ldr	r0, [pc, #56]	; (8003590 <SpiTransmit+0x48>)
 8003558:	f7fd f997 	bl	800088a <SPI_I2S_GetFlagStatus>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f8      	beq.n	8003554 <SpiTransmit+0xc>

	/* Send byte through the SPI1 peripheral */
	SPI_I2S_SendData(SPI2, cmd);
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	4619      	mov	r1, r3
 8003566:	480a      	ldr	r0, [pc, #40]	; (8003590 <SpiTransmit+0x48>)
 8003568:	f7fd f956 	bl	8000818 <SPI_I2S_SendData>

	/* Wait to receive a byte */
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
 800356c:	bf00      	nop
 800356e:	2101      	movs	r1, #1
 8003570:	4807      	ldr	r0, [pc, #28]	; (8003590 <SpiTransmit+0x48>)
 8003572:	f7fd f98a 	bl	800088a <SPI_I2S_GetFlagStatus>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f8      	beq.n	800356e <SpiTransmit+0x26>

	/* Return the byte read from the SPI bus */
	uint16_t recData = SPI_I2S_ReceiveData(SPI2);
 800357c:	4804      	ldr	r0, [pc, #16]	; (8003590 <SpiTransmit+0x48>)
 800357e:	f7fd f959 	bl	8000834 <SPI_I2S_ReceiveData>
 8003582:	4603      	mov	r3, r0
 8003584:	81fb      	strh	r3, [r7, #14]

//	CS_HIGH;

	return recData;
 8003586:	89fb      	ldrh	r3, [r7, #14]

}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40003800 	.word	0x40003800

08003594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003598:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800359a:	e003      	b.n	80035a4 <LoopCopyDataInit>

0800359c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800359e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035a2:	3104      	adds	r1, #4

080035a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035a4:	480b      	ldr	r0, [pc, #44]	; (80035d4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80035a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035ac:	d3f6      	bcc.n	800359c <CopyDataInit>
	ldr	r2, =_sbss
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80035b0:	e002      	b.n	80035b8 <LoopFillZerobss>

080035b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035b4:	f842 3b04 	str.w	r3, [r2], #4

080035b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80035ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035bc:	d3f9      	bcc.n	80035b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035be:	f000 f82b 	bl	8003618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035c2:	f002 f9f3 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035c6:	f7ff fd63 	bl	8003090 <main>
	bx	lr
 80035ca:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035cc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80035d0:	08007924 	.word	0x08007924
	ldr	r0, =_sdata
 80035d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035d8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80035dc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80035e0:	200004f4 	.word	0x200004f4

080035e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035e4:	e7fe      	b.n	80035e4 <ADC1_2_IRQHandler>

080035e6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr

080035f2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80035f6:	e7fe      	b.n	80035f6 <HardFault_Handler+0x4>

080035f8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80035fc:	e7fe      	b.n	80035fc <MemManage_Handler+0x4>

080035fe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003602:	e7fe      	b.n	8003602 <BusFault_Handler+0x4>

08003604 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003608:	e7fe      	b.n	8003608 <UsageFault_Handler+0x4>

0800360a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
	...

08003618 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800361c:	4a15      	ldr	r2, [pc, #84]	; (8003674 <SystemInit+0x5c>)
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <SystemInit+0x5c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003628:	4912      	ldr	r1, [pc, #72]	; (8003674 <SystemInit+0x5c>)
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <SystemInit+0x5c>)
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <SystemInit+0x60>)
 8003630:	4013      	ands	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <SystemInit+0x5c>)
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <SystemInit+0x5c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <SystemInit+0x5c>)
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <SystemInit+0x5c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003650:	4a08      	ldr	r2, [pc, #32]	; (8003674 <SystemInit+0x5c>)
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <SystemInit+0x5c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800365a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SystemInit+0x5c>)
 800365e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003662:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003664:	f000 f80c 	bl	8003680 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <SystemInit+0x64>)
 800366a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800366e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	f8ff0000 	.word	0xf8ff0000
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003684:	f000 f802 	bl	800368c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}

0800368c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800369a:	4a3a      	ldr	r2, [pc, #232]	; (8003784 <SetSysClockTo72+0xf8>)
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <SetSysClockTo72+0xf8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80036a6:	4b37      	ldr	r3, [pc, #220]	; (8003784 <SetSysClockTo72+0xf8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3301      	adds	r3, #1
 80036b4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <SetSysClockTo72+0x38>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80036c2:	d1f0      	bne.n	80036a6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80036c4:	4b2f      	ldr	r3, [pc, #188]	; (8003784 <SetSysClockTo72+0xf8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80036d0:	2301      	movs	r3, #1
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	e001      	b.n	80036da <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80036d6:	2300      	movs	r3, #0
 80036d8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d14b      	bne.n	8003778 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80036e0:	4a29      	ldr	r2, [pc, #164]	; (8003788 <SetSysClockTo72+0xfc>)
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <SetSysClockTo72+0xfc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f043 0310 	orr.w	r3, r3, #16
 80036ea:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80036ec:	4a26      	ldr	r2, [pc, #152]	; (8003788 <SetSysClockTo72+0xfc>)
 80036ee:	4b26      	ldr	r3, [pc, #152]	; (8003788 <SetSysClockTo72+0xfc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0303 	bic.w	r3, r3, #3
 80036f6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <SetSysClockTo72+0xfc>)
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <SetSysClockTo72+0xfc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f043 0302 	orr.w	r3, r3, #2
 8003702:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003704:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <SetSysClockTo72+0xf8>)
 8003706:	4b1f      	ldr	r3, [pc, #124]	; (8003784 <SetSysClockTo72+0xf8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <SetSysClockTo72+0xf8>)
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <SetSysClockTo72+0xf8>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003714:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <SetSysClockTo72+0xf8>)
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <SetSysClockTo72+0xf8>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800371e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003720:	4a18      	ldr	r2, [pc, #96]	; (8003784 <SetSysClockTo72+0xf8>)
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <SetSysClockTo72+0xf8>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800372a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <SetSysClockTo72+0xf8>)
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <SetSysClockTo72+0xf8>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003736:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003738:	4a12      	ldr	r2, [pc, #72]	; (8003784 <SetSysClockTo72+0xf8>)
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <SetSysClockTo72+0xf8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003744:	bf00      	nop
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <SetSysClockTo72+0xf8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f9      	beq.n	8003746 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003752:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <SetSysClockTo72+0xf8>)
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <SetSysClockTo72+0xf8>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f023 0303 	bic.w	r3, r3, #3
 800375c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <SetSysClockTo72+0xf8>)
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <SetSysClockTo72+0xf8>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800376a:	bf00      	nop
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <SetSysClockTo72+0xf8>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d1f9      	bne.n	800376c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	40022000 	.word	0x40022000

0800378c <spi2_init_lcd>:
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);




void spi2_init_lcd(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0

	SPI_InitTypeDef  SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPI2 and GPIOA clocks */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8003792:	2101      	movs	r1, #1
 8003794:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003798:	f7fc ffbe 	bl	8000718 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800379c:	2101      	movs	r1, #1
 800379e:	2008      	movs	r0, #8
 80037a0:	f7fc ff9c 	bl	80006dc <RCC_APB2PeriphClockCmd>


	//SPI - SCK, MISO, MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 80037a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80037a8:	803b      	strh	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80037aa:	2318      	movs	r3, #24
 80037ac:	70fb      	strb	r3, [r7, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 80037ae:	2301      	movs	r3, #1
 80037b0:	70bb      	strb	r3, [r7, #2]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80037b2:	463b      	mov	r3, r7
 80037b4:	4619      	mov	r1, r3
 80037b6:	4818      	ldr	r0, [pc, #96]	; (8003818 <spi2_init_lcd+0x8c>)
 80037b8:	f7fc feb8 	bl	800052c <GPIO_Init>
//	/* Enable SPI1  */
//	SPI_Cmd(SPI2, ENABLE);



	 RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <spi2_init_lcd+0x90>)
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <spi2_init_lcd+0x90>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c6:	61d3      	str	r3, [r2, #28]
		 SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 80037c8:	4a15      	ldr	r2, [pc, #84]	; (8003820 <spi2_init_lcd+0x94>)
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <spi2_init_lcd+0x94>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f043 0318 	orr.w	r3, r3, #24
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSM;
 80037d8:	4a11      	ldr	r2, [pc, #68]	; (8003820 <spi2_init_lcd+0x94>)
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <spi2_init_lcd+0x94>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	8013      	strh	r3, [r2, #0]
		 SPI2->CR1 |= SPI_CR1_SSI;
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <spi2_init_lcd+0x94>)
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <spi2_init_lcd+0x94>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	8013      	strh	r3, [r2, #0]
		 SPI2->CRCPR = 7;
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <spi2_init_lcd+0x94>)
 80037fa:	2207      	movs	r2, #7
 80037fc:	821a      	strh	r2, [r3, #16]
		 SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <spi2_init_lcd+0x94>)
 8003800:	4b07      	ldr	r3, [pc, #28]	; (8003820 <spi2_init_lcd+0x94>)
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]



}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40010c00 	.word	0x40010c00
 800381c:	40021000 	.word	0x40021000
 8003820:	40003800 	.word	0x40003800

08003824 <TM_SPI_Send>:


uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET);
 8003830:	bf00      	nop
 8003832:	2102      	movs	r1, #2
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fd f828 	bl	800088a <SPI_I2S_GetFlagStatus>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f8      	beq.n	8003832 <TM_SPI_Send+0xe>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(SPIx, data);
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	b29b      	uxth	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fc ffe6 	bl	8000818 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET);
 800384c:	bf00      	nop
 800384e:	2101      	movs	r1, #1
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fd f81a 	bl	800088a <SPI_I2S_GetFlagStatus>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f8      	beq.n	800384e <TM_SPI_Send+0x2a>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(SPIx);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fc ffe9 	bl	8000834 <SPI_I2S_ReceiveData>
 8003862:	4603      	mov	r3, r0
 8003864:	b2db      	uxtb	r3, r3
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <TM_ILI9341_Init>:


void TM_ILI9341_Init() {
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8003876:	2101      	movs	r1, #1
 8003878:	2004      	movs	r0, #4
 800387a:	f7fc ff2f 	bl	80006dc <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800387e:	2101      	movs	r1, #1
 8003880:	2008      	movs	r0, #8
 8003882:	f7fc ff2b 	bl	80006dc <RCC_APB2PeriphClockCmd>
	/* Init WRX pin */
	//TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_wrx;
	port_wrx.GPIO_Mode = GPIO_Mode_Out_PP;
 8003886:	2310      	movs	r3, #16
 8003888:	73fb      	strb	r3, [r7, #15]
	port_wrx.GPIO_Speed = GPIO_Speed_2MHz;
 800388a:	2302      	movs	r3, #2
 800388c:	73bb      	strb	r3, [r7, #14]
	port_wrx.GPIO_Pin = ILI9341_WRX_PIN;
 800388e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003892:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(ILI9341_WRX_PORT, &port_wrx);
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	4619      	mov	r1, r3
 800389a:	481f      	ldr	r0, [pc, #124]	; (8003918 <TM_ILI9341_Init+0xa8>)
 800389c:	f7fc fe46 	bl	800052c <GPIO_Init>

	
	/* Init CS pin */
//	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
	GPIO_InitTypeDef port_cs;
	port_cs.GPIO_Mode = GPIO_Mode_Out_PP;
 80038a0:	2310      	movs	r3, #16
 80038a2:	72fb      	strb	r3, [r7, #11]
	port_cs.GPIO_Speed = GPIO_Speed_2MHz;
 80038a4:	2302      	movs	r3, #2
 80038a6:	72bb      	strb	r3, [r7, #10]
	port_cs.GPIO_Pin = ILI9341_CS_PIN;
 80038a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ac:	813b      	strh	r3, [r7, #8]
	GPIO_Init(ILI9341_CS_PORT, &port_cs);
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	4619      	mov	r1, r3
 80038b4:	4819      	ldr	r0, [pc, #100]	; (800391c <TM_ILI9341_Init+0xac>)
 80038b6:	f7fc fe39 	bl	800052c <GPIO_Init>

	
	/* Init RST pin */
//	TM_GPIO_Init(ILI9341_RST_PORT, ILI9341_RST_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);
	GPIO_InitTypeDef port_rst;
	port_rst.GPIO_Mode = GPIO_Mode_Out_PP;
 80038ba:	2310      	movs	r3, #16
 80038bc:	71fb      	strb	r3, [r7, #7]
	port_rst.GPIO_Speed = GPIO_Speed_2MHz;
 80038be:	2302      	movs	r3, #2
 80038c0:	71bb      	strb	r3, [r7, #6]
	port_rst.GPIO_Pin = ILI9341_RST_PIN;
 80038c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038c6:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(ILI9341_RST_PORT, &port_rst);
 80038c8:	1d3b      	adds	r3, r7, #4
 80038ca:	4619      	mov	r1, r3
 80038cc:	4812      	ldr	r0, [pc, #72]	; (8003918 <TM_ILI9341_Init+0xa8>)
 80038ce:	f7fc fe2d 	bl	800052c <GPIO_Init>


	/* CS high */
	ILI9341_CS_SET;
 80038d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038d6:	4811      	ldr	r0, [pc, #68]	; (800391c <TM_ILI9341_Init+0xac>)
 80038d8:	f7fc fee4 	bl	80006a4 <GPIO_SetBits>
	
	/* Init SPI */
	spi2_init_lcd();
 80038dc:	f7ff ff56 	bl	800378c <spi2_init_lcd>
	
	/* Init DMA for SPI */
	//TM_SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 80038e0:	f000 f824 	bl	800392c <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <TM_ILI9341_Init+0xb0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <TM_ILI9341_Init+0xb0>)
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <TM_ILI9341_Init+0xb4>)
 80038f0:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <TM_ILI9341_Init+0xb8>)
 80038f4:	22f0      	movs	r2, #240	; 0xf0
 80038f6:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <TM_ILI9341_Init+0xb8>)
 80038fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038fe:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <TM_ILI9341_Init+0xb8>)
 8003902:	2201      	movs	r2, #1
 8003904:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	glcd_fill_screen(ILI9341_COLOR_BROWN);
 8003906:	f64b 30ca 	movw	r0, #48074	; 0xbbca
 800390a:	f000 f9fd 	bl	8003d08 <glcd_fill_screen>
//	TM_ILI9341_Fill(ILI9341_COLOR_BLUE);
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40010800 	.word	0x40010800
 800391c:	40010c00 	.word	0x40010c00
 8003920:	200004ea 	.word	0x200004ea
 8003924:	200004ec 	.word	0x200004ec
 8003928:	200004e4 	.word	0x200004e4

0800392c <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 8003930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003934:	4899      	ldr	r0, [pc, #612]	; (8003b9c <TM_ILI9341_InitLCD+0x270>)
 8003936:	f7fc fec3 	bl	80006c0 <GPIO_ResetBits>
	TM_ILI9341_Delay(20000);
 800393a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800393e:	f000 fb45 	bl	8003fcc <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 8003942:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003946:	4895      	ldr	r0, [pc, #596]	; (8003b9c <TM_ILI9341_InitLCD+0x270>)
 8003948:	f7fc feac 	bl	80006a4 <GPIO_SetBits>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 800394c:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003950:	f000 fb3c 	bl	8003fcc <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 8003954:	2001      	movs	r0, #1
 8003956:	f000 f925 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 800395a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800395e:	f000 fb35 	bl	8003fcc <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 8003962:	20cb      	movs	r0, #203	; 0xcb
 8003964:	f000 f91e 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 8003968:	2039      	movs	r0, #57	; 0x39
 800396a:	f000 f93f 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 800396e:	202c      	movs	r0, #44	; 0x2c
 8003970:	f000 f93c 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8003974:	2000      	movs	r0, #0
 8003976:	f000 f939 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 800397a:	2034      	movs	r0, #52	; 0x34
 800397c:	f000 f936 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 8003980:	2002      	movs	r0, #2
 8003982:	f000 f933 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 8003986:	20cf      	movs	r0, #207	; 0xcf
 8003988:	f000 f90c 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800398c:	2000      	movs	r0, #0
 800398e:	f000 f92d 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8003992:	20c1      	movs	r0, #193	; 0xc1
 8003994:	f000 f92a 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8003998:	2030      	movs	r0, #48	; 0x30
 800399a:	f000 f927 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 800399e:	20e8      	movs	r0, #232	; 0xe8
 80039a0:	f000 f900 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 80039a4:	2085      	movs	r0, #133	; 0x85
 80039a6:	f000 f921 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f000 f91e 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 80039b0:	2078      	movs	r0, #120	; 0x78
 80039b2:	f000 f91b 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 80039b6:	20ea      	movs	r0, #234	; 0xea
 80039b8:	f000 f8f4 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80039bc:	2000      	movs	r0, #0
 80039be:	f000 f915 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 f912 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 80039c8:	20ed      	movs	r0, #237	; 0xed
 80039ca:	f000 f8eb 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 80039ce:	2064      	movs	r0, #100	; 0x64
 80039d0:	f000 f90c 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 80039d4:	2003      	movs	r0, #3
 80039d6:	f000 f909 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 80039da:	2012      	movs	r0, #18
 80039dc:	f000 f906 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 80039e0:	2081      	movs	r0, #129	; 0x81
 80039e2:	f000 f903 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 80039e6:	20f7      	movs	r0, #247	; 0xf7
 80039e8:	f000 f8dc 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 80039ec:	2020      	movs	r0, #32
 80039ee:	f000 f8fd 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 80039f2:	20c0      	movs	r0, #192	; 0xc0
 80039f4:	f000 f8d6 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 80039f8:	2023      	movs	r0, #35	; 0x23
 80039fa:	f000 f8f7 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 80039fe:	20c1      	movs	r0, #193	; 0xc1
 8003a00:	f000 f8d0 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8003a04:	2010      	movs	r0, #16
 8003a06:	f000 f8f1 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 8003a0a:	20c5      	movs	r0, #197	; 0xc5
 8003a0c:	f000 f8ca 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 8003a10:	203e      	movs	r0, #62	; 0x3e
 8003a12:	f000 f8eb 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 8003a16:	2028      	movs	r0, #40	; 0x28
 8003a18:	f000 f8e8 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8003a1c:	20c7      	movs	r0, #199	; 0xc7
 8003a1e:	f000 f8c1 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 8003a22:	2086      	movs	r0, #134	; 0x86
 8003a24:	f000 f8e2 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8003a28:	2036      	movs	r0, #54	; 0x36
 8003a2a:	f000 f8bb 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 8003a2e:	2048      	movs	r0, #72	; 0x48
 8003a30:	f000 f8dc 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 8003a34:	203a      	movs	r0, #58	; 0x3a
 8003a36:	f000 f8b5 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 8003a3a:	2055      	movs	r0, #85	; 0x55
 8003a3c:	f000 f8d6 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 8003a40:	20b1      	movs	r0, #177	; 0xb1
 8003a42:	f000 f8af 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8003a46:	2000      	movs	r0, #0
 8003a48:	f000 f8d0 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 8003a4c:	2018      	movs	r0, #24
 8003a4e:	f000 f8cd 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8003a52:	20b6      	movs	r0, #182	; 0xb6
 8003a54:	f000 f8a6 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 8003a58:	2008      	movs	r0, #8
 8003a5a:	f000 f8c7 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 8003a5e:	2082      	movs	r0, #130	; 0x82
 8003a60:	f000 f8c4 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 8003a64:	2027      	movs	r0, #39	; 0x27
 8003a66:	f000 f8c1 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8003a6a:	20f2      	movs	r0, #242	; 0xf2
 8003a6c:	f000 f89a 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8003a70:	2000      	movs	r0, #0
 8003a72:	f000 f8bb 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8003a76:	202a      	movs	r0, #42	; 0x2a
 8003a78:	f000 f894 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	f000 f8b5 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f000 f8b2 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f000 f8af 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 8003a8e:	20ef      	movs	r0, #239	; 0xef
 8003a90:	f000 f8ac 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8003a94:	202b      	movs	r0, #43	; 0x2b
 8003a96:	f000 f885 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f000 f8a6 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f000 f8a3 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f000 f8a0 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 8003aac:	203f      	movs	r0, #63	; 0x3f
 8003aae:	f000 f89d 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8003ab2:	2026      	movs	r0, #38	; 0x26
 8003ab4:	f000 f876 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f000 f897 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8003abe:	20e0      	movs	r0, #224	; 0xe0
 8003ac0:	f000 f870 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8003ac4:	200f      	movs	r0, #15
 8003ac6:	f000 f891 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8003aca:	2031      	movs	r0, #49	; 0x31
 8003acc:	f000 f88e 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8003ad0:	202b      	movs	r0, #43	; 0x2b
 8003ad2:	f000 f88b 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8003ad6:	200c      	movs	r0, #12
 8003ad8:	f000 f888 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8003adc:	200e      	movs	r0, #14
 8003ade:	f000 f885 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8003ae2:	2008      	movs	r0, #8
 8003ae4:	f000 f882 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8003ae8:	204e      	movs	r0, #78	; 0x4e
 8003aea:	f000 f87f 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 8003aee:	20f1      	movs	r0, #241	; 0xf1
 8003af0:	f000 f87c 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 8003af4:	2037      	movs	r0, #55	; 0x37
 8003af6:	f000 f879 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8003afa:	2007      	movs	r0, #7
 8003afc:	f000 f876 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 8003b00:	2010      	movs	r0, #16
 8003b02:	f000 f873 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8003b06:	2003      	movs	r0, #3
 8003b08:	f000 f870 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8003b0c:	200e      	movs	r0, #14
 8003b0e:	f000 f86d 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8003b12:	2009      	movs	r0, #9
 8003b14:	f000 f86a 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f000 f867 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8003b1e:	20e1      	movs	r0, #225	; 0xe1
 8003b20:	f000 f840 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8003b24:	2000      	movs	r0, #0
 8003b26:	f000 f861 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8003b2a:	200e      	movs	r0, #14
 8003b2c:	f000 f85e 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 8003b30:	2014      	movs	r0, #20
 8003b32:	f000 f85b 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8003b36:	2003      	movs	r0, #3
 8003b38:	f000 f858 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8003b3c:	2011      	movs	r0, #17
 8003b3e:	f000 f855 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8003b42:	2007      	movs	r0, #7
 8003b44:	f000 f852 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8003b48:	2031      	movs	r0, #49	; 0x31
 8003b4a:	f000 f84f 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8003b4e:	20c1      	movs	r0, #193	; 0xc1
 8003b50:	f000 f84c 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 8003b54:	2048      	movs	r0, #72	; 0x48
 8003b56:	f000 f849 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8003b5a:	2008      	movs	r0, #8
 8003b5c:	f000 f846 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8003b60:	200f      	movs	r0, #15
 8003b62:	f000 f843 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8003b66:	200c      	movs	r0, #12
 8003b68:	f000 f840 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8003b6c:	2031      	movs	r0, #49	; 0x31
 8003b6e:	f000 f83d 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 8003b72:	2036      	movs	r0, #54	; 0x36
 8003b74:	f000 f83a 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8003b78:	200f      	movs	r0, #15
 8003b7a:	f000 f837 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8003b7e:	2011      	movs	r0, #17
 8003b80:	f000 f810 	bl	8003ba4 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 8003b84:	4806      	ldr	r0, [pc, #24]	; (8003ba0 <TM_ILI9341_InitLCD+0x274>)
 8003b86:	f000 fa21 	bl	8003fcc <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8003b8a:	2029      	movs	r0, #41	; 0x29
 8003b8c:	f000 f80a 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8003b90:	202c      	movs	r0, #44	; 0x2c
 8003b92:	f000 f807 	bl	8003ba4 <TM_ILI9341_SendCommand>
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40010800 	.word	0x40010800
 8003ba0:	000f4240 	.word	0x000f4240

08003ba4 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 8003bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bb2:	480b      	ldr	r0, [pc, #44]	; (8003be0 <TM_ILI9341_SendCommand+0x3c>)
 8003bb4:	f7fc fd84 	bl	80006c0 <GPIO_ResetBits>
	ILI9341_CS_RESET;
 8003bb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bbc:	4809      	ldr	r0, [pc, #36]	; (8003be4 <TM_ILI9341_SendCommand+0x40>)
 8003bbe:	f7fc fd7f 	bl	80006c0 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4808      	ldr	r0, [pc, #32]	; (8003be8 <TM_ILI9341_SendCommand+0x44>)
 8003bc8:	f7ff fe2c 	bl	8003824 <TM_SPI_Send>
	ILI9341_CS_SET;
 8003bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd0:	4804      	ldr	r0, [pc, #16]	; (8003be4 <TM_ILI9341_SendCommand+0x40>)
 8003bd2:	f7fc fd67 	bl	80006a4 <GPIO_SetBits>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40010800 	.word	0x40010800
 8003be4:	40010c00 	.word	0x40010c00
 8003be8:	40003800 	.word	0x40003800

08003bec <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8003bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bfa:	480b      	ldr	r0, [pc, #44]	; (8003c28 <TM_ILI9341_SendData+0x3c>)
 8003bfc:	f7fc fd52 	bl	80006a4 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8003c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c04:	4809      	ldr	r0, [pc, #36]	; (8003c2c <TM_ILI9341_SendData+0x40>)
 8003c06:	f7fc fd5b 	bl	80006c0 <GPIO_ResetBits>
	TM_SPI_Send(ILI9341_SPI, data);
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4808      	ldr	r0, [pc, #32]	; (8003c30 <TM_ILI9341_SendData+0x44>)
 8003c10:	f7ff fe08 	bl	8003824 <TM_SPI_Send>
	ILI9341_CS_SET;
 8003c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c18:	4804      	ldr	r0, [pc, #16]	; (8003c2c <TM_ILI9341_SendData+0x40>)
 8003c1a:	f7fc fd43 	bl	80006a4 <GPIO_SetBits>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40010800 	.word	0x40010800
 8003c2c:	40010c00 	.word	0x40010c00
 8003c30:	40003800 	.word	0x40003800

08003c34 <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	603a      	str	r2, [r7, #0]
 8003c3e:	80fb      	strh	r3, [r7, #6]
 8003c40:	460b      	mov	r3, r1
 8003c42:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 8003c44:	88bb      	ldrh	r3, [r7, #4]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	88b9      	ldrh	r1, [r7, #4]
 8003c4a:	88f8      	ldrh	r0, [r7, #6]
 8003c4c:	f000 f812 	bl	8003c74 <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8003c50:	202c      	movs	r0, #44	; 0x2c
 8003c52:	f7ff ffa7 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ffc5 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ffc0 	bl	8003bec <TM_ILI9341_SendData>
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	80fb      	strh	r3, [r7, #6]
 8003c86:	4603      	mov	r3, r0
 8003c88:	80bb      	strh	r3, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	807b      	strh	r3, [r7, #2]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8003c92:	202a      	movs	r0, #42	; 0x2a
 8003c94:	f7ff ff86 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	0a1b      	lsrs	r3, r3, #8
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ffa3 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ff9e 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff97 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff92 	bl	8003bec <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8003cc8:	202b      	movs	r0, #43	; 0x2b
 8003cca:	f7ff ff6b 	bl	8003ba4 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 8003cce:	88bb      	ldrh	r3, [r7, #4]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff ff88 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 8003cdc:	88bb      	ldrh	r3, [r7, #4]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff83 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 8003ce6:	883b      	ldrh	r3, [r7, #0]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff7c 	bl	8003bec <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 8003cf4:	883b      	ldrh	r3, [r7, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff77 	bl	8003bec <TM_ILI9341_SendData>
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}
	...

08003d08 <glcd_fill_screen>:
//	}
//}



void glcd_fill_screen (uint16_t color){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	80fb      	strh	r3, [r7, #6]

	///////////////////////////////////////////////



	TM_ILI9341_SetCursorPosition(0, 0, 240, 320);
 8003d12:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003d16:	22f0      	movs	r2, #240	; 0xf0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	f7ff ffaa 	bl	8003c74 <TM_ILI9341_SetCursorPosition>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8003d20:	202c      	movs	r0, #44	; 0x2c
 8003d22:	f7ff ff3f 	bl	8003ba4 <TM_ILI9341_SendCommand>
	ILI9341_WRX_SET;
 8003d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d2a:	4884      	ldr	r0, [pc, #528]	; (8003f3c <glcd_fill_screen+0x234>)
 8003d2c:	f7fc fcba 	bl	80006a4 <GPIO_SetBits>
	ILI9341_CS_RESET;
 8003d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d34:	4882      	ldr	r0, [pc, #520]	; (8003f40 <glcd_fill_screen+0x238>)
 8003d36:	f7fc fcc3 	bl	80006c0 <GPIO_ResetBits>



	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8003d3a:	4a82      	ldr	r2, [pc, #520]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003d3c:	4b81      	ldr	r3, [pc, #516]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6153      	str	r3, [r2, #20]
	static uint8_t color_static = ILI9341_COLOR_BLACK;

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8003d46:	4a80      	ldr	r2, [pc, #512]	; (8003f48 <glcd_fill_screen+0x240>)
 8003d48:	4b7f      	ldr	r3, [pc, #508]	; (8003f48 <glcd_fill_screen+0x240>)
 8003d4a:	889b      	ldrh	r3, [r3, #4]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 8003d56:	4b7d      	ldr	r3, [pc, #500]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d58:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8003d5c:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8003d5e:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d60:	4a7b      	ldr	r2, [pc, #492]	; (8003f50 <glcd_fill_screen+0x248>)
 8003d62:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8003d64:	4b79      	ldr	r3, [pc, #484]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d66:	4a7b      	ldr	r2, [pc, #492]	; (8003f54 <glcd_fill_screen+0x24c>)
 8003d68:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8003d6a:	4a78      	ldr	r2, [pc, #480]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d6c:	4b77      	ldr	r3, [pc, #476]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f043 0310 	orr.w	r3, r3, #16
 8003d74:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8003d76:	4a75      	ldr	r2, [pc, #468]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d78:	4b74      	ldr	r3, [pc, #464]	; (8003f4c <glcd_fill_screen+0x244>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8003d82:	bf00      	nop
 8003d84:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <glcd_fill_screen+0x240>)
 8003d86:	891b      	ldrh	r3, [r3, #8]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f8      	beq.n	8003d84 <glcd_fill_screen+0x7c>
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <glcd_fill_screen+0x240>)
 8003d94:	891b      	ldrh	r3, [r3, #8]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f1      	bne.n	8003d84 <glcd_fill_screen+0x7c>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8003da0:	4a68      	ldr	r2, [pc, #416]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003da2:	4b68      	ldr	r3, [pc, #416]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	6153      	str	r3, [r2, #20]





	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8003dac:	4a65      	ldr	r2, [pc, #404]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003dae:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6153      	str	r3, [r2, #20]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8003db8:	4a62      	ldr	r2, [pc, #392]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6153      	str	r3, [r2, #20]

	DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 8003dc4:	4a61      	ldr	r2, [pc, #388]	; (8003f4c <glcd_fill_screen+0x244>)
 8003dc6:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <glcd_fill_screen+0x244>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	6013      	str	r3, [r2, #0]

//	SPI2->CR2 |= SPI_CR1_DFF;
	SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8003dd0:	4a5d      	ldr	r2, [pc, #372]	; (8003f48 <glcd_fill_screen+0x240>)
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <glcd_fill_screen+0x240>)
 8003dd4:	889b      	ldrh	r3, [r3, #4]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	8093      	strh	r3, [r2, #4]


	DMA1_Channel5->CNDTR = 65530;
 8003de0:	4b5a      	ldr	r3, [pc, #360]	; (8003f4c <glcd_fill_screen+0x244>)
 8003de2:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8003de6:	605a      	str	r2, [r3, #4]
	DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8003de8:	4b58      	ldr	r3, [pc, #352]	; (8003f4c <glcd_fill_screen+0x244>)
 8003dea:	4a59      	ldr	r2, [pc, #356]	; (8003f50 <glcd_fill_screen+0x248>)
 8003dec:	609a      	str	r2, [r3, #8]
	DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8003dee:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <glcd_fill_screen+0x244>)
 8003df0:	4a58      	ldr	r2, [pc, #352]	; (8003f54 <glcd_fill_screen+0x24c>)
 8003df2:	60da      	str	r2, [r3, #12]
//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



	DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8003df4:	4a55      	ldr	r2, [pc, #340]	; (8003f4c <glcd_fill_screen+0x244>)
 8003df6:	4b55      	ldr	r3, [pc, #340]	; (8003f4c <glcd_fill_screen+0x244>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f043 0310 	orr.w	r3, r3, #16
 8003dfe:	6013      	str	r3, [r2, #0]
	DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8003e00:	4a52      	ldr	r2, [pc, #328]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e02:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6013      	str	r3, [r2, #0]


	while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8003e0c:	bf00      	nop
 8003e0e:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <glcd_fill_screen+0x240>)
 8003e10:	891b      	ldrh	r3, [r3, #8]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f8      	beq.n	8003e0e <glcd_fill_screen+0x106>
 8003e1c:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <glcd_fill_screen+0x240>)
 8003e1e:	891b      	ldrh	r3, [r3, #8]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f1      	bne.n	8003e0e <glcd_fill_screen+0x106>
	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8003e2a:	4a46      	ldr	r2, [pc, #280]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003e2c:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6153      	str	r3, [r2, #20]

	RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8003e36:	4a43      	ldr	r2, [pc, #268]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	6153      	str	r3, [r2, #20]
		RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8003e42:	4a40      	ldr	r2, [pc, #256]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003e44:	4b3f      	ldr	r3, [pc, #252]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6153      	str	r3, [r2, #20]

		DMA1_Channel5->CCR &= ~DMA_CCR1_EN;
 8003e4e:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e50:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6013      	str	r3, [r2, #0]

	//	SPI2->CR2 |= SPI_CR1_DFF;
		SPI2->CR2 |= SPI_CR2_TXDMAEN;
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <glcd_fill_screen+0x240>)
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <glcd_fill_screen+0x240>)
 8003e5e:	889b      	ldrh	r3, [r3, #4]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	8093      	strh	r3, [r2, #4]


		DMA1_Channel5->CNDTR = 65530;
 8003e6a:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e6c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8003e70:	605a      	str	r2, [r3, #4]
		DMA1_Channel5->CPAR = (uint32_t) &SPI2->DR;
 8003e72:	4b36      	ldr	r3, [pc, #216]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e74:	4a36      	ldr	r2, [pc, #216]	; (8003f50 <glcd_fill_screen+0x248>)
 8003e76:	609a      	str	r2, [r3, #8]
		DMA1_Channel5->CMAR = (uint32_t) &color_static;
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e7a:	4a36      	ldr	r2, [pc, #216]	; (8003f54 <glcd_fill_screen+0x24c>)
 8003e7c:	60da      	str	r2, [r3, #12]
	//	DMA1_Channel5->CMAR = DMA_CCR1_MSIZE_0;
	//	DMA1_Channel5->CMAR = DMA_CCR1_PSIZE_0;



		DMA1_Channel5->CCR |= DMA_CCR1_DIR;
 8003e7e:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e80:	4b32      	ldr	r3, [pc, #200]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f043 0310 	orr.w	r3, r3, #16
 8003e88:	6013      	str	r3, [r2, #0]
		DMA1_Channel5->CCR |= DMA_CCR1_EN;
 8003e8a:	4a30      	ldr	r2, [pc, #192]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e8c:	4b2f      	ldr	r3, [pc, #188]	; (8003f4c <glcd_fill_screen+0x244>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]


		while (!(SPI2 ->SR & SPI_SR_TXE) || (SPI2->SR & SPI_SR_BSY));
 8003e96:	bf00      	nop
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <glcd_fill_screen+0x240>)
 8003e9a:	891b      	ldrh	r3, [r3, #8]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f8      	beq.n	8003e98 <glcd_fill_screen+0x190>
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <glcd_fill_screen+0x240>)
 8003ea8:	891b      	ldrh	r3, [r3, #8]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f1      	bne.n	8003e98 <glcd_fill_screen+0x190>
		RCC->AHBENR &= ~RCC_AHBENR_DMA1EN;
 8003eb4:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003eb6:	4b23      	ldr	r3, [pc, #140]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6153      	str	r3, [r2, #20]




	ILI9341_CS_SET;
 8003ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ec4:	481e      	ldr	r0, [pc, #120]	; (8003f40 <glcd_fill_screen+0x238>)
 8003ec6:	f7fc fbed 	bl	80006a4 <GPIO_SetBits>





	RCC->APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8003eca:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003ecc:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed4:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_SPI2RST;
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee0:	6113      	str	r3, [r2, #16]



	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003ee4:	4b17      	ldr	r3, [pc, #92]	; (8003f44 <glcd_fill_screen+0x23c>)
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eec:	61d3      	str	r3, [r2, #28]
	SPI2->CR1 |= SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8003eee:	4a16      	ldr	r2, [pc, #88]	; (8003f48 <glcd_fill_screen+0x240>)
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <glcd_fill_screen+0x240>)
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f043 0318 	orr.w	r3, r3, #24
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSM;
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]
	SPI2->CR1 |= SPI_CR1_SSI;
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	8013      	strh	r3, [r2, #0]
	SPI2->CRCPR = 7;
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f20:	2207      	movs	r2, #7
 8003f22:	821a      	strh	r2, [r3, #16]
	SPI2->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 8003f24:	4a08      	ldr	r2, [pc, #32]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <glcd_fill_screen+0x240>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	8013      	strh	r3, [r2, #0]




}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40010800 	.word	0x40010800
 8003f40:	40010c00 	.word	0x40010c00
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40003800 	.word	0x40003800
 8003f4c:	40020058 	.word	0x40020058
 8003f50:	4000380c 	.word	0x4000380c
 8003f54:	20000432 	.word	0x20000432

08003f58 <TM_ILI9341_INT_Fill>:
//			glcd_sendData16(color);
//	}
}
//
//
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	80fb      	strh	r3, [r7, #6]
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	80bb      	strh	r3, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	807b      	strh	r3, [r7, #2]
 8003f72:	4613      	mov	r3, r2
 8003f74:	803b      	strh	r3, [r7, #0]
	uint8_t length;
	length = x1-x0;
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	73bb      	strb	r3, [r7, #14]

	uint8_t v_lines_nb;
	v_lines_nb = y1-y0;
 8003f82:	883b      	ldrh	r3, [r7, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	88bb      	ldrh	r3, [r7, #4]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	737b      	strb	r3, [r7, #13]

	uint8_t i;
	for(i=0;i<v_lines_nb;i++){
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	e013      	b.n	8003fbc <TM_ILI9341_INT_Fill+0x64>
			TM_ILI9341_DrawLine(x0, y0+i, x1, y0+i, color);
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	88bb      	ldrh	r3, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	b299      	uxth	r1, r3
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	88bb      	ldrh	r3, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	b29c      	uxth	r4, r3
 8003fa8:	8c3b      	ldrh	r3, [r7, #32]
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	88f8      	ldrh	r0, [r7, #6]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4623      	mov	r3, r4
 8003fb2:	f000 f81b 	bl	8003fec <TM_ILI9341_DrawLine>
	for(i=0;i<v_lines_nb;i++){
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d3e7      	bcc.n	8003f94 <TM_ILI9341_INT_Fill+0x3c>

	}
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <TM_ILI9341_Delay>:
//
//	/* Go back to 8-bit SPI mode */
//	TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);
//}

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 8003fd4:	e002      	b.n	8003fdc <TM_ILI9341_Delay+0x10>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f9      	bne.n	8003fd6 <TM_ILI9341_Delay+0xa>
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <TM_ILI9341_DrawLine>:
//	/* Set new pointer */
//	ILI9341_x += font->FontWidth;
//}
//

void TM_ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	80fb      	strh	r3, [r7, #6]
 8003ffe:	4603      	mov	r3, r0
 8004000:	80bb      	strh	r3, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]
 8004006:	4613      	mov	r3, r2
 8004008:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2; 	
	uint16_t tmp;
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 800400a:	4b4f      	ldr	r3, [pc, #316]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	429a      	cmp	r2, r3
 8004012:	d303      	bcc.n	800401c <TM_ILI9341_DrawLine+0x30>
		x0 = ILI9341_Opts.width - 1;
 8004014:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	3b01      	subs	r3, #1
 800401a:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 800401c:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	887a      	ldrh	r2, [r7, #2]
 8004022:	429a      	cmp	r2, r3
 8004024:	d303      	bcc.n	800402e <TM_ILI9341_DrawLine+0x42>
		x1 = ILI9341_Opts.width - 1;
 8004026:	4b48      	ldr	r3, [pc, #288]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	3b01      	subs	r3, #1
 800402c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 800402e:	4b46      	ldr	r3, [pc, #280]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 8004030:	885b      	ldrh	r3, [r3, #2]
 8004032:	88ba      	ldrh	r2, [r7, #4]
 8004034:	429a      	cmp	r2, r3
 8004036:	d303      	bcc.n	8004040 <TM_ILI9341_DrawLine+0x54>
		y0 = ILI9341_Opts.height - 1;
 8004038:	4b43      	ldr	r3, [pc, #268]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 800403a:	885b      	ldrh	r3, [r3, #2]
 800403c:	3b01      	subs	r3, #1
 800403e:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 8004040:	4b41      	ldr	r3, [pc, #260]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 8004042:	885b      	ldrh	r3, [r3, #2]
 8004044:	883a      	ldrh	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d303      	bcc.n	8004052 <TM_ILI9341_DrawLine+0x66>
		y1 = ILI9341_Opts.height - 1;
 800404a:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <TM_ILI9341_DrawLine+0x15c>)
 800404c:	885b      	ldrh	r3, [r3, #2]
 800404e:	3b01      	subs	r3, #1
 8004050:	803b      	strh	r3, [r7, #0]
	}
	
	/* Check correction */
	if (x0 > x1) {
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	429a      	cmp	r2, r3
 8004058:	d905      	bls.n	8004066 <TM_ILI9341_DrawLine+0x7a>
		tmp = x0;
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	82bb      	strh	r3, [r7, #20]
		x0 = x1;
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 8004062:	8abb      	ldrh	r3, [r7, #20]
 8004064:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8004066:	88ba      	ldrh	r2, [r7, #4]
 8004068:	883b      	ldrh	r3, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d905      	bls.n	800407a <TM_ILI9341_DrawLine+0x8e>
		tmp = y0;
 800406e:	88bb      	ldrh	r3, [r7, #4]
 8004070:	82bb      	strh	r3, [r7, #20]
		y0 = y1;
 8004072:	883b      	ldrh	r3, [r7, #0]
 8004074:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 8004076:	8abb      	ldrh	r3, [r7, #20]
 8004078:	803b      	strh	r3, [r7, #0]
	}
	
	dx = x1 - x0;
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	88fb      	ldrh	r3, [r7, #6]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	827b      	strh	r3, [r7, #18]
	dy = y1 - y0;
 8004084:	883a      	ldrh	r2, [r7, #0]
 8004086:	88bb      	ldrh	r3, [r7, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	823b      	strh	r3, [r7, #16]
//	if (dx == 0 || dy == 0) {
//		TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
//		return;
//	}
	
	sx = (x0 < x1) ? 1 : -1; 
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	429a      	cmp	r2, r3
 8004094:	d201      	bcs.n	800409a <TM_ILI9341_DrawLine+0xae>
 8004096:	2301      	movs	r3, #1
 8004098:	e001      	b.n	800409e <TM_ILI9341_DrawLine+0xb2>
 800409a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800409e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80040a0:	88ba      	ldrh	r2, [r7, #4]
 80040a2:	883b      	ldrh	r3, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d201      	bcs.n	80040ac <TM_ILI9341_DrawLine+0xc0>
 80040a8:	2301      	movs	r3, #1
 80040aa:	e001      	b.n	80040b0 <TM_ILI9341_DrawLine+0xc4>
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040b0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80040b2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80040b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	dd06      	ble.n	80040cc <TM_ILI9341_DrawLine+0xe0>
 80040be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040c2:	0fda      	lsrs	r2, r3, #31
 80040c4:	4413      	add	r3, r2
 80040c6:	105b      	asrs	r3, r3, #1
 80040c8:	b21b      	sxth	r3, r3
 80040ca:	e006      	b.n	80040da <TM_ILI9341_DrawLine+0xee>
 80040cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040d0:	425b      	negs	r3, r3
 80040d2:	0fda      	lsrs	r2, r3, #31
 80040d4:	4413      	add	r3, r2
 80040d6:	105b      	asrs	r3, r3, #1
 80040d8:	b21b      	sxth	r3, r3
 80040da:	82fb      	strh	r3, [r7, #22]

	while (1) {
		TM_ILI9341_DrawPixel(x0, y0, color); 
 80040dc:	88b9      	ldrh	r1, [r7, #4]
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fda6 	bl	8003c34 <TM_ILI9341_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d103      	bne.n	80040f8 <TM_ILI9341_DrawLine+0x10c>
 80040f0:	88ba      	ldrh	r2, [r7, #4]
 80040f2:	883b      	ldrh	r3, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d021      	beq.n	800413c <TM_ILI9341_DrawLine+0x150>
			break;
		}
		e2 = err; 
 80040f8:	8afb      	ldrh	r3, [r7, #22]
 80040fa:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80040fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004104:	425b      	negs	r3, r3
 8004106:	429a      	cmp	r2, r3
 8004108:	dd08      	ble.n	800411c <TM_ILI9341_DrawLine+0x130>
			err -= dy;
 800410a:	8afa      	ldrh	r2, [r7, #22]
 800410c:	8a3b      	ldrh	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	b29b      	uxth	r3, r3
 8004112:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8004114:	89fa      	ldrh	r2, [r7, #14]
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	4413      	add	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800411c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004120:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004124:	429a      	cmp	r2, r3
 8004126:	dad9      	bge.n	80040dc <TM_ILI9341_DrawLine+0xf0>
			err += dx;
 8004128:	8afa      	ldrh	r2, [r7, #22]
 800412a:	8a7b      	ldrh	r3, [r7, #18]
 800412c:	4413      	add	r3, r2
 800412e:	b29b      	uxth	r3, r3
 8004130:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8004132:	89ba      	ldrh	r2, [r7, #12]
 8004134:	88bb      	ldrh	r3, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	80bb      	strh	r3, [r7, #4]
		TM_ILI9341_DrawPixel(x0, y0, color); 
 800413a:	e7cf      	b.n	80040dc <TM_ILI9341_DrawLine+0xf0>
			break;
 800413c:	bf00      	nop
		} 
	}
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	bd90      	pop	{r4, r7, pc}
 8004146:	bf00      	nop
 8004148:	200004e4 	.word	0x200004e4

0800414c <TM_ILI9341_Puts>:
}




void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60ba      	str	r2, [r7, #8]
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	4603      	mov	r3, r0
 8004158:	81fb      	strh	r3, [r7, #14]
 800415a:	460b      	mov	r3, r1
 800415c:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 800415e:	89fb      	ldrh	r3, [r7, #14]
 8004160:	82fb      	strh	r3, [r7, #22]

	/* Set X and Y coordinates */
	ILI9341_x = x;
 8004162:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <TM_ILI9341_Puts+0xa8>)
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8004168:	4a23      	ldr	r2, [pc, #140]	; (80041f8 <TM_ILI9341_Puts+0xac>)
 800416a:	89bb      	ldrh	r3, [r7, #12]
 800416c:	8013      	strh	r3, [r2, #0]

	while (*str) {
 800416e:	e038      	b.n	80041e2 <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b0a      	cmp	r3, #10
 8004176:	d11d      	bne.n	80041b4 <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	b29a      	uxth	r2, r3
 800417e:	4b1e      	ldr	r3, [pc, #120]	; (80041f8 <TM_ILI9341_Puts+0xac>)
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	4413      	add	r3, r2
 8004184:	b29b      	uxth	r3, r3
 8004186:	3301      	adds	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <TM_ILI9341_Puts+0xac>)
 800418c:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3301      	adds	r3, #1
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b0d      	cmp	r3, #13
 8004196:	d106      	bne.n	80041a6 <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8004198:	4b16      	ldr	r3, [pc, #88]	; (80041f4 <TM_ILI9341_Puts+0xa8>)
 800419a:	2200      	movs	r2, #0
 800419c:	801a      	strh	r2, [r3, #0]
				str++;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	e002      	b.n	80041ac <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 80041a6:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <TM_ILI9341_Puts+0xa8>)
 80041a8:	8afb      	ldrh	r3, [r7, #22]
 80041aa:	8013      	strh	r3, [r2, #0]
			}
			str++;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3301      	adds	r3, #1
 80041b0:	60bb      	str	r3, [r7, #8]
			continue;
 80041b2:	e016      	b.n	80041e2 <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b0d      	cmp	r3, #13
 80041ba:	d103      	bne.n	80041c4 <TM_ILI9341_Puts+0x78>
			str++;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3301      	adds	r3, #1
 80041c0:	60bb      	str	r3, [r7, #8]
			continue;
 80041c2:	e00e      	b.n	80041e2 <TM_ILI9341_Puts+0x96>
		}

		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <TM_ILI9341_Puts+0xa8>)
 80041c6:	8818      	ldrh	r0, [r3, #0]
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <TM_ILI9341_Puts+0xac>)
 80041ca:	8819      	ldrh	r1, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	60ba      	str	r2, [r7, #8]
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f000 f80d 	bl	80041fc <TM_ILI9341_Putc>
	while (*str) {
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1c2      	bne.n	8004170 <TM_ILI9341_Puts+0x24>
	}
}
 80041ea:	bf00      	nop
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200004ec 	.word	0x200004ec
 80041f8:	200004ea 	.word	0x200004ea

080041fc <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b08b      	sub	sp, #44	; 0x2c
 8004200:	af02      	add	r7, sp, #8
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	4603      	mov	r3, r0
 8004206:	81fb      	strh	r3, [r7, #14]
 8004208:	460b      	mov	r3, r1
 800420a:	81bb      	strh	r3, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8004210:	4a40      	ldr	r2, [pc, #256]	; (8004314 <TM_ILI9341_Putc+0x118>)
 8004212:	89fb      	ldrh	r3, [r7, #14]
 8004214:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8004216:	4a40      	ldr	r2, [pc, #256]	; (8004318 <TM_ILI9341_Putc+0x11c>)
 8004218:	89bb      	ldrh	r3, [r7, #12]
 800421a:	8013      	strh	r3, [r2, #0]

	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 800421c:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <TM_ILI9341_Putc+0x118>)
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	4413      	add	r3, r2
 8004228:	4a3c      	ldr	r2, [pc, #240]	; (800431c <TM_ILI9341_Putc+0x120>)
 800422a:	8812      	ldrh	r2, [r2, #0]
 800422c:	4293      	cmp	r3, r2
 800422e:	dd0b      	ble.n	8004248 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	b29a      	uxth	r2, r3
 8004236:	4b38      	ldr	r3, [pc, #224]	; (8004318 <TM_ILI9341_Putc+0x11c>)
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	4413      	add	r3, r2
 800423c:	b29a      	uxth	r2, r3
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <TM_ILI9341_Putc+0x11c>)
 8004240:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 8004242:	4b34      	ldr	r3, [pc, #208]	; (8004314 <TM_ILI9341_Putc+0x118>)
 8004244:	2200      	movs	r2, #0
 8004246:	801a      	strh	r2, [r3, #0]
	}

	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 8004248:	4b32      	ldr	r3, [pc, #200]	; (8004314 <TM_ILI9341_Putc+0x118>)
 800424a:	8818      	ldrh	r0, [r3, #0]
 800424c:	4b32      	ldr	r3, [pc, #200]	; (8004318 <TM_ILI9341_Putc+0x11c>)
 800424e:	8819      	ldrh	r1, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b29a      	uxth	r2, r3
 8004256:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <TM_ILI9341_Putc+0x118>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	4413      	add	r3, r2
 800425c:	b29c      	uxth	r4, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	b29a      	uxth	r2, r3
 8004264:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <TM_ILI9341_Putc+0x11c>)
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	4413      	add	r3, r2
 800426a:	b29a      	uxth	r2, r3
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	b29b      	uxth	r3, r3
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	4622      	mov	r2, r4
 8004276:	f7ff fe6f 	bl	8003f58 <TM_ILI9341_INT_Fill>

//	TM_ILI9341_DrawRectangle(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, ILI9341_COLOR_YELLOW);

	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	e035      	b.n	80042ec <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	7afb      	ldrb	r3, [r7, #11]
 8004286:	3b20      	subs	r3, #32
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	7849      	ldrb	r1, [r1, #1]
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4619      	mov	r1, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	440b      	add	r3, r1
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
 80042a2:	e01a      	b.n	80042da <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00f      	beq.n	80042d4 <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <TM_ILI9341_Putc+0x118>)
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	4413      	add	r3, r2
 80042be:	b298      	uxth	r0, r3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <TM_ILI9341_Putc+0x11c>)
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7ff fcb0 	bl	8003c34 <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d8de      	bhi.n	80042a4 <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3301      	adds	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	461a      	mov	r2, r3
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d8c3      	bhi.n	8004280 <TM_ILI9341_Putc+0x84>
			}
		}
	}

	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <TM_ILI9341_Putc+0x118>)
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	4413      	add	r3, r2
 8004304:	b29a      	uxth	r2, r3
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <TM_ILI9341_Putc+0x118>)
 8004308:	801a      	strh	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	3724      	adds	r7, #36	; 0x24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}
 8004312:	bf00      	nop
 8004314:	200004ec 	.word	0x200004ec
 8004318:	200004ea 	.word	0x200004ea
 800431c:	200004e4 	.word	0x200004e4

08004320 <broker_init_by_given_net>:
//	broker->net->receive = receive;
//	broker->net->disconnect = disconnect;
//}


void broker_init_by_given_net(broker_t * broker, broker_net_t * broker_net){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
	memset(broker, 0, sizeof(broker_t));
 800432a:	f640 62c4 	movw	r2, #3780	; 0xec4
 800432e:	2100      	movs	r1, #0
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f001 fbb1 	bl	8005a98 <memset>
	broker->net = broker_net;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	f8c3 2ec0 	str.w	r2, [r3, #3776]	; 0xec0
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <decode_pck_len>:



/*---------------------------GENERAL PACKET HANDLING-----------------------------------------*/

rem_length_t decode_pck_len (uint8_t * frame){
 8004346:	b580      	push	{r7, lr}
 8004348:	b086      	sub	sp, #24
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
	uint8_t multiplier = 1;
 8004350:	2301      	movs	r3, #1
 8004352:	75fb      	strb	r3, [r7, #23]
	uint8_t  encodedByte;
	rem_length_t rem_length;
	memset(&rem_length, 0, sizeof(rem_length_t));
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	2208      	movs	r2, #8
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f001 fb9b 	bl	8005a98 <memset>
	const uint8_t max_nb_bytes = 4;
 8004362:	2304      	movs	r3, #4
 8004364:	75bb      	strb	r3, [r7, #22]
	do{
		encodedByte = frame[rem_length.bytes_nb];
 8004366:	7c3b      	ldrb	r3, [r7, #16]
 8004368:	461a      	mov	r2, r3
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	4413      	add	r3, r2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	757b      	strb	r3, [r7, #21]
		rem_length.value += (encodedByte & 127) * multiplier;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	7d7a      	ldrb	r2, [r7, #21]
 8004376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800437a:	7df9      	ldrb	r1, [r7, #23]
 800437c:	fb01 f202 	mul.w	r2, r1, r2
 8004380:	4413      	add	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
		multiplier *= 128;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	01db      	lsls	r3, r3, #7
 8004388:	75fb      	strb	r3, [r7, #23]
		rem_length.bytes_nb++;
 800438a:	7c3b      	ldrb	r3, [r7, #16]
 800438c:	3301      	adds	r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	743b      	strb	r3, [r7, #16]
		if (rem_length.bytes_nb == max_nb_bytes){
 8004392:	7c3b      	ldrb	r3, [r7, #16]
 8004394:	7dba      	ldrb	r2, [r7, #22]
 8004396:	429a      	cmp	r2, r3
 8004398:	d004      	beq.n	80043a4 <decode_pck_len+0x5e>
			break;
		}
	}while ((encodedByte & 128) != 0);
 800439a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	dbe1      	blt.n	8004366 <decode_pck_len+0x20>
 80043a2:	e000      	b.n	80043a6 <decode_pck_len+0x60>
			break;
 80043a4:	bf00      	nop
	return rem_length;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	461a      	mov	r2, r3
 80043aa:	f107 030c 	add.w	r3, r7, #12
 80043ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80043b2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <broker_receive>:



bool broker_receive(broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 80043be:	b590      	push	{r4, r7, lr}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
	uint16_t len;
	broker->net->receive(broker->net->context, sockaddr, frame, MAX_FRAME_SIZE);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80043d0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	23f0      	movs	r3, #240	; 0xf0
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	47a0      	blx	r4
}
 80043e4:	bf00      	nop
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd90      	pop	{r4, r7, pc}
	...

080043f0 <broker_packets_dispatcher>:


void broker_packets_dispatcher (broker_t * broker, uint8_t * frame, sockaddr_t * sockaddr){
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	6018      	str	r0, [r3, #0]
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	6019      	str	r1, [r3, #0]
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	601a      	str	r2, [r3, #0]
	uint8_t pckt_type = (frame[0]>>PCK_TYPE_POS);
 8004408:	f107 0308 	add.w	r3, r7, #8
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f887 327d 	strb.w	r3, [r7, #637]	; 0x27d
	switch (pckt_type) {
 8004416:	f897 327d 	ldrb.w	r3, [r7, #637]	; 0x27d
 800441a:	3b01      	subs	r3, #1
 800441c:	2b0b      	cmp	r3, #11
 800441e:	f200 8146 	bhi.w	80046ae <broker_packets_dispatcher+0x2be>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <broker_packets_dispatcher+0x38>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004459 	.word	0x08004459
 800442c:	080046af 	.word	0x080046af
 8004430:	08004531 	.word	0x08004531
 8004434:	080046af 	.word	0x080046af
 8004438:	080046af 	.word	0x080046af
 800443c:	080046af 	.word	0x080046af
 8004440:	080046af 	.word	0x080046af
 8004444:	08004595 	.word	0x08004595
 8004448:	080046af 	.word	0x080046af
 800444c:	08004659 	.word	0x08004659
 8004450:	080046af 	.word	0x080046af
 8004454:	08004699 	.word	0x08004699
	case PCKT_TYPE_CONNECT:{
		conn_pck_t conn_pck;
		broker_decode_connect(frame, &conn_pck);
 8004458:	f107 0214 	add.w	r2, r7, #20
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	4611      	mov	r1, r2
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	f000 fa1d 	bl	80048a2 <broker_decode_connect>
		broker_validate_conn(broker, &conn_pck);//
 8004468:	f107 0214 	add.w	r2, r7, #20
 800446c:	f107 030c 	add.w	r3, r7, #12
 8004470:	4611      	mov	r1, r2
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	f000 fc00 	bl	8004c78 <broker_validate_conn>
		bool sesion_present = false;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (was_clean_session_requested(&conn_pck)
 800447e:	f107 0314 	add.w	r3, r7, #20
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc24 	bl	8004cd0 <was_clean_session_requested>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <broker_packets_dispatcher+0xce>
		&& is_client_exist(broker, conn_pck.pld.client_id)){
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	4611      	mov	r1, r2
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	f000 f966 	bl	800476c <is_client_exist>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <broker_packets_dispatcher+0xce>
			broker_remove_client(broker, conn_pck.pld.client_id);
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4611      	mov	r1, r2
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	f000 f98d 	bl	80047d2 <broker_remove_client>
			sesion_present = true;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		}
		uint8_t ack_code = broker_validate_conn(broker, &conn_pck);
 80044be:	f107 0214 	add.w	r2, r7, #20
 80044c2:	f107 030c 	add.w	r3, r7, #12
 80044c6:	4611      	mov	r1, r2
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f000 fbd5 	bl	8004c78 <broker_validate_conn>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 327c 	strb.w	r3, [r7, #636]	; 0x27c
		tb_client_t new_client;
		broker_create_new_client(&new_client, &conn_pck, sockaddr);
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	f107 0114 	add.w	r1, r7, #20
 80044da:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	f000 fb42 	bl	8004b68 <broker_create_new_client>
		add_client(broker, &new_client);
 80044e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80044e8:	f107 030c 	add.w	r3, r7, #12
 80044ec:	4611      	mov	r1, r2
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	f000 f9b1 	bl	8004856 <add_client>
		conn_ack_t conn_ack;
		encode_conn_ack(&conn_ack, sesion_present, ack_code);
 80044f4:	f897 227c 	ldrb.w	r2, [r7, #636]	; 0x27c
 80044f8:	f897 127f 	ldrb.w	r1, [r7, #639]	; 0x27f
 80044fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fb10 	bl	8004b26 <encode_conn_ack>

		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&conn_ack, sizeof(conn_ack_t) );
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004510:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8004524:	1d39      	adds	r1, r7, #4
 8004526:	2304      	movs	r3, #4
 8004528:	6809      	ldr	r1, [r1, #0]
 800452a:	47a0      	blx	r4
		break;
 800452c:	bf00      	nop
 800452e:	e0be      	b.n	80046ae <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PUBLISH:{
		pub_pck_t pub_pck;
		broker_decode_publish(frame, &pub_pck);
 8004530:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004534:	f107 0308 	add.w	r3, r7, #8
 8004538:	4611      	mov	r1, r2
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	f000 fbdc 	bl	8004cf8 <broker_decode_publish>
		publish_msg_to_subscribers(broker, &pub_pck);
 8004540:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	4611      	mov	r1, r2
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	f000 fc40 	bl	8004dd0 <publish_msg_to_subscribers>
		publish_ack_t publish_ack;
		encode_publish_ack(&publish_ack, *pub_pck.var_head.packet_id);
 8004550:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fc90 	bl	8004e82 <encode_publish_ack>
		if (pub_pck.fix_head.ctrl_byte->QoS >=1){
 8004562:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	f340 809c 	ble.w	80046ac <broker_packets_dispatcher+0x2bc>
			broker->net->send(NULL, sockaddr, (uint8_t*)&publish_ack, sizeof(publish_ack_t) );
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800457e:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8004582:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 8004586:	1d39      	adds	r1, r7, #4
 8004588:	2304      	movs	r3, #4
 800458a:	6809      	ldr	r1, [r1, #0]
 800458c:	2000      	movs	r0, #0
 800458e:	47a0      	blx	r4
		}
		break;
 8004590:	bf00      	nop
 8004592:	e08b      	b.n	80046ac <broker_packets_dispatcher+0x2bc>
	}
	case PCKT_TYPE_SUBSCRIBE:{
		sub_pck_t sub_pck;
		uint8_t topic_nb = broker_decode_subscribe(frame, &sub_pck);
 8004594:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004598:	f107 0308 	add.w	r3, r7, #8
 800459c:	4611      	mov	r1, r2
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	f000 fc8c 	bl	8004ebc <broker_decode_subscribe>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 327b 	strb.w	r3, [r7, #635]	; 0x27b
		tb_client_t * subscribing_client = broker_get_client_by_socket(broker, sockaddr);
 80045aa:	1d3a      	adds	r2, r7, #4
 80045ac:	f107 030c 	add.w	r3, r7, #12
 80045b0:	6811      	ldr	r1, [r2, #0]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	f000 f8a4 	bl	8004700 <broker_get_client_by_socket>
 80045b8:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
		uint8_t sub_result[MAX_SUBS_TOPIC];
		if (subscribing_client){
 80045bc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <broker_packets_dispatcher+0x1f0>
			add_subscriptions_from_list(subscribing_client, sub_pck.pld_topics, topic_nb, sub_result);
 80045c4:	f507 7011 	add.w	r0, r7, #580	; 0x244
 80045c8:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 80045cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80045d0:	f103 010c 	add.w	r1, r3, #12
 80045d4:	4603      	mov	r3, r0
 80045d6:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 80045da:	f000 fdd1 	bl	8005180 <add_subscriptions_from_list>
 80045de:	e016      	b.n	800460e <broker_packets_dispatcher+0x21e>
		} else {
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 80045e6:	e00c      	b.n	8004602 <broker_packets_dispatcher+0x212>
				sub_result[i] = SUB_ACK_FAIL;
 80045e8:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80045ec:	f507 7220 	add.w	r2, r7, #640	; 0x280
 80045f0:	4413      	add	r3, r2
 80045f2:	2250      	movs	r2, #80	; 0x50
 80045f4:	f803 2c3c 	strb.w	r2, [r3, #-60]
			for (uint8_t i = 0; i < topic_nb; i++){ //need refactor, doubled code
 80045f8:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 80045fc:	3301      	adds	r3, #1
 80045fe:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8004602:	f897 227e 	ldrb.w	r2, [r7, #638]	; 0x27e
 8004606:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 800460a:	429a      	cmp	r2, r3
 800460c:	d3ec      	bcc.n	80045e8 <broker_packets_dispatcher+0x1f8>
			}
		}
		sub_ack_t sub_ack;
		encode_subscribe_ack(&sub_ack, *sub_pck.var_head.packet_id, topic_nb, sub_result);
 800460e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	8819      	ldrh	r1, [r3, #0]
 8004616:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800461a:	f897 227b 	ldrb.w	r2, [r7, #635]	; 0x27b
 800461e:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8004622:	f000 fe39 	bl	8005298 <encode_subscribe_ack>
		broker->net->send(broker->net->context, sockaddr, (uint8_t*)&sub_ack, (SUB_ACK_ALL_HEAD_LEN + topic_nb));
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004630:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	f897 327b 	ldrb.w	r3, [r7, #635]	; 0x27b
 8004644:	b29b      	uxth	r3, r3
 8004646:	3304      	adds	r3, #4
 8004648:	b29b      	uxth	r3, r3
 800464a:	f507 720e 	add.w	r2, r7, #568	; 0x238
 800464e:	1d39      	adds	r1, r7, #4
 8004650:	6809      	ldr	r1, [r1, #0]
 8004652:	47a0      	blx	r4
		break;
 8004654:	bf00      	nop
 8004656:	e02a      	b.n	80046ae <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_UNSUBSCRIBE:{
		unsub_pck_t unsub_pck;
	    uint8_t topic_nb =  broker_decode_unsubscribe(frame, &unsub_pck);
 8004658:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	4611      	mov	r1, r2
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	f000 fe40 	bl	80052e8 <broker_decode_unsubscribe>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	    tb_client_t * unsubscribing_client = broker_get_client_by_socket(broker, sockaddr);
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	f000 f842 	bl	8004700 <broker_get_client_by_socket>
 800467c:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
		delete_listed_subscriptions(unsubscribing_client, unsub_pck.pld_topics, topic_nb);
 8004680:	f897 2273 	ldrb.w	r2, [r7, #627]	; 0x273
 8004684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004688:	330c      	adds	r3, #12
 800468a:	4619      	mov	r1, r3
 800468c:	f8d7 026c 	ldr.w	r0, [r7, #620]	; 0x26c
 8004690:	f000 ff13 	bl	80054ba <delete_listed_subscriptions>
		break;
 8004694:	bf00      	nop
 8004696:	e00a      	b.n	80046ae <broker_packets_dispatcher+0x2be>
	}
	case PCKT_TYPE_PINGREQ:{
		ping_req_pck_t ping_req;
		broker_decode_ping_req(frame, &ping_req);
 8004698:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4611      	mov	r1, r2
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	f000 ff2b 	bl	80054fe <broker_decode_ping_req>
		break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <broker_packets_dispatcher+0x2be>
		break;
 80046ac:	bf00      	nop
	}
	}
}
 80046ae:	bf00      	nop
 80046b0:	f507 7721 	add.w	r7, r7, #644	; 0x284
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd90      	pop	{r4, r7, pc}

080046b8 <broker_get_client_pos_by_id>:


/*-------------------------------CLIENT HANDLING-----------------------------------------*/

uint8_t broker_get_client_pos_by_id(broker_t * broker, char* client_id){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e013      	b.n	80046f0 <broker_get_client_pos_by_id+0x38>
		if (strcmp(broker->clients[i].id, client_id) ==0 ) {
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	3310      	adds	r3, #16
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4413      	add	r3, r2
 80046d8:	6839      	ldr	r1, [r7, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fb fd38 	bl	8000150 <strcmp>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <broker_get_client_pos_by_id+0x32>
			return i;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	e006      	b.n	80046f8 <broker_get_client_pos_by_id+0x40>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	3301      	adds	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b07      	cmp	r3, #7
 80046f4:	d9e8      	bls.n	80046c8 <broker_get_client_pos_by_id+0x10>
		}
	}
	return NOT_FOUND;
 80046f6:	23ff      	movs	r3, #255	; 0xff
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <broker_get_client_by_socket>:



tb_client_t * broker_get_client_by_socket(broker_t * broker, sockaddr_t * sockaddr){
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e025      	b.n	800475c <broker_get_client_by_socket+0x5c>
		if (((broker->clients[i].connected)) && (memcmp(&broker->clients[i].sockaddr, sockaddr, sizeof(sockaddr_t)) ==0 )) {
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d016      	beq.n	8004756 <broker_get_client_by_socket+0x56>
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	2210      	movs	r2, #16
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f978 	bl	8005a30 <memcmp>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <broker_get_client_by_socket+0x56>
			return &broker->clients[i];
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4413      	add	r3, r2
 8004754:	e006      	b.n	8004764 <broker_get_client_by_socket+0x64>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	3301      	adds	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b07      	cmp	r3, #7
 8004760:	d9d6      	bls.n	8004710 <broker_get_client_by_socket+0x10>
		}
	}
	return NULL;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <is_client_exist>:


bool is_client_exist(broker_t * broker, char* client_id){
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	if (broker_get_client_pos_by_id(broker, client_id) != NOT_FOUND) {
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff9d 	bl	80046b8 <broker_get_client_pos_by_id>
 800477e:	4603      	mov	r3, r0
 8004780:	2bff      	cmp	r3, #255	; 0xff
 8004782:	d001      	beq.n	8004788 <is_client_exist+0x1c>
		return true;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <is_client_exist+0x1e>
	}
	return false;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <can_broker_accept_next_client>:
	}
	return false;
}


static inline bool can_broker_accept_next_client(broker_t * broker){
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	e00f      	b.n	80047c0 <can_broker_accept_next_client+0x2e>
		if ((broker->clients[i].id[0]) == 0){
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	3310      	adds	r3, #16
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <can_broker_accept_next_client+0x28>
			return true;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e006      	b.n	80047c8 <can_broker_accept_next_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3301      	adds	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b07      	cmp	r3, #7
 80047c4:	d9ec      	bls.n	80047a0 <can_broker_accept_next_client+0xe>
		}
	}
	return false;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc80      	pop	{r7}
 80047d0:	4770      	bx	lr

080047d2 <broker_remove_client>:


bool broker_remove_client(broker_t * broker, char* client_id){
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_get_client_pos_by_id(broker, client_id);
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ff6a 	bl	80046b8 <broker_get_client_pos_by_id>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2bff      	cmp	r3, #255	; 0xff
 80047ec:	d00e      	beq.n	800480c <broker_remove_client+0x3a>
		memset(&broker->clients[pos], 0, sizeof (tb_client_t));
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4413      	add	r3, r2
 80047fc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f948 	bl	8005a98 <memset>
		return true;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <broker_remove_client+0x3c>
	}
	return false;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <broker_first_free_pos_for_client>:


static uint8_t broker_first_free_pos_for_client(broker_t * broker){
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e00f      	b.n	8004844 <broker_first_free_pos_for_client+0x2e>
		if (!(broker->clients[i].id[0])){
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	3310      	adds	r3, #16
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <broker_first_free_pos_for_client+0x28>
			return i;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	e006      	b.n	800484c <broker_first_free_pos_for_client+0x36>
	for (uint8_t i = 0; i < MAX_CONN_CLIENTS; i++){
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	3301      	adds	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b07      	cmp	r3, #7
 8004848:	d9ec      	bls.n	8004824 <broker_first_free_pos_for_client+0xe>
		}
	}
	return NOT_FOUND;
 800484a:	23ff      	movs	r3, #255	; 0xff
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <add_client>:


void add_client (broker_t * broker, tb_client_t * new_client){
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
	uint8_t pos = broker_first_free_pos_for_client(broker);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ffd8 	bl	8004816 <broker_first_free_pos_for_client>
 8004866:	4603      	mov	r3, r0
 8004868:	73fb      	strb	r3, [r7, #15]
		memcpy(&broker->clients[pos], new_client, sizeof (tb_client_t));
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	4413      	add	r3, r2
 8004878:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f001 f8e5 	bl	8005a4e <memcpy>
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <is_client_authorised>:


__attribute__( ( weak ) ) bool is_client_authorised (char* usr_name, char* pswd){
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	return true;
 8004896:	2301      	movs	r3, #1
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <broker_decode_connect>:



/*-------------------------------CONNECT-----------------------------------------*/

void broker_decode_connect(uint8_t * frame, conn_pck_t *conn_pck){
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	75fb      	strb	r3, [r7, #23]
	conn_pck->fix_head.ctrl_byte =  (conn_ctrl_byte_t *) &frame[pos];
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	441a      	add	r2, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	601a      	str	r2, [r3, #0]
	pos ++;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	3301      	adds	r3, #1
 80048be:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	441a      	add	r2, r3
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fd3a 	bl	8004346 <decode_pck_len>
	conn_pck->fix_head.rem_len = rem_length.value;
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 80048d8:	7c3a      	ldrb	r2, [r7, #16]
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	4413      	add	r3, r2
 80048de:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.len = (uint16_t*) &frame[pos];
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	609a      	str	r2, [r3, #8]
	*conn_pck->var_head.len  = X_HTONS(*conn_pck->var_head.len);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	8812      	ldrh	r2, [r2, #0]
 80048f4:	0a12      	lsrs	r2, r2, #8
 80048f6:	b292      	uxth	r2, r2
 80048f8:	b211      	sxth	r1, r2
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	6892      	ldr	r2, [r2, #8]
 80048fe:	8812      	ldrh	r2, [r2, #0]
 8004900:	0212      	lsls	r2, r2, #8
 8004902:	b212      	sxth	r2, r2
 8004904:	430a      	orrs	r2, r1
 8004906:	b212      	sxth	r2, r2
 8004908:	b292      	uxth	r2, r2
 800490a:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	3302      	adds	r3, #2
 8004910:	75fb      	strb	r3, [r7, #23]

	conn_pck->var_head.proto_name = (char*) &frame[pos];
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	441a      	add	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	60da      	str	r2, [r3, #12]
	pos += *conn_pck->var_head.len;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	4413      	add	r3, r2
 8004928:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.proto_level = (uint8_t*) &frame[pos];//8
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	441a      	add	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	611a      	str	r2, [r3, #16]
	pos += 1;
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	3301      	adds	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.conn_flags = (conn_flags_t*) &frame[pos];//9
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	441a      	add	r2, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	615a      	str	r2, [r3, #20]
	pos += 1;
 8004944:	7dfb      	ldrb	r3, [r7, #23]
 8004946:	3301      	adds	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
	conn_pck->var_head.keep_alive = (uint16_t*)  &frame[pos];//10+11
 800494a:	7dfb      	ldrb	r3, [r7, #23]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	441a      	add	r2, r3
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	619a      	str	r2, [r3, #24]
	*conn_pck->var_head.keep_alive = X_HTONS(*conn_pck->var_head.keep_alive);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	6992      	ldr	r2, [r2, #24]
 800495c:	8812      	ldrh	r2, [r2, #0]
 800495e:	0a12      	lsrs	r2, r2, #8
 8004960:	b292      	uxth	r2, r2
 8004962:	b211      	sxth	r1, r2
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	6992      	ldr	r2, [r2, #24]
 8004968:	8812      	ldrh	r2, [r2, #0]
 800496a:	0212      	lsls	r2, r2, #8
 800496c:	b212      	sxth	r2, r2
 800496e:	430a      	orrs	r2, r1
 8004970:	b212      	sxth	r2, r2
 8004972:	b292      	uxth	r2, r2
 8004974:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
 8004978:	3302      	adds	r3, #2
 800497a:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id_len  = (uint16_t*) &frame[pos];//1213
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	441a      	add	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	61da      	str	r2, [r3, #28]
	*conn_pck->pld.client_id_len = X_HTONS(*conn_pck->pld.client_id_len);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	69d2      	ldr	r2, [r2, #28]
 800498e:	8812      	ldrh	r2, [r2, #0]
 8004990:	0a12      	lsrs	r2, r2, #8
 8004992:	b292      	uxth	r2, r2
 8004994:	b211      	sxth	r1, r2
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	69d2      	ldr	r2, [r2, #28]
 800499a:	8812      	ldrh	r2, [r2, #0]
 800499c:	0212      	lsls	r2, r2, #8
 800499e:	b212      	sxth	r2, r2
 80049a0:	430a      	orrs	r2, r1
 80049a2:	b212      	sxth	r2, r2
 80049a4:	b292      	uxth	r2, r2
 80049a6:	801a      	strh	r2, [r3, #0]
	pos += 2;
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	3302      	adds	r3, #2
 80049ac:	75fb      	strb	r3, [r7, #23]
	conn_pck->pld.client_id = (char*) &frame[pos];
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	441a      	add	r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	621a      	str	r2, [r3, #32]
	pos += *conn_pck->pld.client_id_len;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
 80049c2:	4413      	add	r3, r2
 80049c4:	75fb      	strb	r3, [r7, #23]

	if (conn_pck->var_head.conn_flags->last_will){
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d049      	beq.n	8004a6a <broker_decode_connect+0x1c8>
		conn_pck->pld.will_topic_len = (uint16_t*)  &frame[pos];
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	441a      	add	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24
		*conn_pck->pld.will_topic_len = X_HTONS(* conn_pck->pld.will_topic_len);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049e8:	8812      	ldrh	r2, [r2, #0]
 80049ea:	0a12      	lsrs	r2, r2, #8
 80049ec:	b292      	uxth	r2, r2
 80049ee:	b211      	sxth	r1, r2
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	0212      	lsls	r2, r2, #8
 80049f8:	b212      	sxth	r2, r2
 80049fa:	430a      	orrs	r2, r1
 80049fc:	b212      	sxth	r2, r2
 80049fe:	b292      	uxth	r2, r2
 8004a00:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	3302      	adds	r3, #2
 8004a06:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_topic = (char*)  &frame[pos];
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	441a      	add	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
		pos += *conn_pck->pld.will_topic_len;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	7dfb      	ldrb	r3, [r7, #23]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	75fb      	strb	r3, [r7, #23]

		conn_pck->pld.will_msg_len = (uint16_t*)  &frame[pos];
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	441a      	add	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	62da      	str	r2, [r3, #44]	; 0x2c
		*conn_pck->pld.will_msg_len = X_HTONS(* conn_pck->pld.will_msg_len);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a32:	8812      	ldrh	r2, [r2, #0]
 8004a34:	0a12      	lsrs	r2, r2, #8
 8004a36:	b292      	uxth	r2, r2
 8004a38:	b211      	sxth	r1, r2
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a3e:	8812      	ldrh	r2, [r2, #0]
 8004a40:	0212      	lsls	r2, r2, #8
 8004a42:	b212      	sxth	r2, r2
 8004a44:	430a      	orrs	r2, r1
 8004a46:	b212      	sxth	r2, r2
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	3302      	adds	r3, #2
 8004a50:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.will_msg = (char*)  &frame[pos];
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	441a      	add	r2, r3
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
		pos += *conn_pck->pld.will_msg_len;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
 8004a66:	4413      	add	r3, r2
 8004a68:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->user_name){
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d024      	beq.n	8004ac4 <broker_decode_connect+0x222>
		conn_pck->pld.usr_name_len = (uint16_t*)  &frame[pos];
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	441a      	add	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34
		*conn_pck->pld.usr_name_len = X_HTONS(* conn_pck->pld.usr_name_len);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a8c:	8812      	ldrh	r2, [r2, #0]
 8004a8e:	0a12      	lsrs	r2, r2, #8
 8004a90:	b292      	uxth	r2, r2
 8004a92:	b211      	sxth	r1, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a98:	8812      	ldrh	r2, [r2, #0]
 8004a9a:	0212      	lsls	r2, r2, #8
 8004a9c:	b212      	sxth	r2, r2
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	b212      	sxth	r2, r2
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8004aa6:	7dfb      	ldrb	r3, [r7, #23]
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.usr_name= (char*) &frame[pos];
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	441a      	add	r2, r3
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
		pos += *conn_pck->pld.usr_name_len;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	75fb      	strb	r3, [r7, #23]
	}
	if (conn_pck->var_head.conn_flags->pswd){
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d024      	beq.n	8004b1e <broker_decode_connect+0x27c>
		conn_pck->pld.pswd_len = (uint16_t*)  &frame[pos];
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	441a      	add	r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	63da      	str	r2, [r3, #60]	; 0x3c
		*conn_pck->pld.pswd_len = X_HTONS(* conn_pck->pld.pswd_len);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ae6:	8812      	ldrh	r2, [r2, #0]
 8004ae8:	0a12      	lsrs	r2, r2, #8
 8004aea:	b292      	uxth	r2, r2
 8004aec:	b211      	sxth	r1, r2
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	0212      	lsls	r2, r2, #8
 8004af6:	b212      	sxth	r2, r2
 8004af8:	430a      	orrs	r2, r1
 8004afa:	b212      	sxth	r2, r2
 8004afc:	b292      	uxth	r2, r2
 8004afe:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	3302      	adds	r3, #2
 8004b04:	75fb      	strb	r3, [r7, #23]
		conn_pck->pld.pswd= (char*) &frame[pos];
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	441a      	add	r2, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40
		pos += *conn_pck->pld.pswd_len;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	7dfb      	ldrb	r3, [r7, #23]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	75fb      	strb	r3, [r7, #23]
	}
}
 8004b1e:	bf00      	nop
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <encode_conn_ack>:


uint8_t * encode_conn_ack(conn_ack_t * header_ack, bool session_present, uint8_t code){
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	460b      	mov	r3, r1
 8004b30:	70fb      	strb	r3, [r7, #3]
 8004b32:	4613      	mov	r3, r2
 8004b34:	70bb      	strb	r3, [r7, #2]
	memset(header_ack, 0, sizeof (conn_ack_t));
 8004b36:	2204      	movs	r2, #4
 8004b38:	2100      	movs	r1, #0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 ffac 	bl	8005a98 <memset>
	header_ack->control_type = (CONTR_TYPE_CONNACK << 4);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	701a      	strb	r2, [r3, #0]
	header_ack->remainin_len = CONN_ACK_PLD_LEN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	705a      	strb	r2, [r3, #1]
	header_ack->ack_flags.session_pres = session_present;
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	7893      	ldrb	r3, [r2, #2]
 8004b50:	78f9      	ldrb	r1, [r7, #3]
 8004b52:	f361 0300 	bfi	r3, r1, #0, #1
 8004b56:	7093      	strb	r3, [r2, #2]
	header_ack->conn_code = code;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	78ba      	ldrb	r2, [r7, #2]
 8004b5c:	70da      	strb	r2, [r3, #3]
	return (uint8_t *)header_ack;
 8004b5e:	687b      	ldr	r3, [r7, #4]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <broker_create_new_client>:


void broker_create_new_client(tb_client_t *new_client, const conn_pck_t * conn_pck,  sockaddr_t * sockaddr){
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
	memset(new_client, 0, sizeof(tb_client_t));
 8004b74:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004b78:	2100      	movs	r1, #0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 ff8c 	bl	8005a98 <memset>
	memcpy(&new_client->sockaddr, sockaddr, sizeof (sockaddr_t));
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2210      	movs	r2, #16
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff61 	bl	8005a4e <memcpy>

	strncpy(new_client->id,  conn_pck->pld.client_id, *conn_pck->pld.client_id_len);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f103 0010 	add.w	r0, r3, #16
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6a19      	ldr	r1, [r3, #32]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	f001 f8c7 	bl	8005d30 <strncpy>

	new_client->keepalive = *conn_pck->var_head.keep_alive;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	881a      	ldrh	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	861a      	strh	r2, [r3, #48]	; 0x30

	if (conn_pck->var_head.conn_flags->will_retain){
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <broker_create_new_client+0x5c>
		new_client->will_retain = 1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	}

	if (conn_pck->var_head.conn_flags->last_will){
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d023      	beq.n	8004c1c <broker_create_new_client+0xb4>
		new_client->will_retain = 1;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		strncpy(new_client->will_topic,  conn_pck->pld.will_topic, *conn_pck->pld.will_topic_len );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f103 0073 	add.w	r0, r3, #115	; 0x73
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f001 f89f 	bl	8005d30 <strncpy>
		strncpy(new_client->will_msg,  conn_pck->pld.will_msg, *conn_pck->pld.will_msg_len);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f103 0093 	add.w	r0, r3, #147	; 0x93
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f001 f894 	bl	8005d30 <strncpy>
		new_client->will_qos = conn_pck->var_head.conn_flags->will_qos;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	}

	if (conn_pck->var_head.conn_flags->user_name){
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <broker_create_new_client+0xda>
		strncpy(new_client->username,  conn_pck->pld.usr_name, *conn_pck->pld.usr_name_len);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f103 0032 	add.w	r0, r3, #50	; 0x32
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f001 f877 	bl	8005d30 <strncpy>
	}

	if (conn_pck->var_head.conn_flags->pswd){
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <broker_create_new_client+0x100>
		strncpy(new_client->password,  conn_pck->pld.pswd, *conn_pck->pld.pswd_len);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f103 0052 	add.w	r0, r3, #82	; 0x52
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f001 f864 	bl	8005d30 <strncpy>
	}

	new_client->connected = true;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <broker_validate_conn>:


uint8_t broker_validate_conn(broker_t * broker, conn_pck_t *conn_pck){
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	if  (*conn_pck->var_head.proto_level != PROTO_LEVEL_MQTT311){
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d001      	beq.n	8004c90 <broker_validate_conn+0x18>
		return CONN_ACK_BAD_PROTO;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e01b      	b.n	8004cc8 <broker_validate_conn+0x50>
	} else if (!(can_broker_accept_next_client(broker))) {
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fd7e 	bl	8004792 <can_broker_accept_next_client>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f083 0301 	eor.w	r3, r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <broker_validate_conn+0x2e>
		return CONN_ACK_NOT_AVBL;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e010      	b.n	8004cc8 <broker_validate_conn+0x50>
	} else if (!is_client_authorised(conn_pck->pld.usr_name, conn_pck->pld.pswd)){
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7ff fdeb 	bl	800488c <is_client_authorised>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f083 0301 	eor.w	r3, r3, #1
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <broker_validate_conn+0x4e>
		return CONN_ACK_BAD_AUTH;
 8004cc2:	2305      	movs	r3, #5
 8004cc4:	e000      	b.n	8004cc8 <broker_validate_conn+0x50>
	} else{
		return CONN_ACK_OK;
 8004cc6:	2300      	movs	r3, #0
	}
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <was_clean_session_requested>:


bool was_clean_session_requested(conn_pck_t *conn_pck){
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
	return (conn_pck->var_head.conn_flags->cleans_session);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <broker_decode_publish>:



/*-------------------------------PUBLISH-----------------------------------------*/

 void broker_decode_publish(uint8_t* frame, pub_pck_t * pub_pck){
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]

	pub_pck->fix_head.ctrl_byte = (pub_ctrl_byte_t *) frame;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	601a      	str	r2, [r3, #0]
	pos ++;
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	441a      	add	r2, r3
 8004d18:	f107 030c 	add.w	r3, r7, #12
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fb11 	bl	8004346 <decode_pck_len>
	pub_pck->fix_head.rem_len = rem_length.value;
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8004d2a:	7c3a      	ldrb	r2, [r7, #16]
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	4413      	add	r3, r2
 8004d30:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.len  = (uint16_t*) &frame[pos];
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	441a      	add	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	609a      	str	r2, [r3, #8]
	*pub_pck->var_head.len = X_HTONS(*pub_pck->var_head.len);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	0a12      	lsrs	r2, r2, #8
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	b211      	sxth	r1, r2
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	6892      	ldr	r2, [r2, #8]
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	0212      	lsls	r2, r2, #8
 8004d54:	b212      	sxth	r2, r2
 8004d56:	430a      	orrs	r2, r1
 8004d58:	b212      	sxth	r2, r2
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	3302      	adds	r3, #2
 8004d62:	75fb      	strb	r3, [r7, #23]

	pub_pck->var_head.name = (char*)  &frame[pos];
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	441a      	add	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	60da      	str	r2, [r3, #12]
	pos += *pub_pck->var_head.len;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	4413      	add	r3, r2
 8004d7a:	75fb      	strb	r3, [r7, #23]

	if (pub_pck->fix_head.ctrl_byte->QoS > 0){
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dd18      	ble.n	8004dbe <broker_decode_publish+0xc6>
		pub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	611a      	str	r2, [r3, #16]
		*pub_pck->var_head.packet_id = X_HTONS(*pub_pck->var_head.packet_id);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	6912      	ldr	r2, [r2, #16]
 8004d9e:	8812      	ldrh	r2, [r2, #0]
 8004da0:	0a12      	lsrs	r2, r2, #8
 8004da2:	b292      	uxth	r2, r2
 8004da4:	b211      	sxth	r1, r2
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6912      	ldr	r2, [r2, #16]
 8004daa:	8812      	ldrh	r2, [r2, #0]
 8004dac:	0212      	lsls	r2, r2, #8
 8004dae:	b212      	sxth	r2, r2
 8004db0:	430a      	orrs	r2, r1
 8004db2:	b212      	sxth	r2, r2
 8004db4:	b292      	uxth	r2, r2
 8004db6:	801a      	strh	r2, [r3, #0]
		pos += 2;
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	3302      	adds	r3, #2
 8004dbc:	75fb      	strb	r3, [r7, #23]
	}
	pub_pck->pld = &frame[pos];
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	615a      	str	r2, [r3, #20]
}
 8004dc8:	bf00      	nop
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <publish_msg_to_subscribers>:


void publish_msg_to_subscribers(broker_t * broker, pub_pck_t * pub_pck){
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
 8004dde:	e049      	b.n	8004e74 <publish_msg_to_subscribers+0xa4>
		if ((broker->clients[i].connected)){
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 73eb 	add.w	r3, r3, #470	; 0x1d6
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d03a      	beq.n	8004e6e <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73bb      	strb	r3, [r7, #14]
 8004dfc:	e034      	b.n	8004e68 <publish_msg_to_subscribers+0x98>
				uint16_t len = *pub_pck->var_head.len;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	81bb      	strh	r3, [r7, #12]
				char* topic_name = pub_pck->var_head.name;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	60bb      	str	r3, [r7, #8]
				if (strncmp(broker->clients[i].subs_topic[j].name, topic_name, len)){
 8004e0c:	7bf9      	ldrb	r1, [r7, #15]
 8004e0e:	7bba      	ldrb	r2, [r7, #14]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004e1c:	fb02 f201 	mul.w	r2, r2, r1
 8004e20:	4413      	add	r3, r2
 8004e22:	33b0      	adds	r3, #176	; 0xb0
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	4413      	add	r3, r2
 8004e28:	3308      	adds	r3, #8
 8004e2a:	89ba      	ldrh	r2, [r7, #12]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 ff6c 	bl	8005d0c <strncmp>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d013      	beq.n	8004e62 <publish_msg_to_subscribers+0x92>
					broker->net->send(broker->net->context, &broker->clients[i].sockaddr, (uint8_t*)&pub_pck, sizeof(pub_pck_t) );
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004e40:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 3ec0 	ldr.w	r3, [r3, #3776]	; 0xec0
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8004e52:	fb02 f303 	mul.w	r3, r2, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	18d1      	adds	r1, r2, r3
 8004e5a:	463a      	mov	r2, r7
 8004e5c:	2318      	movs	r3, #24
 8004e5e:	47a0      	blx	r4
					break;
 8004e60:	e005      	b.n	8004e6e <publish_msg_to_subscribers+0x9e>
			for (uint8_t j =0; j < MAX_SUBS_TOPIC; j++){
 8004e62:	7bbb      	ldrb	r3, [r7, #14]
 8004e64:	3301      	adds	r3, #1
 8004e66:	73bb      	strb	r3, [r7, #14]
 8004e68:	7bbb      	ldrb	r3, [r7, #14]
 8004e6a:	2b07      	cmp	r3, #7
 8004e6c:	d9c7      	bls.n	8004dfe <publish_msg_to_subscribers+0x2e>
	for (uint8_t i =0; i < MAX_CONN_CLIENTS; i++){
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	3301      	adds	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b07      	cmp	r3, #7
 8004e78:	d9b2      	bls.n	8004de0 <publish_msg_to_subscribers+0x10>
				}
			}
		}
	}
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd90      	pop	{r4, r7, pc}

08004e82 <encode_publish_ack>:


void encode_publish_ack(publish_ack_t * publish_ack, uint16_t pckt_id){
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	807b      	strh	r3, [r7, #2]
	publish_ack->control_type = (PCKT_TYPE_PUBACK << 4);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2240      	movs	r2, #64	; 0x40
 8004e92:	701a      	strb	r2, [r3, #0]
	publish_ack->remainin_len = PUB_ACK_LEN;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	705a      	strb	r2, [r3, #1]
	publish_ack->packet_id = X_HTONS(pckt_id);
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	b21a      	sxth	r2, r3
 8004ea2:	887b      	ldrh	r3, [r7, #2]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	b21b      	sxth	r3, r3
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	b21b      	sxth	r3, r3
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	805a      	strh	r2, [r3, #2]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <broker_decode_subscribe>:



/*-------------------------------SUBSCRIBE-----------------------------------------*/

uint8_t  broker_decode_subscribe(uint8_t* frame, sub_pck_t * sub_pck){
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

	sub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
	pos++;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	441a      	add	r2, r3
 8004edc:	f107 030c 	add.w	r3, r7, #12
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fa2f 	bl	8004346 <decode_pck_len>
	sub_pck->fix_head.rem_len = rem_length.value;
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 8004eee:	7c3a      	ldrb	r2, [r7, #16]
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	75fb      	strb	r3, [r7, #23]


	sub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8004ef6:	7dfb      	ldrb	r3, [r7, #23]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	441a      	add	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	609a      	str	r2, [r3, #8]
	*sub_pck->var_head.packet_id = X_HTONS(*sub_pck->var_head.packet_id);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	8812      	ldrh	r2, [r2, #0]
 8004f0a:	0a12      	lsrs	r2, r2, #8
 8004f0c:	b292      	uxth	r2, r2
 8004f0e:	b211      	sxth	r1, r2
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	6892      	ldr	r2, [r2, #8]
 8004f14:	8812      	ldrh	r2, [r2, #0]
 8004f16:	0212      	lsls	r2, r2, #8
 8004f18:	b212      	sxth	r2, r2
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	b212      	sxth	r2, r2
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	801a      	strh	r2, [r3, #0]
	pos += 2;
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	3302      	adds	r3, #2
 8004f26:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8004f30:	e060      	b.n	8004ff4 <broker_decode_subscribe+0x138>
		sub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 8004f32:	7dba      	ldrb	r2, [r7, #22]
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4419      	add	r1, r3
 8004f3a:	6838      	ldr	r0, [r7, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4403      	add	r3, r0
 8004f46:	330c      	adds	r3, #12
 8004f48:	6019      	str	r1, [r3, #0]
		*sub_pck->pld_topics[topic_nb].len  = X_HTONS(*sub_pck->pld_topics[topic_nb].len );
 8004f4a:	7dba      	ldrb	r2, [r7, #22]
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	330c      	adds	r3, #12
 8004f5a:	6819      	ldr	r1, [r3, #0]
 8004f5c:	7dba      	ldrb	r2, [r7, #22]
 8004f5e:	6838      	ldr	r0, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4403      	add	r3, r0
 8004f6a:	330c      	adds	r3, #12
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	b218      	sxth	r0, r3
 8004f76:	7dba      	ldrb	r2, [r7, #22]
 8004f78:	683c      	ldr	r4, [r7, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4423      	add	r3, r4
 8004f84:	330c      	adds	r3, #12
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	4303      	orrs	r3, r0
 8004f90:	b21b      	sxth	r3, r3
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	800b      	strh	r3, [r1, #0]
		pos += 2;
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	3302      	adds	r3, #2
 8004f9a:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 8004f9c:	7dba      	ldrb	r2, [r7, #22]
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4419      	add	r1, r3
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4403      	add	r3, r0
 8004fb0:	3310      	adds	r3, #16
 8004fb2:	6019      	str	r1, [r3, #0]
		pos += (*sub_pck->pld_topics[topic_nb].len);
 8004fb4:	7dba      	ldrb	r2, [r7, #22]
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	4413      	add	r3, r2
 8004fce:	75fb      	strb	r3, [r7, #23]
		sub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 8004fd0:	7dba      	ldrb	r2, [r7, #22]
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4419      	add	r1, r3
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4403      	add	r3, r0
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	6019      	str	r1, [r3, #0]
		pos += 1;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	3301      	adds	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 8004fee:	7dbb      	ldrb	r3, [r7, #22]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	75bb      	strb	r3, [r7, #22]
	while (pos < (sub_pck->fix_head.rem_len + fix_head_size)){
 8004ff4:	7dfa      	ldrb	r2, [r7, #23]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	7d7b      	ldrb	r3, [r7, #21]
 8004ffc:	440b      	add	r3, r1
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d397      	bcc.n	8004f32 <broker_decode_subscribe+0x76>
	}
	return topic_nb;
 8005002:	7dbb      	ldrb	r3, [r7, #22]
}
 8005004:	4618      	mov	r0, r3
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	bd90      	pop	{r4, r7, pc}

0800500c <is_the_same_topic>:


static bool is_the_same_topic (char* topic1, char* topic2, uint8_t cmp_len){
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	4613      	mov	r3, r2
 8005018:	71fb      	strb	r3, [r7, #7]
	if (memcmp(topic1, topic2, cmp_len) == 0){
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	461a      	mov	r2, r3
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 fd05 	bl	8005a30 <memcmp>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <is_the_same_topic+0x24>
		return true;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <is_the_same_topic+0x26>
	}
	return false;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <get_subscribed_topic_pos>:


static uint8_t get_subscribed_topic_pos (tb_client_t * client, char* topic, uint8_t cmp_len){
 800503a:	b580      	push	{r7, lr}
 800503c:	b086      	sub	sp, #24
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8005048:	2300      	movs	r3, #0
 800504a:	75fb      	strb	r3, [r7, #23]
 800504c:	e020      	b.n	8005090 <get_subscribed_topic_pos+0x56>
		if ((client->subs_topic[i].name[0])
 800504e:	7dfa      	ldrb	r2, [r7, #23]
 8005050:	68f9      	ldr	r1, [r7, #12]
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	33b8      	adds	r3, #184	; 0xb8
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <get_subscribed_topic_pos+0x50>
		&& (is_the_same_topic(client->subs_topic[i].name, topic, cmp_len))){
 8005064:	7dfa      	ldrb	r2, [r7, #23]
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	33b0      	adds	r3, #176	; 0xb0
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	3308      	adds	r3, #8
 8005076:	79fa      	ldrb	r2, [r7, #7]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ffc6 	bl	800500c <is_the_same_topic>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <get_subscribed_topic_pos+0x50>
			return i;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	e006      	b.n	8005098 <get_subscribed_topic_pos+0x5e>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	3301      	adds	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
 8005090:	7dfb      	ldrb	r3, [r7, #23]
 8005092:	2b07      	cmp	r3, #7
 8005094:	d9db      	bls.n	800504e <get_subscribed_topic_pos+0x14>
		}
	}
	return NOT_FOUND;
 8005096:	23ff      	movs	r3, #255	; 0xff
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <actualize_subs_topic_qos>:


static void actualize_subs_topic_qos(sub_topic_t * topic, uint8_t qos){
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
	topic->qos = qos;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <find_first_free_slot_for_subs_topic>:


static uint8_t find_first_free_slot_for_subs_topic(tb_client_t * client){
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]
 80050ca:	e00f      	b.n	80050ec <find_first_free_slot_for_subs_topic+0x2e>
		 if (!(client->subs_topic[i].name[0])){
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	33b8      	adds	r3, #184	; 0xb8
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <find_first_free_slot_for_subs_topic+0x28>
			 return i;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	e006      	b.n	80050f4 <find_first_free_slot_for_subs_topic+0x36>
	for (uint8_t i=0; i < MAX_SUBS_TOPIC; i++){
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	3301      	adds	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b07      	cmp	r3, #7
 80050f0:	d9ec      	bls.n	80050cc <find_first_free_slot_for_subs_topic+0xe>
		 }
	}
	return NOT_FOUND;
 80050f2:	23ff      	movs	r3, #255	; 0xff
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bc80      	pop	{r7}
 80050fc:	4770      	bx	lr

080050fe <add_new_subscription_to_client>:


static bool add_new_subscription_to_client(tb_client_t * client, sub_topic_ptr_t  * topic){
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
	uint8_t pos =  find_first_free_slot_for_subs_topic(client);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ffd8 	bl	80050be <find_first_free_slot_for_subs_topic>
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
	if (pos != NOT_FOUND){
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	2bff      	cmp	r3, #255	; 0xff
 8005116:	d02e      	beq.n	8005176 <add_new_subscription_to_client+0x78>
		memcpy(&client->subs_topic[pos].name,  topic->name, *topic->len);
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	33b0      	adds	r3, #176	; 0xb0
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	f103 0008 	add.w	r0, r3, #8
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	6859      	ldr	r1, [r3, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fc89 	bl	8005a4e <memcpy>
		memcpy(&client->subs_topic[pos].len,  topic->len, sizeof (uint16_t));
 800513c:	7bfa      	ldrb	r2, [r7, #15]
 800513e:	4613      	mov	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	33b0      	adds	r3, #176	; 0xb0
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	3306      	adds	r3, #6
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	6812      	ldr	r2, [r2, #0]
 8005152:	8812      	ldrh	r2, [r2, #0]
 8005154:	b292      	uxth	r2, r2
 8005156:	801a      	strh	r2, [r3, #0]
		memcpy(&client->subs_topic[pos].qos,  topic->qos, sizeof (uint8_t));
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	33d0      	adds	r3, #208	; 0xd0
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	3308      	adds	r3, #8
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	6892      	ldr	r2, [r2, #8]
 800516e:	7812      	ldrb	r2, [r2, #0]
 8005170:	701a      	strb	r2, [r3, #0]
		return true;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <add_new_subscription_to_client+0x7a>
	}
	return false;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <add_subscriptions_from_list>:



bool add_subscriptions_from_list(tb_client_t * client, sub_topic_ptr_t *topic_list, uint8_t topic_nb, uint8_t * result_list){
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8005194:	e077      	b.n	8005286 <add_subscriptions_from_list+0x106>
		uint8_t pos  = get_subscribed_topic_pos(client, topic_list[i].name, *topic_list[i].len);
 8005196:	7dfa      	ldrb	r2, [r7, #23]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	461a      	mov	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4413      	add	r3, r2
 80051a6:	6859      	ldr	r1, [r3, #4]
 80051a8:	7dfa      	ldrb	r2, [r7, #23]
 80051aa:	4613      	mov	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	461a      	mov	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4413      	add	r3, r2
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ff3a 	bl	800503a <get_subscribed_topic_pos>
 80051c6:	4603      	mov	r3, r0
 80051c8:	757b      	strb	r3, [r7, #21]
		if (pos != NOT_FOUND){ //reverse if & else
 80051ca:	7d7b      	ldrb	r3, [r7, #21]
 80051cc:	2bff      	cmp	r3, #255	; 0xff
 80051ce:	d024      	beq.n	800521a <add_subscriptions_from_list+0x9a>
			actualize_subs_topic_qos(&client->subs_topic[pos], *topic_list[i].qos);
 80051d0:	7d7a      	ldrb	r2, [r7, #21]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	33b0      	adds	r3, #176	; 0xb0
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	1d98      	adds	r0, r3, #6
 80051e2:	7dfa      	ldrb	r2, [r7, #23]
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	461a      	mov	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	4619      	mov	r1, r3
 80051f8:	f7ff ff52 	bl	80050a0 <actualize_subs_topic_qos>
			result_list[i] = *topic_list[i].qos; //refactor, extract doubled code
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	18d1      	adds	r1, r2, r3
 8005202:	7dfa      	ldrb	r2, [r7, #23]
 8005204:	4613      	mov	r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	461a      	mov	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4413      	add	r3, r2
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	700b      	strb	r3, [r1, #0]
 8005218:	e032      	b.n	8005280 <add_subscriptions_from_list+0x100>
		} else {
			bool res = add_new_subscription_to_client(client, &topic_list[i]);
 800521a:	7dfa      	ldrb	r2, [r7, #23]
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	461a      	mov	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	4619      	mov	r1, r3
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff ff66 	bl	80050fe <add_new_subscription_to_client>
 8005232:	4603      	mov	r3, r0
 8005234:	753b      	strb	r3, [r7, #20]
			result_list[i] = *topic_list[i].qos;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	18d1      	adds	r1, r2, r3
 800523c:	7dfa      	ldrb	r2, [r7, #23]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	461a      	mov	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4413      	add	r3, r2
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	700b      	strb	r3, [r1, #0]
			if (!res){
 8005252:	7d3b      	ldrb	r3, [r7, #20]
 8005254:	f083 0301 	eor.w	r3, r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d010      	beq.n	8005280 <add_subscriptions_from_list+0x100>
				for (uint8_t j = i; j < topic_nb; j++){
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	75bb      	strb	r3, [r7, #22]
 8005262:	e007      	b.n	8005274 <add_subscriptions_from_list+0xf4>
					result_list[j] = SUB_ACK_FAIL;
 8005264:	7dbb      	ldrb	r3, [r7, #22]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	4413      	add	r3, r2
 800526a:	2250      	movs	r2, #80	; 0x50
 800526c:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = i; j < topic_nb; j++){
 800526e:	7dbb      	ldrb	r3, [r7, #22]
 8005270:	3301      	adds	r3, #1
 8005272:	75bb      	strb	r3, [r7, #22]
 8005274:	7dba      	ldrb	r2, [r7, #22]
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	429a      	cmp	r2, r3
 800527a:	d3f3      	bcc.n	8005264 <add_subscriptions_from_list+0xe4>
				}
			return false;
 800527c:	2300      	movs	r3, #0
 800527e:	e007      	b.n	8005290 <add_subscriptions_from_list+0x110>
			}
		}
		i++;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	3301      	adds	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 8005286:	7dfa      	ldrb	r2, [r7, #23]
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	429a      	cmp	r2, r3
 800528c:	d383      	bcc.n	8005196 <add_subscriptions_from_list+0x16>
	}
	return true;
 800528e:	2301      	movs	r3, #1
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <encode_subscribe_ack>:


void  encode_subscribe_ack(sub_ack_t * sub_ack, uint16_t pckt_id, uint8_t topic_nb, uint8_t * result_list){
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	817b      	strh	r3, [r7, #10]
 80052a6:	4613      	mov	r3, r2
 80052a8:	727b      	strb	r3, [r7, #9]
	sub_ack->control_type = (PCKT_TYPE_SUBACK << 4);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2290      	movs	r2, #144	; 0x90
 80052ae:	701a      	strb	r2, [r3, #0]
	sub_ack->remainin_len = SUB_ACK_VAR_HEAD_LEN + topic_nb;  //(?)
 80052b0:	7a7b      	ldrb	r3, [r7, #9]
 80052b2:	3302      	adds	r3, #2
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	705a      	strb	r2, [r3, #1]
	sub_ack->packet_id = X_HTONS(pckt_id);
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	0a1b      	lsrs	r3, r3, #8
 80052be:	b29b      	uxth	r3, r3
 80052c0:	b21a      	sxth	r2, r3
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	b21b      	sxth	r3, r3
 80052c8:	4313      	orrs	r3, r2
 80052ca:	b21b      	sxth	r3, r3
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	805a      	strh	r2, [r3, #2]
	memcpy(sub_ack->payload, result_list, topic_nb);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3304      	adds	r3, #4
 80052d6:	7a7a      	ldrb	r2, [r7, #9]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fbb7 	bl	8005a4e <memcpy>
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <broker_decode_unsubscribe>:




/*-------------------------------UNSUBSCRIBE-----------------------------------------*/
uint8_t  broker_decode_unsubscribe(uint8_t* frame, unsub_pck_t * unsub_pck){
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]

	unsub_pck->fix_head.ctrl_byte = (ctrl_byte_t *) frame;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	601a      	str	r2, [r3, #0]
	pos++;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
 80052fe:	3301      	adds	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
	rem_length_t rem_length = decode_pck_len(&frame[pos]);
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	441a      	add	r2, r3
 8005308:	f107 030c 	add.w	r3, r7, #12
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff f819 	bl	8004346 <decode_pck_len>
	unsub_pck->fix_head.rem_len = rem_length.value;
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	605a      	str	r2, [r3, #4]
	pos += rem_length.bytes_nb;
 800531a:	7c3a      	ldrb	r2, [r7, #16]
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	4413      	add	r3, r2
 8005320:	75fb      	strb	r3, [r7, #23]

	unsub_pck->var_head.packet_id  = (uint16_t*) &frame[pos];
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	441a      	add	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	609a      	str	r2, [r3, #8]
	*unsub_pck->var_head.packet_id = X_HTONS(*unsub_pck->var_head.packet_id);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	6892      	ldr	r2, [r2, #8]
 8005334:	8812      	ldrh	r2, [r2, #0]
 8005336:	0a12      	lsrs	r2, r2, #8
 8005338:	b292      	uxth	r2, r2
 800533a:	b211      	sxth	r1, r2
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	8812      	ldrh	r2, [r2, #0]
 8005342:	0212      	lsls	r2, r2, #8
 8005344:	b212      	sxth	r2, r2
 8005346:	430a      	orrs	r2, r1
 8005348:	b212      	sxth	r2, r2
 800534a:	b292      	uxth	r2, r2
 800534c:	801a      	strh	r2, [r3, #0]
	pos += 2;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	3302      	adds	r3, #2
 8005352:	75fb      	strb	r3, [r7, #23]

	const uint8_t fix_head_size = 2;
 8005354:	2302      	movs	r3, #2
 8005356:	757b      	strb	r3, [r7, #21]
	uint8_t topic_nb =0;
 8005358:	2300      	movs	r3, #0
 800535a:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 800535c:	e060      	b.n	8005420 <broker_decode_unsubscribe+0x138>
		unsub_pck->pld_topics[topic_nb].len = (uint16_t *)  &frame[pos];
 800535e:	7dba      	ldrb	r2, [r7, #22]
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4419      	add	r1, r3
 8005366:	6838      	ldr	r0, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4403      	add	r3, r0
 8005372:	330c      	adds	r3, #12
 8005374:	6019      	str	r1, [r3, #0]
		*unsub_pck->pld_topics[topic_nb].len  = X_HTONS(*unsub_pck->pld_topics[topic_nb].len );
 8005376:	7dba      	ldrb	r2, [r7, #22]
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	330c      	adds	r3, #12
 8005386:	6819      	ldr	r1, [r3, #0]
 8005388:	7dba      	ldrb	r2, [r7, #22]
 800538a:	6838      	ldr	r0, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4403      	add	r3, r0
 8005396:	330c      	adds	r3, #12
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	0a1b      	lsrs	r3, r3, #8
 800539e:	b29b      	uxth	r3, r3
 80053a0:	b218      	sxth	r0, r3
 80053a2:	7dba      	ldrb	r2, [r7, #22]
 80053a4:	683c      	ldr	r4, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4423      	add	r3, r4
 80053b0:	330c      	adds	r3, #12
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	b21b      	sxth	r3, r3
 80053ba:	4303      	orrs	r3, r0
 80053bc:	b21b      	sxth	r3, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	800b      	strh	r3, [r1, #0]
		pos += 2;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	3302      	adds	r3, #2
 80053c6:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].name =  (char*)  &frame[pos];
 80053c8:	7dba      	ldrb	r2, [r7, #22]
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4419      	add	r1, r3
 80053d0:	6838      	ldr	r0, [r7, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4403      	add	r3, r0
 80053dc:	3310      	adds	r3, #16
 80053de:	6019      	str	r1, [r3, #0]
		pos += (*unsub_pck->pld_topics[topic_nb].len);
 80053e0:	7dba      	ldrb	r2, [r7, #22]
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	330c      	adds	r3, #12
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	4413      	add	r3, r2
 80053fa:	75fb      	strb	r3, [r7, #23]
		unsub_pck->pld_topics[topic_nb].qos = (uint8_t*) &frame[pos];
 80053fc:	7dba      	ldrb	r2, [r7, #22]
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4419      	add	r1, r3
 8005404:	6838      	ldr	r0, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4403      	add	r3, r0
 8005410:	3314      	adds	r3, #20
 8005412:	6019      	str	r1, [r3, #0]
		pos += 1;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	3301      	adds	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
		topic_nb++;
 800541a:	7dbb      	ldrb	r3, [r7, #22]
 800541c:	3301      	adds	r3, #1
 800541e:	75bb      	strb	r3, [r7, #22]
	while (pos < (unsub_pck->fix_head.rem_len + fix_head_size)){
 8005420:	7dfa      	ldrb	r2, [r7, #23]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	7d7b      	ldrb	r3, [r7, #21]
 8005428:	440b      	add	r3, r1
 800542a:	429a      	cmp	r2, r3
 800542c:	d397      	bcc.n	800535e <broker_decode_unsubscribe+0x76>
	}
	return topic_nb;
 800542e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005430:	4618      	mov	r0, r3
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd90      	pop	{r4, r7, pc}

08005438 <delete_subscribed_topic>:


static void delete_subscribed_topic(tb_client_t * client, unsub_topic_ptr_t * subs_topic){
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
 8005446:	e031      	b.n	80054ac <delete_subscribed_topic+0x74>
		if ((client->subs_topic[i].name[0])
 8005448:	7bfa      	ldrb	r2, [r7, #15]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	33b8      	adds	r3, #184	; 0xb8
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d023      	beq.n	80054a6 <delete_subscribed_topic+0x6e>
				&& (is_the_same_topic(client->subs_topic[i].name, subs_topic->name, *subs_topic->len))){
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	33b0      	adds	r3, #176	; 0xb0
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	f103 0008 	add.w	r0, r3, #8
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	f7ff fdc4 	bl	800500c <is_the_same_topic>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <delete_subscribed_topic+0x6e>
			memset(&client->subs_topic[i], 0, sizeof(sub_topic_t));
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	33b0      	adds	r3, #176	; 0xb0
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	3306      	adds	r3, #6
 800549c:	2224      	movs	r2, #36	; 0x24
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 faf9 	bl	8005a98 <memset>
	for (uint8_t i =0; i < MAX_SUBS_TOPIC; i++){
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	3301      	adds	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b07      	cmp	r3, #7
 80054b0:	d9ca      	bls.n	8005448 <delete_subscribed_topic+0x10>
		}
	}
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <delete_listed_subscriptions>:


bool delete_listed_subscriptions(tb_client_t * client, unsub_topic_ptr_t * unsub_topic_list, uint8_t topic_nb){
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	4613      	mov	r3, r2
 80054c6:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80054cc:	e00e      	b.n	80054ec <delete_listed_subscriptions+0x32>
		delete_subscribed_topic(client, &unsub_topic_list[i] );
 80054ce:	7dfa      	ldrb	r2, [r7, #23]
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	4619      	mov	r1, r3
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff ffa9 	bl	8005438 <delete_subscribed_topic>
		i++;
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	3301      	adds	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
	while (i < topic_nb){
 80054ec:	7dfa      	ldrb	r2, [r7, #23]
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3ec      	bcc.n	80054ce <delete_listed_subscriptions+0x14>
	}
	return true;
 80054f4:	2301      	movs	r3, #1
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <broker_decode_ping_req>:


/*-------------------------------PING-----------------------------------------*/


void broker_decode_ping_req(uint8_t* frame, ping_req_pck_t * ping_pck){
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
	uint8_t pos = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.ctrl_byte = (ping_ctrl_byte_t*) &frame[pos];
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	441a      	add	r2, r3
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	601a      	str	r2, [r3, #0]
	pos++;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	3301      	adds	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
	ping_pck->fix_head.rem_len = (uint8_t *) &frame[pos];
 800551c:	7bfb      	ldrb	r3, [r7, #15]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	441a      	add	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	605a      	str	r2, [r3, #4]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <_ZNSaIcEC1Ev>:
 8005530:	4770      	bx	lr

08005532 <_ZNSaIcED1Ev>:
 8005532:	4770      	bx	lr

08005534 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005534:	b10a      	cbz	r2, 800553a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8005536:	f000 ba8a 	b.w	8005a4e <memcpy>
 800553a:	4770      	bx	lr

0800553c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800553c:	b508      	push	{r3, lr}
 800553e:	680b      	ldr	r3, [r1, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	da02      	bge.n	800554a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005544:	4809      	ldr	r0, [pc, #36]	; (800556c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005546:	f000 f8c2 	bl	80056ce <_ZSt20__throw_length_errorPKc>
 800554a:	4293      	cmp	r3, r2
 800554c:	d908      	bls.n	8005560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800554e:	0052      	lsls	r2, r2, #1
 8005550:	4293      	cmp	r3, r2
 8005552:	d205      	bcs.n	8005560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8005554:	2a00      	cmp	r2, #0
 8005556:	bfb6      	itet	lt
 8005558:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800555c:	600a      	strge	r2, [r1, #0]
 800555e:	600b      	strlt	r3, [r1, #0]
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005566:	3001      	adds	r0, #1
 8005568:	f000 b8b6 	b.w	80056d8 <_Znwj>
 800556c:	0800785e 	.word	0x0800785e

08005570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005570:	4603      	mov	r3, r0
 8005572:	f853 0b08 	ldr.w	r0, [r3], #8
 8005576:	4298      	cmp	r0, r3
 8005578:	d001      	beq.n	800557e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800557a:	f000 b8ab 	b.w	80056d4 <_ZdlPv>
 800557e:	4770      	bx	lr

08005580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005580:	2a01      	cmp	r2, #1
 8005582:	b510      	push	{r4, lr}
 8005584:	d102      	bne.n	800558c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005586:	780a      	ldrb	r2, [r1, #0]
 8005588:	7002      	strb	r2, [r0, #0]
 800558a:	bd10      	pop	{r4, pc}
 800558c:	f7ff ffd2 	bl	8005534 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005590:	bd10      	pop	{r4, pc}

08005592 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005592:	b508      	push	{r3, lr}
 8005594:	1a52      	subs	r2, r2, r1
 8005596:	f7ff fff3 	bl	8005580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800559a:	bd08      	pop	{r3, pc}

0800559c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800559c:	4288      	cmp	r0, r1
 800559e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a0:	4604      	mov	r4, r0
 80055a2:	460e      	mov	r6, r1
 80055a4:	d020      	beq.n	80055e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x4c>
 80055a6:	6802      	ldr	r2, [r0, #0]
 80055a8:	f100 0308 	add.w	r3, r0, #8
 80055ac:	429a      	cmp	r2, r3
 80055ae:	bf08      	it	eq
 80055b0:	220f      	moveq	r2, #15
 80055b2:	684d      	ldr	r5, [r1, #4]
 80055b4:	bf18      	it	ne
 80055b6:	6882      	ldrne	r2, [r0, #8]
 80055b8:	42aa      	cmp	r2, r5
 80055ba:	d20b      	bcs.n	80055d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x38>
 80055bc:	a902      	add	r1, sp, #8
 80055be:	f841 5d04 	str.w	r5, [r1, #-4]!
 80055c2:	f7ff ffbb 	bl	800553c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80055c6:	4607      	mov	r7, r0
 80055c8:	4620      	mov	r0, r4
 80055ca:	f7ff ffd1 	bl	8005570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80055ce:	9b01      	ldr	r3, [sp, #4]
 80055d0:	6027      	str	r7, [r4, #0]
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	b125      	cbz	r5, 80055e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x44>
 80055d6:	462a      	mov	r2, r5
 80055d8:	6831      	ldr	r1, [r6, #0]
 80055da:	6820      	ldr	r0, [r4, #0]
 80055dc:	f7ff ffd0 	bl	8005580 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80055e0:	2200      	movs	r2, #0
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	6065      	str	r5, [r4, #4]
 80055e6:	555a      	strb	r2, [r3, r5]
 80055e8:	b003      	add	sp, #12
 80055ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80055ec:	f100 0208 	add.w	r2, r0, #8
 80055f0:	6002      	str	r2, [r0, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	6042      	str	r2, [r0, #4]
 80055f6:	7202      	strb	r2, [r0, #8]
 80055f8:	4770      	bx	lr

080055fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80055fa:	b510      	push	{r4, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	f7ff ffb7 	bl	8005570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005602:	4620      	mov	r0, r4
 8005604:	bd10      	pop	{r4, pc}

08005606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8005606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005608:	460b      	mov	r3, r1
 800560a:	4606      	mov	r6, r0
 800560c:	f853 7b08 	ldr.w	r7, [r3], #8
 8005610:	4605      	mov	r5, r0
 8005612:	42bb      	cmp	r3, r7
 8005614:	460c      	mov	r4, r1
 8005616:	f856 2b08 	ldr.w	r2, [r6], #8
 800561a:	d016      	beq.n	800564a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x44>
 800561c:	4296      	cmp	r6, r2
 800561e:	bf08      	it	eq
 8005620:	2200      	moveq	r2, #0
 8005622:	6849      	ldr	r1, [r1, #4]
 8005624:	6007      	str	r7, [r0, #0]
 8005626:	6041      	str	r1, [r0, #4]
 8005628:	68a1      	ldr	r1, [r4, #8]
 800562a:	bf18      	it	ne
 800562c:	f8d0 e008 	ldrne.w	lr, [r0, #8]
 8005630:	6081      	str	r1, [r0, #8]
 8005632:	b142      	cbz	r2, 8005646 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8005634:	6022      	str	r2, [r4, #0]
 8005636:	f8c4 e008 	str.w	lr, [r4, #8]
 800563a:	2300      	movs	r3, #0
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	6063      	str	r3, [r4, #4]
 8005640:	7013      	strb	r3, [r2, #0]
 8005642:	4628      	mov	r0, r5
 8005644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	e7f7      	b.n	800563a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>
 800564a:	f7ff ffa7 	bl	800559c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800564e:	e7f4      	b.n	800563a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x34>

08005650 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4dataEv>:
 8005650:	6800      	ldr	r0, [r0, #0]
 8005652:	4770      	bx	lr

08005654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005654:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005656:	4604      	mov	r4, r0
 8005658:	4616      	mov	r6, r2
 800565a:	460d      	mov	r5, r1
 800565c:	b901      	cbnz	r1, 8005660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 800565e:	b9ba      	cbnz	r2, 8005690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 8005660:	1b73      	subs	r3, r6, r5
 8005662:	2b0f      	cmp	r3, #15
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	d907      	bls.n	8005678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 8005668:	2200      	movs	r2, #0
 800566a:	a901      	add	r1, sp, #4
 800566c:	4620      	mov	r0, r4
 800566e:	f7ff ff65 	bl	800553c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005672:	9b01      	ldr	r3, [sp, #4]
 8005674:	6020      	str	r0, [r4, #0]
 8005676:	60a3      	str	r3, [r4, #8]
 8005678:	4632      	mov	r2, r6
 800567a:	4629      	mov	r1, r5
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	f7ff ff88 	bl	8005592 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005682:	2100      	movs	r1, #0
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	54d1      	strb	r1, [r2, r3]
 800568c:	b002      	add	sp, #8
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	4801      	ldr	r0, [pc, #4]	; (8005698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005692:	f000 f819 	bl	80056c8 <_ZSt19__throw_logic_errorPKc>
 8005696:	bf00      	nop
 8005698:	08007834 	.word	0x08007834

0800569c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	f100 0308 	add.w	r3, r0, #8
 80056a2:	4604      	mov	r4, r0
 80056a4:	6003      	str	r3, [r0, #0]
 80056a6:	460d      	mov	r5, r1
 80056a8:	b159      	cbz	r1, 80056c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80056aa:	4608      	mov	r0, r1
 80056ac:	f7fa fd5a 	bl	8000164 <strlen>
 80056b0:	182a      	adds	r2, r5, r0
 80056b2:	4620      	mov	r0, r4
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	4629      	mov	r1, r5
 80056ba:	f7ff ffcb 	bl	8005654 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80056be:	4620      	mov	r0, r4
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056c6:	e7f4      	b.n	80056b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080056c8 <_ZSt19__throw_logic_errorPKc>:
 80056c8:	b508      	push	{r3, lr}
 80056ca:	f000 f967 	bl	800599c <abort>

080056ce <_ZSt20__throw_length_errorPKc>:
 80056ce:	b508      	push	{r3, lr}
 80056d0:	f000 f964 	bl	800599c <abort>

080056d4 <_ZdlPv>:
 80056d4:	f000 b996 	b.w	8005a04 <free>

080056d8 <_Znwj>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	2800      	cmp	r0, #0
 80056dc:	bf14      	ite	ne
 80056de:	4604      	movne	r4, r0
 80056e0:	2401      	moveq	r4, #1
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f986 	bl	80059f4 <malloc>
 80056e8:	b930      	cbnz	r0, 80056f8 <_Znwj+0x20>
 80056ea:	f000 f807 	bl	80056fc <_ZSt15get_new_handlerv>
 80056ee:	b908      	cbnz	r0, 80056f4 <_Znwj+0x1c>
 80056f0:	f000 f954 	bl	800599c <abort>
 80056f4:	4780      	blx	r0
 80056f6:	e7f4      	b.n	80056e2 <_Znwj+0xa>
 80056f8:	bd10      	pop	{r4, pc}
	...

080056fc <_ZSt15get_new_handlerv>:
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <_ZSt15get_new_handlerv+0xc>)
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	f3bf 8f5b 	dmb	ish
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000434 	.word	0x20000434

0800570c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	07d0      	lsls	r0, r2, #31
 8005712:	bf5c      	itt	pl
 8005714:	2201      	movpl	r2, #1
 8005716:	601a      	strpl	r2, [r3, #0]
 8005718:	4b22      	ldr	r3, [pc, #136]	; (80057a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	07d1      	lsls	r1, r2, #31
 800571e:	bf5c      	itt	pl
 8005720:	2201      	movpl	r2, #1
 8005722:	601a      	strpl	r2, [r3, #0]
 8005724:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	07d2      	lsls	r2, r2, #31
 800572a:	bf5c      	itt	pl
 800572c:	2201      	movpl	r2, #1
 800572e:	601a      	strpl	r2, [r3, #0]
 8005730:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	07d0      	lsls	r0, r2, #31
 8005736:	bf5c      	itt	pl
 8005738:	2201      	movpl	r2, #1
 800573a:	601a      	strpl	r2, [r3, #0]
 800573c:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	07d1      	lsls	r1, r2, #31
 8005742:	bf5c      	itt	pl
 8005744:	2201      	movpl	r2, #1
 8005746:	601a      	strpl	r2, [r3, #0]
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	07d2      	lsls	r2, r2, #31
 800574e:	bf5c      	itt	pl
 8005750:	2201      	movpl	r2, #1
 8005752:	601a      	strpl	r2, [r3, #0]
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	07d0      	lsls	r0, r2, #31
 800575a:	bf5c      	itt	pl
 800575c:	2201      	movpl	r2, #1
 800575e:	601a      	strpl	r2, [r3, #0]
 8005760:	4b16      	ldr	r3, [pc, #88]	; (80057bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	07d1      	lsls	r1, r2, #31
 8005766:	bf5c      	itt	pl
 8005768:	2201      	movpl	r2, #1
 800576a:	601a      	strpl	r2, [r3, #0]
 800576c:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	07d2      	lsls	r2, r2, #31
 8005772:	bf5c      	itt	pl
 8005774:	2201      	movpl	r2, #1
 8005776:	601a      	strpl	r2, [r3, #0]
 8005778:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	07d0      	lsls	r0, r2, #31
 800577e:	bf5c      	itt	pl
 8005780:	2201      	movpl	r2, #1
 8005782:	601a      	strpl	r2, [r3, #0]
 8005784:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	07d1      	lsls	r1, r2, #31
 800578a:	bf5c      	itt	pl
 800578c:	2201      	movpl	r2, #1
 800578e:	601a      	strpl	r2, [r3, #0]
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	07d2      	lsls	r2, r2, #31
 8005796:	bf5c      	itt	pl
 8005798:	2201      	movpl	r2, #1
 800579a:	601a      	strpl	r2, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000464 	.word	0x20000464
 80057a4:	20000460 	.word	0x20000460
 80057a8:	2000045c 	.word	0x2000045c
 80057ac:	20000458 	.word	0x20000458
 80057b0:	20000454 	.word	0x20000454
 80057b4:	20000450 	.word	0x20000450
 80057b8:	2000044c 	.word	0x2000044c
 80057bc:	20000448 	.word	0x20000448
 80057c0:	20000444 	.word	0x20000444
 80057c4:	20000440 	.word	0x20000440
 80057c8:	2000043c 	.word	0x2000043c
 80057cc:	20000438 	.word	0x20000438

080057d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80057d0:	4b18      	ldr	r3, [pc, #96]	; (8005834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	07d1      	lsls	r1, r2, #31
 80057d6:	bf5c      	itt	pl
 80057d8:	2201      	movpl	r2, #1
 80057da:	601a      	strpl	r2, [r3, #0]
 80057dc:	4b16      	ldr	r3, [pc, #88]	; (8005838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	07d2      	lsls	r2, r2, #31
 80057e2:	bf5c      	itt	pl
 80057e4:	2201      	movpl	r2, #1
 80057e6:	601a      	strpl	r2, [r3, #0]
 80057e8:	4b14      	ldr	r3, [pc, #80]	; (800583c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	07d0      	lsls	r0, r2, #31
 80057ee:	bf5c      	itt	pl
 80057f0:	2201      	movpl	r2, #1
 80057f2:	601a      	strpl	r2, [r3, #0]
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	07d1      	lsls	r1, r2, #31
 80057fa:	bf5c      	itt	pl
 80057fc:	2201      	movpl	r2, #1
 80057fe:	601a      	strpl	r2, [r3, #0]
 8005800:	4b10      	ldr	r3, [pc, #64]	; (8005844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	07d2      	lsls	r2, r2, #31
 8005806:	bf5c      	itt	pl
 8005808:	2201      	movpl	r2, #1
 800580a:	601a      	strpl	r2, [r3, #0]
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	07d0      	lsls	r0, r2, #31
 8005812:	bf5c      	itt	pl
 8005814:	2201      	movpl	r2, #1
 8005816:	601a      	strpl	r2, [r3, #0]
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	07d1      	lsls	r1, r2, #31
 800581e:	bf5c      	itt	pl
 8005820:	2201      	movpl	r2, #1
 8005822:	601a      	strpl	r2, [r3, #0]
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	07d2      	lsls	r2, r2, #31
 800582a:	bf5c      	itt	pl
 800582c:	2201      	movpl	r2, #1
 800582e:	601a      	strpl	r2, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000484 	.word	0x20000484
 8005838:	20000480 	.word	0x20000480
 800583c:	2000047c 	.word	0x2000047c
 8005840:	20000478 	.word	0x20000478
 8005844:	20000474 	.word	0x20000474
 8005848:	20000470 	.word	0x20000470
 800584c:	2000046c 	.word	0x2000046c
 8005850:	20000468 	.word	0x20000468

08005854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	07d0      	lsls	r0, r2, #31
 800585a:	bf5c      	itt	pl
 800585c:	2201      	movpl	r2, #1
 800585e:	601a      	strpl	r2, [r3, #0]
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	07d1      	lsls	r1, r2, #31
 8005866:	bf5c      	itt	pl
 8005868:	2201      	movpl	r2, #1
 800586a:	601a      	strpl	r2, [r3, #0]
 800586c:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	07d2      	lsls	r2, r2, #31
 8005872:	bf5c      	itt	pl
 8005874:	2201      	movpl	r2, #1
 8005876:	601a      	strpl	r2, [r3, #0]
 8005878:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	07d0      	lsls	r0, r2, #31
 800587e:	bf5c      	itt	pl
 8005880:	2201      	movpl	r2, #1
 8005882:	601a      	strpl	r2, [r3, #0]
 8005884:	4b1c      	ldr	r3, [pc, #112]	; (80058f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	07d1      	lsls	r1, r2, #31
 800588a:	bf5c      	itt	pl
 800588c:	2201      	movpl	r2, #1
 800588e:	601a      	strpl	r2, [r3, #0]
 8005890:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	07d2      	lsls	r2, r2, #31
 8005896:	bf5c      	itt	pl
 8005898:	2201      	movpl	r2, #1
 800589a:	601a      	strpl	r2, [r3, #0]
 800589c:	4b18      	ldr	r3, [pc, #96]	; (8005900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	07d0      	lsls	r0, r2, #31
 80058a2:	bf5c      	itt	pl
 80058a4:	2201      	movpl	r2, #1
 80058a6:	601a      	strpl	r2, [r3, #0]
 80058a8:	4b16      	ldr	r3, [pc, #88]	; (8005904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	07d1      	lsls	r1, r2, #31
 80058ae:	bf5c      	itt	pl
 80058b0:	2201      	movpl	r2, #1
 80058b2:	601a      	strpl	r2, [r3, #0]
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	07d2      	lsls	r2, r2, #31
 80058ba:	bf5c      	itt	pl
 80058bc:	2201      	movpl	r2, #1
 80058be:	601a      	strpl	r2, [r3, #0]
 80058c0:	4b12      	ldr	r3, [pc, #72]	; (800590c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	07d0      	lsls	r0, r2, #31
 80058c6:	bf5c      	itt	pl
 80058c8:	2201      	movpl	r2, #1
 80058ca:	601a      	strpl	r2, [r3, #0]
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	07d1      	lsls	r1, r2, #31
 80058d2:	bf5c      	itt	pl
 80058d4:	2201      	movpl	r2, #1
 80058d6:	601a      	strpl	r2, [r3, #0]
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	07d2      	lsls	r2, r2, #31
 80058de:	bf5c      	itt	pl
 80058e0:	2201      	movpl	r2, #1
 80058e2:	601a      	strpl	r2, [r3, #0]
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	200004b4 	.word	0x200004b4
 80058ec:	200004b0 	.word	0x200004b0
 80058f0:	200004ac 	.word	0x200004ac
 80058f4:	200004a8 	.word	0x200004a8
 80058f8:	200004a4 	.word	0x200004a4
 80058fc:	200004a0 	.word	0x200004a0
 8005900:	2000049c 	.word	0x2000049c
 8005904:	20000498 	.word	0x20000498
 8005908:	20000494 	.word	0x20000494
 800590c:	20000490 	.word	0x20000490
 8005910:	2000048c 	.word	0x2000048c
 8005914:	20000488 	.word	0x20000488

08005918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	07d1      	lsls	r1, r2, #31
 800591e:	bf5c      	itt	pl
 8005920:	2201      	movpl	r2, #1
 8005922:	601a      	strpl	r2, [r3, #0]
 8005924:	4b16      	ldr	r3, [pc, #88]	; (8005980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	07d2      	lsls	r2, r2, #31
 800592a:	bf5c      	itt	pl
 800592c:	2201      	movpl	r2, #1
 800592e:	601a      	strpl	r2, [r3, #0]
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	07d0      	lsls	r0, r2, #31
 8005936:	bf5c      	itt	pl
 8005938:	2201      	movpl	r2, #1
 800593a:	601a      	strpl	r2, [r3, #0]
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	07d1      	lsls	r1, r2, #31
 8005942:	bf5c      	itt	pl
 8005944:	2201      	movpl	r2, #1
 8005946:	601a      	strpl	r2, [r3, #0]
 8005948:	4b10      	ldr	r3, [pc, #64]	; (800598c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	07d2      	lsls	r2, r2, #31
 800594e:	bf5c      	itt	pl
 8005950:	2201      	movpl	r2, #1
 8005952:	601a      	strpl	r2, [r3, #0]
 8005954:	4b0e      	ldr	r3, [pc, #56]	; (8005990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	07d0      	lsls	r0, r2, #31
 800595a:	bf5c      	itt	pl
 800595c:	2201      	movpl	r2, #1
 800595e:	601a      	strpl	r2, [r3, #0]
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	07d1      	lsls	r1, r2, #31
 8005966:	bf5c      	itt	pl
 8005968:	2201      	movpl	r2, #1
 800596a:	601a      	strpl	r2, [r3, #0]
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	07d2      	lsls	r2, r2, #31
 8005972:	bf5c      	itt	pl
 8005974:	2201      	movpl	r2, #1
 8005976:	601a      	strpl	r2, [r3, #0]
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	200004d4 	.word	0x200004d4
 8005980:	200004d0 	.word	0x200004d0
 8005984:	200004cc 	.word	0x200004cc
 8005988:	200004c8 	.word	0x200004c8
 800598c:	200004c4 	.word	0x200004c4
 8005990:	200004c0 	.word	0x200004c0
 8005994:	200004bc 	.word	0x200004bc
 8005998:	200004b8 	.word	0x200004b8

0800599c <abort>:
 800599c:	b508      	push	{r3, lr}
 800599e:	2006      	movs	r0, #6
 80059a0:	f000 f964 	bl	8005c6c <raise>
 80059a4:	2001      	movs	r0, #1
 80059a6:	f000 fd0f 	bl	80063c8 <_exit>
	...

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	2500      	movs	r5, #0
 80059b0:	4e0c      	ldr	r6, [pc, #48]	; (80059e4 <__libc_init_array+0x38>)
 80059b2:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b4:	1ba4      	subs	r4, r4, r6
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	42a5      	cmp	r5, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	f000 fd06 	bl	80063cc <_init>
 80059c0:	2500      	movs	r5, #0
 80059c2:	4e0a      	ldr	r6, [pc, #40]	; (80059ec <__libc_init_array+0x40>)
 80059c4:	4c0a      	ldr	r4, [pc, #40]	; (80059f0 <__libc_init_array+0x44>)
 80059c6:	1ba4      	subs	r4, r4, r6
 80059c8:	10a4      	asrs	r4, r4, #2
 80059ca:	42a5      	cmp	r5, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059d4:	4798      	blx	r3
 80059d6:	3501      	adds	r5, #1
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059de:	4798      	blx	r3
 80059e0:	3501      	adds	r5, #1
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	0800790c 	.word	0x0800790c
 80059e8:	0800790c 	.word	0x0800790c
 80059ec:	0800790c 	.word	0x0800790c
 80059f0:	08007920 	.word	0x08007920

080059f4 <malloc>:
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <malloc+0xc>)
 80059f6:	4601      	mov	r1, r0
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f000 b8a1 	b.w	8005b40 <_malloc_r>
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <free>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <free+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f000 b84d 	b.w	8005aa8 <_free_r>
 8005a0e:	bf00      	nop
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <memchr>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	b2c9      	uxtb	r1, r1
 8005a18:	4402      	add	r2, r0
 8005a1a:	4290      	cmp	r0, r2
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	d101      	bne.n	8005a24 <memchr+0x10>
 8005a20:	2000      	movs	r0, #0
 8005a22:	bd10      	pop	{r4, pc}
 8005a24:	781c      	ldrb	r4, [r3, #0]
 8005a26:	3001      	adds	r0, #1
 8005a28:	428c      	cmp	r4, r1
 8005a2a:	d1f6      	bne.n	8005a1a <memchr+0x6>
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <memcmp>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	3901      	subs	r1, #1
 8005a34:	4402      	add	r2, r0
 8005a36:	4290      	cmp	r0, r2
 8005a38:	d101      	bne.n	8005a3e <memcmp+0xe>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a42:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	d0f5      	beq.n	8005a36 <memcmp+0x6>
 8005a4a:	1b18      	subs	r0, r3, r4
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <memcpy>:
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	1e43      	subs	r3, r0, #1
 8005a52:	440a      	add	r2, r1
 8005a54:	4291      	cmp	r1, r2
 8005a56:	d100      	bne.n	8005a5a <memcpy+0xc>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a62:	e7f7      	b.n	8005a54 <memcpy+0x6>

08005a64 <memmove>:
 8005a64:	4288      	cmp	r0, r1
 8005a66:	b510      	push	{r4, lr}
 8005a68:	eb01 0302 	add.w	r3, r1, r2
 8005a6c:	d803      	bhi.n	8005a76 <memmove+0x12>
 8005a6e:	1e42      	subs	r2, r0, #1
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d10c      	bne.n	8005a8e <memmove+0x2a>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	4298      	cmp	r0, r3
 8005a78:	d2f9      	bcs.n	8005a6e <memmove+0xa>
 8005a7a:	1881      	adds	r1, r0, r2
 8005a7c:	1ad2      	subs	r2, r2, r3
 8005a7e:	42d3      	cmn	r3, r2
 8005a80:	d100      	bne.n	8005a84 <memmove+0x20>
 8005a82:	bd10      	pop	{r4, pc}
 8005a84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a8c:	e7f7      	b.n	8005a7e <memmove+0x1a>
 8005a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a96:	e7eb      	b.n	8005a70 <memmove+0xc>

08005a98 <memset>:
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4402      	add	r2, r0
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d100      	bne.n	8005aa2 <memset+0xa>
 8005aa0:	4770      	bx	lr
 8005aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa6:	e7f9      	b.n	8005a9c <memset+0x4>

08005aa8 <_free_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4605      	mov	r5, r0
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d043      	beq.n	8005b38 <_free_r+0x90>
 8005ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab4:	1f0c      	subs	r4, r1, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bfb8      	it	lt
 8005aba:	18e4      	addlt	r4, r4, r3
 8005abc:	f000 f94d 	bl	8005d5a <__malloc_lock>
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <_free_r+0x94>)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	b933      	cbnz	r3, 8005ad6 <_free_r+0x2e>
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6014      	str	r4, [r2, #0]
 8005acc:	4628      	mov	r0, r5
 8005ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad2:	f000 b943 	b.w	8005d5c <__malloc_unlock>
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	d90b      	bls.n	8005af2 <_free_r+0x4a>
 8005ada:	6821      	ldr	r1, [r4, #0]
 8005adc:	1862      	adds	r2, r4, r1
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	bf01      	itttt	eq
 8005ae2:	681a      	ldreq	r2, [r3, #0]
 8005ae4:	685b      	ldreq	r3, [r3, #4]
 8005ae6:	1852      	addeq	r2, r2, r1
 8005ae8:	6022      	streq	r2, [r4, #0]
 8005aea:	6063      	str	r3, [r4, #4]
 8005aec:	6004      	str	r4, [r0, #0]
 8005aee:	e7ed      	b.n	8005acc <_free_r+0x24>
 8005af0:	4613      	mov	r3, r2
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	b10a      	cbz	r2, 8005afa <_free_r+0x52>
 8005af6:	42a2      	cmp	r2, r4
 8005af8:	d9fa      	bls.n	8005af0 <_free_r+0x48>
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	1858      	adds	r0, r3, r1
 8005afe:	42a0      	cmp	r0, r4
 8005b00:	d10b      	bne.n	8005b1a <_free_r+0x72>
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	4401      	add	r1, r0
 8005b06:	1858      	adds	r0, r3, r1
 8005b08:	4282      	cmp	r2, r0
 8005b0a:	6019      	str	r1, [r3, #0]
 8005b0c:	d1de      	bne.n	8005acc <_free_r+0x24>
 8005b0e:	6810      	ldr	r0, [r2, #0]
 8005b10:	6852      	ldr	r2, [r2, #4]
 8005b12:	4401      	add	r1, r0
 8005b14:	6019      	str	r1, [r3, #0]
 8005b16:	605a      	str	r2, [r3, #4]
 8005b18:	e7d8      	b.n	8005acc <_free_r+0x24>
 8005b1a:	d902      	bls.n	8005b22 <_free_r+0x7a>
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	e7d4      	b.n	8005acc <_free_r+0x24>
 8005b22:	6820      	ldr	r0, [r4, #0]
 8005b24:	1821      	adds	r1, r4, r0
 8005b26:	428a      	cmp	r2, r1
 8005b28:	bf01      	itttt	eq
 8005b2a:	6811      	ldreq	r1, [r2, #0]
 8005b2c:	6852      	ldreq	r2, [r2, #4]
 8005b2e:	1809      	addeq	r1, r1, r0
 8005b30:	6021      	streq	r1, [r4, #0]
 8005b32:	6062      	str	r2, [r4, #4]
 8005b34:	605c      	str	r4, [r3, #4]
 8005b36:	e7c9      	b.n	8005acc <_free_r+0x24>
 8005b38:	bd38      	pop	{r3, r4, r5, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200004d8 	.word	0x200004d8

08005b40 <_malloc_r>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	1ccd      	adds	r5, r1, #3
 8005b44:	f025 0503 	bic.w	r5, r5, #3
 8005b48:	3508      	adds	r5, #8
 8005b4a:	2d0c      	cmp	r5, #12
 8005b4c:	bf38      	it	cc
 8005b4e:	250c      	movcc	r5, #12
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	4606      	mov	r6, r0
 8005b54:	db01      	blt.n	8005b5a <_malloc_r+0x1a>
 8005b56:	42a9      	cmp	r1, r5
 8005b58:	d903      	bls.n	8005b62 <_malloc_r+0x22>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	6033      	str	r3, [r6, #0]
 8005b5e:	2000      	movs	r0, #0
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
 8005b62:	f000 f8fa 	bl	8005d5a <__malloc_lock>
 8005b66:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <_malloc_r+0xb4>)
 8005b68:	6814      	ldr	r4, [r2, #0]
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	b991      	cbnz	r1, 8005b94 <_malloc_r+0x54>
 8005b6e:	4c22      	ldr	r4, [pc, #136]	; (8005bf8 <_malloc_r+0xb8>)
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	b91b      	cbnz	r3, 8005b7c <_malloc_r+0x3c>
 8005b74:	4630      	mov	r0, r6
 8005b76:	f000 f841 	bl	8005bfc <_sbrk_r>
 8005b7a:	6020      	str	r0, [r4, #0]
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 f83c 	bl	8005bfc <_sbrk_r>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d126      	bne.n	8005bd6 <_malloc_r+0x96>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	6033      	str	r3, [r6, #0]
 8005b8e:	f000 f8e5 	bl	8005d5c <__malloc_unlock>
 8005b92:	e7e4      	b.n	8005b5e <_malloc_r+0x1e>
 8005b94:	680b      	ldr	r3, [r1, #0]
 8005b96:	1b5b      	subs	r3, r3, r5
 8005b98:	d41a      	bmi.n	8005bd0 <_malloc_r+0x90>
 8005b9a:	2b0b      	cmp	r3, #11
 8005b9c:	d90f      	bls.n	8005bbe <_malloc_r+0x7e>
 8005b9e:	600b      	str	r3, [r1, #0]
 8005ba0:	18cc      	adds	r4, r1, r3
 8005ba2:	50cd      	str	r5, [r1, r3]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f000 f8d9 	bl	8005d5c <__malloc_unlock>
 8005baa:	f104 000b 	add.w	r0, r4, #11
 8005bae:	1d23      	adds	r3, r4, #4
 8005bb0:	f020 0007 	bic.w	r0, r0, #7
 8005bb4:	1ac3      	subs	r3, r0, r3
 8005bb6:	d01b      	beq.n	8005bf0 <_malloc_r+0xb0>
 8005bb8:	425a      	negs	r2, r3
 8005bba:	50e2      	str	r2, [r4, r3]
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	428c      	cmp	r4, r1
 8005bc0:	bf0b      	itete	eq
 8005bc2:	6863      	ldreq	r3, [r4, #4]
 8005bc4:	684b      	ldrne	r3, [r1, #4]
 8005bc6:	6013      	streq	r3, [r2, #0]
 8005bc8:	6063      	strne	r3, [r4, #4]
 8005bca:	bf18      	it	ne
 8005bcc:	460c      	movne	r4, r1
 8005bce:	e7e9      	b.n	8005ba4 <_malloc_r+0x64>
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	6849      	ldr	r1, [r1, #4]
 8005bd4:	e7ca      	b.n	8005b6c <_malloc_r+0x2c>
 8005bd6:	1cc4      	adds	r4, r0, #3
 8005bd8:	f024 0403 	bic.w	r4, r4, #3
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d005      	beq.n	8005bec <_malloc_r+0xac>
 8005be0:	1a21      	subs	r1, r4, r0
 8005be2:	4630      	mov	r0, r6
 8005be4:	f000 f80a 	bl	8005bfc <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d0cd      	beq.n	8005b88 <_malloc_r+0x48>
 8005bec:	6025      	str	r5, [r4, #0]
 8005bee:	e7d9      	b.n	8005ba4 <_malloc_r+0x64>
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200004d8 	.word	0x200004d8
 8005bf8:	200004dc 	.word	0x200004dc

08005bfc <_sbrk_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4c05      	ldr	r4, [pc, #20]	; (8005c18 <_sbrk_r+0x1c>)
 8005c02:	4605      	mov	r5, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	f000 fbd0 	bl	80063ac <_sbrk>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_sbrk_r+0x1a>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_sbrk_r+0x1a>
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	200004f0 	.word	0x200004f0

08005c1c <_raise_r>:
 8005c1c:	291f      	cmp	r1, #31
 8005c1e:	b538      	push	{r3, r4, r5, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	460d      	mov	r5, r1
 8005c24:	d904      	bls.n	8005c30 <_raise_r+0x14>
 8005c26:	2316      	movs	r3, #22
 8005c28:	6003      	str	r3, [r0, #0]
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c32:	b112      	cbz	r2, 8005c3a <_raise_r+0x1e>
 8005c34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c38:	b94b      	cbnz	r3, 8005c4e <_raise_r+0x32>
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 f830 	bl	8005ca0 <_getpid_r>
 8005c40:	462a      	mov	r2, r5
 8005c42:	4601      	mov	r1, r0
 8005c44:	4620      	mov	r0, r4
 8005c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c4a:	f000 b817 	b.w	8005c7c <_kill_r>
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d00a      	beq.n	8005c68 <_raise_r+0x4c>
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	d103      	bne.n	8005c5e <_raise_r+0x42>
 8005c56:	2316      	movs	r3, #22
 8005c58:	6003      	str	r3, [r0, #0]
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	bd38      	pop	{r3, r4, r5, pc}
 8005c5e:	2400      	movs	r4, #0
 8005c60:	4628      	mov	r0, r5
 8005c62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c66:	4798      	blx	r3
 8005c68:	2000      	movs	r0, #0
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}

08005c6c <raise>:
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <raise+0xc>)
 8005c6e:	4601      	mov	r1, r0
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	f7ff bfd3 	b.w	8005c1c <_raise_r>
 8005c76:	bf00      	nop
 8005c78:	2000000c 	.word	0x2000000c

08005c7c <_kill_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	2300      	movs	r3, #0
 8005c80:	4c06      	ldr	r4, [pc, #24]	; (8005c9c <_kill_r+0x20>)
 8005c82:	4605      	mov	r5, r0
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	f000 fb87 	bl	800639c <_kill>
 8005c8e:	1c43      	adds	r3, r0, #1
 8005c90:	d102      	bne.n	8005c98 <_kill_r+0x1c>
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	b103      	cbz	r3, 8005c98 <_kill_r+0x1c>
 8005c96:	602b      	str	r3, [r5, #0]
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200004f0 	.word	0x200004f0

08005ca0 <_getpid_r>:
 8005ca0:	f000 bb74 	b.w	800638c <_getpid>

08005ca4 <sniprintf>:
 8005ca4:	b40c      	push	{r2, r3}
 8005ca6:	b530      	push	{r4, r5, lr}
 8005ca8:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <sniprintf+0x64>)
 8005caa:	1e0c      	subs	r4, r1, #0
 8005cac:	b09d      	sub	sp, #116	; 0x74
 8005cae:	681d      	ldr	r5, [r3, #0]
 8005cb0:	da08      	bge.n	8005cc4 <sniprintf+0x20>
 8005cb2:	238b      	movs	r3, #139	; 0x8b
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	b01d      	add	sp, #116	; 0x74
 8005cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cc0:	b002      	add	sp, #8
 8005cc2:	4770      	bx	lr
 8005cc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005cc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ccc:	bf0c      	ite	eq
 8005cce:	4623      	moveq	r3, r4
 8005cd0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cdc:	9002      	str	r0, [sp, #8]
 8005cde:	9006      	str	r0, [sp, #24]
 8005ce0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ce4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ce6:	ab21      	add	r3, sp, #132	; 0x84
 8005ce8:	a902      	add	r1, sp, #8
 8005cea:	4628      	mov	r0, r5
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	f000 f891 	bl	8005e14 <_svfiprintf_r>
 8005cf2:	1c43      	adds	r3, r0, #1
 8005cf4:	bfbc      	itt	lt
 8005cf6:	238b      	movlt	r3, #139	; 0x8b
 8005cf8:	602b      	strlt	r3, [r5, #0]
 8005cfa:	2c00      	cmp	r4, #0
 8005cfc:	d0dd      	beq.n	8005cba <sniprintf+0x16>
 8005cfe:	2200      	movs	r2, #0
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	e7d9      	b.n	8005cba <sniprintf+0x16>
 8005d06:	bf00      	nop
 8005d08:	2000000c 	.word	0x2000000c

08005d0c <strncmp>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	b16a      	cbz	r2, 8005d2c <strncmp+0x20>
 8005d10:	3901      	subs	r1, #1
 8005d12:	1884      	adds	r4, r0, r2
 8005d14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d103      	bne.n	8005d28 <strncmp+0x1c>
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d001      	beq.n	8005d28 <strncmp+0x1c>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f5      	bne.n	8005d14 <strncmp+0x8>
 8005d28:	1a98      	subs	r0, r3, r2
 8005d2a:	bd10      	pop	{r4, pc}
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	bd10      	pop	{r4, pc}

08005d30 <strncpy>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	4604      	mov	r4, r0
 8005d34:	b902      	cbnz	r2, 8005d38 <strncpy+0x8>
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	4623      	mov	r3, r4
 8005d3a:	f811 5b01 	ldrb.w	r5, [r1], #1
 8005d3e:	1e56      	subs	r6, r2, #1
 8005d40:	f803 5b01 	strb.w	r5, [r3], #1
 8005d44:	b91d      	cbnz	r5, 8005d4e <strncpy+0x1e>
 8005d46:	4414      	add	r4, r2
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d103      	bne.n	8005d54 <strncpy+0x24>
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
 8005d4e:	461c      	mov	r4, r3
 8005d50:	4632      	mov	r2, r6
 8005d52:	e7ef      	b.n	8005d34 <strncpy+0x4>
 8005d54:	f803 5b01 	strb.w	r5, [r3], #1
 8005d58:	e7f6      	b.n	8005d48 <strncpy+0x18>

08005d5a <__malloc_lock>:
 8005d5a:	4770      	bx	lr

08005d5c <__malloc_unlock>:
 8005d5c:	4770      	bx	lr

08005d5e <__ssputs_r>:
 8005d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d62:	688e      	ldr	r6, [r1, #8]
 8005d64:	4682      	mov	sl, r0
 8005d66:	429e      	cmp	r6, r3
 8005d68:	460c      	mov	r4, r1
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	4698      	mov	r8, r3
 8005d6e:	d835      	bhi.n	8005ddc <__ssputs_r+0x7e>
 8005d70:	898a      	ldrh	r2, [r1, #12]
 8005d72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d76:	d031      	beq.n	8005ddc <__ssputs_r+0x7e>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	6825      	ldr	r5, [r4, #0]
 8005d7c:	6909      	ldr	r1, [r1, #16]
 8005d7e:	1a6f      	subs	r7, r5, r1
 8005d80:	6965      	ldr	r5, [r4, #20]
 8005d82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d86:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d8a:	f108 0301 	add.w	r3, r8, #1
 8005d8e:	443b      	add	r3, r7
 8005d90:	429d      	cmp	r5, r3
 8005d92:	bf38      	it	cc
 8005d94:	461d      	movcc	r5, r3
 8005d96:	0553      	lsls	r3, r2, #21
 8005d98:	d531      	bpl.n	8005dfe <__ssputs_r+0xa0>
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	f7ff fed0 	bl	8005b40 <_malloc_r>
 8005da0:	4606      	mov	r6, r0
 8005da2:	b950      	cbnz	r0, 8005dba <__ssputs_r+0x5c>
 8005da4:	230c      	movs	r3, #12
 8005da6:	f8ca 3000 	str.w	r3, [sl]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dba:	463a      	mov	r2, r7
 8005dbc:	6921      	ldr	r1, [r4, #16]
 8005dbe:	f7ff fe46 	bl	8005a4e <memcpy>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dcc:	81a3      	strh	r3, [r4, #12]
 8005dce:	6126      	str	r6, [r4, #16]
 8005dd0:	443e      	add	r6, r7
 8005dd2:	6026      	str	r6, [r4, #0]
 8005dd4:	4646      	mov	r6, r8
 8005dd6:	6165      	str	r5, [r4, #20]
 8005dd8:	1bed      	subs	r5, r5, r7
 8005dda:	60a5      	str	r5, [r4, #8]
 8005ddc:	4546      	cmp	r6, r8
 8005dde:	bf28      	it	cs
 8005de0:	4646      	movcs	r6, r8
 8005de2:	4649      	mov	r1, r9
 8005de4:	4632      	mov	r2, r6
 8005de6:	6820      	ldr	r0, [r4, #0]
 8005de8:	f7ff fe3c 	bl	8005a64 <memmove>
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	2000      	movs	r0, #0
 8005df0:	1b9b      	subs	r3, r3, r6
 8005df2:	60a3      	str	r3, [r4, #8]
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	441e      	add	r6, r3
 8005df8:	6026      	str	r6, [r4, #0]
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfe:	462a      	mov	r2, r5
 8005e00:	f000 fa94 	bl	800632c <_realloc_r>
 8005e04:	4606      	mov	r6, r0
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d1e1      	bne.n	8005dce <__ssputs_r+0x70>
 8005e0a:	6921      	ldr	r1, [r4, #16]
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	f7ff fe4b 	bl	8005aa8 <_free_r>
 8005e12:	e7c7      	b.n	8005da4 <__ssputs_r+0x46>

08005e14 <_svfiprintf_r>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	b09d      	sub	sp, #116	; 0x74
 8005e1a:	9303      	str	r3, [sp, #12]
 8005e1c:	898b      	ldrh	r3, [r1, #12]
 8005e1e:	4680      	mov	r8, r0
 8005e20:	061c      	lsls	r4, r3, #24
 8005e22:	460d      	mov	r5, r1
 8005e24:	4616      	mov	r6, r2
 8005e26:	d50f      	bpl.n	8005e48 <_svfiprintf_r+0x34>
 8005e28:	690b      	ldr	r3, [r1, #16]
 8005e2a:	b96b      	cbnz	r3, 8005e48 <_svfiprintf_r+0x34>
 8005e2c:	2140      	movs	r1, #64	; 0x40
 8005e2e:	f7ff fe87 	bl	8005b40 <_malloc_r>
 8005e32:	6028      	str	r0, [r5, #0]
 8005e34:	6128      	str	r0, [r5, #16]
 8005e36:	b928      	cbnz	r0, 8005e44 <_svfiprintf_r+0x30>
 8005e38:	230c      	movs	r3, #12
 8005e3a:	f8c8 3000 	str.w	r3, [r8]
 8005e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e42:	e0c4      	b.n	8005fce <_svfiprintf_r+0x1ba>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	616b      	str	r3, [r5, #20]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e52:	2330      	movs	r3, #48	; 0x30
 8005e54:	f04f 0b01 	mov.w	fp, #1
 8005e58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e5c:	4637      	mov	r7, r6
 8005e5e:	463c      	mov	r4, r7
 8005e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d13c      	bne.n	8005ee2 <_svfiprintf_r+0xce>
 8005e68:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e6c:	d00b      	beq.n	8005e86 <_svfiprintf_r+0x72>
 8005e6e:	4653      	mov	r3, sl
 8005e70:	4632      	mov	r2, r6
 8005e72:	4629      	mov	r1, r5
 8005e74:	4640      	mov	r0, r8
 8005e76:	f7ff ff72 	bl	8005d5e <__ssputs_r>
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f000 80a2 	beq.w	8005fc4 <_svfiprintf_r+0x1b0>
 8005e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e82:	4453      	add	r3, sl
 8005e84:	9309      	str	r3, [sp, #36]	; 0x24
 8005e86:	783b      	ldrb	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 809b 	beq.w	8005fc4 <_svfiprintf_r+0x1b0>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	9307      	str	r3, [sp, #28]
 8005e98:	9205      	str	r2, [sp, #20]
 8005e9a:	9306      	str	r3, [sp, #24]
 8005e9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ea0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ea2:	2205      	movs	r2, #5
 8005ea4:	7821      	ldrb	r1, [r4, #0]
 8005ea6:	4850      	ldr	r0, [pc, #320]	; (8005fe8 <_svfiprintf_r+0x1d4>)
 8005ea8:	f7ff fdb4 	bl	8005a14 <memchr>
 8005eac:	1c67      	adds	r7, r4, #1
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	b9d8      	cbnz	r0, 8005eea <_svfiprintf_r+0xd6>
 8005eb2:	06d9      	lsls	r1, r3, #27
 8005eb4:	bf44      	itt	mi
 8005eb6:	2220      	movmi	r2, #32
 8005eb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ebc:	071a      	lsls	r2, r3, #28
 8005ebe:	bf44      	itt	mi
 8005ec0:	222b      	movmi	r2, #43	; 0x2b
 8005ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ec6:	7822      	ldrb	r2, [r4, #0]
 8005ec8:	2a2a      	cmp	r2, #42	; 0x2a
 8005eca:	d016      	beq.n	8005efa <_svfiprintf_r+0xe6>
 8005ecc:	2100      	movs	r1, #0
 8005ece:	200a      	movs	r0, #10
 8005ed0:	9a07      	ldr	r2, [sp, #28]
 8005ed2:	4627      	mov	r7, r4
 8005ed4:	783b      	ldrb	r3, [r7, #0]
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	3b30      	subs	r3, #48	; 0x30
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	d950      	bls.n	8005f80 <_svfiprintf_r+0x16c>
 8005ede:	b1c9      	cbz	r1, 8005f14 <_svfiprintf_r+0x100>
 8005ee0:	e011      	b.n	8005f06 <_svfiprintf_r+0xf2>
 8005ee2:	2b25      	cmp	r3, #37	; 0x25
 8005ee4:	d0c0      	beq.n	8005e68 <_svfiprintf_r+0x54>
 8005ee6:	4627      	mov	r7, r4
 8005ee8:	e7b9      	b.n	8005e5e <_svfiprintf_r+0x4a>
 8005eea:	4a3f      	ldr	r2, [pc, #252]	; (8005fe8 <_svfiprintf_r+0x1d4>)
 8005eec:	463c      	mov	r4, r7
 8005eee:	1a80      	subs	r0, r0, r2
 8005ef0:	fa0b f000 	lsl.w	r0, fp, r0
 8005ef4:	4318      	orrs	r0, r3
 8005ef6:	9004      	str	r0, [sp, #16]
 8005ef8:	e7d3      	b.n	8005ea2 <_svfiprintf_r+0x8e>
 8005efa:	9a03      	ldr	r2, [sp, #12]
 8005efc:	1d11      	adds	r1, r2, #4
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	9103      	str	r1, [sp, #12]
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	db01      	blt.n	8005f0a <_svfiprintf_r+0xf6>
 8005f06:	9207      	str	r2, [sp, #28]
 8005f08:	e004      	b.n	8005f14 <_svfiprintf_r+0x100>
 8005f0a:	4252      	negs	r2, r2
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	9207      	str	r2, [sp, #28]
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	783b      	ldrb	r3, [r7, #0]
 8005f16:	2b2e      	cmp	r3, #46	; 0x2e
 8005f18:	d10d      	bne.n	8005f36 <_svfiprintf_r+0x122>
 8005f1a:	787b      	ldrb	r3, [r7, #1]
 8005f1c:	1c79      	adds	r1, r7, #1
 8005f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f20:	d132      	bne.n	8005f88 <_svfiprintf_r+0x174>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	3702      	adds	r7, #2
 8005f26:	1d1a      	adds	r2, r3, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	9203      	str	r2, [sp, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bfb8      	it	lt
 8005f30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	4c2d      	ldr	r4, [pc, #180]	; (8005fec <_svfiprintf_r+0x1d8>)
 8005f38:	2203      	movs	r2, #3
 8005f3a:	7839      	ldrb	r1, [r7, #0]
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff fd69 	bl	8005a14 <memchr>
 8005f42:	b138      	cbz	r0, 8005f54 <_svfiprintf_r+0x140>
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	1b00      	subs	r0, r0, r4
 8005f48:	fa03 f000 	lsl.w	r0, r3, r0
 8005f4c:	9b04      	ldr	r3, [sp, #16]
 8005f4e:	3701      	adds	r7, #1
 8005f50:	4303      	orrs	r3, r0
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	7839      	ldrb	r1, [r7, #0]
 8005f56:	2206      	movs	r2, #6
 8005f58:	4825      	ldr	r0, [pc, #148]	; (8005ff0 <_svfiprintf_r+0x1dc>)
 8005f5a:	1c7e      	adds	r6, r7, #1
 8005f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f60:	f7ff fd58 	bl	8005a14 <memchr>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d035      	beq.n	8005fd4 <_svfiprintf_r+0x1c0>
 8005f68:	4b22      	ldr	r3, [pc, #136]	; (8005ff4 <_svfiprintf_r+0x1e0>)
 8005f6a:	b9fb      	cbnz	r3, 8005fac <_svfiprintf_r+0x198>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	3307      	adds	r3, #7
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	3308      	adds	r3, #8
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7a:	444b      	add	r3, r9
 8005f7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7e:	e76d      	b.n	8005e5c <_svfiprintf_r+0x48>
 8005f80:	fb00 3202 	mla	r2, r0, r2, r3
 8005f84:	2101      	movs	r1, #1
 8005f86:	e7a4      	b.n	8005ed2 <_svfiprintf_r+0xbe>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	240a      	movs	r4, #10
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	9305      	str	r3, [sp, #20]
 8005f90:	460f      	mov	r7, r1
 8005f92:	783a      	ldrb	r2, [r7, #0]
 8005f94:	3101      	adds	r1, #1
 8005f96:	3a30      	subs	r2, #48	; 0x30
 8005f98:	2a09      	cmp	r2, #9
 8005f9a:	d903      	bls.n	8005fa4 <_svfiprintf_r+0x190>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ca      	beq.n	8005f36 <_svfiprintf_r+0x122>
 8005fa0:	9005      	str	r0, [sp, #20]
 8005fa2:	e7c8      	b.n	8005f36 <_svfiprintf_r+0x122>
 8005fa4:	fb04 2000 	mla	r0, r4, r0, r2
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e7f1      	b.n	8005f90 <_svfiprintf_r+0x17c>
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <_svfiprintf_r+0x1e4>)
 8005fb4:	a904      	add	r1, sp, #16
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f3af 8000 	nop.w
 8005fbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	d1d9      	bne.n	8005f78 <_svfiprintf_r+0x164>
 8005fc4:	89ab      	ldrh	r3, [r5, #12]
 8005fc6:	065b      	lsls	r3, r3, #25
 8005fc8:	f53f af39 	bmi.w	8005e3e <_svfiprintf_r+0x2a>
 8005fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fce:	b01d      	add	sp, #116	; 0x74
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	ab03      	add	r3, sp, #12
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <_svfiprintf_r+0x1e4>)
 8005fdc:	a904      	add	r1, sp, #16
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f000 f884 	bl	80060ec <_printf_i>
 8005fe4:	e7ea      	b.n	8005fbc <_svfiprintf_r+0x1a8>
 8005fe6:	bf00      	nop
 8005fe8:	080078d8 	.word	0x080078d8
 8005fec:	080078de 	.word	0x080078de
 8005ff0:	080078e2 	.word	0x080078e2
 8005ff4:	00000000 	.word	0x00000000
 8005ff8:	08005d5f 	.word	0x08005d5f

08005ffc <_printf_common>:
 8005ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006000:	4691      	mov	r9, r2
 8006002:	461f      	mov	r7, r3
 8006004:	688a      	ldr	r2, [r1, #8]
 8006006:	690b      	ldr	r3, [r1, #16]
 8006008:	4606      	mov	r6, r0
 800600a:	4293      	cmp	r3, r2
 800600c:	bfb8      	it	lt
 800600e:	4613      	movlt	r3, r2
 8006010:	f8c9 3000 	str.w	r3, [r9]
 8006014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006018:	460c      	mov	r4, r1
 800601a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800601e:	b112      	cbz	r2, 8006026 <_printf_common+0x2a>
 8006020:	3301      	adds	r3, #1
 8006022:	f8c9 3000 	str.w	r3, [r9]
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	0699      	lsls	r1, r3, #26
 800602a:	bf42      	ittt	mi
 800602c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006030:	3302      	addmi	r3, #2
 8006032:	f8c9 3000 	strmi.w	r3, [r9]
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	f015 0506 	ands.w	r5, r5, #6
 800603c:	d107      	bne.n	800604e <_printf_common+0x52>
 800603e:	f104 0a19 	add.w	sl, r4, #25
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	f8d9 2000 	ldr.w	r2, [r9]
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	429d      	cmp	r5, r3
 800604c:	db2a      	blt.n	80060a4 <_printf_common+0xa8>
 800604e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	3300      	adds	r3, #0
 8006056:	bf18      	it	ne
 8006058:	2301      	movne	r3, #1
 800605a:	0692      	lsls	r2, r2, #26
 800605c:	d42f      	bmi.n	80060be <_printf_common+0xc2>
 800605e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006062:	4639      	mov	r1, r7
 8006064:	4630      	mov	r0, r6
 8006066:	47c0      	blx	r8
 8006068:	3001      	adds	r0, #1
 800606a:	d022      	beq.n	80060b2 <_printf_common+0xb6>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	68e5      	ldr	r5, [r4, #12]
 8006070:	f003 0306 	and.w	r3, r3, #6
 8006074:	2b04      	cmp	r3, #4
 8006076:	bf18      	it	ne
 8006078:	2500      	movne	r5, #0
 800607a:	f8d9 2000 	ldr.w	r2, [r9]
 800607e:	f04f 0900 	mov.w	r9, #0
 8006082:	bf08      	it	eq
 8006084:	1aad      	subeq	r5, r5, r2
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	bf08      	it	eq
 800608c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006090:	4293      	cmp	r3, r2
 8006092:	bfc4      	itt	gt
 8006094:	1a9b      	subgt	r3, r3, r2
 8006096:	18ed      	addgt	r5, r5, r3
 8006098:	341a      	adds	r4, #26
 800609a:	454d      	cmp	r5, r9
 800609c:	d11b      	bne.n	80060d6 <_printf_common+0xda>
 800609e:	2000      	movs	r0, #0
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	2301      	movs	r3, #1
 80060a6:	4652      	mov	r2, sl
 80060a8:	4639      	mov	r1, r7
 80060aa:	4630      	mov	r0, r6
 80060ac:	47c0      	blx	r8
 80060ae:	3001      	adds	r0, #1
 80060b0:	d103      	bne.n	80060ba <_printf_common+0xbe>
 80060b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ba:	3501      	adds	r5, #1
 80060bc:	e7c1      	b.n	8006042 <_printf_common+0x46>
 80060be:	2030      	movs	r0, #48	; 0x30
 80060c0:	18e1      	adds	r1, r4, r3
 80060c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060cc:	4422      	add	r2, r4
 80060ce:	3302      	adds	r3, #2
 80060d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060d4:	e7c3      	b.n	800605e <_printf_common+0x62>
 80060d6:	2301      	movs	r3, #1
 80060d8:	4622      	mov	r2, r4
 80060da:	4639      	mov	r1, r7
 80060dc:	4630      	mov	r0, r6
 80060de:	47c0      	blx	r8
 80060e0:	3001      	adds	r0, #1
 80060e2:	d0e6      	beq.n	80060b2 <_printf_common+0xb6>
 80060e4:	f109 0901 	add.w	r9, r9, #1
 80060e8:	e7d7      	b.n	800609a <_printf_common+0x9e>
	...

080060ec <_printf_i>:
 80060ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060f0:	4617      	mov	r7, r2
 80060f2:	7e0a      	ldrb	r2, [r1, #24]
 80060f4:	b085      	sub	sp, #20
 80060f6:	2a6e      	cmp	r2, #110	; 0x6e
 80060f8:	4698      	mov	r8, r3
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006100:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006104:	f000 80bc 	beq.w	8006280 <_printf_i+0x194>
 8006108:	d81a      	bhi.n	8006140 <_printf_i+0x54>
 800610a:	2a63      	cmp	r2, #99	; 0x63
 800610c:	d02e      	beq.n	800616c <_printf_i+0x80>
 800610e:	d80a      	bhi.n	8006126 <_printf_i+0x3a>
 8006110:	2a00      	cmp	r2, #0
 8006112:	f000 80c8 	beq.w	80062a6 <_printf_i+0x1ba>
 8006116:	2a58      	cmp	r2, #88	; 0x58
 8006118:	f000 808a 	beq.w	8006230 <_printf_i+0x144>
 800611c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006120:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006124:	e02a      	b.n	800617c <_printf_i+0x90>
 8006126:	2a64      	cmp	r2, #100	; 0x64
 8006128:	d001      	beq.n	800612e <_printf_i+0x42>
 800612a:	2a69      	cmp	r2, #105	; 0x69
 800612c:	d1f6      	bne.n	800611c <_printf_i+0x30>
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006136:	d023      	beq.n	8006180 <_printf_i+0x94>
 8006138:	1d11      	adds	r1, r2, #4
 800613a:	6019      	str	r1, [r3, #0]
 800613c:	6813      	ldr	r3, [r2, #0]
 800613e:	e027      	b.n	8006190 <_printf_i+0xa4>
 8006140:	2a73      	cmp	r2, #115	; 0x73
 8006142:	f000 80b4 	beq.w	80062ae <_printf_i+0x1c2>
 8006146:	d808      	bhi.n	800615a <_printf_i+0x6e>
 8006148:	2a6f      	cmp	r2, #111	; 0x6f
 800614a:	d02a      	beq.n	80061a2 <_printf_i+0xb6>
 800614c:	2a70      	cmp	r2, #112	; 0x70
 800614e:	d1e5      	bne.n	800611c <_printf_i+0x30>
 8006150:	680a      	ldr	r2, [r1, #0]
 8006152:	f042 0220 	orr.w	r2, r2, #32
 8006156:	600a      	str	r2, [r1, #0]
 8006158:	e003      	b.n	8006162 <_printf_i+0x76>
 800615a:	2a75      	cmp	r2, #117	; 0x75
 800615c:	d021      	beq.n	80061a2 <_printf_i+0xb6>
 800615e:	2a78      	cmp	r2, #120	; 0x78
 8006160:	d1dc      	bne.n	800611c <_printf_i+0x30>
 8006162:	2278      	movs	r2, #120	; 0x78
 8006164:	496f      	ldr	r1, [pc, #444]	; (8006324 <_printf_i+0x238>)
 8006166:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800616a:	e064      	b.n	8006236 <_printf_i+0x14a>
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006172:	1d11      	adds	r1, r2, #4
 8006174:	6019      	str	r1, [r3, #0]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800617c:	2301      	movs	r3, #1
 800617e:	e0a3      	b.n	80062c8 <_printf_i+0x1dc>
 8006180:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006184:	f102 0104 	add.w	r1, r2, #4
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	d0d7      	beq.n	800613c <_printf_i+0x50>
 800618c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006190:	2b00      	cmp	r3, #0
 8006192:	da03      	bge.n	800619c <_printf_i+0xb0>
 8006194:	222d      	movs	r2, #45	; 0x2d
 8006196:	425b      	negs	r3, r3
 8006198:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800619c:	4962      	ldr	r1, [pc, #392]	; (8006328 <_printf_i+0x23c>)
 800619e:	220a      	movs	r2, #10
 80061a0:	e017      	b.n	80061d2 <_printf_i+0xe6>
 80061a2:	6820      	ldr	r0, [r4, #0]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80061aa:	d003      	beq.n	80061b4 <_printf_i+0xc8>
 80061ac:	1d08      	adds	r0, r1, #4
 80061ae:	6018      	str	r0, [r3, #0]
 80061b0:	680b      	ldr	r3, [r1, #0]
 80061b2:	e006      	b.n	80061c2 <_printf_i+0xd6>
 80061b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061b8:	f101 0004 	add.w	r0, r1, #4
 80061bc:	6018      	str	r0, [r3, #0]
 80061be:	d0f7      	beq.n	80061b0 <_printf_i+0xc4>
 80061c0:	880b      	ldrh	r3, [r1, #0]
 80061c2:	2a6f      	cmp	r2, #111	; 0x6f
 80061c4:	bf14      	ite	ne
 80061c6:	220a      	movne	r2, #10
 80061c8:	2208      	moveq	r2, #8
 80061ca:	4957      	ldr	r1, [pc, #348]	; (8006328 <_printf_i+0x23c>)
 80061cc:	2000      	movs	r0, #0
 80061ce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80061d2:	6865      	ldr	r5, [r4, #4]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	60a5      	str	r5, [r4, #8]
 80061d8:	f2c0 809c 	blt.w	8006314 <_printf_i+0x228>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	f020 0004 	bic.w	r0, r0, #4
 80061e2:	6020      	str	r0, [r4, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d13f      	bne.n	8006268 <_printf_i+0x17c>
 80061e8:	2d00      	cmp	r5, #0
 80061ea:	f040 8095 	bne.w	8006318 <_printf_i+0x22c>
 80061ee:	4675      	mov	r5, lr
 80061f0:	2a08      	cmp	r2, #8
 80061f2:	d10b      	bne.n	800620c <_printf_i+0x120>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	07da      	lsls	r2, r3, #31
 80061f8:	d508      	bpl.n	800620c <_printf_i+0x120>
 80061fa:	6923      	ldr	r3, [r4, #16]
 80061fc:	6862      	ldr	r2, [r4, #4]
 80061fe:	429a      	cmp	r2, r3
 8006200:	bfde      	ittt	le
 8006202:	2330      	movle	r3, #48	; 0x30
 8006204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006208:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800620c:	ebae 0305 	sub.w	r3, lr, r5
 8006210:	6123      	str	r3, [r4, #16]
 8006212:	f8cd 8000 	str.w	r8, [sp]
 8006216:	463b      	mov	r3, r7
 8006218:	aa03      	add	r2, sp, #12
 800621a:	4621      	mov	r1, r4
 800621c:	4630      	mov	r0, r6
 800621e:	f7ff feed 	bl	8005ffc <_printf_common>
 8006222:	3001      	adds	r0, #1
 8006224:	d155      	bne.n	80062d2 <_printf_i+0x1e6>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800622a:	b005      	add	sp, #20
 800622c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006230:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006234:	493c      	ldr	r1, [pc, #240]	; (8006328 <_printf_i+0x23c>)
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800623e:	f100 0504 	add.w	r5, r0, #4
 8006242:	601d      	str	r5, [r3, #0]
 8006244:	d001      	beq.n	800624a <_printf_i+0x15e>
 8006246:	6803      	ldr	r3, [r0, #0]
 8006248:	e002      	b.n	8006250 <_printf_i+0x164>
 800624a:	0655      	lsls	r5, r2, #25
 800624c:	d5fb      	bpl.n	8006246 <_printf_i+0x15a>
 800624e:	8803      	ldrh	r3, [r0, #0]
 8006250:	07d0      	lsls	r0, r2, #31
 8006252:	bf44      	itt	mi
 8006254:	f042 0220 	orrmi.w	r2, r2, #32
 8006258:	6022      	strmi	r2, [r4, #0]
 800625a:	b91b      	cbnz	r3, 8006264 <_printf_i+0x178>
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	f022 0220 	bic.w	r2, r2, #32
 8006262:	6022      	str	r2, [r4, #0]
 8006264:	2210      	movs	r2, #16
 8006266:	e7b1      	b.n	80061cc <_printf_i+0xe0>
 8006268:	4675      	mov	r5, lr
 800626a:	fbb3 f0f2 	udiv	r0, r3, r2
 800626e:	fb02 3310 	mls	r3, r2, r0, r3
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006278:	4603      	mov	r3, r0
 800627a:	2800      	cmp	r0, #0
 800627c:	d1f5      	bne.n	800626a <_printf_i+0x17e>
 800627e:	e7b7      	b.n	80061f0 <_printf_i+0x104>
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006288:	6949      	ldr	r1, [r1, #20]
 800628a:	d004      	beq.n	8006296 <_printf_i+0x1aa>
 800628c:	1d10      	adds	r0, r2, #4
 800628e:	6018      	str	r0, [r3, #0]
 8006290:	6813      	ldr	r3, [r2, #0]
 8006292:	6019      	str	r1, [r3, #0]
 8006294:	e007      	b.n	80062a6 <_printf_i+0x1ba>
 8006296:	f010 0f40 	tst.w	r0, #64	; 0x40
 800629a:	f102 0004 	add.w	r0, r2, #4
 800629e:	6018      	str	r0, [r3, #0]
 80062a0:	6813      	ldr	r3, [r2, #0]
 80062a2:	d0f6      	beq.n	8006292 <_printf_i+0x1a6>
 80062a4:	8019      	strh	r1, [r3, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	4675      	mov	r5, lr
 80062aa:	6123      	str	r3, [r4, #16]
 80062ac:	e7b1      	b.n	8006212 <_printf_i+0x126>
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	1d11      	adds	r1, r2, #4
 80062b2:	6019      	str	r1, [r3, #0]
 80062b4:	6815      	ldr	r5, [r2, #0]
 80062b6:	2100      	movs	r1, #0
 80062b8:	6862      	ldr	r2, [r4, #4]
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff fbaa 	bl	8005a14 <memchr>
 80062c0:	b108      	cbz	r0, 80062c6 <_printf_i+0x1da>
 80062c2:	1b40      	subs	r0, r0, r5
 80062c4:	6060      	str	r0, [r4, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	2300      	movs	r3, #0
 80062cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d0:	e79f      	b.n	8006212 <_printf_i+0x126>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	462a      	mov	r2, r5
 80062d6:	4639      	mov	r1, r7
 80062d8:	4630      	mov	r0, r6
 80062da:	47c0      	blx	r8
 80062dc:	3001      	adds	r0, #1
 80062de:	d0a2      	beq.n	8006226 <_printf_i+0x13a>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	079b      	lsls	r3, r3, #30
 80062e4:	d507      	bpl.n	80062f6 <_printf_i+0x20a>
 80062e6:	2500      	movs	r5, #0
 80062e8:	f104 0919 	add.w	r9, r4, #25
 80062ec:	68e3      	ldr	r3, [r4, #12]
 80062ee:	9a03      	ldr	r2, [sp, #12]
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	429d      	cmp	r5, r3
 80062f4:	db05      	blt.n	8006302 <_printf_i+0x216>
 80062f6:	68e0      	ldr	r0, [r4, #12]
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	4298      	cmp	r0, r3
 80062fc:	bfb8      	it	lt
 80062fe:	4618      	movlt	r0, r3
 8006300:	e793      	b.n	800622a <_printf_i+0x13e>
 8006302:	2301      	movs	r3, #1
 8006304:	464a      	mov	r2, r9
 8006306:	4639      	mov	r1, r7
 8006308:	4630      	mov	r0, r6
 800630a:	47c0      	blx	r8
 800630c:	3001      	adds	r0, #1
 800630e:	d08a      	beq.n	8006226 <_printf_i+0x13a>
 8006310:	3501      	adds	r5, #1
 8006312:	e7eb      	b.n	80062ec <_printf_i+0x200>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1a7      	bne.n	8006268 <_printf_i+0x17c>
 8006318:	780b      	ldrb	r3, [r1, #0]
 800631a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800631e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006322:	e765      	b.n	80061f0 <_printf_i+0x104>
 8006324:	080078fa 	.word	0x080078fa
 8006328:	080078e9 	.word	0x080078e9

0800632c <_realloc_r>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	4607      	mov	r7, r0
 8006330:	4614      	mov	r4, r2
 8006332:	460e      	mov	r6, r1
 8006334:	b921      	cbnz	r1, 8006340 <_realloc_r+0x14>
 8006336:	4611      	mov	r1, r2
 8006338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800633c:	f7ff bc00 	b.w	8005b40 <_malloc_r>
 8006340:	b922      	cbnz	r2, 800634c <_realloc_r+0x20>
 8006342:	f7ff fbb1 	bl	8005aa8 <_free_r>
 8006346:	4625      	mov	r5, r4
 8006348:	4628      	mov	r0, r5
 800634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634c:	f000 f814 	bl	8006378 <_malloc_usable_size_r>
 8006350:	4284      	cmp	r4, r0
 8006352:	d90f      	bls.n	8006374 <_realloc_r+0x48>
 8006354:	4621      	mov	r1, r4
 8006356:	4638      	mov	r0, r7
 8006358:	f7ff fbf2 	bl	8005b40 <_malloc_r>
 800635c:	4605      	mov	r5, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	d0f2      	beq.n	8006348 <_realloc_r+0x1c>
 8006362:	4631      	mov	r1, r6
 8006364:	4622      	mov	r2, r4
 8006366:	f7ff fb72 	bl	8005a4e <memcpy>
 800636a:	4631      	mov	r1, r6
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff fb9b 	bl	8005aa8 <_free_r>
 8006372:	e7e9      	b.n	8006348 <_realloc_r+0x1c>
 8006374:	4635      	mov	r5, r6
 8006376:	e7e7      	b.n	8006348 <_realloc_r+0x1c>

08006378 <_malloc_usable_size_r>:
 8006378:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800637c:	2800      	cmp	r0, #0
 800637e:	f1a0 0004 	sub.w	r0, r0, #4
 8006382:	bfbc      	itt	lt
 8006384:	580b      	ldrlt	r3, [r1, r0]
 8006386:	18c0      	addlt	r0, r0, r3
 8006388:	4770      	bx	lr
	...

0800638c <_getpid>:
 800638c:	2258      	movs	r2, #88	; 0x58
 800638e:	4b02      	ldr	r3, [pc, #8]	; (8006398 <_getpid+0xc>)
 8006390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	4770      	bx	lr
 8006398:	200004f0 	.word	0x200004f0

0800639c <_kill>:
 800639c:	2258      	movs	r2, #88	; 0x58
 800639e:	4b02      	ldr	r3, [pc, #8]	; (80063a8 <_kill+0xc>)
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	4770      	bx	lr
 80063a8:	200004f0 	.word	0x200004f0

080063ac <_sbrk>:
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <_sbrk+0x14>)
 80063ae:	4602      	mov	r2, r0
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	b909      	cbnz	r1, 80063b8 <_sbrk+0xc>
 80063b4:	4903      	ldr	r1, [pc, #12]	; (80063c4 <_sbrk+0x18>)
 80063b6:	6019      	str	r1, [r3, #0]
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	4402      	add	r2, r0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	4770      	bx	lr
 80063c0:	200004e0 	.word	0x200004e0
 80063c4:	200004f4 	.word	0x200004f4

080063c8 <_exit>:
 80063c8:	e7fe      	b.n	80063c8 <_exit>
	...

080063cc <_init>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	bf00      	nop
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr

080063d8 <_fini>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr
